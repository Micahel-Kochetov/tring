ú
yC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Main\SignalDeclarationAsyncInitializer.cs
	namespace 	
Zenject
 
{ 
public

 

class

 -
!SignalDeclarationAsyncInitializer

 2
:

3 4
IInitializable

5 C
{ 
readonly 

LazyInject 
< 
TickableManager +
>+ ,
_tickManager- 9
;9 :
readonly 
List 
< 
SignalDeclaration '
>' (
_declarations) 6
;6 7
public -
!SignalDeclarationAsyncInitializer 0
(0 1
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Local+ 0
)0 1
]1 2
List 
< 
SignalDeclaration "
>" #
declarations$ 0
,0 1
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C

LazyInject 
< 
TickableManager &
>& '
tickManager( 3
)3 4
{ 	
_declarations 
= 
declarations (
;( )
_tickManager 
= 
tickManager &
;& '
} 	
public 
void 

Initialize 
( 
)  
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
_declarations  -
.- .
Count. 3
;3 4
i5 6
++6 8
)8 9
{ 
var 
declaration 
=  !
_declarations" /
[/ 0
i0 1
]1 2
;2 3
if 
( 
declaration 
.  
IsAsync  '
)' (
{   
Assert!! 
.!! 
	IsNotNull!! $
(!!$ %
_tickManager!!% 1
.!!1 2
Value!!2 7
,!!7 8
$str!!9 v
)!!v w
;!!w x
_tickManager""  
.""  !
Value""! &
.""& '
Add""' *
(""* +
declaration""+ 6
,""6 7
declaration""8 C
.""C D
TickPriority""D P
)""P Q
;""Q R
}## 
}$$ 
}%% 	
}&& 
}'' ÿ	
\C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\MonoInstallerBase.cs
	namespace 	
Zenject
 
{ 
[ 
DebuggerStepThrough 
] 
public 

class 
MonoInstallerBase "
:# $
MonoBehaviour% 2
,2 3

IInstaller4 >
{ 
[ 	
Inject	 
] 
	protected 
DiContainer 
	Container '
{ 	
get 
; 
set 
; 
} 	
public 
virtual 
bool 
	IsEnabled %
{ 	
get 
{ 
return 
enabled  
;  !
}" #
} 	
public 
virtual 
void 
Start !
(! "
)" #
{ 	
} 	
public 
virtual 
void 
InstallBindings +
(+ ,
), -
{ 	
throw   
new   #
NotImplementedException   -
(  - .
)  . /
;  / 0
}!! 	
}"" 
}## “x
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Injection\InjectContext.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
InjectContext 
:  
IDisposable! ,
{ 
	BindingId 

_bindingId 
; 
Type 
_objectType 
; 
InjectContext 
_parentContext $
;$ %
object 
_objectInstance 
; 
string 
_memberName 
; 
bool 
	_optional 
; 
InjectSources 
_sourceType !
;! "
object 
_fallBackValue 
; 
object 
_concreteIdentifier "
;" #
DiContainer 

_container 
; 
public 
InjectContext 
( 
) 
{ 	

_bindingId 
= 
new 
	BindingId &
(& '
)' (
;( )
Reset 
( 
) 
; 
} 	
public 
InjectContext 
( 
DiContainer (
	container) 2
,2 3
Type4 8

memberType9 C
)C D
: 
this 
( 
) 
{   	
	Container!! 
=!! 
	container!! !
;!!! "

MemberType"" 
="" 

memberType"" #
;""# $
}## 	
public%% 
InjectContext%% 
(%% 
DiContainer%% (
	container%%) 2
,%%2 3
Type%%4 8

memberType%%9 C
,%%C D
object%%E K

identifier%%L V
)%%V W
:&& 
this&& 
(&& 
	container&& 
,&& 

memberType&& (
)&&( )
{'' 	

Identifier(( 
=(( 

identifier(( #
;((# $
})) 	
public++ 
InjectContext++ 
(++ 
DiContainer++ (
	container++) 2
,++2 3
Type++4 8

memberType++9 C
,++C D
object++E K

identifier++L V
,++V W
bool++X \
optional++] e
)++e f
:,, 
this,, 
(,, 
	container,, 
,,, 

memberType,, (
,,,( )

identifier,,* 4
),,4 5
{-- 	
Optional.. 
=.. 
optional.. 
;..  
}// 	
public11 
void11 
Dispose11 
(11 
)11 
{22 	
ZenPools33 
.33  
DespawnInjectContext33 )
(33) *
this33* .
)33. /
;33/ 0
}44 	
public66 
void66 
Reset66 
(66 
)66 
{77 	
_objectType88 
=88 
null88 
;88 
_parentContext99 
=99 
null99 !
;99! "
_objectInstance:: 
=:: 
null:: "
;::" #
_memberName;; 
=;; 
$str;; 
;;; 
	_optional<< 
=<< 
false<< 
;<< 
_sourceType== 
=== 
InjectSources== '
.==' (
Any==( +
;==+ ,
_fallBackValue>> 
=>> 
null>> !
;>>! "

_container?? 
=?? 
null?? 
;?? 

_bindingId@@ 
.@@ 
Type@@ 
=@@ 
null@@ "
;@@" #

_bindingIdAA 
.AA 

IdentifierAA !
=AA" #
nullAA$ (
;AA( )
}BB 	
publicDD 
	BindingIdDD 
	BindingIdDD "
{EE 	
getFF 
{FF 
returnFF 

_bindingIdFF #
;FF# $
}FF% &
}GG 	
publicKK 
TypeKK 

ObjectTypeKK 
{LL 	
getMM 
{MM 
returnMM 
_objectTypeMM $
;MM$ %
}MM& '
setNN 
{NN 
_objectTypeNN 
=NN 
valueNN  %
;NN% &
}NN' (
}OO 	
publicUU 
InjectContextUU 
ParentContextUU *
{VV 	
getWW 
{WW 
returnWW 
_parentContextWW '
;WW' (
}WW) *
setXX 
{XX 
_parentContextXX  
=XX! "
valueXX# (
;XX( )
}XX* +
}YY 	
public]] 
object]] 
ObjectInstance]] $
{^^ 	
get__ 
{__ 
return__ 
_objectInstance__ (
;__( )
}__* +
set`` 
{`` 
_objectInstance`` !
=``" #
value``$ )
;``) *
}``+ ,
}aa 	
publicjj 
objectjj 

Identifierjj  
{kk 	
getll 
{ll 
returnll 

_bindingIdll #
.ll# $

Identifierll$ .
;ll. /
}ll0 1
setmm 
{mm 

_bindingIdmm 
.mm 

Identifiermm '
=mm( )
valuemm* /
;mm/ 0
}mm1 2
}nn 	
publicqq 
stringqq 

MemberNameqq  
{rr 	
getss 
{ss 
returnss 
_memberNamess $
;ss$ %
}ss& '
settt 
{tt 
_memberNamett 
=tt 
valuett  %
;tt% &
}tt' (
}uu 	
publicxx 
Typexx 

MemberTypexx 
{yy 	
getzz 
{zz 
returnzz 

_bindingIdzz #
.zz# $
Typezz$ (
;zz( )
}zz* +
set{{ 
{{{ 

_bindingId{{ 
.{{ 
Type{{ !
={{" #
value{{$ )
;{{) *
}{{+ ,
}|| 	
public 
bool 
Optional 
{
ÄÄ 	
get
ÅÅ 
{
ÅÅ 
return
ÅÅ 
	_optional
ÅÅ "
;
ÅÅ" #
}
ÅÅ$ %
set
ÇÇ 
{
ÇÇ 
	_optional
ÇÇ 
=
ÇÇ 
value
ÇÇ #
;
ÇÇ# $
}
ÇÇ% &
}
ÉÉ 	
public
áá 
InjectSources
áá 

SourceType
áá '
{
àà 	
get
ââ 
{
ââ 
return
ââ 
_sourceType
ââ $
;
ââ$ %
}
ââ& '
set
ää 
{
ää 
_sourceType
ää 
=
ää 
value
ää  %
;
ää% &
}
ää' (
}
ãã 	
public
çç 
object
çç  
ConcreteIdentifier
çç (
{
éé 	
get
èè 
{
èè 
return
èè !
_concreteIdentifier
èè ,
;
èè, -
}
èè. /
set
êê 
{
êê !
_concreteIdentifier
êê %
=
êê& '
value
êê( -
;
êê- .
}
êê/ 0
}
ëë 	
public
îî 
object
îî 
FallBackValue
îî #
{
ïï 	
get
ññ 
{
ññ 
return
ññ 
_fallBackValue
ññ '
;
ññ' (
}
ññ) *
set
óó 
{
óó 
_fallBackValue
óó  
=
óó! "
value
óó# (
;
óó( )
}
óó* +
}
òò 	
public
õõ 
DiContainer
õõ 
	Container
õõ $
{
úú 	
get
ùù 
{
ùù 
return
ùù 

_container
ùù #
;
ùù# $
}
ùù% &
set
ûû 
{
ûû 

_container
ûû 
=
ûû 
value
ûû $
;
ûû$ %
}
ûû& '
}
üü 	
public
°° 
IEnumerable
°° 
<
°° 
InjectContext
°° (
>
°°( )
ParentContexts
°°* 8
{
¢¢ 	
get
££ 
{
§§ 
if
•• 
(
•• 
ParentContext
•• !
==
••" $
null
••% )
)
••) *
{
¶¶ 
yield
ßß 
break
ßß 
;
ßß  
}
®® 
yield
™™ 
return
™™ 
ParentContext
™™ *
;
™™* +
foreach
¨¨ 
(
¨¨ 
var
¨¨ 
context
¨¨ $
in
¨¨% '
ParentContext
¨¨( 5
.
¨¨5 6
ParentContexts
¨¨6 D
)
¨¨D E
{
≠≠ 
yield
ÆÆ 
return
ÆÆ  
context
ÆÆ! (
;
ÆÆ( )
}
ØØ 
}
∞∞ 
}
±± 	
public
≥≥ 
IEnumerable
≥≥ 
<
≥≥ 
InjectContext
≥≥ (
>
≥≥( )#
ParentContextsAndSelf
≥≥* ?
{
¥¥ 	
get
µµ 
{
∂∂ 
yield
∑∑ 
return
∑∑ 
this
∑∑ !
;
∑∑! "
foreach
ππ 
(
ππ 
var
ππ 
context
ππ $
in
ππ% '
ParentContexts
ππ( 6
)
ππ6 7
{
∫∫ 
yield
ªª 
return
ªª  
context
ªª! (
;
ªª( )
}
ºº 
}
ΩΩ 
}
ææ 	
public
√√ 
IEnumerable
√√ 
<
√√ 
Type
√√ 
>
√√  
AllObjectTypes
√√! /
{
ƒƒ 	
get
≈≈ 
{
∆∆ 
foreach
«« 
(
«« 
var
«« 
context
«« $
in
««% '#
ParentContextsAndSelf
««( =
)
««= >
{
»» 
if
…… 
(
…… 
context
…… 
.
……  

ObjectType
……  *
!=
……+ -
null
……. 2
)
……2 3
{
   
yield
ÀÀ 
return
ÀÀ $
context
ÀÀ% ,
.
ÀÀ, -

ObjectType
ÀÀ- 7
;
ÀÀ7 8
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
}
œœ 	
public
—— 
InjectContext
—— 
CreateSubContext
—— -
(
——- .
Type
——. 2

memberType
——3 =
)
——= >
{
““ 	
return
”” 
CreateSubContext
”” #
(
””# $

memberType
””$ .
,
””. /
null
””0 4
)
””4 5
;
””5 6
}
‘‘ 	
public
÷÷ 
InjectContext
÷÷ 
CreateSubContext
÷÷ -
(
÷÷- .
Type
÷÷. 2

memberType
÷÷3 =
,
÷÷= >
object
÷÷? E

identifier
÷÷F P
)
÷÷P Q
{
◊◊ 	
var
ÿÿ 

subContext
ÿÿ 
=
ÿÿ 
new
ÿÿ  
InjectContext
ÿÿ! .
(
ÿÿ. /
)
ÿÿ/ 0
;
ÿÿ0 1

subContext
⁄⁄ 
.
⁄⁄ 
ParentContext
⁄⁄ $
=
⁄⁄% &
this
⁄⁄' +
;
⁄⁄+ ,

subContext
€€ 
.
€€ 

Identifier
€€ !
=
€€" #

identifier
€€$ .
;
€€. /

subContext
‹‹ 
.
‹‹ 

MemberType
‹‹ !
=
‹‹" #

memberType
‹‹$ .
;
‹‹. /

subContext
ﬂﬂ 
.
ﬂﬂ  
ConcreteIdentifier
ﬂﬂ )
=
ﬂﬂ* +
null
ﬂﬂ, 0
;
ﬂﬂ0 1

subContext
‡‡ 
.
‡‡ 

MemberName
‡‡ !
=
‡‡" #
$str
‡‡$ &
;
‡‡& '

subContext
·· 
.
·· 
FallBackValue
·· $
=
··% &
null
··' +
;
··+ ,

subContext
‰‰ 
.
‰‰ 

ObjectType
‰‰ !
=
‰‰" #

ObjectType
‰‰$ .
;
‰‰. /

subContext
ÂÂ 
.
ÂÂ 
ObjectInstance
ÂÂ %
=
ÂÂ& '
ObjectInstance
ÂÂ( 6
;
ÂÂ6 7

subContext
ÊÊ 
.
ÊÊ 
Optional
ÊÊ 
=
ÊÊ  !
Optional
ÊÊ" *
;
ÊÊ* +

subContext
ÁÁ 
.
ÁÁ 

SourceType
ÁÁ !
=
ÁÁ" #

SourceType
ÁÁ$ .
;
ÁÁ. /

subContext
ËË 
.
ËË 
	Container
ËË  
=
ËË! "
	Container
ËË# ,
;
ËË, -
return
ÍÍ 

subContext
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÌÌ 
InjectContext
ÌÌ 
Clone
ÌÌ "
(
ÌÌ" #
)
ÌÌ# $
{
ÓÓ 	
var
ÔÔ 
clone
ÔÔ 
=
ÔÔ 
new
ÔÔ 
InjectContext
ÔÔ )
(
ÔÔ) *
)
ÔÔ* +
;
ÔÔ+ ,
clone
ÒÒ 
.
ÒÒ 

ObjectType
ÒÒ 
=
ÒÒ 

ObjectType
ÒÒ )
;
ÒÒ) *
clone
ÚÚ 
.
ÚÚ 
ParentContext
ÚÚ 
=
ÚÚ  !
ParentContext
ÚÚ" /
;
ÚÚ/ 0
clone
ÛÛ 
.
ÛÛ  
ConcreteIdentifier
ÛÛ $
=
ÛÛ% & 
ConcreteIdentifier
ÛÛ' 9
;
ÛÛ9 :
clone
ÙÙ 
.
ÙÙ 
ObjectInstance
ÙÙ  
=
ÙÙ! "
ObjectInstance
ÙÙ# 1
;
ÙÙ1 2
clone
ıı 
.
ıı 

Identifier
ıı 
=
ıı 

Identifier
ıı )
;
ıı) *
clone
ˆˆ 
.
ˆˆ 

MemberType
ˆˆ 
=
ˆˆ 

MemberType
ˆˆ )
;
ˆˆ) *
clone
˜˜ 
.
˜˜ 

MemberName
˜˜ 
=
˜˜ 

MemberName
˜˜ )
;
˜˜) *
clone
¯¯ 
.
¯¯ 
Optional
¯¯ 
=
¯¯ 
Optional
¯¯ %
;
¯¯% &
clone
˘˘ 
.
˘˘ 

SourceType
˘˘ 
=
˘˘ 

SourceType
˘˘ )
;
˘˘) *
clone
˙˙ 
.
˙˙ 
FallBackValue
˙˙ 
=
˙˙  !
FallBackValue
˙˙" /
;
˙˙/ 0
clone
˚˚ 
.
˚˚ 
	Container
˚˚ 
=
˚˚ 
	Container
˚˚ '
;
˚˚' (
return
˝˝ 
clone
˝˝ 
;
˝˝ 
}
˛˛ 	
public
ÅÅ 
string
ÅÅ "
GetObjectGraphString
ÅÅ *
(
ÅÅ* +
)
ÅÅ+ ,
{
ÇÇ 	
var
ÉÉ 
result
ÉÉ 
=
ÉÉ 
new
ÉÉ 
StringBuilder
ÉÉ *
(
ÉÉ* +
)
ÉÉ+ ,
;
ÉÉ, -
foreach
ÖÖ 
(
ÖÖ 
var
ÖÖ 
context
ÖÖ  
in
ÖÖ! ##
ParentContextsAndSelf
ÖÖ$ 9
.
ÖÖ9 :
Reverse
ÖÖ: A
(
ÖÖA B
)
ÖÖB C
)
ÖÖC D
{
ÜÜ 
if
áá 
(
áá 
context
áá 
.
áá 

ObjectType
áá &
==
áá' )
null
áá* .
)
áá. /
{
àà 
continue
ââ 
;
ââ 
}
ää 
result
åå 
.
åå 

AppendLine
åå !
(
åå! "
context
åå" )
.
åå) *

ObjectType
åå* 4
.
åå4 5

PrettyName
åå5 ?
(
åå? @
)
åå@ A
)
ååA B
;
ååB C
}
çç 
return
èè 
result
èè 
.
èè 
ToString
èè "
(
èè" #
)
èè# $
;
èè$ %
}
êê 	
}
ëë 
}íí Õ
ÇC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\GetFromGameObjectComponentProvider.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class .
"GetFromGameObjectComponentProvider 3
:4 5
	IProvider6 ?
{ 
readonly 

GameObject 
_gameObject '
;' (
readonly 
Type 
_componentType $
;$ %
readonly 
bool 
_matchSingle "
;" #
public .
"GetFromGameObjectComponentProvider 1
(1 2
Type 
componentType 
, 

GameObject  *

gameObject+ 5
,5 6
bool7 ;
matchSingle< G
)G H
{ 	
_componentType 
= 
componentType *
;* +
_matchSingle 
= 
matchSingle &
;& '
_gameObject 
= 

gameObject $
;$ %
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{   	
get!! 
{!! 
return!! 
false!! 
;!! 
}!!  !
}"" 	
public$$ 
Type$$ 
GetInstanceType$$ #
($$# $
InjectContext$$$ 1
context$$2 9
)$$9 :
{%% 	
return&& 
_componentType&& !
;&&! "
}'' 	
public)) 
void)) *
GetAllInstancesWithInjectSplit)) 2
())2 3
InjectContext** 
context** !
,**! "
List**# '
<**' (
TypeValuePair**( 5
>**5 6
args**7 ;
,**; <
out**= @
Action**A G
injectAction**H T
,**T U
List**V Z
<**Z [
object**[ a
>**a b
buffer**c i
)**i j
{++ 	
Assert,, 
.,, 
	IsNotNull,, 
(,, 
context,, $
),,$ %
;,,% &
injectAction.. 
=.. 
null.. 
;..  
if00 
(00 
_matchSingle00 
)00 
{11 
var22 
match22 
=22 
_gameObject22 '
.22' (
GetComponent22( 4
(224 5
_componentType225 C
)22C D
;22D E
Assert44 
.44 
	IsNotNull44  
(44  !
match44! &
,44& '
$str44( b
,44b c
_componentType55 
,55 
_gameObject55  +
.55+ ,
name55, 0
)550 1
;551 2
buffer77 
.77 
Add77 
(77 
match77  
)77  !
;77! "
return88 
;88 
}99 
var;; 
allComponents;; 
=;; 
_gameObject;;  +
.;;+ ,
GetComponents;;, 9
(;;9 :
_componentType;;: H
);;H I
;;;I J
Assert== 
.== 
That== 
(== 
allComponents== %
.==% &
Length==& ,
>===- /
$num==0 1
,==1 2
$str>> U
,>>U V
_componentType?? 
,?? 
_gameObject?? '
.??' (
name??( ,
)??, -
;??- .
bufferAA 
.AA 
AllocFreeAddRangeAA $
(AA$ %
allComponentsAA% 2
)AA2 3
;AA3 4
}BB 	
}CC 
}DD ◊ 
nC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\SignalSubscription.cs
	namespace 	
Zenject
 
{ 
public 

class 
SignalSubscription #
:$ %
IDisposable& 1
,1 2
	IPoolable3 <
<< =
Action= C
<C D
objectD J
>J K
,K L
SignalDeclarationM ^
>^ _
{ 
readonly		 
Pool		 
_pool		 
;		 
Action 
< 
object 
> 
	_callback  
;  !
SignalDeclaration 
_declaration &
;& '
	BindingId 
	_signalId 
; 
public 
SignalSubscription !
(! "
Pool" &
pool' +
)+ ,
{ 	
_pool 
= 
pool 
; 
SetDefaults 
( 
) 
; 
} 	
public 
	BindingId 
SignalId !
{ 	
get 
{ 
return 
	_signalId "
;" #
}$ %
} 	
public 
void 
	OnSpawned 
( 
Action 
< 
object 
> 
callback #
,# $
SignalDeclaration% 6
declaration7 B
)B C
{ 	
Assert 
. 
IsNull 
( 
	_callback #
)# $
;$ %
	_callback 
= 
callback  
;  !
_declaration   
=   
declaration   &
;  & '
	_signalId"" 
="" 
declaration"" #
.""# $
	BindingId""$ -
;""- .
declaration$$ 
.$$ 
Add$$ 
($$ 
this$$  
)$$  !
;$$! "
}%% 	
public'' 
void'' 
OnDespawned'' 
(''  
)''  !
{(( 	
if)) 
()) 
_declaration)) 
!=)) 
null))  $
)))$ %
{** 
_declaration++ 
.++ 
Remove++ #
(++# $
this++$ (
)++( )
;++) *
},, 
SetDefaults.. 
(.. 
).. 
;.. 
}// 	
void11 
SetDefaults11 
(11 
)11 
{22 	
	_callback33 
=33 
null33 
;33 
_declaration44 
=44 
null44 
;44  
	_signalId55 
=55 
new55 
	BindingId55 %
(55% &
)55& '
;55' (
}66 	
public88 
void88 
Dispose88 
(88 
)88 
{99 	
if== 
(== 
!== 
_pool== 
.== 
InactiveItems== $
.==$ %
Contains==% -
(==- .
this==. 2
)==2 3
)==3 4
{>> 
_pool?? 
.?? 
Despawn?? 
(?? 
this?? "
)??" #
;??# $
}@@ 
}AA 	
publicDD 
voidDD "
OnDeclarationDespawnedDD *
(DD* +
)DD+ ,
{EE 	
_declarationFF 
=FF 
nullFF 
;FF  
}GG 	
publicII 
voidII 
InvokeII 
(II 
objectII !
signalII" (
)II( )
{JJ 	
	_callbackKK 
(KK 
signalKK 
)KK 
;KK 
}LL 	
publicNN 
classNN 
PoolNN 
:NN 
PoolableMemoryPoolNN .
<NN. /
ActionNN/ 5
<NN5 6
objectNN6 <
>NN< =
,NN= >
SignalDeclarationNN? P
,NNP Q
SignalSubscriptionNNR d
>NNd e
{OO 	
}PP 	
}QQ 
}RR ¥
ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\InstantiateCallbackConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 9
-InstantiateCallbackConditionCopyNonLazyBinder >
:? @&
ConditionCopyNonLazyBinderA [
{ 
public		 9
-InstantiateCallbackConditionCopyNonLazyBinder		 <
(		< =
BindInfo		= E
bindInfo		F N
)		N O
:

 
base

 
(

 
bindInfo

 
)

 
{ 	
} 	
public &
ConditionCopyNonLazyBinder )
OnInstantiated* 8
(8 9
Action 
< 
InjectContext  
,  !
object" (
>( )
callback* 2
)2 3
{ 	
BindInfo 
.  
InstantiatedCallback )
=* +
callback, 4
;4 5
return 
this 
; 
} 	
public &
ConditionCopyNonLazyBinder )
OnInstantiated* 8
<8 9
T9 :
>: ;
(; <
Action 
< 
InjectContext  
,  !
T" #
># $
callback% -
)- .
{ 	
BindInfo 
.  
InstantiatedCallback )
=* +
(, -
ctx- 0
,0 1
obj2 5
)5 6
=>7 9
{ 
Assert 
. 
That 
( 
obj 
==  "
null# '
||( *
obj+ .
is/ 1
T2 3
,3 4
$str V
,V W
objX [
.[ \
GetType\ c
(c d
)d e
,e f
typeofg m
(m n
Tn o
)o p
)p q
;q r
callback   
(   
ctx   
,   
(   
T    
)    !
obj  ! $
)  $ %
;  % &
}!! 
;!! 
return"" 
this"" 
;"" 
}## 	
}$$ 
}%% ø
UC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\IInstaller.cs
	namespace 	
Zenject
 
{ 
public 

	interface 

IInstaller 
{ 
void 
InstallBindings 
( 
) 
; 
bool 
	IsEnabled 
{		 	
get

 
;

 
} 	
} 
} ë¯
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\IFactoryProvider.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class  
IFactoryProviderBase .
<. /
	TContract/ 8
>8 9
:: ;
	IProvider< E
{ 
public		  
IFactoryProviderBase		 #
(		# $
DiContainer

 
	container

 !
,

! "
Guid

# '
	factoryId

( 1
)

1 2
{ 	
	Container 
= 
	container !
;! "
	FactoryId 
= 
	factoryId !
;! "
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
	protected 
Guid 
	FactoryId  
{ 	
get 
; 
private 
set 
; 
} 	
	protected 
DiContainer 
	Container '
{ 	
get 
; 
private 
set 
; 
} 	
public!! 
bool!! '
TypeVariesBasedOnMemberType!! /
{"" 	
get## 
{## 
return## 
false## 
;## 
}##  !
}$$ 	
public&& 
Type&& 
GetInstanceType&& #
(&&# $
InjectContext&&$ 1
context&&2 9
)&&9 :
{'' 	
return(( 
typeof(( 
((( 
	TContract(( #
)((# $
;(($ %
})) 	
public++ 
abstract++ 
void++ *
GetAllInstancesWithInjectSplit++ ;
(++; <
InjectContext,, 
context,, !
,,,! "
List,,# '
<,,' (
TypeValuePair,,( 5
>,,5 6
args,,7 ;
,,,; <
out,,= @
Action,,A G
injectAction,,H T
,,,T U
List,,V Z
<,,Z [
object,,[ a
>,,a b
buffer,,c i
),,i j
;,,j k
}-- 
[11 
NoReflectionBaking11 
]11 
public22 

class22 
IFactoryProvider22 !
<22! "
	TContract22" +
>22+ ,
:22- . 
IFactoryProviderBase22/ C
<22C D
	TContract22D M
>22M N
{33 
public44 
IFactoryProvider44 
(44  
DiContainer55 
	container55 !
,55! "
Guid55# '
	factoryId55( 1
)551 2
:66 
base66 
(66 
	container66 
,66 
	factoryId66 '
)66' (
{77 	
}88 	
public:: 
override:: 
void:: *
GetAllInstancesWithInjectSplit:: ;
(::; <
InjectContext;; 
context;; !
,;;! "
List;;# '
<;;' (
TypeValuePair;;( 5
>;;5 6
args;;7 ;
,;;; <
out;;= @
Action;;A G
injectAction;;H T
,;;T U
List;;V Z
<;;Z [
object;;[ a
>;;a b
buffer;;c i
);;i j
{<< 	
Assert== 
.== 
That== 
(== 
args== 
.== 
IsEmpty== $
(==$ %
)==% &
)==& '
;==' (
Assert?? 
.?? 
	IsNotNull?? 
(?? 
context?? $
)??$ %
;??% &
AssertAA 
.AA 
ThatAA 
(AA 
typeofAA 
(AA 
	TContractAA (
)AA( )
.AA) *
DerivesFromOrEqualAA* <
(AA< =
contextAA= D
.AAD E

MemberTypeAAE O
)AAO P
)AAP Q
;AAQ R
varDD 
factoryDD 
=DD 
	ContainerDD #
.DD# $
	ResolveIdDD$ -
(DD- .
typeofDD. 4
(DD4 5
IFactoryDD5 =
<DD= >
	TContractDD> G
>DDG H
)DDH I
,DDI J
	FactoryIdDDK T
)DDT U
;DDU V
injectActionFF 
=FF 
nullFF 
;FF  
ifGG 
(GG 
	ContainerGG 
.GG 
IsValidatingGG &
)GG& '
{HH 
bufferKK 
.KK 
AddKK 
(KK 
newKK 
ValidationMarkerKK /
(KK/ 0
typeofKK0 6
(KK6 7
	TContractKK7 @
)KK@ A
)KKA B
)KKB C
;KKC D
}LL 
elseMM 
{NN 
bufferOO 
.OO 
AddOO 
(OO 
(OO 
(OO 
IFactoryOO %
<OO% &
	TContractOO& /
>OO/ 0
)OO0 1
factoryOO1 8
)OO8 9
.OO9 :
CreateOO: @
(OO@ A
)OOA B
)OOB C
;OOC D
}PP 
}QQ 	
}RR 
[VV 
NoReflectionBakingVV 
]VV 
publicWW 

classWW 
IFactoryProviderWW !
<WW! "
TParam1WW" )
,WW) *
	TContractWW+ 4
>WW4 5
:WW6 7 
IFactoryProviderBaseWW8 L
<WWL M
	TContractWWM V
>WWV W
{XX 
publicYY 
IFactoryProviderYY 
(YY  
DiContainerYY  +
	containerYY, 5
,YY5 6
GuidYY7 ;
	factoryIdYY< E
)YYE F
:ZZ 
baseZZ 
(ZZ 
	containerZZ 
,ZZ 
	factoryIdZZ '
)ZZ' (
{[[ 	
}\\ 	
public^^ 
override^^ 
void^^ *
GetAllInstancesWithInjectSplit^^ ;
(^^; <
InjectContext__ 
context__ !
,__! "
List__# '
<__' (
TypeValuePair__( 5
>__5 6
args__7 ;
,__; <
out__= @
Action__A G
injectAction__H T
,__T U
List__V Z
<__Z [
object__[ a
>__a b
buffer__c i
)__i j
{`` 	
Assertaa 
.aa 
IsEqualaa 
(aa 
argsaa 
.aa  
Countaa  %
,aa% &
$numaa' (
)aa( )
;aa) *
Assertbb 
.bb 
	IsNotNullbb 
(bb 
contextbb $
)bb$ %
;bb% &
Assertdd 
.dd 
Thatdd 
(dd 
typeofdd 
(dd 
	TContractdd (
)dd( )
.dd) *
DerivesFromOrEqualdd* <
(dd< =
contextdd= D
.ddD E

MemberTypeddE O
)ddO P
)ddP Q
;ddQ R
Assertee 
.ee 
Thatee 
(ee 
argsee 
[ee 
$numee 
]ee 
.ee  
Typeee  $
.ee$ %
DerivesFromOrEqualee% 7
<ee7 8
TParam1ee8 ?
>ee? @
(ee@ A
)eeA B
)eeB C
;eeC D
varhh 
factoryhh 
=hh 
	Containerhh #
.hh# $
	ResolveIdhh$ -
(hh- .
typeofhh. 4
(hh4 5
IFactoryhh5 =
<hh= >
TParam1hh> E
,hhE F
	TContracthhG P
>hhP Q
)hhQ R
,hhR S
	FactoryIdhhT ]
)hh] ^
;hh^ _
injectActionjj 
=jj 
nulljj 
;jj  
ifkk 
(kk 
	Containerkk 
.kk 
IsValidatingkk &
)kk& '
{ll 
bufferpp 
.pp 
Addpp 
(pp 
newpp 
ValidationMarkerpp /
(pp/ 0
typeofpp0 6
(pp6 7
	TContractpp7 @
)pp@ A
)ppA B
)ppB C
;ppC D
}qq 
elserr 
{ss 
buffertt 
.tt 
Addtt 
(tt 
(tt 
(tt 
IFactorytt %
<tt% &
TParam1tt& -
,tt- .
	TContracttt/ 8
>tt8 9
)tt9 :
factorytt: A
)ttA B
.ttB C
CreatettC I
(ttI J
(ttJ K
TParam1ttK R
)ttR S
argsttS W
[ttW X
$numttX Y
]ttY Z
.ttZ [
Valuett[ `
)tt` a
)tta b
;ttb c
}uu 
}vv 	
}ww 
[{{ 
NoReflectionBaking{{ 
]{{ 
public|| 

class|| 
IFactoryProvider|| !
<||! "
TParam1||" )
,||) *
TParam2||+ 2
,||2 3
	TContract||4 =
>||= >
:||? @ 
IFactoryProviderBase||A U
<||U V
	TContract||V _
>||_ `
{}} 
public~~ 
IFactoryProvider~~ 
(~~  
DiContainer~~  +
	container~~, 5
,~~5 6
Guid~~7 ;
	factoryId~~< E
)~~E F
: 
base 
( 
	container 
, 
	factoryId '
)' (
{
ÄÄ 	
}
ÅÅ 	
public
ÉÉ 
override
ÉÉ 
void
ÉÉ ,
GetAllInstancesWithInjectSplit
ÉÉ ;
(
ÉÉ; <
InjectContext
ÑÑ 
context
ÑÑ !
,
ÑÑ! "
List
ÑÑ# '
<
ÑÑ' (
TypeValuePair
ÑÑ( 5
>
ÑÑ5 6
args
ÑÑ7 ;
,
ÑÑ; <
out
ÑÑ= @
Action
ÑÑA G
injectAction
ÑÑH T
,
ÑÑT U
List
ÑÑV Z
<
ÑÑZ [
object
ÑÑ[ a
>
ÑÑa b
buffer
ÑÑc i
)
ÑÑi j
{
ÖÖ 	
Assert
ÜÜ 
.
ÜÜ 
IsEqual
ÜÜ 
(
ÜÜ 
args
ÜÜ 
.
ÜÜ  
Count
ÜÜ  %
,
ÜÜ% &
$num
ÜÜ' (
)
ÜÜ( )
;
ÜÜ) *
Assert
áá 
.
áá 
	IsNotNull
áá 
(
áá 
context
áá $
)
áá$ %
;
áá% &
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
typeof
ââ 
(
ââ 
	TContract
ââ (
)
ââ( )
.
ââ) * 
DerivesFromOrEqual
ââ* <
(
ââ< =
context
ââ= D
.
ââD E

MemberType
ââE O
)
ââO P
)
ââP Q
;
ââQ R
Assert
ää 
.
ää 
That
ää 
(
ää 
args
ää 
[
ää 
$num
ää 
]
ää 
.
ää  
Type
ää  $
.
ää$ % 
DerivesFromOrEqual
ää% 7
<
ää7 8
TParam1
ää8 ?
>
ää? @
(
ää@ A
)
ääA B
)
ääB C
;
ääC D
Assert
ãã 
.
ãã 
That
ãã 
(
ãã 
args
ãã 
[
ãã 
$num
ãã 
]
ãã 
.
ãã  
Type
ãã  $
.
ãã$ % 
DerivesFromOrEqual
ãã% 7
<
ãã7 8
TParam2
ãã8 ?
>
ãã? @
(
ãã@ A
)
ããA B
)
ããB C
;
ããC D
var
éé 
factory
éé 
=
éé 
	Container
éé #
.
éé# $
	ResolveId
éé$ -
(
éé- .
typeof
éé. 4
(
éé4 5
IFactory
éé5 =
<
éé= >
TParam1
éé> E
,
ééE F
TParam2
ééG N
,
ééN O
	TContract
ééP Y
>
ééY Z
)
ééZ [
,
éé[ \
	FactoryId
éé] f
)
ééf g
;
éég h
injectAction
êê 
=
êê 
null
êê 
;
êê  
if
ëë 
(
ëë 
	Container
ëë 
.
ëë 
IsValidating
ëë &
)
ëë& '
{
íí 
buffer
ïï 
.
ïï 
Add
ïï 
(
ïï 
new
ïï 
ValidationMarker
ïï /
(
ïï/ 0
typeof
ïï0 6
(
ïï6 7
	TContract
ïï7 @
)
ïï@ A
)
ïïA B
)
ïïB C
;
ïïC D
}
ññ 
else
óó 
{
òò 
buffer
ôô 
.
ôô 
Add
ôô 
(
ôô 
(
öö 
(
öö 
IFactory
öö 
<
öö 
TParam1
öö &
,
öö& '
TParam2
öö( /
,
öö/ 0
	TContract
öö1 :
>
öö: ;
)
öö; <
factory
öö< C
)
ööC D
.
ööD E
Create
ööE K
(
ööK L
(
õõ 
TParam1
õõ  
)
õõ  !
args
õõ! %
[
õõ% &
$num
õõ& '
]
õõ' (
.
õõ( )
Value
õõ) .
,
õõ. /
(
úú 
TParam2
úú  
)
úú  !
args
úú! %
[
úú% &
$num
úú& '
]
úú' (
.
úú( )
Value
úú) .
)
úú. /
)
úú/ 0
;
úú0 1
}
ùù 
}
ûû 	
}
üü 
[
££  
NoReflectionBaking
££ 
]
££ 
public
§§ 

class
§§ 
IFactoryProvider
§§ !
<
§§! "
TParam1
§§" )
,
§§) *
TParam2
§§+ 2
,
§§2 3
TParam3
§§4 ;
,
§§; <
	TContract
§§= F
>
§§F G
:
§§H I"
IFactoryProviderBase
§§J ^
<
§§^ _
	TContract
§§_ h
>
§§h i
{
•• 
public
¶¶ 
IFactoryProvider
¶¶ 
(
¶¶  
DiContainer
¶¶  +
	container
¶¶, 5
,
¶¶5 6
Guid
¶¶7 ;
	factoryId
¶¶< E
)
¶¶E F
:
ßß 
base
ßß 
(
ßß 
	container
ßß 
,
ßß 
	factoryId
ßß '
)
ßß' (
{
®® 	
}
©© 	
public
´´ 
override
´´ 
void
´´ ,
GetAllInstancesWithInjectSplit
´´ ;
(
´´; <
InjectContext
¨¨ 
context
¨¨ !
,
¨¨! "
List
¨¨# '
<
¨¨' (
TypeValuePair
¨¨( 5
>
¨¨5 6
args
¨¨7 ;
,
¨¨; <
out
¨¨= @
Action
¨¨A G
injectAction
¨¨H T
,
¨¨T U
List
¨¨V Z
<
¨¨Z [
object
¨¨[ a
>
¨¨a b
buffer
¨¨c i
)
¨¨i j
{
≠≠ 	
Assert
ÆÆ 
.
ÆÆ 
IsEqual
ÆÆ 
(
ÆÆ 
args
ÆÆ 
.
ÆÆ  
Count
ÆÆ  %
,
ÆÆ% &
$num
ÆÆ' (
)
ÆÆ( )
;
ÆÆ) *
Assert
ØØ 
.
ØØ 
	IsNotNull
ØØ 
(
ØØ 
context
ØØ $
)
ØØ$ %
;
ØØ% &
Assert
±± 
.
±± 
That
±± 
(
±± 
typeof
±± 
(
±± 
	TContract
±± (
)
±±( )
.
±±) * 
DerivesFromOrEqual
±±* <
(
±±< =
context
±±= D
.
±±D E

MemberType
±±E O
)
±±O P
)
±±P Q
;
±±Q R
Assert
≤≤ 
.
≤≤ 
That
≤≤ 
(
≤≤ 
args
≤≤ 
[
≤≤ 
$num
≤≤ 
]
≤≤ 
.
≤≤  
Type
≤≤  $
.
≤≤$ % 
DerivesFromOrEqual
≤≤% 7
<
≤≤7 8
TParam1
≤≤8 ?
>
≤≤? @
(
≤≤@ A
)
≤≤A B
)
≤≤B C
;
≤≤C D
Assert
≥≥ 
.
≥≥ 
That
≥≥ 
(
≥≥ 
args
≥≥ 
[
≥≥ 
$num
≥≥ 
]
≥≥ 
.
≥≥  
Type
≥≥  $
.
≥≥$ % 
DerivesFromOrEqual
≥≥% 7
<
≥≥7 8
TParam2
≥≥8 ?
>
≥≥? @
(
≥≥@ A
)
≥≥A B
)
≥≥B C
;
≥≥C D
Assert
¥¥ 
.
¥¥ 
That
¥¥ 
(
¥¥ 
args
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
.
¥¥  
Type
¥¥  $
.
¥¥$ % 
DerivesFromOrEqual
¥¥% 7
<
¥¥7 8
TParam3
¥¥8 ?
>
¥¥? @
(
¥¥@ A
)
¥¥A B
)
¥¥B C
;
¥¥C D
var
∑∑ 
factory
∑∑ 
=
∑∑ 
	Container
∑∑ #
.
∑∑# $
	ResolveId
∑∑$ -
(
∑∑- .
typeof
∑∑. 4
(
∑∑4 5
IFactory
∑∑5 =
<
∑∑= >
TParam1
∑∑> E
,
∑∑E F
TParam2
∑∑G N
,
∑∑N O
TParam3
∑∑P W
,
∑∑W X
	TContract
∑∑Y b
>
∑∑b c
)
∑∑c d
,
∑∑d e
	FactoryId
∑∑f o
)
∑∑o p
;
∑∑p q
injectAction
ππ 
=
ππ 
null
ππ 
;
ππ  
if
∫∫ 
(
∫∫ 
	Container
∫∫ 
.
∫∫ 
IsValidating
∫∫ &
)
∫∫& '
{
ªª 
buffer
ææ 
.
ææ 
Add
ææ 
(
ææ 
new
ææ 
ValidationMarker
ææ /
(
ææ/ 0
typeof
ææ0 6
(
ææ6 7
	TContract
ææ7 @
)
ææ@ A
)
ææA B
)
ææB C
;
ææC D
}
øø 
else
¿¿ 
{
¡¡ 
buffer
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 
(
√√ 
(
√√ 
IFactory
√√ 
<
√√ 
TParam1
√√ &
,
√√& '
TParam2
√√( /
,
√√/ 0
TParam3
√√1 8
,
√√8 9
	TContract
√√: C
>
√√C D
)
√√D E
factory
√√E L
)
√√L M
.
√√M N
Create
√√N T
(
√√T U
(
ƒƒ 
TParam1
ƒƒ  
)
ƒƒ  !
args
ƒƒ! %
[
ƒƒ% &
$num
ƒƒ& '
]
ƒƒ' (
.
ƒƒ( )
Value
ƒƒ) .
,
ƒƒ. /
(
≈≈ 
TParam2
≈≈  
)
≈≈  !
args
≈≈! %
[
≈≈% &
$num
≈≈& '
]
≈≈' (
.
≈≈( )
Value
≈≈) .
,
≈≈. /
(
∆∆ 
TParam3
∆∆  
)
∆∆  !
args
∆∆! %
[
∆∆% &
$num
∆∆& '
]
∆∆' (
.
∆∆( )
Value
∆∆) .
)
∆∆. /
)
∆∆/ 0
;
∆∆0 1
}
«« 
}
»» 	
}
…… 
[
ÕÕ  
NoReflectionBaking
ÕÕ 
]
ÕÕ 
public
ŒŒ 

class
ŒŒ 
IFactoryProvider
ŒŒ !
<
ŒŒ! "
TParam1
ŒŒ" )
,
ŒŒ) *
TParam2
ŒŒ+ 2
,
ŒŒ2 3
TParam3
ŒŒ4 ;
,
ŒŒ; <
TParam4
ŒŒ= D
,
ŒŒD E
	TContract
ŒŒF O
>
ŒŒO P
:
ŒŒQ R"
IFactoryProviderBase
ŒŒS g
<
ŒŒg h
	TContract
ŒŒh q
>
ŒŒq r
{
œœ 
public
–– 
IFactoryProvider
–– 
(
––  
DiContainer
––  +
	container
––, 5
,
––5 6
Guid
––7 ;
	factoryId
––< E
)
––E F
:
—— 
base
—— 
(
—— 
	container
—— 
,
—— 
	factoryId
—— '
)
——' (
{
““ 	
}
”” 	
public
’’ 
override
’’ 
void
’’ ,
GetAllInstancesWithInjectSplit
’’ ;
(
’’; <
InjectContext
÷÷ 
context
÷÷ !
,
÷÷! "
List
÷÷# '
<
÷÷' (
TypeValuePair
÷÷( 5
>
÷÷5 6
args
÷÷7 ;
,
÷÷; <
out
÷÷= @
Action
÷÷A G
injectAction
÷÷H T
,
÷÷T U
List
÷÷V Z
<
÷÷Z [
object
÷÷[ a
>
÷÷a b
buffer
÷÷c i
)
÷÷i j
{
◊◊ 	
Assert
ÿÿ 
.
ÿÿ 
IsEqual
ÿÿ 
(
ÿÿ 
args
ÿÿ 
.
ÿÿ  
Count
ÿÿ  %
,
ÿÿ% &
$num
ÿÿ' (
)
ÿÿ( )
;
ÿÿ) *
Assert
ŸŸ 
.
ŸŸ 
	IsNotNull
ŸŸ 
(
ŸŸ 
context
ŸŸ $
)
ŸŸ$ %
;
ŸŸ% &
Assert
€€ 
.
€€ 
That
€€ 
(
€€ 
typeof
€€ 
(
€€ 
	TContract
€€ (
)
€€( )
.
€€) * 
DerivesFromOrEqual
€€* <
(
€€< =
context
€€= D
.
€€D E

MemberType
€€E O
)
€€O P
)
€€P Q
;
€€Q R
Assert
‹‹ 
.
‹‹ 
That
‹‹ 
(
‹‹ 
args
‹‹ 
[
‹‹ 
$num
‹‹ 
]
‹‹ 
.
‹‹  
Type
‹‹  $
.
‹‹$ % 
DerivesFromOrEqual
‹‹% 7
<
‹‹7 8
TParam1
‹‹8 ?
>
‹‹? @
(
‹‹@ A
)
‹‹A B
)
‹‹B C
;
‹‹C D
Assert
›› 
.
›› 
That
›› 
(
›› 
args
›› 
[
›› 
$num
›› 
]
›› 
.
››  
Type
››  $
.
››$ % 
DerivesFromOrEqual
››% 7
<
››7 8
TParam2
››8 ?
>
››? @
(
››@ A
)
››A B
)
››B C
;
››C D
Assert
ﬁﬁ 
.
ﬁﬁ 
That
ﬁﬁ 
(
ﬁﬁ 
args
ﬁﬁ 
[
ﬁﬁ 
$num
ﬁﬁ 
]
ﬁﬁ 
.
ﬁﬁ  
Type
ﬁﬁ  $
.
ﬁﬁ$ % 
DerivesFromOrEqual
ﬁﬁ% 7
<
ﬁﬁ7 8
TParam3
ﬁﬁ8 ?
>
ﬁﬁ? @
(
ﬁﬁ@ A
)
ﬁﬁA B
)
ﬁﬁB C
;
ﬁﬁC D
Assert
ﬂﬂ 
.
ﬂﬂ 
That
ﬂﬂ 
(
ﬂﬂ 
args
ﬂﬂ 
[
ﬂﬂ 
$num
ﬂﬂ 
]
ﬂﬂ 
.
ﬂﬂ  
Type
ﬂﬂ  $
.
ﬂﬂ$ % 
DerivesFromOrEqual
ﬂﬂ% 7
<
ﬂﬂ7 8
TParam4
ﬂﬂ8 ?
>
ﬂﬂ? @
(
ﬂﬂ@ A
)
ﬂﬂA B
)
ﬂﬂB C
;
ﬂﬂC D
var
‚‚ 
factory
‚‚ 
=
‚‚ 
	Container
‚‚ #
.
‚‚# $
	ResolveId
‚‚$ -
(
‚‚- .
typeof
‚‚. 4
(
‚‚4 5
IFactory
‚‚5 =
<
‚‚= >
TParam1
‚‚> E
,
‚‚E F
TParam2
‚‚G N
,
‚‚N O
TParam3
‚‚P W
,
‚‚W X
TParam4
‚‚Y `
,
‚‚` a
	TContract
‚‚b k
>
‚‚k l
)
‚‚l m
,
‚‚m n
	FactoryId
‚‚o x
)
‚‚x y
;
‚‚y z
injectAction
‰‰ 
=
‰‰ 
null
‰‰ 
;
‰‰  
if
ÂÂ 
(
ÂÂ 
	Container
ÂÂ 
.
ÂÂ 
IsValidating
ÂÂ &
)
ÂÂ& '
{
ÊÊ 
buffer
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ 
new
ÈÈ 
ValidationMarker
ÈÈ /
(
ÈÈ/ 0
typeof
ÈÈ0 6
(
ÈÈ6 7
	TContract
ÈÈ7 @
)
ÈÈ@ A
)
ÈÈA B
)
ÈÈB C
;
ÈÈC D
}
ÍÍ 
else
ÎÎ 
{
ÏÏ 
buffer
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
(
ÓÓ 
(
ÓÓ 
IFactory
ÓÓ 
<
ÓÓ 
TParam1
ÓÓ &
,
ÓÓ& '
TParam2
ÓÓ( /
,
ÓÓ/ 0
TParam3
ÓÓ1 8
,
ÓÓ8 9
TParam4
ÓÓ: A
,
ÓÓA B
	TContract
ÓÓC L
>
ÓÓL M
)
ÓÓM N
factory
ÓÓN U
)
ÓÓU V
.
ÓÓV W
Create
ÓÓW ]
(
ÓÓ] ^
(
ÔÔ 
TParam1
ÔÔ  
)
ÔÔ  !
args
ÔÔ! %
[
ÔÔ% &
$num
ÔÔ& '
]
ÔÔ' (
.
ÔÔ( )
Value
ÔÔ) .
,
ÔÔ. /
(
 
TParam2
  
)
  !
args
! %
[
% &
$num
& '
]
' (
.
( )
Value
) .
,
. /
(
ÒÒ 
TParam3
ÒÒ  
)
ÒÒ  !
args
ÒÒ! %
[
ÒÒ% &
$num
ÒÒ& '
]
ÒÒ' (
.
ÒÒ( )
Value
ÒÒ) .
,
ÒÒ. /
(
ÚÚ 
TParam4
ÚÚ  
)
ÚÚ  !
args
ÚÚ! %
[
ÚÚ% &
$num
ÚÚ& '
]
ÚÚ' (
.
ÚÚ( )
Value
ÚÚ) .
)
ÚÚ. /
)
ÚÚ/ 0
;
ÚÚ0 1
}
ÛÛ 
}
ÙÙ 	
}
ıı 
[
˘˘  
NoReflectionBaking
˘˘ 
]
˘˘ 
public
˙˙ 

class
˙˙ 
IFactoryProvider
˙˙ !
<
˙˙! "
TParam1
˙˙" )
,
˙˙) *
TParam2
˙˙+ 2
,
˙˙2 3
TParam3
˙˙4 ;
,
˙˙; <
TParam4
˙˙= D
,
˙˙D E
TParam5
˙˙F M
,
˙˙M N
	TContract
˙˙O X
>
˙˙X Y
:
˙˙Z ["
IFactoryProviderBase
˙˙\ p
<
˙˙p q
	TContract
˙˙q z
>
˙˙z {
{
˚˚ 
public
¸¸ 
IFactoryProvider
¸¸ 
(
¸¸  
DiContainer
¸¸  +
	container
¸¸, 5
,
¸¸5 6
Guid
¸¸7 ;
	factoryId
¸¸< E
)
¸¸E F
:
˝˝ 
base
˝˝ 
(
˝˝ 
	container
˝˝ 
,
˝˝ 
	factoryId
˝˝ '
)
˝˝' (
{
˛˛ 	
}
ˇˇ 	
public
ÅÅ 
override
ÅÅ 
void
ÅÅ ,
GetAllInstancesWithInjectSplit
ÅÅ ;
(
ÅÅ; <
InjectContext
ÇÇ 
context
ÇÇ !
,
ÇÇ! "
List
ÇÇ# '
<
ÇÇ' (
TypeValuePair
ÇÇ( 5
>
ÇÇ5 6
args
ÇÇ7 ;
,
ÇÇ; <
out
ÇÇ= @
Action
ÇÇA G
injectAction
ÇÇH T
,
ÇÇT U
List
ÇÇV Z
<
ÇÇZ [
object
ÇÇ[ a
>
ÇÇa b
buffer
ÇÇc i
)
ÇÇi j
{
ÉÉ 	
Assert
ÑÑ 
.
ÑÑ 
IsEqual
ÑÑ 
(
ÑÑ 
args
ÑÑ 
.
ÑÑ  
Count
ÑÑ  %
,
ÑÑ% &
$num
ÑÑ' (
)
ÑÑ( )
;
ÑÑ) *
Assert
ÖÖ 
.
ÖÖ 
	IsNotNull
ÖÖ 
(
ÖÖ 
context
ÖÖ $
)
ÖÖ$ %
;
ÖÖ% &
Assert
áá 
.
áá 
That
áá 
(
áá 
typeof
áá 
(
áá 
	TContract
áá (
)
áá( )
.
áá) * 
DerivesFromOrEqual
áá* <
(
áá< =
context
áá= D
.
ááD E

MemberType
ááE O
)
ááO P
)
ááP Q
;
ááQ R
Assert
àà 
.
àà 
That
àà 
(
àà 
args
àà 
[
àà 
$num
àà 
]
àà 
.
àà  
Type
àà  $
.
àà$ % 
DerivesFromOrEqual
àà% 7
<
àà7 8
TParam1
àà8 ?
>
àà? @
(
àà@ A
)
ààA B
)
ààB C
;
ààC D
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
args
ââ 
[
ââ 
$num
ââ 
]
ââ 
.
ââ  
Type
ââ  $
.
ââ$ % 
DerivesFromOrEqual
ââ% 7
<
ââ7 8
TParam2
ââ8 ?
>
ââ? @
(
ââ@ A
)
ââA B
)
ââB C
;
ââC D
Assert
ää 
.
ää 
That
ää 
(
ää 
args
ää 
[
ää 
$num
ää 
]
ää 
.
ää  
Type
ää  $
.
ää$ % 
DerivesFromOrEqual
ää% 7
<
ää7 8
TParam3
ää8 ?
>
ää? @
(
ää@ A
)
ääA B
)
ääB C
;
ääC D
Assert
ãã 
.
ãã 
That
ãã 
(
ãã 
args
ãã 
[
ãã 
$num
ãã 
]
ãã 
.
ãã  
Type
ãã  $
.
ãã$ % 
DerivesFromOrEqual
ãã% 7
<
ãã7 8
TParam4
ãã8 ?
>
ãã? @
(
ãã@ A
)
ããA B
)
ããB C
;
ããC D
Assert
åå 
.
åå 
That
åå 
(
åå 
args
åå 
[
åå 
$num
åå 
]
åå 
.
åå  
Type
åå  $
.
åå$ % 
DerivesFromOrEqual
åå% 7
<
åå7 8
TParam5
åå8 ?
>
åå? @
(
åå@ A
)
ååA B
)
ååB C
;
ååC D
var
èè 
factory
èè 
=
èè 
	Container
èè #
.
èè# $
	ResolveId
èè$ -
(
èè- .
typeof
èè. 4
(
èè4 5
IFactory
èè5 =
<
èè= >
TParam1
èè> E
,
èèE F
TParam2
èèG N
,
èèN O
TParam3
èèP W
,
èèW X
TParam4
èèY `
,
èè` a
TParam5
èèb i
,
èèi j
	TContract
èèk t
>
èèt u
)
èèu v
,
èèv w
	FactoryIdèèx Å
)èèÅ Ç
;èèÇ É
injectAction
ëë 
=
ëë 
null
ëë 
;
ëë  
if
íí 
(
íí 
	Container
íí 
.
íí 
IsValidating
íí &
)
íí& '
{
ìì 
buffer
ññ 
.
ññ 
Add
ññ 
(
ññ 
new
ññ 
ValidationMarker
ññ /
(
ññ/ 0
typeof
ññ0 6
(
ññ6 7
	TContract
ññ7 @
)
ññ@ A
)
ññA B
)
ññB C
;
ññC D
}
óó 
else
òò 
{
ôô 
buffer
öö 
.
öö 
Add
öö 
(
öö 
(
õõ 
(
õõ 
IFactory
õõ 
<
õõ 
TParam1
õõ &
,
õõ& '
TParam2
õõ( /
,
õõ/ 0
TParam3
õõ1 8
,
õõ8 9
TParam4
õõ: A
,
õõA B
TParam5
õõC J
,
õõJ K
	TContract
õõL U
>
õõU V
)
õõV W
factory
õõW ^
)
õõ^ _
.
õõ_ `
Create
õõ` f
(
õõf g
(
úú 
TParam1
úú  
)
úú  !
args
úú! %
[
úú% &
$num
úú& '
]
úú' (
.
úú( )
Value
úú) .
,
úú. /
(
ùù 
TParam2
ùù  
)
ùù  !
args
ùù! %
[
ùù% &
$num
ùù& '
]
ùù' (
.
ùù( )
Value
ùù) .
,
ùù. /
(
ûû 
TParam3
ûû  
)
ûû  !
args
ûû! %
[
ûû% &
$num
ûû& '
]
ûû' (
.
ûû( )
Value
ûû) .
,
ûû. /
(
üü 
TParam4
üü  
)
üü  !
args
üü! %
[
üü% &
$num
üü& '
]
üü' (
.
üü( )
Value
üü) .
,
üü. /
(
†† 
TParam5
††  
)
††  !
args
††! %
[
††% &
$num
††& '
]
††' (
.
††( )
Value
††) .
)
††. /
)
††/ 0
;
††0 1
}
°° 
}
¢¢ 	
}
££ 
[
ßß  
NoReflectionBaking
ßß 
]
ßß 
public
®® 

class
®® 
IFactoryProvider
®® !
<
®®! "
TParam1
®®" )
,
®®) *
TParam2
®®+ 2
,
®®2 3
TParam3
®®4 ;
,
®®; <
TParam4
®®= D
,
®®D E
TParam5
®®F M
,
®®M N
TParam6
®®O V
,
®®V W
	TContract
®®X a
>
®®a b
:
®®c d"
IFactoryProviderBase
®®e y
<
®®y z
	TContract®®z É
>®®É Ñ
{
©© 
public
™™ 
IFactoryProvider
™™ 
(
™™  
DiContainer
™™  +
	container
™™, 5
,
™™5 6
Guid
™™7 ;
	factoryId
™™< E
)
™™E F
:
´´ 
base
´´ 
(
´´ 
	container
´´ 
,
´´ 
	factoryId
´´ '
)
´´' (
{
¨¨ 	
}
≠≠ 	
public
ØØ 
override
ØØ 
void
ØØ ,
GetAllInstancesWithInjectSplit
ØØ ;
(
ØØ; <
InjectContext
∞∞ 
context
∞∞ !
,
∞∞! "
List
∞∞# '
<
∞∞' (
TypeValuePair
∞∞( 5
>
∞∞5 6
args
∞∞7 ;
,
∞∞; <
out
∞∞= @
Action
∞∞A G
injectAction
∞∞H T
,
∞∞T U
List
∞∞V Z
<
∞∞Z [
object
∞∞[ a
>
∞∞a b
buffer
∞∞c i
)
∞∞i j
{
±± 	
Assert
≤≤ 
.
≤≤ 
IsEqual
≤≤ 
(
≤≤ 
args
≤≤ 
.
≤≤  
Count
≤≤  %
,
≤≤% &
$num
≤≤' (
)
≤≤( )
;
≤≤) *
Assert
≥≥ 
.
≥≥ 
	IsNotNull
≥≥ 
(
≥≥ 
context
≥≥ $
)
≥≥$ %
;
≥≥% &
Assert
µµ 
.
µµ 
That
µµ 
(
µµ 
typeof
µµ 
(
µµ 
	TContract
µµ (
)
µµ( )
.
µµ) * 
DerivesFromOrEqual
µµ* <
(
µµ< =
context
µµ= D
.
µµD E

MemberType
µµE O
)
µµO P
)
µµP Q
;
µµQ R
Assert
∂∂ 
.
∂∂ 
That
∂∂ 
(
∂∂ 
args
∂∂ 
[
∂∂ 
$num
∂∂ 
]
∂∂ 
.
∂∂  
Type
∂∂  $
.
∂∂$ % 
DerivesFromOrEqual
∂∂% 7
<
∂∂7 8
TParam1
∂∂8 ?
>
∂∂? @
(
∂∂@ A
)
∂∂A B
)
∂∂B C
;
∂∂C D
Assert
∑∑ 
.
∑∑ 
That
∑∑ 
(
∑∑ 
args
∑∑ 
[
∑∑ 
$num
∑∑ 
]
∑∑ 
.
∑∑  
Type
∑∑  $
.
∑∑$ % 
DerivesFromOrEqual
∑∑% 7
<
∑∑7 8
TParam2
∑∑8 ?
>
∑∑? @
(
∑∑@ A
)
∑∑A B
)
∑∑B C
;
∑∑C D
Assert
∏∏ 
.
∏∏ 
That
∏∏ 
(
∏∏ 
args
∏∏ 
[
∏∏ 
$num
∏∏ 
]
∏∏ 
.
∏∏  
Type
∏∏  $
.
∏∏$ % 
DerivesFromOrEqual
∏∏% 7
<
∏∏7 8
TParam3
∏∏8 ?
>
∏∏? @
(
∏∏@ A
)
∏∏A B
)
∏∏B C
;
∏∏C D
Assert
ππ 
.
ππ 
That
ππ 
(
ππ 
args
ππ 
[
ππ 
$num
ππ 
]
ππ 
.
ππ  
Type
ππ  $
.
ππ$ % 
DerivesFromOrEqual
ππ% 7
<
ππ7 8
TParam4
ππ8 ?
>
ππ? @
(
ππ@ A
)
ππA B
)
ππB C
;
ππC D
Assert
∫∫ 
.
∫∫ 
That
∫∫ 
(
∫∫ 
args
∫∫ 
[
∫∫ 
$num
∫∫ 
]
∫∫ 
.
∫∫  
Type
∫∫  $
.
∫∫$ % 
DerivesFromOrEqual
∫∫% 7
<
∫∫7 8
TParam5
∫∫8 ?
>
∫∫? @
(
∫∫@ A
)
∫∫A B
)
∫∫B C
;
∫∫C D
Assert
ªª 
.
ªª 
That
ªª 
(
ªª 
args
ªª 
[
ªª 
$num
ªª 
]
ªª 
.
ªª  
Type
ªª  $
.
ªª$ % 
DerivesFromOrEqual
ªª% 7
<
ªª7 8
TParam6
ªª8 ?
>
ªª? @
(
ªª@ A
)
ªªA B
)
ªªB C
;
ªªC D
var
ææ 
factory
ææ 
=
ææ 
	Container
ææ #
.
ææ# $
	ResolveId
ææ$ -
(
ææ- .
typeof
ææ. 4
(
ææ4 5
IFactory
ææ5 =
<
ææ= >
TParam1
ææ> E
,
ææE F
TParam2
ææG N
,
ææN O
TParam3
ææP W
,
ææW X
TParam4
ææY `
,
ææ` a
TParam5
ææb i
,
ææi j
TParam6
ææk r
,
æær s
	TContract
ææt }
>
ææ} ~
)
ææ~ 
,ææ Ä
	FactoryIdææÅ ä
)ææä ã
;ææã å
injectAction
¿¿ 
=
¿¿ 
null
¿¿ 
;
¿¿  
if
¡¡ 
(
¡¡ 
	Container
¡¡ 
.
¡¡ 
IsValidating
¡¡ &
)
¡¡& '
{
¬¬ 
buffer
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
new
≈≈ 
ValidationMarker
≈≈ /
(
≈≈/ 0
typeof
≈≈0 6
(
≈≈6 7
	TContract
≈≈7 @
)
≈≈@ A
)
≈≈A B
)
≈≈B C
;
≈≈C D
}
∆∆ 
else
«« 
{
»» 
buffer
…… 
.
…… 
Add
…… 
(
…… 
(
   
(
   
IFactory
   
<
   
TParam1
   &
,
  & '
TParam2
  ( /
,
  / 0
TParam3
  1 8
,
  8 9
TParam4
  : A
,
  A B
TParam5
  C J
,
  J K
TParam6
  L S
,
  S T
	TContract
  U ^
>
  ^ _
)
  _ `
factory
  ` g
)
  g h
.
  h i
Create
  i o
(
  o p
(
ÀÀ 
TParam1
ÀÀ  
)
ÀÀ  !
args
ÀÀ! %
[
ÀÀ% &
$num
ÀÀ& '
]
ÀÀ' (
.
ÀÀ( )
Value
ÀÀ) .
,
ÀÀ. /
(
ÃÃ 
TParam2
ÃÃ  
)
ÃÃ  !
args
ÃÃ! %
[
ÃÃ% &
$num
ÃÃ& '
]
ÃÃ' (
.
ÃÃ( )
Value
ÃÃ) .
,
ÃÃ. /
(
ÕÕ 
TParam3
ÕÕ  
)
ÕÕ  !
args
ÕÕ! %
[
ÕÕ% &
$num
ÕÕ& '
]
ÕÕ' (
.
ÕÕ( )
Value
ÕÕ) .
,
ÕÕ. /
(
ŒŒ 
TParam4
ŒŒ  
)
ŒŒ  !
args
ŒŒ! %
[
ŒŒ% &
$num
ŒŒ& '
]
ŒŒ' (
.
ŒŒ( )
Value
ŒŒ) .
,
ŒŒ. /
(
œœ 
TParam5
œœ  
)
œœ  !
args
œœ! %
[
œœ% &
$num
œœ& '
]
œœ' (
.
œœ( )
Value
œœ) .
,
œœ. /
(
–– 
TParam6
––  
)
––  !
args
––! %
[
––% &
$num
––& '
]
––' (
.
––( )
Value
––) .
)
––. /
)
––/ 0
;
––0 1
}
—— 
}
““ 	
}
”” 
[
◊◊  
NoReflectionBaking
◊◊ 
]
◊◊ 
public
ÿÿ 

class
ÿÿ 
IFactoryProvider
ÿÿ !
<
ÿÿ! "
TParam1
ÿÿ" )
,
ÿÿ) *
TParam2
ÿÿ+ 2
,
ÿÿ2 3
TParam3
ÿÿ4 ;
,
ÿÿ; <
TParam4
ÿÿ= D
,
ÿÿD E
TParam5
ÿÿF M
,
ÿÿM N
TParam6
ÿÿO V
,
ÿÿV W
TParam7
ÿÿX _
,
ÿÿ_ `
TParam8
ÿÿa h
,
ÿÿh i
TParam9
ÿÿj q
,
ÿÿq r
TParam10
ÿÿs {
,
ÿÿ{ |
	TContractÿÿ} Ü
>ÿÿÜ á
:ÿÿà â$
IFactoryProviderBaseÿÿä û
<ÿÿû ü
	TContractÿÿü ®
>ÿÿ® ©
{
ŸŸ 
public
⁄⁄ 
IFactoryProvider
⁄⁄ 
(
⁄⁄  
DiContainer
⁄⁄  +
	container
⁄⁄, 5
,
⁄⁄5 6
Guid
⁄⁄7 ;
	factoryId
⁄⁄< E
)
⁄⁄E F
:
€€ 
base
€€ 
(
€€ 
	container
€€ 
,
€€ 
	factoryId
€€ '
)
€€' (
{
‹‹ 	
}
›› 	
public
ﬂﬂ 
override
ﬂﬂ 
void
ﬂﬂ ,
GetAllInstancesWithInjectSplit
ﬂﬂ ;
(
ﬂﬂ; <
InjectContext
‡‡ 
context
‡‡ !
,
‡‡! "
List
‡‡# '
<
‡‡' (
TypeValuePair
‡‡( 5
>
‡‡5 6
args
‡‡7 ;
,
‡‡; <
out
‡‡= @
Action
‡‡A G
injectAction
‡‡H T
,
‡‡T U
List
‡‡V Z
<
‡‡Z [
object
‡‡[ a
>
‡‡a b
buffer
‡‡c i
)
‡‡i j
{
·· 	
Assert
‚‚ 
.
‚‚ 
IsEqual
‚‚ 
(
‚‚ 
args
‚‚ 
.
‚‚  
Count
‚‚  %
,
‚‚% &
$num
‚‚' )
)
‚‚) *
;
‚‚* +
Assert
„„ 
.
„„ 
	IsNotNull
„„ 
(
„„ 
context
„„ $
)
„„$ %
;
„„% &
Assert
ÂÂ 
.
ÂÂ 
That
ÂÂ 
(
ÂÂ 
typeof
ÂÂ 
(
ÂÂ 
	TContract
ÂÂ (
)
ÂÂ( )
.
ÂÂ) * 
DerivesFromOrEqual
ÂÂ* <
(
ÂÂ< =
context
ÂÂ= D
.
ÂÂD E

MemberType
ÂÂE O
)
ÂÂO P
)
ÂÂP Q
;
ÂÂQ R
Assert
ÊÊ 
.
ÊÊ 
That
ÊÊ 
(
ÊÊ 
args
ÊÊ 
[
ÊÊ 
$num
ÊÊ 
]
ÊÊ 
.
ÊÊ  
Type
ÊÊ  $
.
ÊÊ$ % 
DerivesFromOrEqual
ÊÊ% 7
<
ÊÊ7 8
TParam1
ÊÊ8 ?
>
ÊÊ? @
(
ÊÊ@ A
)
ÊÊA B
)
ÊÊB C
;
ÊÊC D
Assert
ÁÁ 
.
ÁÁ 
That
ÁÁ 
(
ÁÁ 
args
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ 
.
ÁÁ  
Type
ÁÁ  $
.
ÁÁ$ % 
DerivesFromOrEqual
ÁÁ% 7
<
ÁÁ7 8
TParam2
ÁÁ8 ?
>
ÁÁ? @
(
ÁÁ@ A
)
ÁÁA B
)
ÁÁB C
;
ÁÁC D
Assert
ËË 
.
ËË 
That
ËË 
(
ËË 
args
ËË 
[
ËË 
$num
ËË 
]
ËË 
.
ËË  
Type
ËË  $
.
ËË$ % 
DerivesFromOrEqual
ËË% 7
<
ËË7 8
TParam3
ËË8 ?
>
ËË? @
(
ËË@ A
)
ËËA B
)
ËËB C
;
ËËC D
Assert
ÈÈ 
.
ÈÈ 
That
ÈÈ 
(
ÈÈ 
args
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ 
.
ÈÈ  
Type
ÈÈ  $
.
ÈÈ$ % 
DerivesFromOrEqual
ÈÈ% 7
<
ÈÈ7 8
TParam4
ÈÈ8 ?
>
ÈÈ? @
(
ÈÈ@ A
)
ÈÈA B
)
ÈÈB C
;
ÈÈC D
Assert
ÍÍ 
.
ÍÍ 
That
ÍÍ 
(
ÍÍ 
args
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
.
ÍÍ  
Type
ÍÍ  $
.
ÍÍ$ % 
DerivesFromOrEqual
ÍÍ% 7
<
ÍÍ7 8
TParam5
ÍÍ8 ?
>
ÍÍ? @
(
ÍÍ@ A
)
ÍÍA B
)
ÍÍB C
;
ÍÍC D
Assert
ÎÎ 
.
ÎÎ 
That
ÎÎ 
(
ÎÎ 
args
ÎÎ 
[
ÎÎ 
$num
ÎÎ 
]
ÎÎ 
.
ÎÎ  
Type
ÎÎ  $
.
ÎÎ$ % 
DerivesFromOrEqual
ÎÎ% 7
<
ÎÎ7 8
TParam6
ÎÎ8 ?
>
ÎÎ? @
(
ÎÎ@ A
)
ÎÎA B
)
ÎÎB C
;
ÎÎC D
Assert
ÏÏ 
.
ÏÏ 
That
ÏÏ 
(
ÏÏ 
args
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
.
ÏÏ  
Type
ÏÏ  $
.
ÏÏ$ % 
DerivesFromOrEqual
ÏÏ% 7
<
ÏÏ7 8
TParam7
ÏÏ8 ?
>
ÏÏ? @
(
ÏÏ@ A
)
ÏÏA B
)
ÏÏB C
;
ÏÏC D
Assert
ÌÌ 
.
ÌÌ 
That
ÌÌ 
(
ÌÌ 
args
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
.
ÌÌ  
Type
ÌÌ  $
.
ÌÌ$ % 
DerivesFromOrEqual
ÌÌ% 7
<
ÌÌ7 8
TParam8
ÌÌ8 ?
>
ÌÌ? @
(
ÌÌ@ A
)
ÌÌA B
)
ÌÌB C
;
ÌÌC D
Assert
ÓÓ 
.
ÓÓ 
That
ÓÓ 
(
ÓÓ 
args
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
.
ÓÓ  
Type
ÓÓ  $
.
ÓÓ$ % 
DerivesFromOrEqual
ÓÓ% 7
<
ÓÓ7 8
TParam9
ÓÓ8 ?
>
ÓÓ? @
(
ÓÓ@ A
)
ÓÓA B
)
ÓÓB C
;
ÓÓC D
Assert
ÔÔ 
.
ÔÔ 
That
ÔÔ 
(
ÔÔ 
args
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
.
ÔÔ  
Type
ÔÔ  $
.
ÔÔ$ % 
DerivesFromOrEqual
ÔÔ% 7
<
ÔÔ7 8
TParam10
ÔÔ8 @
>
ÔÔ@ A
(
ÔÔA B
)
ÔÔB C
)
ÔÔC D
;
ÔÔD E
var
ÚÚ 
factory
ÚÚ 
=
ÚÚ 
	Container
ÚÚ #
.
ÚÚ# $
	ResolveId
ÚÚ$ -
(
ÚÚ- .
typeof
ÚÚ. 4
(
ÚÚ4 5
IFactory
ÚÚ5 =
<
ÚÚ= >
TParam1
ÚÚ> E
,
ÚÚE F
TParam2
ÚÚG N
,
ÚÚN O
TParam3
ÚÚP W
,
ÚÚW X
TParam4
ÚÚY `
,
ÚÚ` a
TParam5
ÚÚb i
,
ÚÚi j
TParam6
ÚÚk r
,
ÚÚr s
TParam7
ÚÚt {
,
ÚÚ{ |
TParam8ÚÚ} Ñ
,ÚÚÑ Ö
TParam9ÚÚÜ ç
,ÚÚç é
TParam10ÚÚè ó
,ÚÚó ò
	TContractÚÚô ¢
>ÚÚ¢ £
)ÚÚ£ §
,ÚÚ§ •
	FactoryIdÚÚ¶ Ø
)ÚÚØ ∞
;ÚÚ∞ ±
injectAction
ÙÙ 
=
ÙÙ 
null
ÙÙ 
;
ÙÙ  
if
ıı 
(
ıı 
	Container
ıı 
.
ıı 
IsValidating
ıı &
)
ıı& '
{
ˆˆ 
buffer
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
new
˘˘ 
ValidationMarker
˘˘ /
(
˘˘/ 0
typeof
˘˘0 6
(
˘˘6 7
	TContract
˘˘7 @
)
˘˘@ A
)
˘˘A B
)
˘˘B C
;
˘˘C D
}
˙˙ 
else
˚˚ 
{
¸¸ 
buffer
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝ 
(
˛˛ 
(
˛˛ 
IFactory
˛˛ 
<
˛˛ 
TParam1
˛˛ &
,
˛˛& '
TParam2
˛˛( /
,
˛˛/ 0
TParam3
˛˛1 8
,
˛˛8 9
TParam4
˛˛: A
,
˛˛A B
TParam5
˛˛C J
,
˛˛J K
TParam6
˛˛L S
,
˛˛S T
TParam7
˛˛U \
,
˛˛\ ]
TParam8
˛˛^ e
,
˛˛e f
TParam9
˛˛g n
,
˛˛n o
TParam10
˛˛p x
,
˛˛x y
	TContract˛˛z É
>˛˛É Ñ
)˛˛Ñ Ö
factory˛˛Ö å
)˛˛å ç
.˛˛ç é
Create˛˛é î
(˛˛î ï
(
ˇˇ 
TParam1
ˇˇ  
)
ˇˇ  !
args
ˇˇ! %
[
ˇˇ% &
$num
ˇˇ& '
]
ˇˇ' (
.
ˇˇ( )
Value
ˇˇ) .
,
ˇˇ. /
(
ÄÄ 
TParam2
ÄÄ  
)
ÄÄ  !
args
ÄÄ! %
[
ÄÄ% &
$num
ÄÄ& '
]
ÄÄ' (
.
ÄÄ( )
Value
ÄÄ) .
,
ÄÄ. /
(
ÅÅ 
TParam3
ÅÅ  
)
ÅÅ  !
args
ÅÅ! %
[
ÅÅ% &
$num
ÅÅ& '
]
ÅÅ' (
.
ÅÅ( )
Value
ÅÅ) .
,
ÅÅ. /
(
ÇÇ 
TParam4
ÇÇ  
)
ÇÇ  !
args
ÇÇ! %
[
ÇÇ% &
$num
ÇÇ& '
]
ÇÇ' (
.
ÇÇ( )
Value
ÇÇ) .
,
ÇÇ. /
(
ÉÉ 
TParam5
ÉÉ  
)
ÉÉ  !
args
ÉÉ! %
[
ÉÉ% &
$num
ÉÉ& '
]
ÉÉ' (
.
ÉÉ( )
Value
ÉÉ) .
,
ÉÉ. /
(
ÑÑ 
TParam6
ÑÑ  
)
ÑÑ  !
args
ÑÑ! %
[
ÑÑ% &
$num
ÑÑ& '
]
ÑÑ' (
.
ÑÑ( )
Value
ÑÑ) .
,
ÑÑ. /
(
ÖÖ 
TParam7
ÖÖ  
)
ÖÖ  !
args
ÖÖ! %
[
ÖÖ% &
$num
ÖÖ& '
]
ÖÖ' (
.
ÖÖ( )
Value
ÖÖ) .
,
ÖÖ. /
(
ÜÜ 
TParam8
ÜÜ  
)
ÜÜ  !
args
ÜÜ! %
[
ÜÜ% &
$num
ÜÜ& '
]
ÜÜ' (
.
ÜÜ( )
Value
ÜÜ) .
,
ÜÜ. /
(
áá 
TParam9
áá  
)
áá  !
args
áá! %
[
áá% &
$num
áá& '
]
áá' (
.
áá( )
Value
áá) .
,
áá. /
(
àà 
TParam10
àà !
)
àà! "
args
àà" &
[
àà& '
$num
àà' (
]
àà( )
.
àà) *
Value
àà* /
)
àà/ 0
)
àà0 1
;
àà1 2
}
ââ 
}
ää 	
}
ãã 
}åå Œí
XC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\MonoInstaller.cs
	namespace 	
Zenject
 
{ 
public		 

class		 
MonoInstaller		 
:		  
MonoInstallerBase		! 2
{

 
} 
public 

class 
MonoInstaller 
< 
TDerived '
>' (
:) *
MonoInstaller+ 8
where 
TDerived 
: 
MonoInstaller &
<& '
TDerived' /
>/ 0
{ 
public 
static 
TDerived 
InstallFromResource 2
(2 3
DiContainer3 >
	container? H
)H I
{ 	
return 
InstallFromResource &
(& '
MonoInstallerUtil' 8
.8 9"
GetDefaultResourcePath9 O
<O P
TDerivedP X
>X Y
(Y Z
)Z [
,[ \
	container] f
)f g
;g h
} 	
public 
static 
TDerived 
InstallFromResource 2
(2 3
string3 9
resourcePath: F
,F G
DiContainerH S
	containerT ]
)] ^
{   	
return!! 
InstallFromResource!! &
(!!& '
resourcePath!!' 3
,!!3 4
	container!!5 >
,!!> ?
new!!@ C
object!!D J
[!!J K
$num!!K L
]!!L M
)!!M N
;!!N O
}"" 	
public$$ 
static$$ 
TDerived$$ 
InstallFromResource$$ 2
($$2 3
DiContainer$$3 >
	container$$? H
,$$H I
object$$J P
[$$P Q
]$$Q R
	extraArgs$$S \
)$$\ ]
{%% 	
return&& 
InstallFromResource&& &
(&&& '
MonoInstallerUtil&&' 8
.&&8 9"
GetDefaultResourcePath&&9 O
<&&O P
TDerived&&P X
>&&X Y
(&&Y Z
)&&Z [
,&&[ \
	container&&] f
,&&f g
	extraArgs&&h q
)&&q r
;&&r s
}'' 	
public)) 
static)) 
TDerived)) 
InstallFromResource)) 2
())2 3
string))3 9
resourcePath)): F
,))F G
DiContainer))H S
	container))T ]
,))] ^
object))_ e
[))e f
]))f g
	extraArgs))h q
)))q r
{** 	
var++ 
	installer++ 
=++ 
MonoInstallerUtil++ -
.++- .
CreateInstaller++. =
<++= >
TDerived++> F
>++F G
(++G H
resourcePath++H T
,++T U
	container++V _
)++_ `
;++` a
	container,, 
.,, 
Inject,, 
(,, 
	installer,, &
,,,& '
	extraArgs,,( 1
),,1 2
;,,2 3
	installer-- 
.-- 
InstallBindings-- %
(--% &
)--& '
;--' (
return.. 
	installer.. 
;.. 
}// 	
}00 
public22 

class22 
MonoInstaller22 
<22 
TParam122 &
,22& '
TDerived22( 0
>220 1
:222 3
MonoInstallerBase224 E
where33 
TDerived33 
:33 
MonoInstaller33 &
<33& '
TParam133' .
,33. /
TDerived330 8
>338 9
{44 
public55 
static55 
TDerived55 
InstallFromResource55 2
(552 3
DiContainer553 >
	container55? H
,55H I
TParam155J Q
p155R T
)55T U
{66 	
return77 
InstallFromResource77 &
(77& '
MonoInstallerUtil77' 8
.778 9"
GetDefaultResourcePath779 O
<77O P
TDerived77P X
>77X Y
(77Y Z
)77Z [
,77[ \
	container77] f
,77f g
p177h j
)77j k
;77k l
}88 	
public:: 
static:: 
TDerived:: 
InstallFromResource:: 2
(::2 3
string::3 9
resourcePath::: F
,::F G
DiContainer::H S
	container::T ]
,::] ^
TParam1::_ f
p1::g i
)::i j
{;; 	
var<< 
	installer<< 
=<< 
MonoInstallerUtil<< -
.<<- .
CreateInstaller<<. =
<<<= >
TDerived<<> F
><<F G
(<<G H
resourcePath<<H T
,<<T U
	container<<V _
)<<_ `
;<<` a
	container== 
.== 
InjectExplicit== $
(==$ %
	installer==% .
,==. /

InjectUtil==0 :
.==: ;!
CreateArgListExplicit==; P
(==P Q
p1==Q S
)==S T
)==T U
;==U V
	installer>> 
.>> 
InstallBindings>> %
(>>% &
)>>& '
;>>' (
return?? 
	installer?? 
;?? 
}@@ 	
}AA 
publicCC 

classCC 
MonoInstallerCC 
<CC 
TParam1CC &
,CC& '
TParam2CC( /
,CC/ 0
TDerivedCC1 9
>CC9 :
:CC; <
MonoInstallerBaseCC= N
whereDD 
TDerivedDD 
:DD 
MonoInstallerDD &
<DD& '
TParam1DD' .
,DD. /
TParam2DD0 7
,DD7 8
TDerivedDD9 A
>DDA B
{EE 
publicFF 
staticFF 
TDerivedFF 
InstallFromResourceFF 2
(FF2 3
DiContainerFF3 >
	containerFF? H
,FFH I
TParam1FFJ Q
p1FFR T
,FFT U
TParam2FFV ]
p2FF^ `
)FF` a
{GG 	
returnHH 
InstallFromResourceHH &
(HH& '
MonoInstallerUtilHH' 8
.HH8 9"
GetDefaultResourcePathHH9 O
<HHO P
TDerivedHHP X
>HHX Y
(HHY Z
)HHZ [
,HH[ \
	containerHH] f
,HHf g
p1HHh j
,HHj k
p2HHl n
)HHn o
;HHo p
}II 	
publicKK 
staticKK 
TDerivedKK 
InstallFromResourceKK 2
(KK2 3
stringKK3 9
resourcePathKK: F
,KKF G
DiContainerKKH S
	containerKKT ]
,KK] ^
TParam1KK_ f
p1KKg i
,KKi j
TParam2KKk r
p2KKs u
)KKu v
{LL 	
varMM 
	installerMM 
=MM 
MonoInstallerUtilMM -
.MM- .
CreateInstallerMM. =
<MM= >
TDerivedMM> F
>MMF G
(MMG H
resourcePathMMH T
,MMT U
	containerMMV _
)MM_ `
;MM` a
	containerNN 
.NN 
InjectExplicitNN $
(NN$ %
	installerNN% .
,NN. /

InjectUtilNN0 :
.NN: ;!
CreateArgListExplicitNN; P
(NNP Q
p1NNQ S
,NNS T
p2NNU W
)NNW X
)NNX Y
;NNY Z
	installerOO 
.OO 
InstallBindingsOO %
(OO% &
)OO& '
;OO' (
returnPP 
	installerPP 
;PP 
}QQ 	
}RR 
publicTT 

classTT 
MonoInstallerTT 
<TT 
TParam1TT &
,TT& '
TParam2TT( /
,TT/ 0
TParam3TT1 8
,TT8 9
TDerivedTT: B
>TTB C
:TTD E
MonoInstallerBaseTTF W
whereUU 
TDerivedUU 
:UU 
MonoInstallerUU &
<UU& '
TParam1UU' .
,UU. /
TParam2UU0 7
,UU7 8
TParam3UU9 @
,UU@ A
TDerivedUUB J
>UUJ K
{VV 
publicWW 
staticWW 
TDerivedWW 
InstallFromResourceWW 2
(WW2 3
DiContainerWW3 >
	containerWW? H
,WWH I
TParam1WWJ Q
p1WWR T
,WWT U
TParam2WWV ]
p2WW^ `
,WW` a
TParam3WWb i
p3WWj l
)WWl m
{XX 	
returnYY 
InstallFromResourceYY &
(YY& '
MonoInstallerUtilYY' 8
.YY8 9"
GetDefaultResourcePathYY9 O
<YYO P
TDerivedYYP X
>YYX Y
(YYY Z
)YYZ [
,YY[ \
	containerYY] f
,YYf g
p1YYh j
,YYj k
p2YYl n
,YYn o
p3YYp r
)YYr s
;YYs t
}ZZ 	
public\\ 
static\\ 
TDerived\\ 
InstallFromResource\\ 2
(\\2 3
string\\3 9
resourcePath\\: F
,\\F G
DiContainer\\H S
	container\\T ]
,\\] ^
TParam1\\_ f
p1\\g i
,\\i j
TParam2\\k r
p2\\s u
,\\u v
TParam3\\w ~
p3	\\ Å
)
\\Å Ç
{]] 	
var^^ 
	installer^^ 
=^^ 
MonoInstallerUtil^^ -
.^^- .
CreateInstaller^^. =
<^^= >
TDerived^^> F
>^^F G
(^^G H
resourcePath^^H T
,^^T U
	container^^V _
)^^_ `
;^^` a
	container__ 
.__ 
InjectExplicit__ $
(__$ %
	installer__% .
,__. /

InjectUtil__0 :
.__: ;!
CreateArgListExplicit__; P
(__P Q
p1__Q S
,__S T
p2__U W
,__W X
p3__Y [
)__[ \
)__\ ]
;__] ^
	installer`` 
.`` 
InstallBindings`` %
(``% &
)``& '
;``' (
returnaa 
	installeraa 
;aa 
}bb 	
}cc 
publicee 

classee 
MonoInstalleree 
<ee 
TParam1ee &
,ee& '
TParam2ee( /
,ee/ 0
TParam3ee1 8
,ee8 9
TParam4ee: A
,eeA B
TDerivedeeC K
>eeK L
:eeM N
MonoInstallerBaseeeO `
whereff 
TDerivedff 
:ff 
MonoInstallerff &
<ff& '
TParam1ff' .
,ff. /
TParam2ff0 7
,ff7 8
TParam3ff9 @
,ff@ A
TParam4ffB I
,ffI J
TDerivedffK S
>ffS T
{gg 
publichh 
statichh 
TDerivedhh 
InstallFromResourcehh 2
(hh2 3
DiContainerhh3 >
	containerhh? H
,hhH I
TParam1hhJ Q
p1hhR T
,hhT U
TParam2hhV ]
p2hh^ `
,hh` a
TParam3hhb i
p3hhj l
,hhl m
TParam4hhn u
p4hhv x
)hhx y
{ii 	
returnjj 
InstallFromResourcejj &
(jj& '
MonoInstallerUtiljj' 8
.jj8 9"
GetDefaultResourcePathjj9 O
<jjO P
TDerivedjjP X
>jjX Y
(jjY Z
)jjZ [
,jj[ \
	containerjj] f
,jjf g
p1jjh j
,jjj k
p2jjl n
,jjn o
p3jjp r
,jjr s
p4jjt v
)jjv w
;jjw x
}kk 	
publicmm 
staticmm 
TDerivedmm 
InstallFromResourcemm 2
(mm2 3
stringmm3 9
resourcePathmm: F
,mmF G
DiContainermmH S
	containermmT ]
,mm] ^
TParam1mm_ f
p1mmg i
,mmi j
TParam2mmk r
p2mms u
,mmu v
TParam3mmw ~
p3	mm Å
,
mmÅ Ç
TParam4
mmÉ ä
p4
mmã ç
)
mmç é
{nn 	
varoo 
	installeroo 
=oo 
MonoInstallerUtiloo -
.oo- .
CreateInstalleroo. =
<oo= >
TDerivedoo> F
>ooF G
(ooG H
resourcePathooH T
,ooT U
	containerooV _
)oo_ `
;oo` a
	containerpp 
.pp 
InjectExplicitpp $
(pp$ %
	installerpp% .
,pp. /

InjectUtilpp0 :
.pp: ;!
CreateArgListExplicitpp; P
(ppP Q
p1ppQ S
,ppS T
p2ppU W
,ppW X
p3ppY [
,pp[ \
p4pp] _
)pp_ `
)pp` a
;ppa b
	installerqq 
.qq 
InstallBindingsqq %
(qq% &
)qq& '
;qq' (
returnrr 
	installerrr 
;rr 
}ss 	
}tt 
publicvv 

classvv 
MonoInstallervv 
<vv 
TParam1vv &
,vv& '
TParam2vv( /
,vv/ 0
TParam3vv1 8
,vv8 9
TParam4vv: A
,vvA B
TParam5vvC J
,vvJ K
TDerivedvvL T
>vvT U
:vvV W
MonoInstallerBasevvX i
whereww 
TDerivedww 
:ww 
MonoInstallerww &
<ww& '
TParam1ww' .
,ww. /
TParam2ww0 7
,ww7 8
TParam3ww9 @
,ww@ A
TParam4wwB I
,wwI J
TParam5wwK R
,wwR S
TDerivedwwT \
>ww\ ]
{xx 
publicyy 
staticyy 
TDerivedyy 
InstallFromResourceyy 2
(yy2 3
DiContaineryy3 >
	containeryy? H
,yyH I
TParam1yyJ Q
p1yyR T
,yyT U
TParam2yyV ]
p2yy^ `
,yy` a
TParam3yyb i
p3yyj l
,yyl m
TParam4yyn u
p4yyv x
,yyx y
TParam5	yyz Å
p5
yyÇ Ñ
)
yyÑ Ö
{zz 	
return{{ 
InstallFromResource{{ &
({{& '
MonoInstallerUtil{{' 8
.{{8 9"
GetDefaultResourcePath{{9 O
<{{O P
TDerived{{P X
>{{X Y
({{Y Z
){{Z [
,{{[ \
	container{{] f
,{{f g
p1{{h j
,{{j k
p2{{l n
,{{n o
p3{{p r
,{{r s
p4{{t v
,{{v w
p5{{x z
){{z {
;{{{ |
}|| 	
public~~ 
static~~ 
TDerived~~ 
InstallFromResource~~ 2
(~~2 3
string~~3 9
resourcePath~~: F
,~~F G
DiContainer~~H S
	container~~T ]
,~~] ^
TParam1~~_ f
p1~~g i
,~~i j
TParam2~~k r
p2~~s u
,~~u v
TParam3~~w ~
p3	~~ Å
,
~~Å Ç
TParam4
~~É ä
p4
~~ã ç
,
~~ç é
TParam5
~~è ñ
p5
~~ó ô
)
~~ô ö
{ 	
var
ÄÄ 
	installer
ÄÄ 
=
ÄÄ 
MonoInstallerUtil
ÄÄ -
.
ÄÄ- .
CreateInstaller
ÄÄ. =
<
ÄÄ= >
TDerived
ÄÄ> F
>
ÄÄF G
(
ÄÄG H
resourcePath
ÄÄH T
,
ÄÄT U
	container
ÄÄV _
)
ÄÄ_ `
;
ÄÄ` a
	container
ÅÅ 
.
ÅÅ 
InjectExplicit
ÅÅ $
(
ÅÅ$ %
	installer
ÅÅ% .
,
ÅÅ. /

InjectUtil
ÅÅ0 :
.
ÅÅ: ;#
CreateArgListExplicit
ÅÅ; P
(
ÅÅP Q
p1
ÅÅQ S
,
ÅÅS T
p2
ÅÅU W
,
ÅÅW X
p3
ÅÅY [
,
ÅÅ[ \
p4
ÅÅ] _
,
ÅÅ_ `
p5
ÅÅa c
)
ÅÅc d
)
ÅÅd e
;
ÅÅe f
	installer
ÇÇ 
.
ÇÇ 
InstallBindings
ÇÇ %
(
ÇÇ% &
)
ÇÇ& '
;
ÇÇ' (
return
ÉÉ 
	installer
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
public
áá 

static
áá 
class
áá 
MonoInstallerUtil
áá )
{
àà 
public
ââ 
static
ââ 
string
ââ $
GetDefaultResourcePath
ââ 3
<
ââ3 4

TInstaller
ââ4 >
>
ââ> ?
(
ââ? @
)
ââ@ A
where
ää 

TInstaller
ää 
:
ää 
MonoInstallerBase
ää 0
{
ãã 	
return
åå 
$str
åå  
+
åå! "
typeof
åå# )
(
åå) *

TInstaller
åå* 4
)
åå4 5
.
åå5 6

PrettyName
åå6 @
(
åå@ A
)
ååA B
;
ååB C
}
çç 	
public
èè 
static
èè 

TInstaller
èè  
CreateInstaller
èè! 0
<
èè0 1

TInstaller
èè1 ;
>
èè; <
(
èè< =
string
êê 
resourcePath
êê 
,
êê  
DiContainer
êê! ,
	container
êê- 6
)
êê6 7
where
ëë 

TInstaller
ëë 
:
ëë 
MonoInstallerBase
ëë 0
{
íí 	
bool
ìì 
shouldMakeActive
ìì !
;
ìì! "
var
îî 
gameObj
îî 
=
îî 
	container
îî #
.
îî# $+
CreateAndParentPrefabResource
îî$ A
(
îîA B
resourcePath
ïï 
,
ïï *
GameObjectCreationParameters
ïï :
.
ïï: ;
Default
ïï; B
,
ïïB C
null
ïïD H
,
ïïH I
out
ïïJ M
shouldMakeActive
ïïN ^
)
ïï^ _
;
ïï_ `
if
óó 
(
óó 
shouldMakeActive
óó  
&&
óó! #
!
óó$ %
	container
óó% .
.
óó. /
IsValidating
óó/ ;
)
óó; <
{
òò 
{
úú 
gameObj
ùù 
.
ùù 
	SetActive
ùù %
(
ùù% &
true
ùù& *
)
ùù* +
;
ùù+ ,
}
ûû 
}
üü 
var
°° 

installers
°° 
=
°° 
gameObj
°° $
.
°°$ %%
GetComponentsInChildren
°°% <
<
°°< =

TInstaller
°°= G
>
°°G H
(
°°H I
)
°°I J
;
°°J K
Assert
££ 
.
££ 
That
££ 
(
££ 

installers
££ "
.
££" #
Length
££# )
==
££* ,
$num
££- .
,
££. /
$str
§§ U
,
§§U V
typeof
§§W ]
(
§§] ^

TInstaller
§§^ h
)
§§h i
,
§§i j
gameObj
§§k r
.
§§r s
name
§§s w
)
§§w x
;
§§x y
return
¶¶ 

installers
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶  
;
¶¶  !
}
ßß 	
}
®® 
}©© ı:
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\MiscExtensions.cs
	namespace 	

ModestTree
 
{ 
public 

static 
class 
MiscExtensions &
{ 
public 
static 
string 
Fmt  
(  !
this! %
string& ,
s- .
,. /
params0 6
object7 =
[= >
]> ?
args@ D
)D E
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
args  $
.$ %
Length% +
;+ ,
i- .
++. 0
)0 1
{ 
var 
arg 
= 
args 
[ 
i  
]  !
;! "
if 
( 
arg 
== 
null 
)  
{ 
args 
[ 
i 
] 
= 
$str $
;$ %
} 
else 
if 
( 
arg 
is 
Type  $
)$ %
{ 
args 
[ 
i 
] 
= 
( 
(  
Type  $
)$ %
arg% (
)( )
.) *

PrettyName* 4
(4 5
)5 6
;6 7
} 
} 
return   
String   
.   
Format    
(    !
s  ! "
,  " #
args  $ (
)  ( )
;  ) *
}!! 	
public## 
static## 
int## 
IndexOf## !
<##! "
T##" #
>### $
(##$ %
this##% )
IList##* /
<##/ 0
T##0 1
>##1 2
list##3 7
,##7 8
T##9 :
item##; ?
)##? @
{$$ 	
for%% 
(%% 
int%% 
i%% 
=%% 
$num%% 
;%% 
i%% 
<%% 
list%%  $
.%%$ %
Count%%% *
;%%* +
i%%, -
++%%- /
)%%/ 0
{&& 
if'' 
('' 
object'' 
.'' 
Equals'' !
(''! "
list''" &
[''& '
i''' (
]''( )
,'') *
item''+ /
)''/ 0
)''0 1
{(( 
return)) 
i)) 
;)) 
}** 
}++ 
return-- 
--- 
$num-- 
;-- 
}.. 	
public00 
static00 
string00 
Join00 !
(00! "
this00" &
IEnumerable00' 2
<002 3
string003 9
>009 :
values00; A
,00A B
string00C I
	separator00J S
)00S T
{11 	
return22 
string22 
.22 
Join22 
(22 
	separator22 (
,22( )
values22* 0
.220 1
ToArray221 8
(228 9
)229 :
)22: ;
;22; <
}33 	
public77 
static77 
void77 
AllocFreeAddRange77 ,
<77, -
T77- .
>77. /
(77/ 0
this770 4
IList775 :
<77: ;
T77; <
>77< =
list77> B
,77B C
IList77D I
<77I J
T77J K
>77K L
items77M R
)77R S
{88 	
for99 
(99 
int99 
i99 
=99 
$num99 
;99 
i99 
<99 
items99  %
.99% &
Count99& +
;99+ ,
i99- .
++99. 0
)990 1
{:: 
list;; 
.;; 
Add;; 
(;; 
items;; 
[;; 
i;;  
];;  !
);;! "
;;;" #
}<< 
}== 	
publicAA 
staticAA 
voidAA 
RemoveWithConfirmAA ,
<AA, -
TAA- .
>AA. /
(AA/ 0
thisAA0 4
IListAA5 :
<AA: ;
TAA; <
>AA< =
listAA> B
,AAB C
TAAD E
itemAAF J
)AAJ K
{BB 	
boolCC 
removedCC 
=CC 
listCC 
.CC  
RemoveCC  &
(CC& '
itemCC' +
)CC+ ,
;CC, -
AssertDD 
.DD 
ThatDD 
(DD 
removedDD 
)DD  
;DD  !
}EE 	
publicGG 
staticGG 
voidGG 
RemoveWithConfirmGG ,
<GG, -
TGG- .
>GG. /
(GG/ 0
thisGG0 4

LinkedListGG5 ?
<GG? @
TGG@ A
>GGA B
listGGC G
,GGG H
TGGI J
itemGGK O
)GGO P
{HH 	
boolII 
removedII 
=II 
listII 
.II  
RemoveII  &
(II& '
itemII' +
)II+ ,
;II, -
AssertJJ 
.JJ 
ThatJJ 
(JJ 
removedJJ 
)JJ  
;JJ  !
}KK 	
publicMM 
staticMM 
voidMM 
RemoveWithConfirmMM ,
<MM, -
TKeyMM- 1
,MM1 2
TValMM3 7
>MM7 8
(MM8 9
thisMM9 =
IDictionaryMM> I
<MMI J
TKeyMMJ N
,MMN O
TValMMP T
>MMT U

dictionaryMMV `
,MM` a
TKeyMMb f
keyMMg j
)MMj k
{NN 	
boolOO 
removedOO 
=OO 

dictionaryOO %
.OO% &
RemoveOO& ,
(OO, -
keyOO- 0
)OO0 1
;OO1 2
AssertPP 
.PP 
ThatPP 
(PP 
removedPP 
)PP  
;PP  !
}QQ 	
publicSS 
staticSS 
voidSS 
RemoveWithConfirmSS ,
<SS, -
TSS- .
>SS. /
(SS/ 0
thisSS0 4
HashSetSS5 <
<SS< =
TSS= >
>SS> ?
setSS@ C
,SSC D
TSSE F
itemSSG K
)SSK L
{TT 	
boolUU 
removedUU 
=UU 
setUU 
.UU 
RemoveUU %
(UU% &
itemUU& *
)UU* +
;UU+ ,
AssertVV 
.VV 
ThatVV 
(VV 
removedVV 
)VV  
;VV  !
}WW 	
publicYY 
staticYY 
TValYY 
GetValueAndRemoveYY ,
<YY, -
TKeyYY- 1
,YY1 2
TValYY3 7
>YY7 8
(YY8 9
thisYY9 =
IDictionaryYY> I
<YYI J
TKeyYYJ N
,YYN O
TValYYP T
>YYT U

dictionaryYYV `
,YY` a
TKeyYYb f
keyYYg j
)YYj k
{ZZ 	
TVal[[ 
val[[ 
=[[ 

dictionary[[ !
[[[! "
key[[" %
][[% &
;[[& '

dictionary\\ 
.\\ 
RemoveWithConfirm\\ (
(\\( )
key\\) ,
)\\, -
;\\- .
return]] 
val]] 
;]] 
}^^ 	
}__ 
}`` Ó 
bC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodProviderUntyped.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
MethodProviderUntyped &
:' (
	IProvider) 2
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
Func 
< 
InjectContext #
,# $
object% +
>+ ,
_method- 4
;4 5
public !
MethodProviderUntyped $
($ %
Func 
< 
InjectContext 
, 
object  &
>& '
method( .
,. /
DiContainer 
	container !
)! "
{ 	

_container 
= 
	container "
;" #
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{   	
return!! 
context!! 
.!! 

MemberType!! %
;!!% &
}"" 	
public$$ 
void$$ *
GetAllInstancesWithInjectSplit$$ 2
($$2 3
InjectContext%% 
context%% !
,%%! "
List%%# '
<%%' (
TypeValuePair%%( 5
>%%5 6
args%%7 ;
,%%; <
out%%= @
Action%%A G
injectAction%%H T
,%%T U
List%%V Z
<%%Z [
object%%[ a
>%%a b
buffer%%c i
)%%i j
{&& 	
Assert'' 
.'' 
IsEmpty'' 
('' 
args'' 
)''  
;''  !
Assert(( 
.(( 
	IsNotNull(( 
((( 
context(( $
)(($ %
;((% &
injectAction** 
=** 
null** 
;**  
if++ 
(++ 

_container++ 
.++ 
IsValidating++ '
&&++( *
!+++ ,
TypeAnalyzer++, 8
.++8 9'
ShouldAllowDuringValidation++9 T
(++T U
context++U \
.++\ ]

MemberType++] g
)++g h
)++h i
{,, 
buffer-- 
.-- 
Add-- 
(-- 
new-- 
ValidationMarker-- /
(--/ 0
context--0 7
.--7 8

MemberType--8 B
)--B C
)--C D
;--D E
}.. 
else// 
{00 
var11 
result11 
=11 
_method11 $
(11$ %
context11% ,
)11, -
;11- .
if33 
(33 
result33 
==33 
null33 "
)33" #
{44 
Assert55 
.55 
That55 
(55  
!55  !
context55! (
.55( )

MemberType55) 3
.553 4
IsPrimitive554 ?
(55? @
)55@ A
,55A B
$str66 U
)66U V
;66V W
}77 
else88 
{99 
Assert:: 
.:: 
That:: 
(::  
result::  &
.::& '
GetType::' .
(::. /
)::/ 0
.::0 1
DerivesFromOrEqual::1 C
(::C D
context::D K
.::K L

MemberType::L V
)::V W
)::W X
;::X Y
};; 
buffer== 
.== 
Add== 
(== 
result== !
)==! "
;==" #
}>> 
}?? 	
}@@ 
}AA ≤"
~C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\GetFromPrefabComponentProvider.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 *
GetFromPrefabComponentProvider

 /
:

0 1
	IProvider

2 ;
{ 
readonly 
IPrefabInstantiator $
_prefabInstantiator% 8
;8 9
readonly 
Type 
_componentType $
;$ %
readonly 
bool 
_matchSingle "
;" #
public *
GetFromPrefabComponentProvider -
(- .
Type 
componentType 
, 
IPrefabInstantiator 
prefabInstantiator  2
,2 3
bool4 8
matchSingle9 D
)D E
{ 	
_prefabInstantiator 
=  !
prefabInstantiator" 4
;4 5
_componentType 
= 
componentType *
;* +
_matchSingle 
= 
matchSingle &
;& '
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{   	
get!! 
{!! 
return!! 
false!! 
;!! 
}!!  !
}"" 	
public$$ 
Type$$ 
GetInstanceType$$ #
($$# $
InjectContext$$$ 1
context$$2 9
)$$9 :
{%% 	
return&& 
_componentType&& !
;&&! "
}'' 	
public)) 
void)) *
GetAllInstancesWithInjectSplit)) 2
())2 3
InjectContext** 
context** !
,**! "
List**# '
<**' (
TypeValuePair**( 5
>**5 6
args**7 ;
,**; <
out**= @
Action**A G
injectAction**H T
,**T U
List**V Z
<**Z [
object**[ a
>**a b
buffer**c i
)**i j
{++ 	
Assert,, 
.,, 
	IsNotNull,, 
(,, 
context,, $
),,$ %
;,,% &
var.. 

gameObject.. 
=.. 
_prefabInstantiator.. 0
...0 1
Instantiate..1 <
(..< =
context..= D
,..D E
args..F J
,..J K
out..L O
injectAction..P \
)..\ ]
;..] ^
if44 
(44 
_matchSingle44 
)44 
{55 
var66 
match66 
=66 

gameObject66 &
.66& '"
GetComponentInChildren66' =
(66= >
_componentType66> L
,66L M
true66N R
)66R S
;66S T
Assert88 
.88 
	IsNotNull88  
(88  !
match88! &
,88& '
$str88( b
,88b c
_componentType99 
,99 
_prefabInstantiator99  3
.993 4
	GetPrefab994 =
(99= >
)99> ?
.99? @
name99@ D
)99D E
;99E F
buffer;; 
.;; 
Add;; 
(;; 
match;;  
);;  !
;;;! "
return<< 
;<< 
}== 
var?? 
allComponents?? 
=?? 

gameObject??  *
.??* +#
GetComponentsInChildren??+ B
(??B C
_componentType??C Q
,??Q R
true??S W
)??W X
;??X Y
AssertAA 
.AA 
ThatAA 
(AA 
allComponentsAA %
.AA% &
LengthAA& ,
>=AA- /
$numAA0 1
,AA1 2
$strBB Y
,BBY Z
_componentTypeCC 
,CC 
_prefabInstantiatorCC  3
.CC3 4
	GetPrefabCC4 =
(CC= >
)CC> ?
.CC? @
nameCC@ D
)CCD E
;CCE F
bufferEE 
.EE 
AllocFreeAddRangeEE $
(EE$ %
allComponentsEE% 2
)EE2 3
;EE3 4
}FF 	
}GG 
}HH ç
ÉC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorDynamicContext.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

abstract 
class -
!SubContainerCreatorDynamicContext ;
:< = 
ISubContainerCreator> R
{ 
readonly 
DiContainer 

_container '
;' (
public -
!SubContainerCreatorDynamicContext 0
(0 1
DiContainer1 <
	container= F
)F G
{ 	

_container 
= 
	container "
;" #
} 	
	protected 
DiContainer 
	Container '
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
public 
DiContainer 
CreateSubContainer -
(- .
List 
< 
TypeValuePair 
> 
args  $
,$ %
InjectContext& 3
parentContext4 A
)A B
{ 	
bool 
shouldMakeActive !
;! "
var 
gameObj 
= 
CreateGameObject *
(* +
out+ .
shouldMakeActive/ ?
)? @
;@ A
var   
context   
=   
gameObj   !
.  ! "
AddComponent  " .
<  . /
GameObjectContext  / @
>  @ A
(  A B
)  B C
;  C D
AddInstallers"" 
("" 
args"" 
,"" 
context""  '
)""' (
;""( )

_container$$ 
.$$ 
Inject$$ 
($$ 
context$$ %
)$$% &
;$$& '
if&& 
(&& 
shouldMakeActive&&  
&&&&! #
!&&$ %

_container&&% /
.&&/ 0
IsValidating&&0 <
)&&< =
{'' 
{++ 
gameObj,, 
.,, 
	SetActive,, %
(,,% &
true,,& *
),,* +
;,,+ ,
}-- 
}.. 
return22 
context22 
.22 
	Container22 $
;22$ %
}33 	
	protected55 
abstract55 
void55 
AddInstallers55  -
(55- .
List55. 2
<552 3
TypeValuePair553 @
>55@ A
args55B F
,55F G
GameObjectContext55H Y
context55Z a
)55a b
;55b c
	protected66 
abstract66 

GameObject66 %
CreateGameObject66& 6
(666 7
out667 :
bool66; ?
shouldMakeActive66@ P
)66P Q
;66Q R
}77 
}88 Ï0
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindInfo\GameObjectCreationParameters.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 (
GameObjectCreationParameters		 -
{

 
public 
string 
Name 
{ 	
get 
; 
set 
; 
} 	
public 
string 
	GroupName 
{ 	
get 
; 
set 
; 
} 	
public 
	Transform 
ParentTransform (
{ 	
get 
; 
set 
; 
} 	
public 
Func 
< 
InjectContext !
,! "
	Transform# ,
>, -!
ParentTransformGetter. C
{ 	
get 
; 
set   
;   
}!! 	
public## 
Vector3## 
?## 
Position##  
{$$ 	
get%% 
;%% 
set&& 
;&& 
}'' 	
public)) 

Quaternion)) 
?)) 
Rotation)) #
{** 	
get++ 
;++ 
set,, 
;,, 
}-- 	
public// 
static// 
readonly// (
GameObjectCreationParameters// ;
Default//< C
=//D E
new//F I(
GameObjectCreationParameters//J f
(//f g
)//g h
;//h i
public11 
override11 
int11 
GetHashCode11 '
(11' (
)11( )
{22 	
	unchecked33 
{44 
int55 
hash55 
=55 
$num55 
;55 
hash66 
=66 
hash66 
*66 
$num66  
+66! "
(66# $
Name66$ (
==66) +
null66, 0
?661 2
$num663 4
:665 6
Name667 ;
.66; <
GetHashCode66< G
(66G H
)66H I
)66I J
;66J K
hash77 
=77 
hash77 
*77 
$num77  
+77! "
(77# $
	GroupName77$ -
==77. 0
null771 5
?776 7
$num778 9
:77: ;
	GroupName77< E
.77E F
GetHashCode77F Q
(77Q R
)77R S
)77S T
;77T U
hash88 
=88 
hash88 
*88 
$num88  
+88! "
(88# $
ParentTransform88$ 3
==884 6
null887 ;
?88< =
$num88> ?
:88@ A
ParentTransform88B Q
.88Q R
GetHashCode88R ]
(88] ^
)88^ _
)88_ `
;88` a
hash99 
=99 
hash99 
*99 
$num99  
+99! "
(99# $!
ParentTransformGetter99$ 9
==99: <
null99= A
?99B C
$num99D E
:99F G!
ParentTransformGetter99H ]
.99] ^
GetHashCode99^ i
(99i j
)99j k
)99k l
;99l m
hash:: 
=:: 
hash:: 
*:: 
$num::  
+::! "
(::# $
!::$ %
Position::% -
.::- .
HasValue::. 6
?::7 8
$num::9 :
:::; <
Position::= E
.::E F
Value::F K
.::K L
GetHashCode::L W
(::W X
)::X Y
)::Y Z
;::Z [
hash;; 
=;; 
hash;; 
*;; 
$num;;  
+;;! "
(;;# $
!;;$ %
Rotation;;% -
.;;- .
HasValue;;. 6
?;;7 8
$num;;9 :
:;;; <
Rotation;;= E
.;;E F
Value;;F K
.;;K L
GetHashCode;;L W
(;;W X
);;X Y
);;Y Z
;;;Z [
return<< 
hash<< 
;<< 
}== 
}>> 	
public@@ 
override@@ 
bool@@ 
Equals@@ #
(@@# $
object@@$ *
other@@+ 0
)@@0 1
{AA 	
ifBB 
(BB 
otherBB 
isBB (
GameObjectCreationParametersBB 5
)BB5 6
{CC (
GameObjectCreationParametersDD ,
otherIdDD- 4
=DD5 6
(DD7 8(
GameObjectCreationParametersDD8 T
)DDT U
otherDDU Z
;DDZ [
returnEE 
otherIdEE 
==EE !
thisEE" &
;EE& '
}FF 
returnHH 
falseHH 
;HH 
}II 	
publicKK 
boolKK 
EqualsKK 
(KK (
GameObjectCreationParametersKK 7
thatKK8 <
)KK< =
{LL 	
returnMM 
thisMM 
==MM 
thatMM 
;MM  
}NN 	
publicPP 
staticPP 
boolPP 
operatorPP #
==PP$ &
(PP& '(
GameObjectCreationParametersPP' C
leftPPD H
,PPH I(
GameObjectCreationParametersPPJ f
rightPPg l
)PPl m
{QQ 	
returnRR 
EqualsRR 
(RR 
leftRR 
.RR 
NameRR #
,RR# $
rightRR% *
.RR* +
NameRR+ /
)RR/ 0
&&SS 
EqualsSS 
(SS 
leftSS 
.SS 
	GroupNameSS (
,SS( )
rightSS* /
.SS/ 0
	GroupNameSS0 9
)SS9 :
;SS: ;
}TT 	
publicVV 
staticVV 
boolVV 
operatorVV #
!=VV$ &
(VV& '(
GameObjectCreationParametersVV' C
leftVVD H
,VVH I(
GameObjectCreationParametersVVJ f
rightVVg l
)VVl m
{WW 	
returnXX 
!XX 
leftXX 
.XX 
EqualsXX 
(XX  
rightXX  %
)XX% &
;XX& '
}YY 	
}ZZ 
}[[ Ω 
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\SignalExtensions.cs
	namespace 	
Zenject
 
{ 
public 

static 
class 
SignalExtensions (
{ 
public 
static %
SignalDeclarationBindInfo /2
&CreateDefaultSignalDeclarationBindInfo0 V
(V W
DiContainerW b
	containerc l
,l m
Typen r

signalTypes }
)} ~
{ 	
var 
signalBindInfo 
=  
new! $%
SignalDeclarationBindInfo% >
(> ?

signalType? I
)I J
;J K
signalBindInfo

 
.

 
RunAsync

 #
=

$ %
	container

& /
.

/ 0
Settings

0 8
.

8 9
Signals

9 @
.

@ A
DefaultSyncMode

A P
==

Q S"
SignalDefaultSyncModes

T j
.

j k
Asynchronous

k w
;

w x
signalBindInfo 
. "
MissingHandlerResponse 1
=2 3
	container4 =
.= >
Settings> F
.F G
SignalsG N
.N O)
MissingHandlerDefaultResponseO l
;l m
signalBindInfo 
. 
TickPriority '
=( )
	container* 3
.3 4
Settings4 <
.< =
Signals= D
.D E$
DefaultAsyncTickPriorityE ]
;] ^
return 
signalBindInfo !
;! "
} 	
public 
static D
8DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder N
DeclareSignalO \
<\ ]
TSignal] d
>d e
(e f
thisf j
DiContainerk v
	container	w Ä
)
Ä Å
{ 	
var 
signalBindInfo 
=  2
&CreateDefaultSignalDeclarationBindInfo! G
(G H
	containerH Q
,Q R
typeofS Y
(Y Z
TSignalZ a
)a b
)b c
;c d
var 
bindInfo 
= 
	container $
.$ %
Bind% )
<) *
SignalDeclaration* ;
>; <
(< =
)= >
.> ?
AsCached? G
(G H
)H I
. 
WithArguments 
( 
signalBindInfo -
)- .
.. /
WhenInjectedInto/ ?
(? @
typeof@ F
(F G
	SignalBusG P
)P Q
,Q R
typeofS Y
(Y Z-
!SignalDeclarationAsyncInitializerZ {
){ |
)| }
.} ~
BindInfo	~ Ü
;
Ü á
var 
signalBinder 
= 
new "D
8DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder# [
([ \
signalBindInfo\ j
)j k
;k l
signalBinder 
. 
AddCopyBindInfo (
(( )
bindInfo) 1
)1 2
;2 3
return 
signalBinder 
;  
} 	
public 
static  
BindSignalIdToBinder *
<* +
TSignal+ 2
>2 3

BindSignal4 >
<> ?
TSignal? F
>F G
(G H
thisH L
DiContainerM X
	containerY b
)b c
{ 	
var 
signalBindInfo 
=  
new! $!
SignalBindingBindInfo% :
(: ;
typeof; A
(A B
TSignalB I
)I J
)J K
;K L
return!! 
new!!  
BindSignalIdToBinder!! +
<!!+ ,
TSignal!!, 3
>!!3 4
(!!4 5
	container!!5 >
,!!> ?
signalBindInfo!!@ N
)!!N O
;!!O P
}"" 	
}## 
}$$ —Å
YC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\KeyedFactory.cs
	namespace 	
Zenject
 
{ 
public		 

abstract		 
class		 
KeyedFactoryBase		 *
<		* +
TBase		+ 0
,		0 1
TKey		2 6
>		6 7
:		8 9
IValidatable		: F
{

 
[ 	
Inject	 
] 
readonly 
DiContainer 

_container '
=( )
null* .
;. /
[ 	
InjectOptional	 
] 
readonly 
List 
< 
	ValuePair 
<  
TKey  $
,$ %
Type& *
>* +
>+ ,

_typePairs- 7
=8 9
null: >
;> ?

Dictionary 
< 
TKey 
, 
Type 
> 
_typeMap '
=( )
null* .
;. /
[ 	
InjectOptional	 
] 
readonly 
Type 
_fallbackType #
=$ %
null& *
;* +
	protected 
DiContainer 
	Container '
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
	protected 
abstract 
IEnumerable &
<& '
Type' +
>+ ,
ProvidedTypes- :
{ 	
get 
; 
} 	
public   
ICollection   
<   
TKey   
>    
Keys  ! %
{!! 	
get"" 
{"" 
return"" 
_typeMap"" !
.""! "
Keys""" &
;""& '
}""( )
}## 	
	protected%% 

Dictionary%% 
<%% 
TKey%% !
,%%! "
Type%%# '
>%%' (
TypeMap%%) 0
{&& 	
get'' 
{'' 
return'' 
_typeMap'' !
;''! "
}''# $
}(( 	
[** 	
Inject**	 
]** 
public++ 
void++ 

Initialize++ 
(++ 
)++  
{,, 	
Assert-- 
.-- 
That-- 
(-- 
_fallbackType-- %
==--& (
null--) -
||--. 0
_fallbackType--1 >
.--> ?
DerivesFromOrEqual--? Q
<--Q R
TBase--R W
>--W X
(--X Y
)--Y Z
,--Z [
$str.. C
,..C D
_fallbackType..E R
,..R S
typeof..T Z
(..Z [
TBase..[ `
)..` a
)..a b
;..b c
var11 

duplicates11 
=11 

_typePairs11 '
.11' (
Select11( .
(11. /
x11/ 0
=>111 3
x114 5
.115 6
First116 ;
)11; <
.11< =
GetDuplicates11= J
(11J K
)11K L
;11L M
if33 
(33 
!33 

duplicates33 
.33 
IsEmpty33 #
(33# $
)33$ %
)33% &
{44 
throw55 
Assert55 
.55 
CreateException55 ,
(55, -
$str66 A
,66A B

duplicates66C M
.66M N
Select66N T
(66T U
x66U V
=>66W Y
x66Z [
.66[ \
ToString66\ d
(66d e
)66e f
)66f g
.66g h
Join66h l
(66l m
$str66m q
)66q r
)66r s
;66s t
}77 
_typeMap:: 
=:: 

_typePairs:: !
.::! "
ToDictionary::" .
(::. /
x::/ 0
=>::1 3
x::4 5
.::5 6
First::6 ;
,::; <
x::= >
=>::? A
x::B C
.::C D
Second::D J
)::J K
;::K L

_typePairs;; 
.;; 
Clear;; 
(;; 
);; 
;;; 
}<< 	
public>> 
bool>> 
HasKey>> 
(>> 
TKey>> 
key>>  #
)>># $
{?? 	
return@@ 
_typeMap@@ 
.@@ 
ContainsKey@@ '
(@@' (
key@@( +
)@@+ ,
;@@, -
}AA 	
	protectedCC 
TypeCC 
GetTypeForKeyCC $
(CC$ %
TKeyCC% )
keyCC* -
)CC- .
{DD 	
TypeEE 
	keyedTypeEE 
;EE 
ifGG 
(GG 
!GG 
_typeMapGG 
.GG 
TryGetValueGG %
(GG% &
keyGG& )
,GG) *
outGG+ .
	keyedTypeGG/ 8
)GG8 9
)GG9 :
{HH 
AssertII 
.II 
	IsNotNullII  
(II  !
_fallbackTypeII! .
,II. /
$strII0 W
,IIW X
keyIIY \
)II\ ]
;II] ^
returnJJ 
_fallbackTypeJJ $
;JJ$ %
}KK 
returnMM 
	keyedTypeMM 
;MM 
}NN 	
publicPP 
virtualPP 
voidPP 
ValidatePP $
(PP$ %
)PP% &
{QQ 	
foreachRR 
(RR 
varRR 
constructTypeRR &
inRR' )
_typeMapRR* 2
.RR2 3
ValuesRR3 9
)RR9 :
{SS 
	ContainerTT 
.TT 
InstantiateExplicitTT -
(TT- .
constructTypeUU !
,UU! "
ValidationUtilUU# 1
.UU1 2
CreateDefaultArgsUU2 C
(UUC D
ProvidedTypesUUD Q
.UUQ R
ToArrayUUR Y
(UUY Z
)UUZ [
)UU[ \
)UU\ ]
;UU] ^
}VV 
}WW 	
	protectedYY 
staticYY &
ConditionCopyNonLazyBinderYY 3
AddBindingInternalYY4 F
<YYF G
TDerivedYYG O
>YYO P
(YYP Q
DiContainerYYQ \
	containerYY] f
,YYf g
TKeyYYh l
keyYYm p
)YYp q
whereZZ 
TDerivedZZ 
:ZZ 
TBaseZZ "
{[[ 	
return\\ 
	container\\ 
.\\ 
Bind\\ !
<\\! "
	ValuePair\\" +
<\\+ ,
TKey\\, 0
,\\0 1
Type\\2 6
>\\6 7
>\\7 8
(\\8 9
)\\9 :
.]] 
FromInstance]] 
(]] 
	ValuePair]] '
.]]' (
New]]( +
(]]+ ,
key]], /
,]]/ 0
typeof]]1 7
(]]7 8
TDerived]]8 @
)]]@ A
)]]A B
)]]B C
;]]C D
}^^ 	
}__ 
publicbb 

classbb 
KeyedFactorybb 
<bb 
TBasebb #
,bb# $
TKeybb% )
>bb) *
:bb+ ,
KeyedFactoryBasebb- =
<bb= >
TBasebb> C
,bbC D
TKeybbE I
>bbI J
{cc 
	protecteddd 
overridedd 
IEnumerabledd &
<dd& '
Typedd' +
>dd+ ,
ProvidedTypesdd- :
{ee 	
getff 
{ff 
returnff 
newff 
Typeff !
[ff! "
$numff" #
]ff# $
;ff$ %
}ff& '
}gg 	
publicii 
virtualii 
TBaseii 
Createii #
(ii# $
TKeyii$ (
keyii) ,
)ii, -
{jj 	
varkk 
typekk 
=kk 
GetTypeForKeykk $
(kk$ %
keykk% (
)kk( )
;kk) *
returnll 
(ll 
TBasell 
)ll 
	Containerll #
.ll# $
Instantiatell$ /
(ll/ 0
typell0 4
)ll4 5
;ll5 6
}mm 	
}nn 
publicqq 

classqq 
KeyedFactoryqq 
<qq 
TBaseqq #
,qq# $
TKeyqq% )
,qq) *
TParam1qq+ 2
>qq2 3
:qq4 5
KeyedFactoryBaseqq6 F
<qqF G
TBaseqqG L
,qqL M
TKeyqqN R
>qqR S
{rr 
	protectedss 
overridess 
IEnumerabless &
<ss& '
Typess' +
>ss+ ,
ProvidedTypesss- :
{tt 	
getuu 
{uu 
returnuu 
newuu 
[uu 
]uu 
{uu  
typeofuu! '
(uu' (
TParam1uu( /
)uu/ 0
}uu1 2
;uu2 3
}uu4 5
}vv 	
publicxx 
virtualxx 
TBasexx 
Createxx #
(xx# $
TKeyxx$ (
keyxx) ,
,xx, -
TParam1xx. 5
param1xx6 <
)xx< =
{yy 	
returnzz 
(zz 
TBasezz 
)zz 
	Containerzz #
.zz# $
InstantiateExplicitzz$ 7
(zz7 8
GetTypeForKey{{ 
({{ 
key{{ !
){{! "
,{{" #
new|| 
List|| 
<|| 
TypeValuePair|| &
>||& '
{}} 

InjectUtil~~ 
.~~ 
CreateTypePair~~ -
(~~- .
param1~~. 4
)~~4 5
} 
) 
; 
}
ÄÄ 	
}
ÅÅ 
public
ÑÑ 

class
ÑÑ 
KeyedFactory
ÑÑ 
<
ÑÑ 
TBase
ÑÑ #
,
ÑÑ# $
TKey
ÑÑ% )
,
ÑÑ) *
TParam1
ÑÑ+ 2
,
ÑÑ2 3
TParam2
ÑÑ4 ;
>
ÑÑ; <
:
ÑÑ= >
KeyedFactoryBase
ÑÑ? O
<
ÑÑO P
TBase
ÑÑP U
,
ÑÑU V
TKey
ÑÑW [
>
ÑÑ[ \
{
ÖÖ 
	protected
ÜÜ 
override
ÜÜ 
IEnumerable
ÜÜ &
<
ÜÜ& '
Type
ÜÜ' +
>
ÜÜ+ ,
ProvidedTypes
ÜÜ- :
{
áá 	
get
àà 
{
àà 
return
àà 
new
àà 
[
àà 
]
àà 
{
àà  
typeof
àà! '
(
àà' (
TParam1
àà( /
)
àà/ 0
,
àà0 1
typeof
àà2 8
(
àà8 9
TParam2
àà9 @
)
àà@ A
}
ààB C
;
ààC D
}
ààE F
}
ââ 	
public
ãã 
virtual
ãã 
TBase
ãã 
Create
ãã #
(
ãã# $
TKey
ãã$ (
key
ãã) ,
,
ãã, -
TParam1
ãã. 5
param1
ãã6 <
,
ãã< =
TParam2
ãã> E
param2
ããF L
)
ããL M
{
åå 	
return
çç 
(
çç 
TBase
çç 
)
çç 
	Container
çç #
.
çç# $!
InstantiateExplicit
çç$ 7
(
çç7 8
GetTypeForKey
éé 
(
éé 
key
éé !
)
éé! "
,
éé" #
new
èè 
List
èè 
<
èè 
TypeValuePair
èè &
>
èè& '
{
êê 

InjectUtil
ëë 
.
ëë 
CreateTypePair
ëë -
(
ëë- .
param1
ëë. 4
)
ëë4 5
,
ëë5 6

InjectUtil
íí 
.
íí 
CreateTypePair
íí -
(
íí- .
param2
íí. 4
)
íí4 5
}
ìì 
)
ìì 
;
ìì 
}
îî 	
}
ïï 
public
òò 

class
òò 
KeyedFactory
òò 
<
òò 
TBase
òò #
,
òò# $
TKey
òò% )
,
òò) *
TParam1
òò+ 2
,
òò2 3
TParam2
òò4 ;
,
òò; <
TParam3
òò= D
>
òòD E
:
òòF G
KeyedFactoryBase
òòH X
<
òòX Y
TBase
òòY ^
,
òò^ _
TKey
òò` d
>
òòd e
{
ôô 
	protected
öö 
override
öö 
IEnumerable
öö &
<
öö& '
Type
öö' +
>
öö+ ,
ProvidedTypes
öö- :
{
õõ 	
get
úú 
{
úú 
return
úú 
new
úú 
[
úú 
]
úú 
{
úú  
typeof
úú! '
(
úú' (
TParam1
úú( /
)
úú/ 0
,
úú0 1
typeof
úú2 8
(
úú8 9
TParam2
úú9 @
)
úú@ A
,
úúA B
typeof
úúC I
(
úúI J
TParam3
úúJ Q
)
úúQ R
}
úúS T
;
úúT U
}
úúV W
}
ùù 	
public
üü 
virtual
üü 
TBase
üü 
Create
üü #
(
üü# $
TKey
üü$ (
key
üü) ,
,
üü, -
TParam1
üü. 5
param1
üü6 <
,
üü< =
TParam2
üü> E
param2
üüF L
,
üüL M
TParam3
üüN U
param3
üüV \
)
üü\ ]
{
†† 	
return
°° 
(
°° 
TBase
°° 
)
°° 
	Container
°° #
.
°°# $!
InstantiateExplicit
°°$ 7
(
°°7 8
GetTypeForKey
¢¢ 
(
¢¢ 
key
¢¢ !
)
¢¢! "
,
¢¢" #
new
££ 
List
££ 
<
££ 
TypeValuePair
££ &
>
££& '
{
§§ 

InjectUtil
•• 
.
•• 
CreateTypePair
•• -
(
••- .
param1
••. 4
)
••4 5
,
••5 6

InjectUtil
¶¶ 
.
¶¶ 
CreateTypePair
¶¶ -
(
¶¶- .
param2
¶¶. 4
)
¶¶4 5
,
¶¶5 6

InjectUtil
ßß 
.
ßß 
CreateTypePair
ßß -
(
ßß- .
param3
ßß. 4
)
ßß4 5
}
®® 
)
®® 
;
®® 
}
©© 	
}
™™ 
public
≠≠ 

class
≠≠ 
KeyedFactory
≠≠ 
<
≠≠ 
TBase
≠≠ #
,
≠≠# $
TKey
≠≠% )
,
≠≠) *
TParam1
≠≠+ 2
,
≠≠2 3
TParam2
≠≠4 ;
,
≠≠; <
TParam3
≠≠= D
,
≠≠D E
TParam4
≠≠F M
>
≠≠M N
:
≠≠O P
KeyedFactoryBase
≠≠Q a
<
≠≠a b
TBase
≠≠b g
,
≠≠g h
TKey
≠≠i m
>
≠≠m n
{
ÆÆ 
	protected
ØØ 
override
ØØ 
IEnumerable
ØØ &
<
ØØ& '
Type
ØØ' +
>
ØØ+ ,
ProvidedTypes
ØØ- :
{
∞∞ 	
get
±± 
{
±± 
return
±± 
new
±± 
[
±± 
]
±± 
{
±±  
typeof
±±! '
(
±±' (
TParam1
±±( /
)
±±/ 0
,
±±0 1
typeof
±±2 8
(
±±8 9
TParam2
±±9 @
)
±±@ A
,
±±A B
typeof
±±C I
(
±±I J
TParam3
±±J Q
)
±±Q R
,
±±R S
typeof
±±T Z
(
±±Z [
TParam4
±±[ b
)
±±b c
}
±±d e
;
±±e f
}
±±g h
}
≤≤ 	
public
¥¥ 
virtual
¥¥ 
TBase
¥¥ 
Create
¥¥ #
(
¥¥# $
TKey
¥¥$ (
key
¥¥) ,
,
¥¥, -
TParam1
¥¥. 5
param1
¥¥6 <
,
¥¥< =
TParam2
¥¥> E
param2
¥¥F L
,
¥¥L M
TParam3
¥¥N U
param3
¥¥V \
,
¥¥\ ]
TParam4
¥¥^ e
param4
¥¥f l
)
¥¥l m
{
µµ 	
return
∂∂ 
(
∂∂ 
TBase
∂∂ 
)
∂∂ 
	Container
∂∂ #
.
∂∂# $!
InstantiateExplicit
∂∂$ 7
(
∂∂7 8
GetTypeForKey
∑∑ 
(
∑∑ 
key
∑∑ !
)
∑∑! "
,
∑∑" #
new
∏∏ 
List
∏∏ 
<
∏∏ 
TypeValuePair
∏∏ &
>
∏∏& '
{
ππ 

InjectUtil
∫∫ 
.
∫∫ 
CreateTypePair
∫∫ -
(
∫∫- .
param1
∫∫. 4
)
∫∫4 5
,
∫∫5 6

InjectUtil
ªª 
.
ªª 
CreateTypePair
ªª -
(
ªª- .
param2
ªª. 4
)
ªª4 5
,
ªª5 6

InjectUtil
ºº 
.
ºº 
CreateTypePair
ºº -
(
ºº- .
param3
ºº. 4
)
ºº4 5
,
ºº5 6

InjectUtil
ΩΩ 
.
ΩΩ 
CreateTypePair
ΩΩ -
(
ΩΩ- .
param4
ΩΩ. 4
)
ΩΩ4 5
}
ææ 
)
ææ 
;
ææ 
}
øø 	
}
¿¿ 
}¡¡ ´&
~C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\Pooling\MemoryPoolInitialSizeBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
MemoryPoolMaxSizeBinder (
<( )
	TContract) 2
>2 3
:4 5"
MemoryPoolExpandBinder6 L
<L M
	TContractM V
>V W
{ 
public #
MemoryPoolMaxSizeBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
,Y Z
MemoryPoolBindInfo[ m
poolBindInfon z
)z {
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
poolBindInfo= I
)I J
{		 	
}

 	
public "
MemoryPoolExpandBinder %
<% &
	TContract& /
>/ 0
WithMaxSize1 <
(< =
int= @
sizeA E
)E F
{ 	
MemoryPoolBindInfo 
. 
MaxSize &
=' (
size) -
;- .
return 
this 
; 
} 	
} 
[ 
NoReflectionBaking 
] 
public 

class .
"MemoryPoolInitialSizeMaxSizeBinder 3
<3 4
	TContract4 =
>= >
:? @#
MemoryPoolMaxSizeBinderA X
<X Y
	TContractY b
>b c
{ 
public .
"MemoryPoolInitialSizeMaxSizeBinder 1
(1 2
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
,Y Z
MemoryPoolBindInfo[ m
poolBindInfon z
)z {
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
poolBindInfo= I
)I J
{ 	
} 	
public #
MemoryPoolMaxSizeBinder &
<& '
	TContract' 0
>0 1
WithInitialSize2 A
(A B
intB E
sizeF J
)J K
{ 	
MemoryPoolBindInfo 
. 
InitialSize *
=+ ,
size- 1
;1 2
return 
this 
; 
}   	
public"" *
FactoryArgumentsToChoiceBinder"" -
<""- .
	TContract"". 7
>""7 8
WithFixedSize""9 F
(""F G
int""G J
size""K O
)""O P
{## 	
MemoryPoolBindInfo$$ 
.$$ 
InitialSize$$ *
=$$+ ,
size$$- 1
;$$1 2
MemoryPoolBindInfo%% 
.%% 
MaxSize%% &
=%%' (
size%%) -
;%%- .
MemoryPoolBindInfo&& 
.&& 
ExpandMethod&& +
=&&, -
PoolExpandMethods&&. ?
.&&? @
Disabled&&@ H
;&&H I
return'' 
this'' 
;'' 
}(( 	
})) 
[++ 
NoReflectionBaking++ 
]++ 
public,, 

class,, 0
$MemoryPoolIdInitialSizeMaxSizeBinder,, 5
<,,5 6
	TContract,,6 ?
>,,? @
:,,A B.
"MemoryPoolInitialSizeMaxSizeBinder,,C e
<,,e f
	TContract,,f o
>,,o p
{-- 
public.. 0
$MemoryPoolIdInitialSizeMaxSizeBinder.. 3
(..3 4
DiContainer// 
bindContainer// %
,//% &
BindInfo//' /
bindInfo//0 8
,//8 9
FactoryBindInfo//: I
factoryBindInfo//J Y
,//Y Z
MemoryPoolBindInfo//[ m
poolBindInfo//n z
)//z {
:00 
base00 
(00 
bindContainer00  
,00  !
bindInfo00" *
,00* +
factoryBindInfo00, ;
,00; <
poolBindInfo00= I
)00I J
{11 	
}22 	
public44 .
"MemoryPoolInitialSizeMaxSizeBinder44 1
<441 2
	TContract442 ;
>44; <
WithId44= C
(44C D
object44D J

identifier44K U
)44U V
{55 	
BindInfo66 
.66 

Identifier66 
=66  !

identifier66" ,
;66, -
return77 
this77 
;77 
}88 	
}99 
}:: ™4
[C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\GetterProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
GetterProvider 
<  
TObj  $
,$ %
TResult& -
>- .
:/ 0
	IProvider1 :
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
object 
_identifier #
;# $
readonly 
Func 
< 
TObj 
, 
TResult #
># $
_method% ,
;, -
readonly 
bool 
	_matchAll 
;  
readonly 
InjectSources 
_sourceType *
;* +
public 
GetterProvider 
( 
object 

identifier 
, 
Func #
<# $
TObj$ (
,( )
TResult* 1
>1 2
method3 9
,9 :
DiContainer 
	container !
,! "
InjectSources# 0

sourceType1 ;
,; <
bool= A
matchAllB J
)J K
{ 	

_container 
= 
	container "
;" #
_identifier 
= 

identifier $
;$ %
_method 
= 
method 
; 
	_matchAll 
= 
matchAll  
;  !
_sourceType 
= 

sourceType $
;$ %
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public   
bool   '
TypeVariesBasedOnMemberType   /
{!! 	
get"" 
{"" 
return"" 
false"" 
;"" 
}""  !
}## 	
public%% 
Type%% 
GetInstanceType%% #
(%%# $
InjectContext%%$ 1
context%%2 9
)%%9 :
{&& 	
return'' 
typeof'' 
('' 
TResult'' !
)''! "
;''" #
}(( 	
InjectContext** 
GetSubContext** #
(**# $
InjectContext**$ 1
parent**2 8
)**8 9
{++ 	
var,, 

subContext,, 
=,, 
parent,, #
.,,# $
CreateSubContext,,$ 4
(,,4 5
typeof-- 
(-- 
TObj-- 
)-- 
,-- 
_identifier-- )
)--) *
;--* +

subContext// 
.// 
Optional// 
=//  !
false//" '
;//' (

subContext00 
.00 

SourceType00 !
=00" #
_sourceType00$ /
;00/ 0
return22 

subContext22 
;22 
}33 	
public55 
void55 *
GetAllInstancesWithInjectSplit55 2
(552 3
InjectContext66 
context66 !
,66! "
List66# '
<66' (
TypeValuePair66( 5
>665 6
args667 ;
,66; <
out66= @
Action66A G
injectAction66H T
,66T U
List66V Z
<66Z [
object66[ a
>66a b
buffer66c i
)66i j
{77 	
Assert88 
.88 
IsEmpty88 
(88 
args88 
)88  
;88  !
Assert99 
.99 
	IsNotNull99 
(99 
context99 $
)99$ %
;99% &
Assert;; 
.;; 
That;; 
(;; 
typeof;; 
(;; 
TResult;; &
);;& '
.;;' (
DerivesFromOrEqual;;( :
(;;: ;
context;;; B
.;;B C

MemberType;;C M
);;M N
);;N O
;;;O P
injectAction== 
=== 
null== 
;==  
if?? 
(?? 

_container?? 
.?? 
IsValidating?? '
)??' (
{@@ 
ifBB 
(BB 
	_matchAllBB 
)BB 
{CC 

_containerDD 
.DD 

ResolveAllDD )
(DD) *
GetSubContextDD* 7
(DD7 8
contextDD8 ?
)DD? @
)DD@ A
;DDA B
}EE 
elseFF 
{GG 

_containerHH 
.HH 
ResolveHH &
(HH& '
GetSubContextHH' 4
(HH4 5
contextHH5 <
)HH< =
)HH= >
;HH> ?
}II 
bufferKK 
.KK 
AddKK 
(KK 
newKK 
ValidationMarkerKK /
(KK/ 0
typeofKK0 6
(KK6 7
TResultKK7 >
)KK> ?
)KK? @
)KK@ A
;KKA B
returnLL 
;LL 
}MM 
ifOO 
(OO 
	_matchAllOO 
)OO 
{PP 
AssertQQ 
.QQ 
ThatQQ 
(QQ 
bufferQQ "
.QQ" #
CountQQ# (
==QQ) +
$numQQ, -
)QQ- .
;QQ. /

_containerRR 
.RR 

ResolveAllRR %
(RR% &
GetSubContextRR& 3
(RR3 4
contextRR4 ;
)RR; <
,RR< =
bufferRR> D
)RRD E
;RRE F
forTT 
(TT 
intTT 
iTT 
=TT 
$numTT 
;TT 
iTT  !
<TT" #
bufferTT$ *
.TT* +
CountTT+ 0
;TT0 1
iTT2 3
++TT3 5
)TT5 6
{UU 
bufferVV 
[VV 
iVV 
]VV 
=VV 
_methodVV  '
(VV' (
(VV( )
TObjVV) -
)VV- .
bufferVV. 4
[VV4 5
iVV5 6
]VV6 7
)VV7 8
;VV8 9
}WW 
}XX 
elseYY 
{ZZ 
buffer[[ 
.[[ 
Add[[ 
([[ 
_method[[ "
([[" #
(\\ 
TObj\\ 
)\\ 

_container\\ $
.\\$ %
Resolve\\% ,
(\\, -
GetSubContext\\- :
(\\: ;
context\\; B
)\\B C
)\\C D
)\\D E
)\\E F
;\\F G
}]] 
}^^ 	
}__ 
}`` ‚ô
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindingUtil.cs
	namespace 	
Zenject
 
{ 
internal 
static 
class 
BindingUtil %
{ 
public 
static 
void 
AssertIsValidPrefab .
(. /
UnityEngine/ :
.: ;
Object; A
prefabB H
)H I
{ 	
Assert 
. 
That 
( 
! 
ZenUtilInternal (
.( )
IsNull) /
(/ 0
prefab0 6
)6 7
,7 8
$str9 c
)c d
;d e
}%% 	
public** 
static** 
void** #
AssertIsValidGameObject** 2
(**2 3

GameObject**3 =

gameObject**> H
)**H I
{++ 	
Assert,, 
.,, 
That,, 
(,, 
!,, 
ZenUtilInternal,, (
.,,( )
IsNull,,) /
(,,/ 0

gameObject,,0 :
),,: ;
,,,; <
$str,,= l
),,l m
;,,m n
}44 	
public99 
static99 
void99  
AssertIsNotComponent99 /
(99/ 0
IEnumerable990 ;
<99; <
Type99< @
>99@ A
types99B G
)99G H
{:: 	
foreach;; 
(;; 
var;; 
type;; 
in;;  
types;;! &
);;& '
{<<  
AssertIsNotComponent== $
(==$ %
type==% )
)==) *
;==* +
}>> 
}?? 	
publicDD 
staticDD 
voidDD  
AssertIsNotComponentDD /
<DD/ 0
TDD0 1
>DD1 2
(DD2 3
)DD3 4
{EE 	 
AssertIsNotComponentFF  
(FF  !
typeofFF! '
(FF' (
TFF( )
)FF) *
)FF* +
;FF+ ,
}GG 	
publicLL 
staticLL 
voidLL  
AssertIsNotComponentLL /
(LL/ 0
TypeLL0 4
typeLL5 9
)LL9 :
{MM 	
AssertNN 
.NN 
ThatNN 
(NN 
!NN 
typeNN 
.NN 
DerivesFromNN )
(NN) *
typeofNN* 0
(NN0 1
	ComponentNN1 :
)NN: ;
)NN; <
,NN< =
$strOO w
,OOw x
typeOOy }
)OO} ~
;OO~ 
}PP 	
publicUU 
staticUU 
voidUU (
AssertDerivesFromUnityObjectUU 7
(UU7 8
IEnumerableUU8 C
<UUC D
TypeUUD H
>UUH I
typesUUJ O
)UUO P
{VV 	
foreachWW 
(WW 
varWW 
typeWW 
inWW  
typesWW! &
)WW& '
{XX (
AssertDerivesFromUnityObjectYY ,
(YY, -
typeYY- 1
)YY1 2
;YY2 3
}ZZ 
}[[ 	
public`` 
static`` 
void`` (
AssertDerivesFromUnityObject`` 7
<``7 8
T``8 9
>``9 :
(``: ;
)``; <
{aa 	(
AssertDerivesFromUnityObjectbb (
(bb( )
typeofbb) /
(bb/ 0
Tbb0 1
)bb1 2
)bb2 3
;bb3 4
}cc 	
publichh 
statichh 
voidhh (
AssertDerivesFromUnityObjecthh 7
(hh7 8
Typehh8 <
typehh= A
)hhA B
{ii 	
Assertjj 
.jj 
Thatjj 
(jj 
typejj 
.jj 
DerivesFromjj (
<jj( )
UnityEnginejj) 4
.jj4 5
Objectjj5 ;
>jj; <
(jj< =
)jj= >
,jj> ?
$strkk p
,kkp q
typekkr v
)kkv w
;kkw x
}ll 	
publicqq 
staticqq 
voidqq '
AssertTypesAreNotComponentsqq 6
(qq6 7
IEnumerableqq7 B
<qqB C
TypeqqC G
>qqG H
typesqqI N
)qqN O
{rr 	
foreachss 
(ss 
varss 
typess 
inss  
typesss! &
)ss& '
{tt  
AssertIsNotComponentuu $
(uu$ %
typeuu% )
)uu) *
;uu* +
}vv 
}ww 	
public|| 
static|| 
void|| %
AssertIsValidResourcePath|| 4
(||4 5
string||5 ;
resourcePath||< H
)||H I
{}} 	
Assert~~ 
.~~ 
That~~ 
(~~ 
!~~ 
string~~ 
.~~  
IsNullOrEmpty~~  -
(~~- .
resourcePath~~. :
)~~: ;
,~~; <
$str~~= c
)~~c d
;~~d e
}
ÇÇ 	
public
áá 
static
áá 
void
áá 1
#AssertIsInterfaceOrScriptableObject
áá >
(
áá> ?
IEnumerable
áá? J
<
ááJ K
Type
ááK O
>
ááO P
types
ááQ V
)
ááV W
{
àà 	
foreach
ââ 
(
ââ 
var
ââ 
type
ââ 
in
ââ  
types
ââ! &
)
ââ& '
{
ää 1
#AssertIsInterfaceOrScriptableObject
ãã 3
(
ãã3 4
type
ãã4 8
)
ãã8 9
;
ãã9 :
}
åå 
}
çç 	
public
íí 
static
íí 
void
íí 1
#AssertIsInterfaceOrScriptableObject
íí >
<
íí> ?
T
íí? @
>
íí@ A
(
ííA B
)
ííB C
{
ìì 	1
#AssertIsInterfaceOrScriptableObject
îî /
(
îî/ 0
typeof
îî0 6
(
îî6 7
T
îî7 8
)
îî8 9
)
îî9 :
;
îî: ;
}
ïï 	
public
öö 
static
öö 
void
öö 1
#AssertIsInterfaceOrScriptableObject
öö >
(
öö> ?
Type
öö? C
type
ööD H
)
ööH I
{
õõ 	
Assert
úú 
.
úú 
That
úú 
(
úú 
type
úú 
.
úú 
DerivesFrom
úú (
(
úú( )
typeof
úú) /
(
úú/ 0
ScriptableObject
úú0 @
)
úú@ A
)
úúA B
||
úúC E
type
úúF J
.
úúJ K
IsInterface
úúK V
(
úúV W
)
úúW X
,
úúX Y
$strùù î
,ùùî ï
typeùùñ ö
)ùùö õ
;ùùõ ú
}
ûû 	
public
££ 
static
££ 
void
££ *
AssertIsInterfaceOrComponent
££ 7
(
££7 8
IEnumerable
££8 C
<
££C D
Type
££D H
>
££H I
types
££J O
)
££O P
{
§§ 	
foreach
•• 
(
•• 
var
•• 
type
•• 
in
••  
types
••! &
)
••& '
{
¶¶ *
AssertIsInterfaceOrComponent
ßß ,
(
ßß, -
type
ßß- 1
)
ßß1 2
;
ßß2 3
}
®® 
}
©© 	
public
ÆÆ 
static
ÆÆ 
void
ÆÆ *
AssertIsInterfaceOrComponent
ÆÆ 7
<
ÆÆ7 8
T
ÆÆ8 9
>
ÆÆ9 :
(
ÆÆ: ;
)
ÆÆ; <
{
ØØ 	*
AssertIsInterfaceOrComponent
∞∞ (
(
∞∞( )
typeof
∞∞) /
(
∞∞/ 0
T
∞∞0 1
)
∞∞1 2
)
∞∞2 3
;
∞∞3 4
}
±± 	
public
∂∂ 
static
∂∂ 
void
∂∂ *
AssertIsInterfaceOrComponent
∂∂ 7
(
∂∂7 8
Type
∂∂8 <
type
∂∂= A
)
∂∂A B
{
∑∑ 	
Assert
∏∏ 
.
∏∏ 
That
∏∏ 
(
∏∏ 
type
∏∏ 
.
∏∏ 
DerivesFrom
∏∏ (
(
∏∏( )
typeof
∏∏) /
(
∏∏/ 0
	Component
∏∏0 9
)
∏∏9 :
)
∏∏: ;
||
∏∏< >
type
∏∏? C
.
∏∏C D
IsInterface
∏∏D O
(
∏∏O P
)
∏∏P Q
,
∏∏Q R
$strππ ç
,ππç é
typeππè ì
)ππì î
;ππî ï
}
∫∫ 	
public
øø 
static
øø 
void
øø 
AssertIsComponent
øø ,
(
øø, -
IEnumerable
øø- 8
<
øø8 9
Type
øø9 =
>
øø= >
types
øø? D
)
øøD E
{
¿¿ 	
foreach
¡¡ 
(
¡¡ 
var
¡¡ 
type
¡¡ 
in
¡¡  
types
¡¡! &
)
¡¡& '
{
¬¬ 
AssertIsComponent
√√ !
(
√√! "
type
√√" &
)
√√& '
;
√√' (
}
ƒƒ 
}
≈≈ 	
public
   
static
   
void
   
AssertIsComponent
   ,
<
  , -
T
  - .
>
  . /
(
  / 0
)
  0 1
{
ÀÀ 	
AssertIsComponent
ÃÃ 
(
ÃÃ 
typeof
ÃÃ $
(
ÃÃ$ %
T
ÃÃ% &
)
ÃÃ& '
)
ÃÃ' (
;
ÃÃ( )
}
ÕÕ 	
public
““ 
static
““ 
void
““ 
AssertIsComponent
““ ,
(
““, -
Type
““- 1
type
““2 6
)
““6 7
{
”” 	
Assert
‘‘ 
.
‘‘ 
That
‘‘ 
(
‘‘ 
type
‘‘ 
.
‘‘ 
DerivesFrom
‘‘ (
(
‘‘( )
typeof
‘‘) /
(
‘‘/ 0
	Component
‘‘0 9
)
‘‘9 :
)
‘‘: ;
,
‘‘; <
$str
’’ s
,
’’s t
type
’’u y
)
’’y z
;
’’z {
}
÷÷ 	
public
ÏÏ 
static
ÏÏ 
void
ÏÏ '
AssertTypesAreNotAbstract
ÏÏ 4
(
ÏÏ4 5
IEnumerable
ÏÏ5 @
<
ÏÏ@ A
Type
ÏÏA E
>
ÏÏE F
types
ÏÏG L
)
ÏÏL M
{
ÌÌ 	
foreach
ÓÓ 
(
ÓÓ 
var
ÓÓ 
type
ÓÓ 
in
ÓÓ  
types
ÓÓ! &
)
ÓÓ& '
{
ÔÔ !
AssertIsNotAbstract
 #
(
# $
type
$ (
)
( )
;
) *
}
ÒÒ 
}
ÚÚ 	
public
˜˜ 
static
˜˜ 
void
˜˜ !
AssertIsNotAbstract
˜˜ .
(
˜˜. /
IEnumerable
˜˜/ :
<
˜˜: ;
Type
˜˜; ?
>
˜˜? @
types
˜˜A F
)
˜˜F G
{
¯¯ 	
foreach
˘˘ 
(
˘˘ 
var
˘˘ 
type
˘˘ 
in
˘˘  
types
˘˘! &
)
˘˘& '
{
˙˙ !
AssertIsNotAbstract
˚˚ #
(
˚˚# $
type
˚˚$ (
)
˚˚( )
;
˚˚) *
}
¸¸ 
}
˝˝ 	
public
ÇÇ 
static
ÇÇ 
void
ÇÇ !
AssertIsNotAbstract
ÇÇ .
<
ÇÇ. /
T
ÇÇ/ 0
>
ÇÇ0 1
(
ÇÇ1 2
)
ÇÇ2 3
{
ÉÉ 	!
AssertIsNotAbstract
ÑÑ 
(
ÑÑ  
typeof
ÑÑ  &
(
ÑÑ& '
T
ÑÑ' (
)
ÑÑ( )
)
ÑÑ) *
;
ÑÑ* +
}
ÖÖ 	
public
ää 
static
ää 
void
ää !
AssertIsNotAbstract
ää .
(
ää. /
Type
ää/ 3
type
ää4 8
)
ää8 9
{
ãã 	
Assert
åå 
.
åå 
That
åå 
(
åå 
!
åå 
type
åå 
.
åå 

IsAbstract
åå (
(
åå( )
)
åå) *
,
åå* +
$str
çç b
,
ççb c
type
ççd h
)
ççh i
;
ççi j
}
éé 	
public
ìì 
static
ìì 
void
ìì %
AssertIsDerivedFromType
ìì 2
(
ìì2 3
Type
ìì3 7
concreteType
ìì8 D
,
ììD E
Type
ììF J

parentType
ììK U
)
ììU V
{
îî 	
Assert
òò 
.
òò 
That
òò 
(
òò 

parentType
òò "
.
òò" #
IsOpenGenericType
òò# 4
(
òò4 5
)
òò5 6
==
òò7 9
concreteType
òò: F
.
òòF G
IsOpenGenericType
òòG X
(
òòX Y
)
òòY Z
,
òòZ [
$strôô ú
,ôôú ù

parentTypeôôû ®
,ôô® ©
concreteTypeôô™ ∂
)ôô∂ ∑
;ôô∑ ∏
if
õõ 
(
õõ 

parentType
õõ 
.
õõ 
IsOpenGenericType
õõ ,
(
õõ, -
)
õõ- .
)
õõ. /
{
úú 
Assert
ùù 
.
ùù 
That
ùù 
(
ùù 
concreteType
ùù (
.
ùù( )
IsOpenGenericType
ùù) :
(
ùù: ;
)
ùù; <
)
ùù< =
;
ùù= >
Assert
ûû 
.
ûû 
That
ûû 
(
ûû 
TypeExtensions
ûû *
.
ûû* +'
IsAssignableToGenericType
ûû+ D
(
ûûD E
concreteType
ûûE Q
,
ûûQ R

parentType
ûûS ]
)
ûû] ^
,
ûû^ _
$strüü Ü
,üüÜ á
concreteTypeüüà î
,üüî ï

parentTypeüüñ †
)üü† °
;üü° ¢
}
†† 
else
°° 
{
££ 
Assert
§§ 
.
§§ 
That
§§ 
(
§§ 
concreteType
§§ (
.
§§( ) 
DerivesFromOrEqual
§§) ;
(
§§; <

parentType
§§< F
)
§§F G
,
§§G H
$str
•• l
,
••l m
concreteType
••n z
,
••z {

parentType••| Ü
)••Ü á
;••á à
}
¶¶ 
}
ßß 	
public
¨¨ 
static
¨¨ 
void
¨¨ .
 AssertConcreteTypeListIsNotEmpty
¨¨ ;
(
¨¨; <
IEnumerable
¨¨< G
<
¨¨G H
Type
¨¨H L
>
¨¨L M
concreteTypes
¨¨N [
)
¨¨[ \
{
≠≠ 	
Assert
ÆÆ 
.
ÆÆ 
That
ÆÆ 
(
ÆÆ 
concreteTypes
ÆÆ %
.
ÆÆ% &
Count
ÆÆ& +
(
ÆÆ+ ,
)
ÆÆ, -
>=
ÆÆ. 0
$num
ÆÆ1 2
,
ÆÆ2 3
$str
ØØ O
)
ØØO P
;
ØØP Q
}
∞∞ 	
public
µµ 
static
µµ 
void
µµ &
AssertIsDerivedFromTypes
µµ 3
(
µµ3 4
IEnumerable
∂∂ 
<
∂∂ 
Type
∂∂ 
>
∂∂ 
concreteTypes
∂∂ +
,
∂∂+ ,
IEnumerable
∂∂- 8
<
∂∂8 9
Type
∂∂9 =
>
∂∂= >
parentTypes
∂∂? J
,
∂∂J K"
InvalidBindResponses
∂∂L `!
invalidBindResponse
∂∂a t
)
∂∂t u
{
∑∑ 	
if
∏∏ 
(
∏∏ !
invalidBindResponse
∏∏ #
==
∏∏$ &"
InvalidBindResponses
∏∏' ;
.
∏∏; <
Assert
∏∏< B
)
∏∏B C
{
ππ &
AssertIsDerivedFromTypes
∫∫ (
(
∫∫( )
concreteTypes
∫∫) 6
,
∫∫6 7
parentTypes
∫∫8 C
)
∫∫C D
;
∫∫D E
}
ªª 
else
ºº 
{
ΩΩ 
Assert
ææ 
.
ææ 
IsEqual
ææ 
(
ææ !
invalidBindResponse
ææ 2
,
ææ2 3"
InvalidBindResponses
ææ4 H
.
ææH I
Skip
ææI M
)
ææM N
;
ææN O
}
øø 
}
¿¿ 	
public
≈≈ 
static
≈≈ 
void
≈≈ &
AssertIsDerivedFromTypes
≈≈ 3
(
≈≈3 4
IEnumerable
≈≈4 ?
<
≈≈? @
Type
≈≈@ D
>
≈≈D E
concreteTypes
≈≈F S
,
≈≈S T
IEnumerable
≈≈U `
<
≈≈` a
Type
≈≈a e
>
≈≈e f
parentTypes
≈≈g r
)
≈≈r s
{
∆∆ 	
foreach
«« 
(
«« 
var
«« 
concreteType
«« %
in
««& (
concreteTypes
««) 6
)
««6 7
{
»» &
AssertIsDerivedFromTypes
…… (
(
……( )
concreteType
……) 5
,
……5 6
parentTypes
……7 B
)
……B C
;
……C D
}
   
}
ÀÀ 	
public
–– 
static
–– 
void
–– &
AssertIsDerivedFromTypes
–– 3
(
––3 4
Type
––4 8
concreteType
––9 E
,
––E F
IEnumerable
––G R
<
––R S
Type
––S W
>
––W X
parentTypes
––Y d
)
––d e
{
—— 	
foreach
““ 
(
““ 
var
““ 

parentType
““ #
in
““$ &
parentTypes
““' 2
)
““2 3
{
”” %
AssertIsDerivedFromType
‘‘ '
(
‘‘' (
concreteType
‘‘( 4
,
‘‘4 5

parentType
‘‘6 @
)
‘‘@ A
;
‘‘A B
}
’’ 
}
÷÷ 	
public
€€ 
static
€€ 
void
€€ .
 AssertInstanceDerivesFromOrEqual
€€ ;
(
€€; <
object
€€< B
instance
€€C K
,
€€K L
IEnumerable
€€M X
<
€€X Y
Type
€€Y ]
>
€€] ^
parentTypes
€€_ j
)
€€j k
{
‹‹ 	
if
›› 
(
›› 
!
›› 
ZenUtilInternal
››  
.
››  !
IsNull
››! '
(
››' (
instance
››( 0
)
››0 1
)
››1 2
{
ﬁﬁ 
foreach
ﬂﬂ 
(
ﬂﬂ 
var
ﬂﬂ 
baseType
ﬂﬂ %
in
ﬂﬂ& (
parentTypes
ﬂﬂ) 4
)
ﬂﬂ4 5
{
‡‡ .
 AssertInstanceDerivesFromOrEqual
·· 4
(
··4 5
instance
··5 =
,
··= >
baseType
··? G
)
··G H
;
··H I
}
‚‚ 
}
„„ 
}
‰‰ 	
public
ÈÈ 
static
ÈÈ 
void
ÈÈ .
 AssertInstanceDerivesFromOrEqual
ÈÈ ;
(
ÈÈ; <
object
ÈÈ< B
instance
ÈÈC K
,
ÈÈK L
Type
ÈÈM Q
baseType
ÈÈR Z
)
ÈÈZ [
{
ÍÍ 	
if
ÎÎ 
(
ÎÎ 
!
ÎÎ 
ZenUtilInternal
ÎÎ  
.
ÎÎ  !
IsNull
ÎÎ! '
(
ÎÎ' (
instance
ÎÎ( 0
)
ÎÎ0 1
)
ÎÎ1 2
{
ÏÏ 
Assert
ÌÌ 
.
ÌÌ 
That
ÌÌ 
(
ÌÌ 
instance
ÌÌ $
.
ÌÌ$ %
GetType
ÌÌ% ,
(
ÌÌ, -
)
ÌÌ- .
.
ÌÌ. / 
DerivesFromOrEqual
ÌÌ/ A
(
ÌÌA B
baseType
ÌÌB J
)
ÌÌJ K
,
ÌÌK L
$str
ÓÓ l
,
ÓÓl m
instance
ÓÓn v
.
ÓÓv w
GetType
ÓÓw ~
(
ÓÓ~ 
)ÓÓ Ä
,ÓÓÄ Å
baseTypeÓÓÇ ä
)ÓÓä ã
;ÓÓã å
}
ÔÔ 
}
 	
public
ÚÚ 
static
ÚÚ 
	IProvider
ÚÚ "
CreateCachedProvider
ÚÚ  4
(
ÚÚ4 5
	IProvider
ÚÚ5 >
creator
ÚÚ? F
)
ÚÚF G
{
ÛÛ 	
if
ÙÙ 
(
ÙÙ 
creator
ÙÙ 
.
ÙÙ )
TypeVariesBasedOnMemberType
ÙÙ 3
)
ÙÙ3 4
{
ıı 
return
ˆˆ 
new
ˆˆ $
CachedOpenTypeProvider
ˆˆ 1
(
ˆˆ1 2
creator
ˆˆ2 9
)
ˆˆ9 :
;
ˆˆ: ;
}
˜˜ 
return
˘˘ 
new
˘˘ 
CachedProvider
˘˘ %
(
˘˘% &
creator
˘˘& -
)
˘˘- .
;
˘˘. /
}
˙˙ 	
}
˚˚ 
}¸¸ Ù 
jC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodMultipleProviderUntyped.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class )
MethodMultipleProviderUntyped .
:/ 0
	IProvider1 :
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
Func 
< 
InjectContext #
,# $
IEnumerable% 0
<0 1
object1 7
>7 8
>8 9
_method: A
;A B
public )
MethodMultipleProviderUntyped ,
(, -
Func 
< 
InjectContext 
, 
IEnumerable  +
<+ ,
object, 2
>2 3
>3 4
method5 ;
,; <
DiContainer 
	container !
)! "
{ 	

_container 
= 
	container "
;" #
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{   	
return!! 
context!! 
.!! 

MemberType!! %
;!!% &
}"" 	
public$$ 
void$$ *
GetAllInstancesWithInjectSplit$$ 2
($$2 3
InjectContext%% 
context%% !
,%%! "
List%%# '
<%%' (
TypeValuePair%%( 5
>%%5 6
args%%7 ;
,%%; <
out%%= @
Action%%A G
injectAction%%H T
,%%T U
List%%V Z
<%%Z [
object%%[ a
>%%a b
buffer%%c i
)%%i j
{&& 	
Assert'' 
.'' 
IsEmpty'' 
('' 
args'' 
)''  
;''  !
Assert(( 
.(( 
	IsNotNull(( 
((( 
context(( $
)(($ %
;((% &
injectAction** 
=** 
null** 
;**  
if++ 
(++ 

_container++ 
.++ 
IsValidating++ '
&&++( *
!+++ ,
TypeAnalyzer++, 8
.++8 9'
ShouldAllowDuringValidation++9 T
(++T U
context++U \
.++\ ]

MemberType++] g
)++g h
)++h i
{,, 
buffer-- 
.-- 
Add-- 
(-- 
new-- 
ValidationMarker-- /
(--/ 0
context--0 7
.--7 8

MemberType--8 B
)--B C
)--C D
;--D E
}.. 
else// 
{00 
var11 
result11 
=11 
_method11 $
(11$ %
context11% ,
)11, -
;11- .
if33 
(33 
result33 
==33 
null33 "
)33" #
{44 
throw55 
Assert55  
.55  !
CreateException55! 0
(550 1
$str66 `
,66` a
_method77 
.77  
ToDebugString77  -
(77- .
)77. /
,77/ 0
context771 8
.778 9 
GetObjectGraphString779 M
(77M N
)77N O
)77O P
;77P Q
}88 
foreach:: 
(:: 
var:: 
obj::  
in::! #
result::$ *
)::* +
{;; 
buffer<< 
.<< 
Add<< 
(<< 
obj<< "
)<<" #
;<<# $
}== 
}>> 
}?? 	
}@@ 
}AA ë
yC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\GameObjectProviders\PrefabGameObjectProvider.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 $
PrefabGameObjectProvider

 )
:

* +
	IProvider

, 5
{ 
readonly 
IPrefabInstantiator $
_prefabCreator% 3
;3 4
public $
PrefabGameObjectProvider '
(' (
IPrefabInstantiator 
prefabCreator  -
)- .
{ 	
_prefabCreator 
= 
prefabCreator *
;* +
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{ 	
return   
typeof   
(   

GameObject   $
)  $ %
;  % &
}!! 	
public## 
void## *
GetAllInstancesWithInjectSplit## 2
(##2 3
InjectContext$$ 
context$$ !
,$$! "
List$$# '
<$$' (
TypeValuePair$$( 5
>$$5 6
args$$7 ;
,$$; <
out$$= @
Action$$A G
injectAction$$H T
,$$T U
List$$V Z
<$$Z [
object$$[ a
>$$a b
buffer$$c i
)$$i j
{%% 	
var&& 
instance&& 
=&& 
_prefabCreator&& )
.&&) *
Instantiate&&* 5
(&&5 6
context&&6 =
,&&= >
args&&? C
,&&C D
out&&E H
injectAction&&I U
)&&U V
;&&V W
buffer(( 
.(( 
Add(( 
((( 
instance(( 
)((  
;((  !
})) 	
}** 
}++ ƒ
ÑC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\InstantiateOnPrefabComponentProvider.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 0
$InstantiateOnPrefabComponentProvider

 5
:

6 7
	IProvider

8 A
{ 
readonly 
IPrefabInstantiator $
_prefabInstantiator% 8
;8 9
readonly 
Type 
_componentType $
;$ %
public 0
$InstantiateOnPrefabComponentProvider 3
(3 4
Type 
componentType 
, 
IPrefabInstantiator 
prefabInstantiator  2
)2 3
{ 	
_prefabInstantiator 
=  !
prefabInstantiator" 4
;4 5
_componentType 
= 
componentType *
;* +
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
}   	
public"" 
Type"" 
GetInstanceType"" #
(""# $
InjectContext""$ 1
context""2 9
)""9 :
{## 	
return$$ 
_componentType$$ !
;$$! "
}%% 	
public'' 
void'' *
GetAllInstancesWithInjectSplit'' 2
(''2 3
InjectContext(( 
context(( !
,((! "
List((# '
<((' (
TypeValuePair((( 5
>((5 6
args((7 ;
,((; <
out((= @
Action((A G
injectAction((H T
,((T U
List((V Z
<((Z [
object(([ a
>((a b
buffer((c i
)((i j
{)) 	
Assert** 
.** 
	IsNotNull** 
(** 
context** $
)**$ %
;**% &
var,, 

gameObject,, 
=,, 
_prefabInstantiator,, 0
.,,0 1
Instantiate,,1 <
(,,< =
context,,= D
,,,D E
args,,F J
,,,J K
out,,L O
injectAction,,P \
),,\ ]
;,,] ^
var.. 
	component.. 
=.. 

gameObject.. &
...& '
AddComponent..' 3
(..3 4
_componentType..4 B
)..B C
;..C D
buffer00 
.00 
Add00 
(00 
	component00  
)00  !
;00! "
}11 	
}22 
}33 ﬂå
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder4.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
TParam2, 3
,3 4
TParam35 <
,< =
TParam4> E
,E F
	TContractG P
>P Q
:R S!
FactoryFromBinderBaseT i
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func 
< 
DiContainer 
, 
TParam1 %
,% &
TParam2' .
,. /
TParam30 7
,7 8
TParam49 @
,@ A
	TContractB K
>K L
methodM S
)S T
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
TParam2H O
,O P
TParam3Q X
,X Y
TParam4Z a
,a b
	TContractc l
>l m
(m n
methodn t
)t u
;u v
return 
this 
; 
} 	
public   &
ConditionCopyNonLazyBinder   )
FromFactory  * 5
<  5 6
TSubFactory  6 A
>  A B
(  B C
)  C D
where!! 
TSubFactory!! 
:!! 
IFactory!!  (
<!!( )
TParam1!!) 0
,!!0 1
TParam2!!2 9
,!!9 :
TParam3!!; B
,!!B C
TParam4!!D K
,!!K L
	TContract!!M V
>!!V W
{"" 	
return## 
this## 
.## 
FromIFactory## $
(##$ %
x##% &
=>##' )
x##* +
.##+ ,
To##, .
<##. /
TSubFactory##/ :
>##: ;
(##; <
)##< =
.##= >
AsCached##> F
(##F G
)##G H
)##H I
;##I J
}$$ 	
public&& %
FactorySubContainerBinder&& (
<&&( )
TParam1&&) 0
,&&0 1
TParam2&&2 9
,&&9 :
TParam3&&; B
,&&B C
TParam4&&D K
,&&K L
	TContract&&M V
>&&V W#
FromSubContainerResolve&&X o
(&&o p
)&&p q
{'' 	
return(( #
FromSubContainerResolve(( *
(((* +
null((+ /
)((/ 0
;((0 1
})) 	
public++ %
FactorySubContainerBinder++ (
<++( )
TParam1++) 0
,++0 1
TParam2++2 9
,++9 :
TParam3++; B
,++B C
TParam4++D K
,++K L
	TContract++M V
>++V W#
FromSubContainerResolve++X o
(++o p
object++p v
subIdentifier	++w Ñ
)
++Ñ Ö
{,, 	
return-- 
new-- %
FactorySubContainerBinder-- 0
<--0 1
TParam1--1 8
,--8 9
TParam2--: A
,--A B
TParam3--C J
,--J K
TParam4--L S
,--S T
	TContract--U ^
>--^ _
(--_ `
BindContainer.. 
,.. 
BindInfo.. '
,..' (
FactoryBindInfo..) 8
,..8 9
subIdentifier..: G
)..G H
;..H I
}// 	
}00 
public44 

static44 
class44 (
FactoryFromBinder4Extensions44 4
{55 
public66 
static66 )
ArgConditionCopyNonLazyBinder66 3
FromIFactory664 @
<66@ A
TParam166A H
,66H I
TParam266J Q
,66Q R
TParam366S Z
,66Z [
TParam466\ c
,66c d
	TContract66e n
>66n o
(66o p
this77 
FactoryFromBinder77 "
<77" #
TParam177# *
,77* +
TParam277, 3
,773 4
TParam3775 <
,77< =
TParam477> E
,77E F
	TContract77G P
>77P Q

fromBinder77R \
,77\ ]
Action88 
<88 !
ConcreteBinderGeneric88 (
<88( )
IFactory88) 1
<881 2
TParam1882 9
,889 :
TParam288; B
,88B C
TParam388D K
,88K L
TParam488M T
,88T U
	TContract88V _
>88_ `
>88` a
>88a b 
factoryBindGenerator88c w
)88w x
{99 	
Guid:: 
	factoryId:: 
;::  
factoryBindGenerator;;  
(;;  !

fromBinder<< 
.<<  
CreateIFactoryBinder<< /
<<</ 0
IFactory<<0 8
<<<8 9
TParam1<<9 @
,<<@ A
TParam2<<B I
,<<I J
TParam3<<K R
,<<R S
TParam4<<T [
,<<[ \
	TContract<<] f
><<f g
><<g h
(<<h i
out<<i l
	factoryId<<m v
)<<v w
)<<w x
;<<x y

fromBinder>> 
.>> 
ProviderFunc>> #
=>>$ %
(?? 
	container?? 
)?? 
=>?? 
{??  
return??! '
new??( +
IFactoryProvider??, <
<??< =
TParam1??= D
,??D E
TParam2??F M
,??M N
TParam3??O V
,??V W
TParam4??X _
,??_ `
	TContract??a j
>??j k
(??k l
	container??l u
,??u v
	factoryId	??w Ä
)
??Ä Å
;
??Å Ç
}
??É Ñ
;
??Ñ Ö
returnAA 
newAA )
ArgConditionCopyNonLazyBinderAA 4
(AA4 5

fromBinderAA5 ?
.AA? @
BindInfoAA@ H
)AAH I
;AAI J
}BB 	
publicDD 
staticDD )
ArgConditionCopyNonLazyBinderDD 3"
FromPoolableMemoryPoolDD4 J
<DDJ K
TParam1DDK R
,DDR S
TParam2DDT [
,DD[ \
TParam3DD] d
,DDd e
TParam4DDf m
,DDm n
	TContractDDo x
>DDx y
(DDy z
thisEE 
FactoryFromBinderEE "
<EE" #
TParam1EE# *
,EE* +
TParam2EE, 3
,EE3 4
TParam3EE5 <
,EE< =
TParam4EE> E
,EEE F
	TContractEEG P
>EEP Q

fromBinderEER \
)EE\ ]
whereHH 
	TContractHH 
:HH 
	IPoolableHH '
<HH' (
TParam1HH( /
,HH/ 0
TParam2HH1 8
,HH8 9
TParam3HH: A
,HHA B
TParam4HHC J
,HHJ K
IMemoryPoolHHL W
>HHW X
{II 	
returnJJ 

fromBinderJJ 
.JJ "
FromPoolableMemoryPoolJJ 4
<JJ4 5
TParam1JJ5 <
,JJ< =
TParam2JJ> E
,JJE F
TParam3JJG N
,JJN O
TParam4JJP W
,JJW X
	TContractJJY b
>JJb c
(JJc d
xJJd e
=>JJf h
{JJi j
}JJj k
)JJk l
;JJl m
}KK 	
publicMM 
staticMM )
ArgConditionCopyNonLazyBinderMM 3"
FromPoolableMemoryPoolMM4 J
<MMJ K
TParam1MMK R
,MMR S
TParam2MMT [
,MM[ \
TParam3MM] d
,MMd e
TParam4MMf m
,MMm n
	TContractMMo x
>MMx y
(MMy z
thisNN 
FactoryFromBinderNN "
<NN" #
TParam1NN# *
,NN* +
TParam2NN, 3
,NN3 4
TParam3NN5 <
,NN< =
TParam4NN> E
,NNE F
	TContractNNG P
>NNP Q

fromBinderNNR \
,NN\ ]
ActionOO 
<OO .
"MemoryPoolInitialSizeMaxSizeBinderOO 5
<OO5 6
	TContractOO6 ?
>OO? @
>OO@ A
poolBindGeneratorOOB S
)OOS T
whereRR 
	TContractRR 
:RR 
	IPoolableRR '
<RR' (
TParam1RR( /
,RR/ 0
TParam2RR1 8
,RR8 9
TParam3RR: A
,RRA B
TParam4RRC J
,RRJ K
IMemoryPoolRRL W
>RRW X
{SS 	
returnTT 

fromBinderTT 
.TT "
FromPoolableMemoryPoolTT 4
<TT4 5
TParam1TT5 <
,TT< =
TParam2TT> E
,TTE F
TParam3TTG N
,TTN O
TParam4TTP W
,TTW X
	TContractTTY b
,TTb c
PoolableMemoryPoolTTd v
<TTv w
TParam1TTw ~
,TT~ 
TParam2
TTÄ á
,
TTá à
TParam3
TTâ ê
,
TTê ë
TParam4
TTí ô
,
TTô ö
IMemoryPool
TTõ ¶
,
TT¶ ß
	TContract
TT® ±
>
TT± ≤
>
TT≤ ≥
(
TT≥ ¥
poolBindGenerator
TT¥ ≈
)
TT≈ ∆
;
TT∆ «
}UU 	
publicXX 
staticXX )
ArgConditionCopyNonLazyBinderXX 3&
FromMonoPoolableMemoryPoolXX4 N
<XXN O
TParam1XXO V
,XXV W
TParam2XXX _
,XX_ `
TParam3XXa h
,XXh i
TParam4XXj q
,XXq r
	TContractXXs |
>XX| }
(XX} ~
thisYY 
FactoryFromBinderYY "
<YY" #
TParam1YY# *
,YY* +
TParam2YY, 3
,YY3 4
TParam3YY5 <
,YY< =
TParam4YY> E
,YYE F
	TContractYYG P
>YYP Q

fromBinderYYR \
)YY\ ]
where\\ 
	TContract\\ 
:\\ 
	Component\\ '
,\\' (
	IPoolable\\) 2
<\\2 3
TParam1\\3 :
,\\: ;
TParam2\\< C
,\\C D
TParam3\\E L
,\\L M
TParam4\\N U
,\\U V
IMemoryPool\\W b
>\\b c
{]] 	
return^^ 

fromBinder^^ 
.^^ &
FromMonoPoolableMemoryPool^^ 8
<^^8 9
TParam1^^9 @
,^^@ A
TParam2^^B I
,^^I J
TParam3^^K R
,^^R S
TParam4^^T [
,^^[ \
	TContract^^] f
>^^f g
(^^g h
x^^h i
=>^^j l
{^^m n
}^^n o
)^^o p
;^^p q
}__ 	
publicaa 
staticaa )
ArgConditionCopyNonLazyBinderaa 3&
FromMonoPoolableMemoryPoolaa4 N
<aaN O
TParam1aaO V
,aaV W
TParam2aaX _
,aa_ `
TParam3aaa h
,aah i
TParam4aaj q
,aaq r
	TContractaas |
>aa| }
(aa} ~
thisbb 
FactoryFromBinderbb "
<bb" #
TParam1bb# *
,bb* +
TParam2bb, 3
,bb3 4
TParam3bb5 <
,bb< =
TParam4bb> E
,bbE F
	TContractbbG P
>bbP Q

fromBinderbbR \
,bb\ ]
Actioncc 
<cc .
"MemoryPoolInitialSizeMaxSizeBindercc 5
<cc5 6
	TContractcc6 ?
>cc? @
>cc@ A
poolBindGeneratorccB S
)ccS T
whereff 
	TContractff 
:ff 
	Componentff '
,ff' (
	IPoolableff) 2
<ff2 3
TParam1ff3 :
,ff: ;
TParam2ff< C
,ffC D
TParam3ffE L
,ffL M
TParam4ffN U
,ffU V
IMemoryPoolffW b
>ffb c
{gg 	
returnhh 

fromBinderhh 
.hh "
FromPoolableMemoryPoolhh 4
<hh4 5
TParam1hh5 <
,hh< =
TParam2hh> E
,hhE F
TParam3hhG N
,hhN O
TParam4hhP W
,hhW X
	TContracthhY b
,hhb c"
MonoPoolableMemoryPoolhhd z
<hhz {
TParam1	hh{ Ç
,
hhÇ É
TParam2
hhÑ ã
,
hhã å
TParam3
hhç î
,
hhî ï
TParam4
hhñ ù
,
hhù û
IMemoryPool
hhü ™
,
hh™ ´
	TContract
hh¨ µ
>
hhµ ∂
>
hh∂ ∑
(
hh∑ ∏
poolBindGenerator
hh∏ …
)
hh…  
;
hh  À
}ii 	
publicll 
staticll )
ArgConditionCopyNonLazyBinderll 3"
FromPoolableMemoryPoolll4 J
<llJ K
TParam1llK R
,llR S
TParam2llT [
,ll[ \
TParam3ll] d
,lld e
TParam4llf m
,llm n
	TContractllo x
,llx y
TMemoryPool	llz Ö
>
llÖ Ü
(
llÜ á
thismm 
FactoryFromBindermm "
<mm" #
TParam1mm# *
,mm* +
TParam2mm, 3
,mm3 4
TParam3mm5 <
,mm< =
TParam4mm> E
,mmE F
	TContractmmG P
>mmP Q

fromBindermmR \
)mm\ ]
wherepp 
	TContractpp 
:pp 
	IPoolablepp '
<pp' (
TParam1pp( /
,pp/ 0
TParam2pp1 8
,pp8 9
TParam3pp: A
,ppA B
TParam4ppC J
,ppJ K
IMemoryPoolppL W
>ppW X
whereqq 
TMemoryPoolqq 
:qq 

MemoryPoolqq  *
<qq* +
TParam1qq+ 2
,qq2 3
TParam2qq4 ;
,qq; <
TParam3qq= D
,qqD E
TParam4qqF M
,qqM N
IMemoryPoolqqO Z
,qqZ [
	TContractqq\ e
>qqe f
{rr 	
returnss 

fromBinderss 
.ss "
FromPoolableMemoryPoolss 4
<ss4 5
TParam1ss5 <
,ss< =
TParam2ss> E
,ssE F
TParam3ssG N
,ssN O
TParam4ssP W
,ssW X
	TContractssY b
,ssb c
TMemoryPoolssd o
>sso p
(ssp q
xssq r
=>sss u
{ssv w
}ssw x
)ssx y
;ssy z
}tt 	
publicvv 
staticvv )
ArgConditionCopyNonLazyBindervv 3"
FromPoolableMemoryPoolvv4 J
<vvJ K
TParam1vvK R
,vvR S
TParam2vvT [
,vv[ \
TParam3vv] d
,vvd e
TParam4vvf m
,vvm n
	TContractvvo x
,vvx y
TMemoryPool	vvz Ö
>
vvÖ Ü
(
vvÜ á
thisww 
FactoryFromBinderww "
<ww" #
TParam1ww# *
,ww* +
TParam2ww, 3
,ww3 4
TParam3ww5 <
,ww< =
TParam4ww> E
,wwE F
	TContractwwG P
>wwP Q

fromBinderwwR \
,ww\ ]
Actionxx 
<xx .
"MemoryPoolInitialSizeMaxSizeBinderxx 5
<xx5 6
	TContractxx6 ?
>xx? @
>xx@ A
poolBindGeneratorxxB S
)xxS T
where{{ 
	TContract{{ 
:{{ 
	IPoolable{{ '
<{{' (
TParam1{{( /
,{{/ 0
TParam2{{1 8
,{{8 9
TParam3{{: A
,{{A B
TParam4{{C J
,{{J K
IMemoryPool{{L W
>{{W X
where|| 
TMemoryPool|| 
:|| 

MemoryPool||  *
<||* +
TParam1||+ 2
,||2 3
TParam2||4 ;
,||; <
TParam3||= D
,||D E
TParam4||F M
,||M N
IMemoryPool||O Z
,||Z [
	TContract||\ e
>||e f
{}} 	
var
ÄÄ 
poolId
ÄÄ 
=
ÄÄ 
Guid
ÄÄ 
.
ÄÄ 
NewGuid
ÄÄ %
(
ÄÄ% &
)
ÄÄ& '
;
ÄÄ' (
var
ÉÉ 
binder
ÉÉ 
=
ÉÉ 

fromBinder
ÉÉ #
.
ÉÉ# $
BindContainer
ÉÉ$ 1
.
ÉÉ1 22
$BindMemoryPoolCustomInterfaceNoFlush
ÉÉ2 V
<
ÉÉV W
	TContract
ÉÉW `
,
ÉÉ` a
TMemoryPool
ÉÉb m
,
ÉÉm n
TMemoryPool
ÉÉo z
>
ÉÉz {
(
ÉÉ{ |
)
ÉÉ| }
.
ÑÑ 
WithId
ÑÑ 
(
ÑÑ 
poolId
ÑÑ 
)
ÑÑ 
;
ÑÑ  
binder
áá 
.
áá 
NonLazy
áá 
(
áá 
)
áá 
;
áá 
poolBindGenerator
ââ 
(
ââ 
binder
ââ $
)
ââ$ %
;
ââ% &

fromBinder
ãã 
.
ãã 
ProviderFunc
ãã #
=
ãã$ %
(
åå 
	container
åå 
)
åå 
=>
åå 
{
åå  
return
åå! '
new
åå( +(
PoolableMemoryPoolProvider
åå, F
<
ååF G
TParam1
ååG N
,
ååN O
TParam2
ååP W
,
ååW X
TParam3
ååY `
,
åå` a
TParam4
ååb i
,
ååi j
	TContract
ååk t
,
ååt u
TMemoryPoolååv Å
>ååÅ Ç
(ååÇ É
	containerååÉ å
,ååå ç
poolIdååé î
)ååî ï
;ååï ñ
}ååó ò
;ååò ô
return
éé 
new
éé +
ArgConditionCopyNonLazyBinder
éé 4
(
éé4 5

fromBinder
éé5 ?
.
éé? @
BindInfo
éé@ H
)
ééH I
;
ééI J
}
èè 	
}
êê 
}ëë Ëô
TC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\DisposeBlock.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
DisposeBlock 
: 
IDisposable  +
{		 
static

 
readonly

 
StaticMemoryPool

 (
<

( )
DisposeBlock

) 5
>

5 6
_pool

7 <
=

= >
new 
StaticMemoryPool  
<  !
DisposeBlock! -
>- .
(. /
	OnSpawned/ 8
,8 9
OnDespawned: E
)E F
;F G
List 
< 
IDisposable 
> 
_disposables &
;& '
List 
< !
SpawnedObjectPoolPair "
>" #
_objectPoolPairs$ 4
;4 5
static 
void 
	OnSpawned 
( 
DisposeBlock *
that+ /
)/ 0
{ 	
Assert 
. 
IsNull 
( 
that 
. 
_disposables +
)+ ,
;, -
Assert 
. 
IsNull 
( 
that 
. 
_objectPoolPairs /
)/ 0
;0 1
} 	
static 
void 
OnDespawned 
(  
DisposeBlock  ,
that- 1
)1 2
{ 	
if 
( 
that 
. 
_disposables !
!=" $
null% )
)) *
{ 
for 
( 
int 
i 
= 
that !
.! "
_disposables" .
.. /
Count/ 4
-5 6
$num7 8
;8 9
i: ;
>=< >
$num? @
;@ A
iB C
--C E
)E F
{ 
that 
. 
_disposables %
[% &
i& '
]' (
.( )
Dispose) 0
(0 1
)1 2
;2 3
} 
ListPool 
< 
IDisposable $
>$ %
.% &
Instance& .
.. /
Despawn/ 6
(6 7
that7 ;
.; <
_disposables< H
)H I
;I J
that   
.   
_disposables   !
=  " #
null  $ (
;  ( )
}!! 
if## 
(## 
that## 
.## 
_objectPoolPairs## %
!=##& (
null##) -
)##- .
{$$ 
for&& 
(&& 
int&& 
i&& 
=&& 
that&& !
.&&! "
_objectPoolPairs&&" 2
.&&2 3
Count&&3 8
-&&9 :
$num&&; <
;&&< =
i&&> ?
>=&&@ B
$num&&C D
;&&D E
i&&F G
--&&G I
)&&I J
{'' 
var(( 
pair(( 
=(( 
that(( #
.((# $
_objectPoolPairs(($ 4
[((4 5
i((5 6
]((6 7
;((7 8
pair)) 
.)) 
Pool)) 
.)) 
Despawn)) %
())% &
pair))& *
.))* +
Object))+ 1
)))1 2
;))2 3
}** 
ListPool++ 
<++ !
SpawnedObjectPoolPair++ .
>++. /
.++/ 0
Instance++0 8
.++8 9
Despawn++9 @
(++@ A
that++A E
.++E F
_objectPoolPairs++F V
)++V W
;++W X
that,, 
.,, 
_objectPoolPairs,, %
=,,& '
null,,( ,
;,,, -
}-- 
}.. 	
void00 (
LazyInitializeDisposableList00 )
(00) *
)00* +
{11 	
if22 
(22 
_disposables22 
==22 
null22  $
)22$ %
{33 
_disposables44 
=44 
ListPool44 '
<44' (
IDisposable44( 3
>443 4
.444 5
Instance445 =
.44= >
Spawn44> C
(44C D
)44D E
;44E F
}55 
}66 	
public88 
void88 
AddRange88 
<88 
T88 
>88 
(88  
IList88  %
<88% &
T88& '
>88' (
disposables88) 4
)884 5
where99 
T99 
:99 
IDisposable99 !
{:: 	(
LazyInitializeDisposableList;; (
(;;( )
);;) *
;;;* +
for<< 
(<< 
int<< 
i<< 
=<< 
$num<< 
;<< 
i<< 
<<< 
disposables<<  +
.<<+ ,
Count<<, 1
;<<1 2
i<<3 4
++<<4 6
)<<6 7
{== 
_disposables>> 
.>> 
Add>>  
(>>  !
disposables>>! ,
[>>, -
i>>- .
]>>. /
)>>/ 0
;>>0 1
}?? 
}@@ 	
publicBB 
voidBB 
AddBB 
(BB 
IDisposableBB #

disposableBB$ .
)BB. /
{CC 	(
LazyInitializeDisposableListDD (
(DD( )
)DD) *
;DD* +
AssertEE 
.EE 
ThatEE 
(EE 
!EE 
_disposablesEE %
.EE% &
ContainsEE& .
(EE. /

disposableEE/ 9
)EE9 :
)EE: ;
;EE; <
_disposablesFF 
.FF 
AddFF 
(FF 

disposableFF '
)FF' (
;FF( )
}GG 	
publicII 
voidII 
RemoveII 
(II 
IDisposableII &

disposableII' 1
)II1 2
{JJ 	
AssertKK 
.KK 
	IsNotNullKK 
(KK 
_disposablesKK )
)KK) *
;KK* +
_disposablesLL 
.LL 
RemoveWithConfirmLL *
(LL* +

disposableLL+ 5
)LL5 6
;LL6 7
}MM 	
voidOO 
StoreSpawnedObjectOO 
<OO  
TOO  !
>OO! "
(OO" #
TOO# $
objOO% (
,OO( )"
IDespawnableMemoryPoolOO* @
<OO@ A
TOOA B
>OOB C
poolOOD H
)OOH I
{PP 	
ifQQ 
(QQ 
typeofQQ 
(QQ 
TQQ 
)QQ 
.QQ 
DerivesFromQQ %
<QQ% &
IDisposableQQ& 1
>QQ1 2
(QQ2 3
)QQ3 4
)QQ4 5
{RR 
AddSS 
(SS 
(SS 
IDisposableSS  
)SS  !
objSS! $
)SS$ %
;SS% &
}TT 
elseUU 
{VV 
varXX 
pairXX 
=XX 
newXX !
SpawnedObjectPoolPairXX 4
{YY 
PoolZZ 
=ZZ 
poolZZ 
,ZZ  
Object[[ 
=[[ 
obj[[  
}\\ 
;\\ 
if^^ 
(^^ 
_objectPoolPairs^^ $
==^^% '
null^^( ,
)^^, -
{__ 
_objectPoolPairs`` $
=``% &
ListPool``' /
<``/ 0!
SpawnedObjectPoolPair``0 E
>``E F
.``F G
Instance``G O
.``O P
Spawn``P U
(``U V
)``V W
;``W X
}aa 
_objectPoolPairsbb  
.bb  !
Addbb! $
(bb$ %
pairbb% )
)bb) *
;bb* +
}cc 
}dd 	
publicff 
Tff 
Spawnff 
<ff 
Tff 
>ff 
(ff 
IMemoryPoolff %
<ff% &
Tff& '
>ff' (
poolff) -
)ff- .
{gg 	
varhh 
objhh 
=hh 
poolhh 
.hh 
Spawnhh  
(hh  !
)hh! "
;hh" #
StoreSpawnedObjectii 
(ii 
objii "
,ii" #
poolii$ (
)ii( )
;ii) *
returnjj 
objjj 
;jj 
}kk 	
publicmm 
TValuemm 
Spawnmm 
<mm 
TValuemm "
,mm" #
TParam1mm$ +
>mm+ ,
(mm, -
IMemoryPoolmm- 8
<mm8 9
TParam1mm9 @
,mm@ A
TValuemmB H
>mmH I
poolmmJ N
,mmN O
TParam1mmP W
p1mmX Z
)mmZ [
{nn 	
varoo 
objoo 
=oo 
pooloo 
.oo 
Spawnoo  
(oo  !
p1oo! #
)oo# $
;oo$ %
StoreSpawnedObjectpp 
(pp 
objpp "
,pp" #
poolpp$ (
)pp( )
;pp) *
returnqq 
objqq 
;qq 
}rr 	
publictt 
TValuett 
Spawntt 
<tt 
TValuett "
,tt" #
TParam1tt$ +
,tt+ ,
TParam2tt- 4
>tt4 5
(tt5 6
IMemoryPooltt6 A
<ttA B
TParam1ttB I
,ttI J
TParam2ttK R
,ttR S
TValuettT Z
>ttZ [
pooltt\ `
,tt` a
TParam1ttb i
p1ttj l
,ttl m
TParam2ttn u
p2ttv x
)ttx y
{uu 	
varvv 
objvv 
=vv 
poolvv 
.vv 
Spawnvv  
(vv  !
p1vv! #
,vv# $
p2vv% '
)vv' (
;vv( )
StoreSpawnedObjectww 
(ww 
objww "
,ww" #
poolww$ (
)ww( )
;ww) *
returnxx 
objxx 
;xx 
}yy 	
public{{ 
TValue{{ 
Spawn{{ 
<{{ 
TValue{{ "
,{{" #
TParam1{{$ +
,{{+ ,
TParam2{{- 4
,{{4 5
TParam3{{6 =
>{{= >
({{> ?
IMemoryPool{{? J
<{{J K
TParam1{{K R
,{{R S
TParam2{{T [
,{{[ \
TParam3{{] d
,{{d e
TValue{{f l
>{{l m
pool{{n r
,{{r s
TParam1{{t {
p1{{| ~
,{{~ 
TParam2
{{Ä á
p2
{{à ä
,
{{ä ã
TParam3
{{å ì
p3
{{î ñ
)
{{ñ ó
{|| 	
var}} 
obj}} 
=}} 
pool}} 
.}} 
Spawn}}  
(}}  !
p1}}! #
,}}# $
p2}}% '
,}}' (
p3}}) +
)}}+ ,
;}}, -
StoreSpawnedObject~~ 
(~~ 
obj~~ "
,~~" #
pool~~$ (
)~~( )
;~~) *
return 
obj 
; 
}
ÄÄ 	
public
ÇÇ 
TValue
ÇÇ 
Spawn
ÇÇ 
<
ÇÇ 
TValue
ÇÇ "
,
ÇÇ" #
TParam1
ÇÇ$ +
,
ÇÇ+ ,
TParam2
ÇÇ- 4
,
ÇÇ4 5
TParam3
ÇÇ6 =
,
ÇÇ= >
TParam4
ÇÇ? F
>
ÇÇF G
(
ÇÇG H
IMemoryPool
ÇÇH S
<
ÇÇS T
TParam1
ÇÇT [
,
ÇÇ[ \
TParam2
ÇÇ] d
,
ÇÇd e
TParam3
ÇÇf m
,
ÇÇm n
TParam4
ÇÇo v
,
ÇÇv w
TValue
ÇÇx ~
>
ÇÇ~ 
poolÇÇÄ Ñ
,ÇÇÑ Ö
TParam1ÇÇÜ ç
p1ÇÇé ê
,ÇÇê ë
TParam2ÇÇí ô
p2ÇÇö ú
,ÇÇú ù
TParam3ÇÇû •
p3ÇÇ¶ ®
,ÇÇ® ©
TParam4ÇÇ™ ±
p4ÇÇ≤ ¥
)ÇÇ¥ µ
{
ÉÉ 	
var
ÑÑ 
obj
ÑÑ 
=
ÑÑ 
pool
ÑÑ 
.
ÑÑ 
Spawn
ÑÑ  
(
ÑÑ  !
p1
ÑÑ! #
,
ÑÑ# $
p2
ÑÑ% '
,
ÑÑ' (
p3
ÑÑ) +
,
ÑÑ+ ,
p4
ÑÑ- /
)
ÑÑ/ 0
;
ÑÑ0 1 
StoreSpawnedObject
ÖÖ 
(
ÖÖ 
obj
ÖÖ "
,
ÖÖ" #
pool
ÖÖ$ (
)
ÖÖ( )
;
ÖÖ) *
return
ÜÜ 
obj
ÜÜ 
;
ÜÜ 
}
áá 	
public
ââ 
TValue
ââ 
Spawn
ââ 
<
ââ 
TValue
ââ "
,
ââ" #
TParam1
ââ$ +
,
ââ+ ,
TParam2
ââ- 4
,
ââ4 5
TParam3
ââ6 =
,
ââ= >
TParam4
ââ? F
,
ââF G
TParam5
ââH O
>
ââO P
(
ââP Q
IMemoryPool
ââQ \
<
ââ\ ]
TParam1
ââ] d
,
ââd e
TParam2
ââf m
,
ââm n
TParam3
ââo v
,
ââv w
TParam4
ââx 
,ââ Ä
TParam5ââÅ à
,ââà â
TValueââä ê
>ââê ë
poolââí ñ
,ââñ ó
TParam1ââò ü
p1ââ† ¢
,ââ¢ £
TParam2ââ§ ´
p2ââ¨ Æ
,ââÆ Ø
TParam3ââ∞ ∑
p3ââ∏ ∫
,ââ∫ ª
TParam4ââº √
p4ââƒ ∆
,ââ∆ «
TParam5ââ» œ
p5ââ– “
)ââ“ ”
{
ää 	
var
ãã 
obj
ãã 
=
ãã 
pool
ãã 
.
ãã 
Spawn
ãã  
(
ãã  !
p1
ãã! #
,
ãã# $
p2
ãã% '
,
ãã' (
p3
ãã) +
,
ãã+ ,
p4
ãã- /
,
ãã/ 0
p5
ãã1 3
)
ãã3 4
;
ãã4 5 
StoreSpawnedObject
åå 
(
åå 
obj
åå "
,
åå" #
pool
åå$ (
)
åå( )
;
åå) *
return
çç 
obj
çç 
;
çç 
}
éé 	
public
êê 
TValue
êê 
Spawn
êê 
<
êê 
TValue
êê "
,
êê" #
TParam1
êê$ +
,
êê+ ,
TParam2
êê- 4
,
êê4 5
TParam3
êê6 =
,
êê= >
TParam4
êê? F
,
êêF G
TParam5
êêH O
,
êêO P
TParam6
êêQ X
>
êêX Y
(
êêY Z
IMemoryPool
êêZ e
<
êêe f
TParam1
êêf m
,
êêm n
TParam2
êêo v
,
êêv w
TParam3
êêx 
,êê Ä
TParam4êêÅ à
,êêà â
TParam5êêä ë
,êêë í
TParam6êêì ö
,êêö õ
TValueêêú ¢
>êê¢ £
poolêê§ ®
,êê® ©
TParam1êê™ ±
p1êê≤ ¥
,êê¥ µ
TParam2êê∂ Ω
p2êêæ ¿
,êê¿ ¡
TParam3êê¬ …
p3êê  Ã
,êêÃ Õ
TParam4êêŒ ’
p4êê÷ ÿ
,êêÿ Ÿ
TParam5êê⁄ ·
p5êê‚ ‰
,êê‰ Â
TParam6êêÊ Ì
p6êêÓ 
)êê Ò
{
ëë 	
var
íí 
obj
íí 
=
íí 
pool
íí 
.
íí 
Spawn
íí  
(
íí  !
p1
íí! #
,
íí# $
p2
íí% '
,
íí' (
p3
íí) +
,
íí+ ,
p4
íí- /
,
íí/ 0
p5
íí1 3
,
íí3 4
p6
íí5 7
)
íí7 8
;
íí8 9 
StoreSpawnedObject
ìì 
(
ìì 
obj
ìì "
,
ìì" #
pool
ìì$ (
)
ìì( )
;
ìì) *
return
îî 
obj
îî 
;
îî 
}
ïï 	
public
óó 
TValue
óó 
Spawn
óó 
<
óó 
TValue
óó "
,
óó" #
TParam1
óó$ +
,
óó+ ,
TParam2
óó- 4
,
óó4 5
TParam3
óó6 =
,
óó= >
TParam4
óó? F
,
óóF G
TParam5
óóH O
,
óóO P
TParam6
óóQ X
,
óóX Y
TParam7
óóZ a
>
óóa b
(
óób c
IMemoryPool
óóc n
<
óón o
TParam1
óóo v
,
óóv w
TParam2
óóx 
,óó Ä
TParam3óóÅ à
,óóà â
TParam4óóä ë
,óóë í
TParam5óóì ö
,óóö õ
TParam6óóú £
,óó£ §
TParam7óó• ¨
,óó¨ ≠
TValueóóÆ ¥
>óó¥ µ
poolóó∂ ∫
,óó∫ ª
TParam1óóº √
p1óóƒ ∆
,óó∆ «
TParam2óó» œ
p2óó– “
,óó“ ”
TParam3óó‘ €
p3óó‹ ﬁ
,óóﬁ ﬂ
TParam4óó‡ Á
p4óóË Í
,óóÍ Î
TParam5óóÏ Û
p5óóÙ ˆ
,óóˆ ˜
TParam6óó¯ ˇ
p6óóÄ Ç
,óóÇ É
TParam7óóÑ ã
p7óóå é
)óóé è
{
òò 	
var
ôô 
obj
ôô 
=
ôô 
pool
ôô 
.
ôô 
Spawn
ôô  
(
ôô  !
p1
ôô! #
,
ôô# $
p2
ôô% '
,
ôô' (
p3
ôô) +
,
ôô+ ,
p4
ôô- /
,
ôô/ 0
p5
ôô1 3
,
ôô3 4
p6
ôô5 7
,
ôô7 8
p7
ôô9 ;
)
ôô; <
;
ôô< = 
StoreSpawnedObject
öö 
(
öö 
obj
öö "
,
öö" #
pool
öö$ (
)
öö( )
;
öö) *
return
õõ 
obj
õõ 
;
õõ 
}
úú 	
public
ûû 
List
ûû 
<
ûû 
T
ûû 
>
ûû 
	SpawnList
ûû  
<
ûû  !
T
ûû! "
>
ûû" #
(
ûû# $
IEnumerable
ûû$ /
<
ûû/ 0
T
ûû0 1
>
ûû1 2
elements
ûû3 ;
)
ûû; <
{
üü 	
var
†† 
list
†† 
=
†† 
	SpawnList
††  
<
††  !
T
††! "
>
††" #
(
††# $
)
††$ %
;
††% &
list
°° 
.
°° 
AddRange
°° 
(
°° 
elements
°° "
)
°°" #
;
°°# $
return
¢¢ 
list
¢¢ 
;
¢¢ 
}
££ 	
public
•• 
List
•• 
<
•• 
T
•• 
>
•• 
	SpawnList
••  
<
••  !
T
••! "
>
••" #
(
••# $
)
••$ %
{
¶¶ 	
return
ßß 
Spawn
ßß 
(
ßß 
ListPool
ßß !
<
ßß! "
T
ßß" #
>
ßß# $
.
ßß$ %
Instance
ßß% -
)
ßß- .
;
ßß. /
}
®® 	
public
™™ 
static
™™ 
DisposeBlock
™™ "
Spawn
™™# (
(
™™( )
)
™™) *
{
´´ 	
return
¨¨ 
_pool
¨¨ 
.
¨¨ 
Spawn
¨¨ 
(
¨¨ 
)
¨¨  
;
¨¨  !
}
≠≠ 	
public
ØØ 
void
ØØ 
Dispose
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 	
_pool
±± 
.
±± 
Despawn
±± 
(
±± 
this
±± 
)
±± 
;
±±  
}
≤≤ 	
struct
¥¥ #
SpawnedObjectPoolPair
¥¥ $
{
µµ 	
public
∂∂ 
IMemoryPool
∂∂ 
Pool
∂∂ #
;
∂∂# $
public
∑∑ 
object
∑∑ 
Object
∑∑  
;
∑∑  !
}
∏∏ 	
}
ππ 
}∫∫ ˆ
®C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\DeclareSignal\DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class B
6DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder G
:H I4
(DeclareSignalAsyncTickPriorityCopyBinderJ r
{ 
public B
6DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder E
(E F%
SignalDeclarationBindInfo %
signalBindInfo& 4
)4 5
: 
base 
( 
signalBindInfo !
)! "
{		 	
}

 	
public 4
(DeclareSignalAsyncTickPriorityCopyBinder 7
RequireSubscriber8 I
(I J
)J K
{ 	
SignalBindInfo 
. "
MissingHandlerResponse 1
=2 3)
SignalMissingHandlerResponses4 Q
.Q R
ThrowR W
;W X
return 
this 
; 
} 	
public 4
(DeclareSignalAsyncTickPriorityCopyBinder 7
OptionalSubscriber8 J
(J K
)K L
{ 	
SignalBindInfo 
. "
MissingHandlerResponse 1
=2 3)
SignalMissingHandlerResponses4 Q
.Q R
IgnoreR X
;X Y
return 
this 
; 
} 	
public 4
(DeclareSignalAsyncTickPriorityCopyBinder 7)
OptionalSubscriberWithWarning8 U
(U V
)V W
{ 	
SignalBindInfo 
. "
MissingHandlerResponse 1
=2 3)
SignalMissingHandlerResponses4 Q
.Q R
WarnR V
;V W
return 
this 
; 
} 	
} 
} ”
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder4.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
	TContractM V
>V W
:X Y*
FactoryArgumentsToChoiceBinderZ x
<x y
TParam1	y Ä
,
Ä Å
TParam2
Ç â
,
â ä
TParam3
ã í
,
í ì
TParam4
î õ
,
õ ú
	TContract
ù ¶
>
¶ ß
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{		 	
}

 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
TParam3@ G
,G H
TParam4I P
,P Q
	TContractR [
>[ \
WithId] c
(c d
objectd j

identifierk u
)u v
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ˙
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\Kernels\MonoKernel.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class 

MonoKernel $
:% &
MonoBehaviour' 4
{		 
[

 	
InjectLocal

	 
]

 
TickableManager 
_tickableManager (
=) *
null+ /
;/ 0
[ 	
InjectLocal	 
]  
InitializableManager !
_initializableManager 2
=3 4
null5 9
;9 :
[ 	
InjectLocal	 
] 
DisposableManager 
_disposablesManager -
=. /
null0 4
;4 5
bool 
_hasInitialized 
; 
bool 
_isDestroyed 
; 
	protected 
bool 
IsDestroyed "
{ 	
get 
{ 
return 
_isDestroyed %
;% &
}' (
} 	
public 
virtual 
void 
Start !
(! "
)" #
{ 	

Initialize 
( 
) 
; 
} 	
public   
void   

Initialize   
(   
)    
{!! 	
if## 
(## 
!## 
_hasInitialized##  
)##  !
{$$ 
_hasInitialized%% 
=%%  !
true%%" &
;%%& '!
_initializableManager&& %
.&&% &

Initialize&&& 0
(&&0 1
)&&1 2
;&&2 3
}'' 
}(( 	
public** 
virtual** 
void** 
Update** "
(**" #
)**# $
{++ 	
if-- 
(-- 
_tickableManager--  
!=--! #
null--$ (
)--( )
{.. 
_tickableManager//  
.//  !
Update//! '
(//' (
)//( )
;//) *
}00 
}11 	
public33 
virtual33 
void33 
FixedUpdate33 '
(33' (
)33( )
{44 	
if66 
(66 
_tickableManager66  
!=66! #
null66$ (
)66( )
{77 
_tickableManager88  
.88  !
FixedUpdate88! ,
(88, -
)88- .
;88. /
}99 
}:: 	
public<< 
virtual<< 
void<< 

LateUpdate<< &
(<<& '
)<<' (
{== 	
if?? 
(?? 
_tickableManager??  
!=??! #
null??$ (
)??( )
{@@ 
_tickableManagerAA  
.AA  !

LateUpdateAA! +
(AA+ ,
)AA, -
;AA- .
}BB 
}CC 	
publicEE 
virtualEE 
voidEE 
	OnDestroyEE %
(EE% &
)EE& '
{FF 	
ifHH 
(HH 
_disposablesManagerHH #
!=HH$ &
nullHH' +
)HH+ ,
{II 
AssertJJ 
.JJ 
ThatJJ 
(JJ 
!JJ 
_isDestroyedJJ )
)JJ) *
;JJ* +
_isDestroyedKK 
=KK 
trueKK #
;KK# $
_disposablesManagerMM #
.MM# $
DisposeMM$ +
(MM+ ,
)MM, -
;MM- .
_disposablesManagerNN #
.NN# $
LateDisposeNN$ /
(NN/ 0
)NN0 1
;NN1 2
}OO 
}PP 	
}QQ 
}RR £≈
íC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByNewGameObjectDynamicContext.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

abstract 
class <
0SubContainerCreatorByNewGameObjectDynamicContext J
:K L-
!SubContainerCreatorDynamicContextM n
{ 
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
public <
0SubContainerCreatorByNewGameObjectDynamicContext ?
(? @
DiContainer 
	container !
,! "(
GameObjectCreationParameters# ?
gameObjectBindInfo@ R
)R S
: 
base 
( 
	container 
) 
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
} 	
	protected 
override 

GameObject %
CreateGameObject& 6
(6 7
out7 :
bool; ?
shouldMakeActive@ P
)P Q
{ 	
shouldMakeActive 
= 
true #
;# $
var 

gameObject 
= 
	Container &
.& '!
CreateEmptyGameObject' <
(< =
_gameObjectBindInfo= P
,P Q
nullR V
)V W
;W X

gameObject 
. 
	SetActive  
(  !
false! &
)& '
;' (
return 

gameObject 
; 
} 	
} 
[   
NoReflectionBaking   
]   
public!! 

class!! 7
+SubContainerCreatorByNewGameObjectInstaller!! <
:!!= ><
0SubContainerCreatorByNewGameObjectDynamicContext!!? o
{"" 
readonly## 
Type## 
_installerType## $
;##$ %
readonly$$ 
List$$ 
<$$ 
TypeValuePair$$ #
>$$# $

_extraArgs$$% /
;$$/ 0
public&& 7
+SubContainerCreatorByNewGameObjectInstaller&& :
(&&: ;
DiContainer'' 
	container'' !
,''! "(
GameObjectCreationParameters(( (
gameObjectBindInfo(() ;
,((; <
Type)) 
installerType)) 
,)) 
List))  $
<))$ %
TypeValuePair))% 2
>))2 3
	extraArgs))4 =
)))= >
:** 
base** 
(** 
	container** 
,** 
gameObjectBindInfo** 0
)**0 1
{++ 	
_installerType,, 
=,, 
installerType,, *
;,,* +

_extraArgs-- 
=-- 
	extraArgs-- "
;--" #
Assert// 
.// 
That// 
(// 
installerType// %
.//% &
DerivesFrom//& 1
<//1 2
InstallerBase//2 ?
>//? @
(//@ A
)//A B
,//B C
$str00 u
,00u v
installerType	00w Ñ
)
00Ñ Ö
;
00Ö Ü
}11 	
	protected33 
override33 
void33 
AddInstallers33  -
(33- .
List33. 2
<332 3
TypeValuePair333 @
>33@ A
args33B F
,33F G
GameObjectContext33H Y
context33Z a
)33a b
{44 	
context55 
.55 
AddNormalInstaller55 &
(55& '
new66 
ActionInstaller66 #
(66# $
subContainer66$ 0
=>661 3
{77 
var88 
	extraArgs88 %
=88& '
ZenPools88( 0
.880 1
	SpawnList881 :
<88: ;
TypeValuePair88; H
>88H I
(88I J
)88J K
;88K L
	extraArgs:: !
.::! "
AllocFreeAddRange::" 3
(::3 4

_extraArgs::4 >
)::> ?
;::? @
	extraArgs;; !
.;;! "
AllocFreeAddRange;;" 3
(;;3 4
args;;4 8
);;8 9
;;;9 :
var== 
	installer== %
===& '
(==( )
InstallerBase==) 6
)==6 7
subContainer==7 C
.==C D
InstantiateExplicit==D W
(==W X
_installerType>> *
,>>* +
	extraArgs>>, 5
)>>5 6
;>>6 7
ZenPools@@  
.@@  !
DespawnList@@! ,
(@@, -
	extraArgs@@- 6
)@@6 7
;@@7 8
	installerBB !
.BB! "
InstallBindingsBB" 1
(BB1 2
)BB2 3
;BB3 4
}CC 
)CC 
)CC 
;CC 
}DD 	
}EE 
[GG 
NoReflectionBakingGG 
]GG 
publicHH 

classHH 4
(SubContainerCreatorByNewGameObjectMethodHH 9
:HH: ;<
0SubContainerCreatorByNewGameObjectDynamicContextHH< l
{II 
readonlyJJ 
ActionJJ 
<JJ 
DiContainerJJ #
>JJ# $
_installerMethodJJ% 5
;JJ5 6
publicLL 4
(SubContainerCreatorByNewGameObjectMethodLL 7
(LL7 8
DiContainerMM 
	containerMM !
,MM! "(
GameObjectCreationParametersNN (
gameObjectBindInfoNN) ;
,NN; <
ActionOO 
<OO 
DiContainerOO 
>OO 
installerMethodOO  /
)OO/ 0
:PP 
basePP 
(PP 
	containerPP 
,PP 
gameObjectBindInfoPP 0
)PP0 1
{QQ 	
_installerMethodRR 
=RR 
installerMethodRR .
;RR. /
}SS 	
	protectedUU 
overrideUU 
voidUU 
AddInstallersUU  -
(UU- .
ListUU. 2
<UU2 3
TypeValuePairUU3 @
>UU@ A
argsUUB F
,UUF G
GameObjectContextUUH Y
contextUUZ a
)UUa b
{VV 	
AssertWW 
.WW 
ThatWW 
(WW 
argsWW 
.WW 
IsEmptyWW $
(WW$ %
)WW% &
)WW& '
;WW' (
contextXX 
.XX 
AddNormalInstallerXX &
(XX& '
newYY 
ActionInstallerYY #
(YY# $
_installerMethodYY$ 4
)YY4 5
)YY5 6
;YY6 7
}ZZ 	
}[[ 
[]] 
NoReflectionBaking]] 
]]] 
public^^ 

class^^ 4
(SubContainerCreatorByNewGameObjectMethod^^ 9
<^^9 :
TParam1^^: A
>^^A B
:^^C D<
0SubContainerCreatorByNewGameObjectDynamicContext^^E u
{__ 
readonly`` 
Action`` 
<`` 
DiContainer`` #
,``# $
TParam1``% ,
>``, -
_installerMethod``. >
;``> ?
publicbb 4
(SubContainerCreatorByNewGameObjectMethodbb 7
(bb7 8
DiContainercc 
	containercc !
,cc! "(
GameObjectCreationParametersdd (
gameObjectBindInfodd) ;
,dd; <
Actionee 
<ee 
DiContaineree 
,ee 
TParam1ee  '
>ee' (
installerMethodee) 8
)ee8 9
:ff 
baseff 
(ff 
	containerff 
,ff 
gameObjectBindInfoff 0
)ff0 1
{gg 	
_installerMethodhh 
=hh 
installerMethodhh .
;hh. /
}ii 	
	protectedkk 
overridekk 
voidkk 
AddInstallerskk  -
(kk- .
Listkk. 2
<kk2 3
TypeValuePairkk3 @
>kk@ A
argskkB F
,kkF G
GameObjectContextkkH Y
contextkkZ a
)kka b
{ll 	
Assertmm 
.mm 
IsEqualmm 
(mm 
argsmm 
.mm  
Countmm  %
,mm% &
$nummm' (
)mm( )
;mm) *
Assertnn 
.nn 
Thatnn 
(nn 
argsnn 
[nn 
$numnn 
]nn 
.nn  
Typenn  $
.nn$ %
DerivesFromOrEqualnn% 7
<nn7 8
TParam1nn8 ?
>nn? @
(nn@ A
)nnA B
)nnB C
;nnC D
contextpp 
.pp 
AddNormalInstallerpp &
(pp& '
newqq 
ActionInstallerqq #
(qq# $
subContainerqq$ 0
=>qq1 3
{rr 
_installerMethodss (
(ss( )
subContainerss) 5
,ss5 6
(ss7 8
TParam1ss8 ?
)ss? @
argsss@ D
[ssD E
$numssE F
]ssF G
.ssG H
ValuessH M
)ssM N
;ssN O
}tt 
)tt 
)tt 
;tt 
}uu 	
}vv 
[xx 
NoReflectionBakingxx 
]xx 
publicyy 

classyy 4
(SubContainerCreatorByNewGameObjectMethodyy 9
<yy9 :
TParam1yy: A
,yyA B
TParam2yyC J
>yyJ K
:yyL M<
0SubContainerCreatorByNewGameObjectDynamicContextyyN ~
{zz 
readonly{{ 
Action{{ 
<{{ 
DiContainer{{ #
,{{# $
TParam1{{% ,
,{{, -
TParam2{{. 5
>{{5 6
_installerMethod{{7 G
;{{G H
public}} 4
(SubContainerCreatorByNewGameObjectMethod}} 7
(}}7 8
DiContainer~~ 
	container~~ !
,~~! "(
GameObjectCreationParameters (
gameObjectBindInfo) ;
,; <
Action
ÄÄ 
<
ÄÄ 
DiContainer
ÄÄ 
,
ÄÄ 
TParam1
ÄÄ  '
,
ÄÄ' (
TParam2
ÄÄ) 0
>
ÄÄ0 1
installerMethod
ÄÄ2 A
)
ÄÄA B
:
ÅÅ 
base
ÅÅ 
(
ÅÅ 
	container
ÅÅ 
,
ÅÅ  
gameObjectBindInfo
ÅÅ 0
)
ÅÅ0 1
{
ÇÇ 	
_installerMethod
ÉÉ 
=
ÉÉ 
installerMethod
ÉÉ .
;
ÉÉ. /
}
ÑÑ 	
	protected
ÜÜ 
override
ÜÜ 
void
ÜÜ 
AddInstallers
ÜÜ  -
(
ÜÜ- .
List
ÜÜ. 2
<
ÜÜ2 3
TypeValuePair
ÜÜ3 @
>
ÜÜ@ A
args
ÜÜB F
,
ÜÜF G
GameObjectContext
ÜÜH Y
context
ÜÜZ a
)
ÜÜa b
{
áá 	
Assert
àà 
.
àà 
IsEqual
àà 
(
àà 
args
àà 
.
àà  
Count
àà  %
,
àà% &
$num
àà' (
)
àà( )
;
àà) *
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
args
ââ 
[
ââ 
$num
ââ 
]
ââ 
.
ââ  
Type
ââ  $
.
ââ$ % 
DerivesFromOrEqual
ââ% 7
<
ââ7 8
TParam1
ââ8 ?
>
ââ? @
(
ââ@ A
)
ââA B
)
ââB C
;
ââC D
Assert
ää 
.
ää 
That
ää 
(
ää 
args
ää 
[
ää 
$num
ää 
]
ää 
.
ää  
Type
ää  $
.
ää$ % 
DerivesFromOrEqual
ää% 7
<
ää7 8
TParam2
ää8 ?
>
ää? @
(
ää@ A
)
ääA B
)
ääB C
;
ääC D
context
åå 
.
åå  
AddNormalInstaller
åå &
(
åå& '
new
çç 
ActionInstaller
çç #
(
çç# $
subContainer
çç$ 0
=>
çç1 3
{
éé 
_installerMethod
èè (
(
èè( )
subContainer
èè) 5
,
èè5 6
(
êê 
TParam1
êê $
)
êê$ %
args
êê% )
[
êê) *
$num
êê* +
]
êê+ ,
.
êê, -
Value
êê- 2
,
êê2 3
(
ëë 
TParam2
ëë $
)
ëë$ %
args
ëë% )
[
ëë) *
$num
ëë* +
]
ëë+ ,
.
ëë, -
Value
ëë- 2
)
ëë2 3
;
ëë3 4
}
íí 
)
íí 
)
íí 
;
íí 
}
ìì 	
}
îî 
[
ññ  
NoReflectionBaking
ññ 
]
ññ 
public
óó 

class
óó 6
(SubContainerCreatorByNewGameObjectMethod
óó 9
<
óó9 :
TParam1
óó: A
,
óóA B
TParam2
óóC J
,
óóJ K
TParam3
óóL S
>
óóS T
:
óóU V?
0SubContainerCreatorByNewGameObjectDynamicContextóóW á
{
òò 
readonly
ôô 
Action
ôô 
<
ôô 
DiContainer
ôô #
,
ôô# $
TParam1
ôô% ,
,
ôô, -
TParam2
ôô. 5
,
ôô5 6
TParam3
ôô7 >
>
ôô> ?
_installerMethod
ôô@ P
;
ôôP Q
public
õõ 6
(SubContainerCreatorByNewGameObjectMethod
õõ 7
(
õõ7 8
DiContainer
úú 
	container
úú !
,
úú! "*
GameObjectCreationParameters
ùù ( 
gameObjectBindInfo
ùù) ;
,
ùù; <
Action
ûû 
<
ûû 
DiContainer
ûû 
,
ûû 
TParam1
ûû  '
,
ûû' (
TParam2
ûû) 0
,
ûû0 1
TParam3
ûû2 9
>
ûû9 :
installerMethod
ûû; J
)
ûûJ K
:
üü 
base
üü 
(
üü 
	container
üü 
,
üü  
gameObjectBindInfo
üü 0
)
üü0 1
{
†† 	
_installerMethod
°° 
=
°° 
installerMethod
°° .
;
°°. /
}
¢¢ 	
	protected
§§ 
override
§§ 
void
§§ 
AddInstallers
§§  -
(
§§- .
List
§§. 2
<
§§2 3
TypeValuePair
§§3 @
>
§§@ A
args
§§B F
,
§§F G
GameObjectContext
§§H Y
context
§§Z a
)
§§a b
{
•• 	
Assert
¶¶ 
.
¶¶ 
IsEqual
¶¶ 
(
¶¶ 
args
¶¶ 
.
¶¶  
Count
¶¶  %
,
¶¶% &
$num
¶¶' (
)
¶¶( )
;
¶¶) *
Assert
ßß 
.
ßß 
That
ßß 
(
ßß 
args
ßß 
[
ßß 
$num
ßß 
]
ßß 
.
ßß  
Type
ßß  $
.
ßß$ % 
DerivesFromOrEqual
ßß% 7
<
ßß7 8
TParam1
ßß8 ?
>
ßß? @
(
ßß@ A
)
ßßA B
)
ßßB C
;
ßßC D
Assert
®® 
.
®® 
That
®® 
(
®® 
args
®® 
[
®® 
$num
®® 
]
®® 
.
®®  
Type
®®  $
.
®®$ % 
DerivesFromOrEqual
®®% 7
<
®®7 8
TParam2
®®8 ?
>
®®? @
(
®®@ A
)
®®A B
)
®®B C
;
®®C D
Assert
©© 
.
©© 
That
©© 
(
©© 
args
©© 
[
©© 
$num
©© 
]
©© 
.
©©  
Type
©©  $
.
©©$ % 
DerivesFromOrEqual
©©% 7
<
©©7 8
TParam3
©©8 ?
>
©©? @
(
©©@ A
)
©©A B
)
©©B C
;
©©C D
context
´´ 
.
´´  
AddNormalInstaller
´´ &
(
´´& '
new
¨¨ 
ActionInstaller
¨¨ #
(
¨¨# $
subContainer
¨¨$ 0
=>
¨¨1 3
{
≠≠ 
_installerMethod
ÆÆ (
(
ÆÆ( )
subContainer
ÆÆ) 5
,
ÆÆ5 6
(
ØØ 
TParam1
ØØ $
)
ØØ$ %
args
ØØ% )
[
ØØ) *
$num
ØØ* +
]
ØØ+ ,
.
ØØ, -
Value
ØØ- 2
,
ØØ2 3
(
∞∞ 
TParam2
∞∞ $
)
∞∞$ %
args
∞∞% )
[
∞∞) *
$num
∞∞* +
]
∞∞+ ,
.
∞∞, -
Value
∞∞- 2
,
∞∞2 3
(
±± 
TParam3
±± $
)
±±$ %
args
±±% )
[
±±) *
$num
±±* +
]
±±+ ,
.
±±, -
Value
±±- 2
)
±±2 3
;
±±3 4
}
≤≤ 
)
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 	
}
¥¥ 
[
∂∂  
NoReflectionBaking
∂∂ 
]
∂∂ 
public
∑∑ 

class
∑∑ 6
(SubContainerCreatorByNewGameObjectMethod
∑∑ 9
<
∑∑9 :
TParam1
∑∑: A
,
∑∑A B
TParam2
∑∑C J
,
∑∑J K
TParam3
∑∑L S
,
∑∑S T
TParam4
∑∑U \
>
∑∑\ ]
:
∑∑^ _?
0SubContainerCreatorByNewGameObjectDynamicContext∑∑` ê
{
∏∏ 
readonly
ππ 
Action
ΩΩ 
<
ΩΩ 
DiContainer
ΩΩ 
,
ΩΩ 
TParam1
ΩΩ  '
,
ΩΩ' (
TParam2
ΩΩ) 0
,
ΩΩ0 1
TParam3
ΩΩ2 9
,
ΩΩ9 :
TParam4
ΩΩ; B
>
ΩΩB C
_installerMethod
ΩΩD T
;
ΩΩT U
public
øø 6
(SubContainerCreatorByNewGameObjectMethod
øø 7
(
øø7 8
DiContainer
¿¿ 
	container
¿¿ !
,
¿¿! "*
GameObjectCreationParameters
¡¡ ( 
gameObjectBindInfo
¡¡) ;
,
¡¡; <
Action
≈≈ 
<
≈≈ 
DiContainer
≈≈ 
,
≈≈ 
TParam1
≈≈  '
,
≈≈' (
TParam2
≈≈) 0
,
≈≈0 1
TParam3
≈≈2 9
,
≈≈9 :
TParam4
≈≈; B
>
≈≈B C
installerMethod
≈≈D S
)
≈≈S T
:
∆∆ 
base
∆∆ 
(
∆∆ 
	container
∆∆ 
,
∆∆  
gameObjectBindInfo
∆∆ 0
)
∆∆0 1
{
«« 	
_installerMethod
»» 
=
»» 
installerMethod
»» .
;
»». /
}
…… 	
	protected
ÀÀ 
override
ÀÀ 
void
ÀÀ 
AddInstallers
ÀÀ  -
(
ÀÀ- .
List
ÀÀ. 2
<
ÀÀ2 3
TypeValuePair
ÀÀ3 @
>
ÀÀ@ A
args
ÀÀB F
,
ÀÀF G
GameObjectContext
ÀÀH Y
context
ÀÀZ a
)
ÀÀa b
{
ÃÃ 	
Assert
ÕÕ 
.
ÕÕ 
IsEqual
ÕÕ 
(
ÕÕ 
args
ÕÕ 
.
ÕÕ  
Count
ÕÕ  %
,
ÕÕ% &
$num
ÕÕ' (
)
ÕÕ( )
;
ÕÕ) *
Assert
ŒŒ 
.
ŒŒ 
That
ŒŒ 
(
ŒŒ 
args
ŒŒ 
[
ŒŒ 
$num
ŒŒ 
]
ŒŒ 
.
ŒŒ  
Type
ŒŒ  $
.
ŒŒ$ % 
DerivesFromOrEqual
ŒŒ% 7
<
ŒŒ7 8
TParam1
ŒŒ8 ?
>
ŒŒ? @
(
ŒŒ@ A
)
ŒŒA B
)
ŒŒB C
;
ŒŒC D
Assert
œœ 
.
œœ 
That
œœ 
(
œœ 
args
œœ 
[
œœ 
$num
œœ 
]
œœ 
.
œœ  
Type
œœ  $
.
œœ$ % 
DerivesFromOrEqual
œœ% 7
<
œœ7 8
TParam2
œœ8 ?
>
œœ? @
(
œœ@ A
)
œœA B
)
œœB C
;
œœC D
Assert
–– 
.
–– 
That
–– 
(
–– 
args
–– 
[
–– 
$num
–– 
]
–– 
.
––  
Type
––  $
.
––$ % 
DerivesFromOrEqual
––% 7
<
––7 8
TParam3
––8 ?
>
––? @
(
––@ A
)
––A B
)
––B C
;
––C D
Assert
—— 
.
—— 
That
—— 
(
—— 
args
—— 
[
—— 
$num
—— 
]
—— 
.
——  
Type
——  $
.
——$ % 
DerivesFromOrEqual
——% 7
<
——7 8
TParam4
——8 ?
>
——? @
(
——@ A
)
——A B
)
——B C
;
——C D
context
”” 
.
””  
AddNormalInstaller
”” &
(
””& '
new
‘‘ 
ActionInstaller
‘‘ #
(
‘‘# $
subContainer
‘‘$ 0
=>
‘‘1 3
{
’’ 
_installerMethod
÷÷ (
(
÷÷( )
subContainer
÷÷) 5
,
÷÷5 6
(
◊◊ 
TParam1
◊◊ $
)
◊◊$ %
args
◊◊% )
[
◊◊) *
$num
◊◊* +
]
◊◊+ ,
.
◊◊, -
Value
◊◊- 2
,
◊◊2 3
(
ÿÿ 
TParam2
ÿÿ $
)
ÿÿ$ %
args
ÿÿ% )
[
ÿÿ) *
$num
ÿÿ* +
]
ÿÿ+ ,
.
ÿÿ, -
Value
ÿÿ- 2
,
ÿÿ2 3
(
ŸŸ 
TParam3
ŸŸ $
)
ŸŸ$ %
args
ŸŸ% )
[
ŸŸ) *
$num
ŸŸ* +
]
ŸŸ+ ,
.
ŸŸ, -
Value
ŸŸ- 2
,
ŸŸ2 3
(
⁄⁄ 
TParam4
⁄⁄ $
)
⁄⁄$ %
args
⁄⁄% )
[
⁄⁄) *
$num
⁄⁄* +
]
⁄⁄+ ,
.
⁄⁄, -
Value
⁄⁄- 2
)
⁄⁄2 3
;
⁄⁄3 4
}
€€ 
)
€€ 
)
€€ 
;
€€ 
}
‹‹ 	
}
›› 
[
ﬂﬂ  
NoReflectionBaking
ﬂﬂ 
]
ﬂﬂ 
public
‡‡ 

class
‡‡ 6
(SubContainerCreatorByNewGameObjectMethod
‡‡ 9
<
‡‡9 :
TParam1
‡‡: A
,
‡‡A B
TParam2
‡‡C J
,
‡‡J K
TParam3
‡‡L S
,
‡‡S T
TParam4
‡‡U \
,
‡‡\ ]
TParam5
‡‡^ e
>
‡‡e f
:
‡‡g h?
0SubContainerCreatorByNewGameObjectDynamicContext‡‡i ô
{
·· 
readonly
‚‚ 
Action
ÊÊ 
<
ÊÊ 
DiContainer
ÊÊ 
,
ÊÊ 
TParam1
ÊÊ  '
,
ÊÊ' (
TParam2
ÊÊ) 0
,
ÊÊ0 1
TParam3
ÊÊ2 9
,
ÊÊ9 :
TParam4
ÊÊ; B
,
ÊÊB C
TParam5
ÊÊD K
>
ÊÊK L
_installerMethod
ÊÊM ]
;
ÊÊ] ^
public
ËË 6
(SubContainerCreatorByNewGameObjectMethod
ËË 7
(
ËË7 8
DiContainer
ÈÈ 
	container
ÈÈ !
,
ÈÈ! "*
GameObjectCreationParameters
ÍÍ ( 
gameObjectBindInfo
ÍÍ) ;
,
ÍÍ; <
Action
ÓÓ 
<
ÓÓ 
DiContainer
ÓÓ 
,
ÓÓ 
TParam1
ÓÓ  '
,
ÓÓ' (
TParam2
ÓÓ) 0
,
ÓÓ0 1
TParam3
ÓÓ2 9
,
ÓÓ9 :
TParam4
ÓÓ; B
,
ÓÓB C
TParam5
ÓÓD K
>
ÓÓK L
installerMethod
ÓÓM \
)
ÓÓ\ ]
:
ÔÔ 
base
ÔÔ 
(
ÔÔ 
	container
ÔÔ 
,
ÔÔ  
gameObjectBindInfo
ÔÔ 0
)
ÔÔ0 1
{
 	
_installerMethod
ÒÒ 
=
ÒÒ 
installerMethod
ÒÒ .
;
ÒÒ. /
}
ÚÚ 	
	protected
ÙÙ 
override
ÙÙ 
void
ÙÙ 
AddInstallers
ÙÙ  -
(
ÙÙ- .
List
ÙÙ. 2
<
ÙÙ2 3
TypeValuePair
ÙÙ3 @
>
ÙÙ@ A
args
ÙÙB F
,
ÙÙF G
GameObjectContext
ÙÙH Y
context
ÙÙZ a
)
ÙÙa b
{
ıı 	
Assert
ˆˆ 
.
ˆˆ 
IsEqual
ˆˆ 
(
ˆˆ 
args
ˆˆ 
.
ˆˆ  
Count
ˆˆ  %
,
ˆˆ% &
$num
ˆˆ' (
)
ˆˆ( )
;
ˆˆ) *
Assert
˜˜ 
.
˜˜ 
That
˜˜ 
(
˜˜ 
args
˜˜ 
[
˜˜ 
$num
˜˜ 
]
˜˜ 
.
˜˜  
Type
˜˜  $
.
˜˜$ % 
DerivesFromOrEqual
˜˜% 7
<
˜˜7 8
TParam1
˜˜8 ?
>
˜˜? @
(
˜˜@ A
)
˜˜A B
)
˜˜B C
;
˜˜C D
Assert
¯¯ 
.
¯¯ 
That
¯¯ 
(
¯¯ 
args
¯¯ 
[
¯¯ 
$num
¯¯ 
]
¯¯ 
.
¯¯  
Type
¯¯  $
.
¯¯$ % 
DerivesFromOrEqual
¯¯% 7
<
¯¯7 8
TParam2
¯¯8 ?
>
¯¯? @
(
¯¯@ A
)
¯¯A B
)
¯¯B C
;
¯¯C D
Assert
˘˘ 
.
˘˘ 
That
˘˘ 
(
˘˘ 
args
˘˘ 
[
˘˘ 
$num
˘˘ 
]
˘˘ 
.
˘˘  
Type
˘˘  $
.
˘˘$ % 
DerivesFromOrEqual
˘˘% 7
<
˘˘7 8
TParam3
˘˘8 ?
>
˘˘? @
(
˘˘@ A
)
˘˘A B
)
˘˘B C
;
˘˘C D
Assert
˙˙ 
.
˙˙ 
That
˙˙ 
(
˙˙ 
args
˙˙ 
[
˙˙ 
$num
˙˙ 
]
˙˙ 
.
˙˙  
Type
˙˙  $
.
˙˙$ % 
DerivesFromOrEqual
˙˙% 7
<
˙˙7 8
TParam4
˙˙8 ?
>
˙˙? @
(
˙˙@ A
)
˙˙A B
)
˙˙B C
;
˙˙C D
Assert
˚˚ 
.
˚˚ 
That
˚˚ 
(
˚˚ 
args
˚˚ 
[
˚˚ 
$num
˚˚ 
]
˚˚ 
.
˚˚  
Type
˚˚  $
.
˚˚$ % 
DerivesFromOrEqual
˚˚% 7
<
˚˚7 8
TParam5
˚˚8 ?
>
˚˚? @
(
˚˚@ A
)
˚˚A B
)
˚˚B C
;
˚˚C D
context
˝˝ 
.
˝˝  
AddNormalInstaller
˝˝ &
(
˝˝& '
new
˛˛ 
ActionInstaller
˛˛ #
(
˛˛# $
subContainer
˛˛$ 0
=>
˛˛1 3
{
ˇˇ 
_installerMethod
ÄÄ (
(
ÄÄ( )
subContainer
ÄÄ) 5
,
ÄÄ5 6
(
ÅÅ 
TParam1
ÅÅ $
)
ÅÅ$ %
args
ÅÅ% )
[
ÅÅ) *
$num
ÅÅ* +
]
ÅÅ+ ,
.
ÅÅ, -
Value
ÅÅ- 2
,
ÅÅ2 3
(
ÇÇ 
TParam2
ÇÇ $
)
ÇÇ$ %
args
ÇÇ% )
[
ÇÇ) *
$num
ÇÇ* +
]
ÇÇ+ ,
.
ÇÇ, -
Value
ÇÇ- 2
,
ÇÇ2 3
(
ÉÉ 
TParam3
ÉÉ $
)
ÉÉ$ %
args
ÉÉ% )
[
ÉÉ) *
$num
ÉÉ* +
]
ÉÉ+ ,
.
ÉÉ, -
Value
ÉÉ- 2
,
ÉÉ2 3
(
ÑÑ 
TParam4
ÑÑ $
)
ÑÑ$ %
args
ÑÑ% )
[
ÑÑ) *
$num
ÑÑ* +
]
ÑÑ+ ,
.
ÑÑ, -
Value
ÑÑ- 2
,
ÑÑ2 3
(
ÖÖ 
TParam5
ÖÖ $
)
ÖÖ$ %
args
ÖÖ% )
[
ÖÖ) *
$num
ÖÖ* +
]
ÖÖ+ ,
.
ÖÖ, -
Value
ÖÖ- 2
)
ÖÖ2 3
;
ÖÖ3 4
}
ÜÜ 
)
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 	
}
àà 
[
ää  
NoReflectionBaking
ää 
]
ää 
public
ãã 

class
ãã 6
(SubContainerCreatorByNewGameObjectMethod
ãã 9
<
ãã9 :
TParam1
ãã: A
,
ããA B
TParam2
ããC J
,
ããJ K
TParam3
ããL S
,
ããS T
TParam4
ããU \
,
ãã\ ]
TParam5
ãã^ e
,
ããe f
TParam6
ããg n
>
ããn o
:
ããp q?
0SubContainerCreatorByNewGameObjectDynamicContextããr ¢
{
åå 
readonly
çç 
Action
ëë 
<
ëë 
DiContainer
ëë 
,
ëë 
TParam1
ëë  '
,
ëë' (
TParam2
ëë) 0
,
ëë0 1
TParam3
ëë2 9
,
ëë9 :
TParam4
ëë; B
,
ëëB C
TParam5
ëëD K
,
ëëK L
TParam6
ëëM T
>
ëëT U
_installerMethod
ëëV f
;
ëëf g
public
ìì 6
(SubContainerCreatorByNewGameObjectMethod
ìì 7
(
ìì7 8
DiContainer
îî 
	container
îî !
,
îî! "*
GameObjectCreationParameters
ïï ( 
gameObjectBindInfo
ïï) ;
,
ïï; <
Action
ôô 
<
ôô 
DiContainer
ôô 
,
ôô 
TParam1
ôô  '
,
ôô' (
TParam2
ôô) 0
,
ôô0 1
TParam3
ôô2 9
,
ôô9 :
TParam4
ôô; B
,
ôôB C
TParam5
ôôD K
,
ôôK L
TParam6
ôôM T
>
ôôT U
installerMethod
ôôV e
)
ôôe f
:
öö 
base
öö 
(
öö 
	container
öö 
,
öö  
gameObjectBindInfo
öö 0
)
öö0 1
{
õõ 	
_installerMethod
úú 
=
úú 
installerMethod
úú .
;
úú. /
}
ùù 	
	protected
üü 
override
üü 
void
üü 
AddInstallers
üü  -
(
üü- .
List
üü. 2
<
üü2 3
TypeValuePair
üü3 @
>
üü@ A
args
üüB F
,
üüF G
GameObjectContext
üüH Y
context
üüZ a
)
üüa b
{
†† 	
Assert
°° 
.
°° 
IsEqual
°° 
(
°° 
args
°° 
.
°°  
Count
°°  %
,
°°% &
$num
°°' (
)
°°( )
;
°°) *
Assert
¢¢ 
.
¢¢ 
That
¢¢ 
(
¢¢ 
args
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
.
¢¢  
Type
¢¢  $
.
¢¢$ % 
DerivesFromOrEqual
¢¢% 7
<
¢¢7 8
TParam1
¢¢8 ?
>
¢¢? @
(
¢¢@ A
)
¢¢A B
)
¢¢B C
;
¢¢C D
Assert
££ 
.
££ 
That
££ 
(
££ 
args
££ 
[
££ 
$num
££ 
]
££ 
.
££  
Type
££  $
.
££$ % 
DerivesFromOrEqual
££% 7
<
££7 8
TParam2
££8 ?
>
££? @
(
££@ A
)
££A B
)
££B C
;
££C D
Assert
§§ 
.
§§ 
That
§§ 
(
§§ 
args
§§ 
[
§§ 
$num
§§ 
]
§§ 
.
§§  
Type
§§  $
.
§§$ % 
DerivesFromOrEqual
§§% 7
<
§§7 8
TParam3
§§8 ?
>
§§? @
(
§§@ A
)
§§A B
)
§§B C
;
§§C D
Assert
•• 
.
•• 
That
•• 
(
•• 
args
•• 
[
•• 
$num
•• 
]
•• 
.
••  
Type
••  $
.
••$ % 
DerivesFromOrEqual
••% 7
<
••7 8
TParam4
••8 ?
>
••? @
(
••@ A
)
••A B
)
••B C
;
••C D
Assert
¶¶ 
.
¶¶ 
That
¶¶ 
(
¶¶ 
args
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
.
¶¶  
Type
¶¶  $
.
¶¶$ % 
DerivesFromOrEqual
¶¶% 7
<
¶¶7 8
TParam5
¶¶8 ?
>
¶¶? @
(
¶¶@ A
)
¶¶A B
)
¶¶B C
;
¶¶C D
Assert
ßß 
.
ßß 
That
ßß 
(
ßß 
args
ßß 
[
ßß 
$num
ßß 
]
ßß 
.
ßß  
Type
ßß  $
.
ßß$ % 
DerivesFromOrEqual
ßß% 7
<
ßß7 8
TParam6
ßß8 ?
>
ßß? @
(
ßß@ A
)
ßßA B
)
ßßB C
;
ßßC D
context
©© 
.
©©  
AddNormalInstaller
©© &
(
©©& '
new
™™ 
ActionInstaller
™™ #
(
™™# $
subContainer
™™$ 0
=>
™™1 3
{
´´ 
_installerMethod
¨¨ (
(
¨¨( )
subContainer
¨¨) 5
,
¨¨5 6
(
≠≠ 
TParam1
≠≠ $
)
≠≠$ %
args
≠≠% )
[
≠≠) *
$num
≠≠* +
]
≠≠+ ,
.
≠≠, -
Value
≠≠- 2
,
≠≠2 3
(
ÆÆ 
TParam2
ÆÆ $
)
ÆÆ$ %
args
ÆÆ% )
[
ÆÆ) *
$num
ÆÆ* +
]
ÆÆ+ ,
.
ÆÆ, -
Value
ÆÆ- 2
,
ÆÆ2 3
(
ØØ 
TParam3
ØØ $
)
ØØ$ %
args
ØØ% )
[
ØØ) *
$num
ØØ* +
]
ØØ+ ,
.
ØØ, -
Value
ØØ- 2
,
ØØ2 3
(
∞∞ 
TParam4
∞∞ $
)
∞∞$ %
args
∞∞% )
[
∞∞) *
$num
∞∞* +
]
∞∞+ ,
.
∞∞, -
Value
∞∞- 2
,
∞∞2 3
(
±± 
TParam5
±± $
)
±±$ %
args
±±% )
[
±±) *
$num
±±* +
]
±±+ ,
.
±±, -
Value
±±- 2
,
±±2 3
(
≤≤ 
TParam6
≤≤ $
)
≤≤$ %
args
≤≤% )
[
≤≤) *
$num
≤≤* +
]
≤≤+ ,
.
≤≤, -
Value
≤≤- 2
)
≤≤2 3
;
≤≤3 4
}
≥≥ 
)
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 	
}
µµ 
[
∑∑  
NoReflectionBaking
∑∑ 
]
∑∑ 
public
∏∏ 

class
∏∏ 6
(SubContainerCreatorByNewGameObjectMethod
∏∏ 9
<
∏∏9 :
TParam1
∏∏: A
,
∏∏A B
TParam2
∏∏C J
,
∏∏J K
TParam3
∏∏L S
,
∏∏S T
TParam4
∏∏U \
,
∏∏\ ]
TParam5
∏∏^ e
,
∏∏e f
TParam6
∏∏g n
,
∏∏n o
TParam7
∏∏p w
,
∏∏w x
TParam8∏∏y Ä
,∏∏Ä Å
TParam9∏∏Ç â
,∏∏â ä
TParam10∏∏ã ì
>∏∏ì î
:∏∏ï ñ@
0SubContainerCreatorByNewGameObjectDynamicContext∏∏ó «
{
ππ 
readonly
∫∫ 
Action
ææ 
<
ææ 
DiContainer
ææ 
,
ææ 
TParam1
ææ  '
,
ææ' (
TParam2
ææ) 0
,
ææ0 1
TParam3
ææ2 9
,
ææ9 :
TParam4
ææ; B
,
ææB C
TParam5
ææD K
,
ææK L
TParam6
ææM T
,
ææT U
TParam7
ææV ]
,
ææ] ^
TParam8
ææ_ f
,
ææf g
TParam9
ææh o
,
ææo p
TParam10
ææq y
>
ææy z
_installerMethodææ{ ã
;ææã å
public
¿¿ 6
(SubContainerCreatorByNewGameObjectMethod
¿¿ 7
(
¿¿7 8
DiContainer
¡¡ 
	container
¡¡ !
,
¡¡! "*
GameObjectCreationParameters
¬¬ ( 
gameObjectBindInfo
¬¬) ;
,
¬¬; <
Action
∆∆ 
<
∆∆ 
DiContainer
∆∆ 
,
∆∆ 
TParam1
∆∆  '
,
∆∆' (
TParam2
∆∆) 0
,
∆∆0 1
TParam3
∆∆2 9
,
∆∆9 :
TParam4
∆∆; B
,
∆∆B C
TParam5
∆∆D K
,
∆∆K L
TParam6
∆∆M T
,
∆∆T U
TParam7
∆∆V ]
,
∆∆] ^
TParam8
∆∆_ f
,
∆∆f g
TParam9
∆∆h o
,
∆∆o p
TParam10
∆∆q y
>
∆∆y z
installerMethod∆∆{ ä
)∆∆ä ã
:
«« 
base
«« 
(
«« 
	container
«« 
,
««  
gameObjectBindInfo
«« 0
)
««0 1
{
»» 	
_installerMethod
…… 
=
…… 
installerMethod
…… .
;
……. /
}
   	
	protected
ÃÃ 
override
ÃÃ 
void
ÃÃ 
AddInstallers
ÃÃ  -
(
ÃÃ- .
List
ÃÃ. 2
<
ÃÃ2 3
TypeValuePair
ÃÃ3 @
>
ÃÃ@ A
args
ÃÃB F
,
ÃÃF G
GameObjectContext
ÃÃH Y
context
ÃÃZ a
)
ÃÃa b
{
ÕÕ 	
Assert
ŒŒ 
.
ŒŒ 
IsEqual
ŒŒ 
(
ŒŒ 
args
ŒŒ 
.
ŒŒ  
Count
ŒŒ  %
,
ŒŒ% &
$num
ŒŒ' )
)
ŒŒ) *
;
ŒŒ* +
Assert
–– 
.
–– 
That
–– 
(
–– 
args
–– 
[
–– 
$num
–– 
]
–– 
.
––  
Type
––  $
.
––$ % 
DerivesFromOrEqual
––% 7
<
––7 8
TParam1
––8 ?
>
––? @
(
––@ A
)
––A B
)
––B C
;
––C D
Assert
—— 
.
—— 
That
—— 
(
—— 
args
—— 
[
—— 
$num
—— 
]
—— 
.
——  
Type
——  $
.
——$ % 
DerivesFromOrEqual
——% 7
<
——7 8
TParam2
——8 ?
>
——? @
(
——@ A
)
——A B
)
——B C
;
——C D
Assert
““ 
.
““ 
That
““ 
(
““ 
args
““ 
[
““ 
$num
““ 
]
““ 
.
““  
Type
““  $
.
““$ % 
DerivesFromOrEqual
““% 7
<
““7 8
TParam3
““8 ?
>
““? @
(
““@ A
)
““A B
)
““B C
;
““C D
Assert
”” 
.
”” 
That
”” 
(
”” 
args
”” 
[
”” 
$num
”” 
]
”” 
.
””  
Type
””  $
.
””$ % 
DerivesFromOrEqual
””% 7
<
””7 8
TParam4
””8 ?
>
””? @
(
””@ A
)
””A B
)
””B C
;
””C D
Assert
‘‘ 
.
‘‘ 
That
‘‘ 
(
‘‘ 
args
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
.
‘‘  
Type
‘‘  $
.
‘‘$ % 
DerivesFromOrEqual
‘‘% 7
<
‘‘7 8
TParam5
‘‘8 ?
>
‘‘? @
(
‘‘@ A
)
‘‘A B
)
‘‘B C
;
‘‘C D
Assert
’’ 
.
’’ 
That
’’ 
(
’’ 
args
’’ 
[
’’ 
$num
’’ 
]
’’ 
.
’’  
Type
’’  $
.
’’$ % 
DerivesFromOrEqual
’’% 7
<
’’7 8
TParam6
’’8 ?
>
’’? @
(
’’@ A
)
’’A B
)
’’B C
;
’’C D
Assert
÷÷ 
.
÷÷ 
That
÷÷ 
(
÷÷ 
args
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
.
÷÷  
Type
÷÷  $
.
÷÷$ % 
DerivesFromOrEqual
÷÷% 7
<
÷÷7 8
TParam7
÷÷8 ?
>
÷÷? @
(
÷÷@ A
)
÷÷A B
)
÷÷B C
;
÷÷C D
Assert
◊◊ 
.
◊◊ 
That
◊◊ 
(
◊◊ 
args
◊◊ 
[
◊◊ 
$num
◊◊ 
]
◊◊ 
.
◊◊  
Type
◊◊  $
.
◊◊$ % 
DerivesFromOrEqual
◊◊% 7
<
◊◊7 8
TParam8
◊◊8 ?
>
◊◊? @
(
◊◊@ A
)
◊◊A B
)
◊◊B C
;
◊◊C D
Assert
ÿÿ 
.
ÿÿ 
That
ÿÿ 
(
ÿÿ 
args
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
.
ÿÿ  
Type
ÿÿ  $
.
ÿÿ$ % 
DerivesFromOrEqual
ÿÿ% 7
<
ÿÿ7 8
TParam9
ÿÿ8 ?
>
ÿÿ? @
(
ÿÿ@ A
)
ÿÿA B
)
ÿÿB C
;
ÿÿC D
Assert
ŸŸ 
.
ŸŸ 
That
ŸŸ 
(
ŸŸ 
args
ŸŸ 
[
ŸŸ 
$num
ŸŸ 
]
ŸŸ 
.
ŸŸ  
Type
ŸŸ  $
.
ŸŸ$ % 
DerivesFromOrEqual
ŸŸ% 7
<
ŸŸ7 8
TParam10
ŸŸ8 @
>
ŸŸ@ A
(
ŸŸA B
)
ŸŸB C
)
ŸŸC D
;
ŸŸD E
context
€€ 
.
€€  
AddNormalInstaller
€€ &
(
€€& '
new
‹‹ 
ActionInstaller
‹‹ #
(
‹‹# $
subContainer
‹‹$ 0
=>
‹‹1 3
{
›› 
_installerMethod
ﬁﬁ (
(
ﬁﬁ( )
subContainer
ﬁﬁ) 5
,
ﬁﬁ5 6
(
ﬂﬂ 
TParam1
ﬂﬂ $
)
ﬂﬂ$ %
args
ﬂﬂ% )
[
ﬂﬂ) *
$num
ﬂﬂ* +
]
ﬂﬂ+ ,
.
ﬂﬂ, -
Value
ﬂﬂ- 2
,
ﬂﬂ2 3
(
‡‡ 
TParam2
‡‡ $
)
‡‡$ %
args
‡‡% )
[
‡‡) *
$num
‡‡* +
]
‡‡+ ,
.
‡‡, -
Value
‡‡- 2
,
‡‡2 3
(
·· 
TParam3
·· $
)
··$ %
args
··% )
[
··) *
$num
··* +
]
··+ ,
.
··, -
Value
··- 2
,
··2 3
(
‚‚ 
TParam4
‚‚ $
)
‚‚$ %
args
‚‚% )
[
‚‚) *
$num
‚‚* +
]
‚‚+ ,
.
‚‚, -
Value
‚‚- 2
,
‚‚2 3
(
„„ 
TParam5
„„ $
)
„„$ %
args
„„% )
[
„„) *
$num
„„* +
]
„„+ ,
.
„„, -
Value
„„- 2
,
„„2 3
(
‰‰ 
TParam6
‰‰ $
)
‰‰$ %
args
‰‰% )
[
‰‰) *
$num
‰‰* +
]
‰‰+ ,
.
‰‰, -
Value
‰‰- 2
,
‰‰2 3
(
ÂÂ 
TParam7
ÂÂ $
)
ÂÂ$ %
args
ÂÂ% )
[
ÂÂ) *
$num
ÂÂ* +
]
ÂÂ+ ,
.
ÂÂ, -
Value
ÂÂ- 2
,
ÂÂ2 3
(
ÊÊ 
TParam8
ÊÊ $
)
ÊÊ$ %
args
ÊÊ% )
[
ÊÊ) *
$num
ÊÊ* +
]
ÊÊ+ ,
.
ÊÊ, -
Value
ÊÊ- 2
,
ÊÊ2 3
(
ÁÁ 
TParam9
ÁÁ $
)
ÁÁ$ %
args
ÁÁ% )
[
ÁÁ) *
$num
ÁÁ* +
]
ÁÁ+ ,
.
ÁÁ, -
Value
ÁÁ- 2
,
ÁÁ2 3
(
ËË 
TParam10
ËË %
)
ËË% &
args
ËË& *
[
ËË* +
$num
ËË+ ,
]
ËË, -
.
ËË- .
Value
ËË. 3
)
ËË3 4
;
ËË4 5
}
ÈÈ 
)
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
}
ÎÎ 
}ÏÏ õ
zC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 3
'ConcreteIdArgConditionCopyNonLazyBinder 8
:9 :)
ArgConditionCopyNonLazyBinder; X
{ 
public 3
'ConcreteIdArgConditionCopyNonLazyBinder 6
(6 7
BindInfo7 ?
bindInfo@ H
)H I
: 
base 
( 
bindInfo 
) 
{ 	
}		 	
public )
ArgConditionCopyNonLazyBinder ,
WithConcreteId- ;
(; <
object< B
idC E
)E F
{ 	
BindInfo 
. 
ConcreteIdentifier '
=( )
id* ,
;, -
return 
this 
; 
} 	
} 
} õ
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder6.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
	TContract_ h
>h i
: 	*
FactoryArgumentsToChoiceBinder
 (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
	TContract_ h
>h i
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
:		 
base		 
(		 
bindContainer		  
,		  !
bindInfo		" *
,		* +
factoryBindInfo		, ;
)		; <
{

 	
} 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
TParam3@ G
,G H
TParam4I P
,P Q
TParam5R Y
,Y Z
TParam6[ b
,b c
	TContractd m
>m n
WithIdo u
(u v
objectv |

identifier	} á
)
á à
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ∞9
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\IProviderExtensions.cs
	namespace 	
Zenject
 
{ 
public 

static 
class 
IProviderExtensions +
{		 
static

 
readonly

 
List

 
<

 
TypeValuePair

 *
>

* +
EmptyArgList

, 8
=

9 :
new

; >
List

? C
<

C D
TypeValuePair

D Q
>

Q R
(

R S
)

S T
;

T U
public 
static 
void *
GetAllInstancesWithInjectSplit 9
(9 :
this 
	IProvider 
creator "
," #
InjectContext$ 1
context2 9
,9 :
out; >
Action? E
injectActionF R
,R S
ListT X
<X Y
objectY _
>_ `
buffera g
)g h
{ 	
creator 
. *
GetAllInstancesWithInjectSplit 2
(2 3
context 
, 
EmptyArgList %
,% &
out' *
injectAction+ 7
,7 8
buffer9 ?
)? @
;@ A
} 	
public 
static 
void 
GetAllInstances *
(* +
this 
	IProvider 
creator "
," #
InjectContext$ 1
context2 9
,9 :
List; ?
<? @
object@ F
>F G
bufferH N
)N O
{ 	
creator 
. 
GetAllInstances #
(# $
context$ +
,+ ,
EmptyArgList- 9
,9 :
buffer; A
)A B
;B C
} 	
public 
static 
void 
GetAllInstances *
(* +
this 
	IProvider 
creator "
," #
InjectContext$ 1
context2 9
,9 :
List; ?
<? @
TypeValuePair@ M
>M N
argsO S
,S T
ListU Y
<Y Z
objectZ `
>` a
bufferb h
)h i
{ 	
Assert 
. 
	IsNotNull 
( 
context $
)$ %
;% &
Action 
injectAction 
;  
creator 
. *
GetAllInstancesWithInjectSplit 2
(2 3
context3 :
,: ;
args< @
,@ A
outB E
injectActionF R
,R S
bufferT Z
)Z [
;[ \
if!! 
(!! 
injectAction!! 
!=!! 
null!!  $
)!!$ %
{"" 
injectAction## 
.## 
Invoke## #
(### $
)##$ %
;##% &
}$$ 
}%% 	
public'' 
static'' 
object'' 
TryGetInstance'' +
(''+ ,
this(( 
	IProvider(( 
creator(( "
,((" #
InjectContext(($ 1
context((2 9
)((9 :
{)) 	
return** 
creator** 
.** 
TryGetInstance** )
(**) *
context*** 1
,**1 2
EmptyArgList**3 ?
)**? @
;**@ A
}++ 	
public-- 
static-- 
object-- 
TryGetInstance-- +
(--+ ,
this.. 
	IProvider.. 
creator.. "
,.." #
InjectContext..$ 1
context..2 9
,..9 :
List..; ?
<..? @
TypeValuePair..@ M
>..M N
args..O S
)..S T
{// 	
var00 
allInstances00 
=00 
ZenPools00 '
.00' (
	SpawnList00( 1
<001 2
object002 8
>008 9
(009 :
)00: ;
;00; <
try22 
{33 
creator44 
.44 
GetAllInstances44 '
(44' (
context44( /
,44/ 0
args441 5
,445 6
allInstances447 C
)44C D
;44D E
if66 
(66 
allInstances66  
.66  !
Count66! &
==66' )
$num66* +
)66+ ,
{77 
return88 
null88 
;88  
}99 
Assert;; 
.;; 
That;; 
(;; 
allInstances;; (
.;;( )
Count;;) .
==;;/ 1
$num;;2 3
,;;3 4
$str<< X
)<<X Y
;<<Y Z
return>> 
allInstances>> #
[>># $
$num>>$ %
]>>% &
;>>& '
}?? 
finally@@ 
{AA 
ZenPoolsBB 
.BB 
DespawnListBB $
(BB$ %
allInstancesBB% 1
)BB1 2
;BB2 3
}CC 
}DD 	
publicFF 
staticFF 
objectFF 
GetInstanceFF (
(FF( )
thisGG 
	IProviderGG 
creatorGG "
,GG" #
InjectContextGG$ 1
contextGG2 9
)GG9 :
{HH 	
returnII 
creatorII 
.II 
GetInstanceII &
(II& '
contextII' .
,II. /
EmptyArgListII0 <
)II< =
;II= >
}JJ 	
publicLL 
staticLL 
objectLL 
GetInstanceLL (
(LL( )
thisMM 
	IProviderMM 
creatorMM "
,MM" #
InjectContextMM$ 1
contextMM2 9
,MM9 :
ListMM; ?
<MM? @
TypeValuePairMM@ M
>MMM N
argsMMO S
)MMS T
{NN 	
varOO 
allInstancesOO 
=OO 
ZenPoolsOO '
.OO' (
	SpawnListOO( 1
<OO1 2
objectOO2 8
>OO8 9
(OO9 :
)OO: ;
;OO; <
tryQQ 
{RR 
creatorSS 
.SS 
GetAllInstancesSS '
(SS' (
contextSS( /
,SS/ 0
argsSS1 5
,SS5 6
allInstancesSS7 C
)SSC D
;SSD E
AssertUU 
.UU 
ThatUU 
(UU 
allInstancesUU (
.UU( )
CountUU) .
>UU/ 0
$numUU1 2
,UU2 3
$strVV g
,VVg h
contextVVi p
.VVp q

MemberTypeVVq {
)VV{ |
;VV| }
AssertXX 
.XX 
ThatXX 
(XX 
allInstancesXX (
.XX( )
CountXX) .
==XX/ 1
$numXX2 3
,XX3 4
$strYY p
,YYp q
contextYYr y
.YYy z

MemberType	YYz Ñ
)
YYÑ Ö
;
YYÖ Ü
return[[ 
allInstances[[ #
[[[# $
$num[[$ %
][[% &
;[[& '
}\\ 
finally]] 
{^^ 
ZenPools__ 
.__ 
DespawnList__ $
(__$ %
allInstances__% 1
)__1 2
;__2 3
}`` 
}aa 	
}bb 
}cc Œ
}C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorBindInfo.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class '
SubContainerCreatorBindInfo ,
{ 
public		 
string		 
DefaultParentName		 '
{

 	
get 
; 
set 
; 
} 	
public 
bool 
CreateKernel  
{ 	
get 
; 
set 
; 
} 	
public 
Type 

KernelType 
{ 	
get 
; 
set 
; 
} 	
} 
} âW
zC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Conventions\ConventionFilterTypesBinder.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

class '
ConventionFilterTypesBinder ,
:- .-
!ConventionAssemblySelectionBinder/ P
{ 
public '
ConventionFilterTypesBinder *
(* +
ConventionBindInfo+ =
bindInfo> F
)F G
: 
base 
( 
bindInfo 
) 
{ 	
} 	
public '
ConventionFilterTypesBinder *
DerivingFromOrEqual+ >
<> ?
T? @
>@ A
(A B
)B C
{ 	
return 
DerivingFromOrEqual &
(& '
typeof' -
(- .
T. /
)/ 0
)0 1
;1 2
} 	
public '
ConventionFilterTypesBinder *
DerivingFromOrEqual+ >
(> ?
Type? C

parentTypeD N
)N O
{ 	
BindInfo 
. 
AddTypeFilter "
(" #
type# '
=>( *
type+ /
./ 0
DerivesFromOrEqual0 B
(B C

parentTypeC M
)M N
)N O
;O P
return 
this 
; 
} 	
public '
ConventionFilterTypesBinder *
DerivingFrom+ 7
<7 8
T8 9
>9 :
(: ;
); <
{ 	
return   
DerivingFrom   
(    
typeof    &
(  & '
T  ' (
)  ( )
)  ) *
;  * +
}!! 	
public## '
ConventionFilterTypesBinder## *
DerivingFrom##+ 7
(##7 8
Type##8 <

parentType##= G
)##G H
{$$ 	
BindInfo%% 
.%% 
AddTypeFilter%% "
(%%" #
type%%# '
=>%%( *
type%%+ /
.%%/ 0
DerivesFrom%%0 ;
(%%; <

parentType%%< F
)%%F G
)%%G H
;%%H I
return&& 
this&& 
;&& 
}'' 	
public)) '
ConventionFilterTypesBinder)) *
WithAttribute))+ 8
<))8 9
T))9 :
>)): ;
()); <
)))< =
where** 
T** 
:** 
	Attribute** 
{++ 	
return,, 
WithAttribute,,  
(,,  !
typeof,,! '
(,,' (
T,,( )
),,) *
),,* +
;,,+ ,
}-- 	
public// '
ConventionFilterTypesBinder// *
WithAttribute//+ 8
(//8 9
Type//9 =
	attribute//> G
)//G H
{00 	
Assert11 
.11 
That11 
(11 
	attribute11 !
.11! "
DerivesFrom11" -
<11- .
	Attribute11. 7
>117 8
(118 9
)119 :
)11: ;
;11; <
BindInfo22 
.22 
AddTypeFilter22 "
(22" #
t22# $
=>22% '
t22( )
.22) *
HasAttribute22* 6
(226 7
	attribute227 @
)22@ A
)22A B
;22B C
return33 
this33 
;33 
}44 	
public66 '
ConventionFilterTypesBinder66 *
WithoutAttribute66+ ;
<66; <
T66< =
>66= >
(66> ?
)66? @
where77 
T77 
:77 
	Attribute77 
{88 	
return99 
WithoutAttribute99 #
(99# $
typeof99$ *
(99* +
T99+ ,
)99, -
)99- .
;99. /
}:: 	
public<< '
ConventionFilterTypesBinder<< *
WithoutAttribute<<+ ;
(<<; <
Type<<< @
	attribute<<A J
)<<J K
{== 	
Assert>> 
.>> 
That>> 
(>> 
	attribute>> !
.>>! "
DerivesFrom>>" -
<>>- .
	Attribute>>. 7
>>>7 8
(>>8 9
)>>9 :
)>>: ;
;>>; <
BindInfo?? 
.?? 
AddTypeFilter?? "
(??" #
t??# $
=>??% '
!??( )
t??) *
.??* +
HasAttribute??+ 7
(??7 8
	attribute??8 A
)??A B
)??B C
;??C D
return@@ 
this@@ 
;@@ 
}AA 	
publicCC '
ConventionFilterTypesBinderCC *
WithAttributeWhereCC+ =
<CC= >
TCC> ?
>CC? @
(CC@ A
FuncCCA E
<CCE F
TCCF G
,CCG H
boolCCI M
>CCM N
	predicateCCO X
)CCX Y
whereDD 
TDD 
:DD 
	AttributeDD 
{EE 	
BindInfoFF 
.FF 
AddTypeFilterFF "
(FF" #
tFF# $
=>FF% '
tFF( )
.FF) *
HasAttributeFF* 6
<FF6 7
TFF7 8
>FF8 9
(FF9 :
)FF: ;
&&FF< >
tFF? @
.FF@ A
AllAttributesFFA N
<FFN O
TFFO P
>FFP Q
(FFQ R
)FFR S
.FFS T
AllFFT W
(FFW X
	predicateFFX a
)FFa b
)FFb c
;FFc d
returnGG 
thisGG 
;GG 
}HH 	
publicJJ '
ConventionFilterTypesBinderJJ *
WhereJJ+ 0
(JJ0 1
FuncJJ1 5
<JJ5 6
TypeJJ6 :
,JJ: ;
boolJJ< @
>JJ@ A
	predicateJJB K
)JJK L
{KK 	
BindInfoLL 
.LL 
AddTypeFilterLL "
(LL" #
	predicateLL# ,
)LL, -
;LL- .
returnMM 
thisMM 
;MM 
}NN 	
publicPP '
ConventionFilterTypesBinderPP *
InNamespacePP+ 6
(PP6 7
stringPP7 =
nsPP> @
)PP@ A
{QQ 	
returnRR 
InNamespacesRR 
(RR  
nsRR  "
)RR" #
;RR# $
}SS 	
publicUU '
ConventionFilterTypesBinderUU *
InNamespacesUU+ 7
(UU7 8
paramsUU8 >
stringUU? E
[UUE F
]UUF G

namespacesUUH R
)UUR S
{VV 	
returnWW 
InNamespacesWW 
(WW  
(WW  !
IEnumerableWW! ,
<WW, -
stringWW- 3
>WW3 4
)WW4 5

namespacesWW5 ?
)WW? @
;WW@ A
}XX 	
publicZZ '
ConventionFilterTypesBinderZZ *
InNamespacesZZ+ 7
(ZZ7 8
IEnumerableZZ8 C
<ZZC D
stringZZD J
>ZZJ K

namespacesZZL V
)ZZV W
{[[ 	
BindInfo\\ 
.\\ 
AddTypeFilter\\ "
(\\" #
t\\# $
=>\\% '

namespaces\\( 2
.\\2 3
Any\\3 6
(\\6 7
n\\7 8
=>\\9 ;
IsInNamespace\\< I
(\\I J
t\\J K
,\\K L
n\\M N
)\\N O
)\\O P
)\\P Q
;\\Q R
return]] 
this]] 
;]] 
}^^ 	
public`` '
ConventionFilterTypesBinder`` *

WithSuffix``+ 5
(``5 6
string``6 <
suffix``= C
)``C D
{aa 	
BindInfobb 
.bb 
AddTypeFilterbb "
(bb" #
tbb# $
=>bb% '
tbb( )
.bb) *
Namebb* .
.bb. /
EndsWithbb/ 7
(bb7 8
suffixbb8 >
)bb> ?
)bb? @
;bb@ A
returncc 
thiscc 
;cc 
}dd 	
publicff '
ConventionFilterTypesBinderff *

WithPrefixff+ 5
(ff5 6
stringff6 <
prefixff= C
)ffC D
{gg 	
BindInfohh 
.hh 
AddTypeFilterhh "
(hh" #
thh# $
=>hh% '
thh( )
.hh) *
Namehh* .
.hh. /

StartsWithhh/ 9
(hh9 :
prefixhh: @
)hh@ A
)hhA B
;hhB C
returnii 
thisii 
;ii 
}jj 	
publicll '
ConventionFilterTypesBinderll *
MatchingRegexll+ 8
(ll8 9
stringll9 ?
patternll@ G
)llG H
{mm 	
returnnn 
MatchingRegexnn  
(nn  !
patternnn! (
,nn( )
RegexOptionsnn* 6
.nn6 7
Nonenn7 ;
)nn; <
;nn< =
}oo 	
publicqq '
ConventionFilterTypesBinderqq *
MatchingRegexqq+ 8
(qq8 9
stringqq9 ?
patternqq@ G
,qqG H
RegexOptionsqqI U
optionsqqV ]
)qq] ^
{rr 	
returnss 
MatchingRegexss  
(ss  !
newss! $
Regexss% *
(ss* +
patternss+ 2
,ss2 3
optionsss4 ;
)ss; <
)ss< =
;ss= >
}tt 	
publicvv '
ConventionFilterTypesBindervv *
MatchingRegexvv+ 8
(vv8 9
Regexvv9 >
regexvv? D
)vvD E
{ww 	
BindInfoxx 
.xx 
AddTypeFilterxx "
(xx" #
txx# $
=>xx% '
regexxx( -
.xx- .
IsMatchxx. 5
(xx5 6
txx6 7
.xx7 8
Namexx8 <
)xx< =
)xx= >
;xx> ?
returnyy 
thisyy 
;yy 
}zz 	
static|| 
bool|| 
IsInNamespace|| !
(||! "
Type||" &
type||' +
,||+ ,
string||- 3

requiredNs||4 >
)||> ?
{}} 	
var~~ 
actualNs~~ 
=~~ 
type~~ 
.~~  
	Namespace~~  )
??~~* ,
$str~~- /
;~~/ 0
if
ÄÄ 
(
ÄÄ 

requiredNs
ÄÄ 
.
ÄÄ 
Length
ÄÄ !
>
ÄÄ" #
actualNs
ÄÄ$ ,
.
ÄÄ, -
Length
ÄÄ- 3
)
ÄÄ3 4
{
ÅÅ 
return
ÇÇ 
false
ÇÇ 
;
ÇÇ 
}
ÉÉ 
return
ÖÖ 
actualNs
ÖÖ 
.
ÖÖ 

StartsWith
ÖÖ &
(
ÖÖ& '

requiredNs
ÖÖ' 1
)
ÖÖ1 2
&&
ÜÜ 
(
ÜÜ 
actualNs
ÜÜ 
.
ÜÜ 
Length
ÜÜ #
==
ÜÜ$ &

requiredNs
ÜÜ' 1
.
ÜÜ1 2
Length
ÜÜ2 8
||
ÜÜ9 ;
actualNs
ÜÜ< D
[
ÜÜD E

requiredNs
ÜÜE O
.
ÜÜO P
Length
ÜÜP V
]
ÜÜV W
==
ÜÜX Z
$char
ÜÜ[ ^
)
ÜÜ^ _
;
ÜÜ_ `
}
áá 	
}
àà 
}ââ »
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\ArrayPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
	ArrayPool 
< 
T 
> 
: $
StaticMemoryPoolBaseBase  8
<8 9
T9 :
[: ;
]; <
>< =
{ 
readonly 
int 
_length 
; 
public		 
	ArrayPool		 
(		 
int		 
length		 #
)		# $
:

 
base

 
(

 
OnDespawned

 
)

 
{ 	
_length 
= 
length 
; 
} 	
static 
void 
OnDespawned 
(  
T  !
[! "
]" #
arr$ '
)' (
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
arr  #
.# $
Length$ *
;* +
i, -
++- /
)/ 0
{ 
arr 
[ 
i 
] 
= 
default  
(  !
T! "
)" #
;# $
} 
} 	
public 
T 
[ 
] 
Spawn 
( 
) 
{ 	
{ 
return 
SpawnInternal $
($ %
)% &
;& '
} 
} 	
	protected!! 
override!! 
T!! 
[!! 
]!! 
Alloc!! $
(!!$ %
)!!% &
{"" 	
return## 
new## 
T## 
[## 
_length##  
]##  !
;##! "
}$$ 	
static&& 
readonly&& 

Dictionary&& "
<&&" #
int&&# &
,&&& '
	ArrayPool&&( 1
<&&1 2
T&&2 3
>&&3 4
>&&4 5
_pools&&6 <
=&&= >
new'' 

Dictionary'' 
<'' 
int'' 
,'' 
	ArrayPool''  )
<'') *
T''* +
>''+ ,
>'', -
(''- .
)''. /
;''/ 0
public)) 
static)) 
	ArrayPool)) 
<))  
T))  !
>))! "
GetPool))# *
())* +
int))+ .
length))/ 5
)))5 6
{** 	
	ArrayPool++ 
<++ 
T++ 
>++ 
pool++ 
;++ 
if-- 
(-- 
!-- 
_pools-- 
.-- 
TryGetValue-- #
(--# $
length--$ *
,--* +
out--, /
pool--0 4
)--4 5
)--5 6
{.. 
pool// 
=// 
new// 
	ArrayPool// $
<//$ %
T//% &
>//& '
(//' (
length//( .
)//. /
;/// 0
_pools00 
.00 
Add00 
(00 
length00 !
,00! "
pool00# '
)00' (
;00( )
}11 
return33 
pool33 
;33 
}44 	
}55 
}66 ≤
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\DeclareSignal\SignalDeclarationBindInfo.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
SignalDeclarationBindInfo *
{ 
public %
SignalDeclarationBindInfo (
(( )
Type) -

signalType. 8
)8 9
{		 	

SignalType

 
=

 

signalType

 #
;

# $
} 	
public 
object 

Identifier  
{ 	
get 
; 
set 
; 
} 	
public 
Type 

SignalType 
{ 	
get 
; 
private 
set 
; 
} 	
public 
bool 
RunAsync 
{ 	
get 
; 
set 
; 
} 	
public 
int 
TickPriority 
{ 	
get 
; 
set 
; 
} 	
public!! )
SignalMissingHandlerResponses!! ,"
MissingHandlerResponse!!- C
{"" 	
get## 
;## 
set## 
;## 
}$$ 	
}%% 
}&& ≈A
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\IMemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IMemoryPool  
{ 
int 
NumTotal 
{ 
get 
; 
} 
int 
	NumActive 
{ 
get 
; 
} 
int		 
NumInactive		 
{		 
get		 
;		 
}		  
Type 
ItemType 
{ 	
get 
; 
} 	
void 
Resize 
( 
int 
desiredPoolSize '
)' (
;( )
void 
Clear 
( 
) 
; 
void 
ExpandBy 
( 
int 
numToAdd "
)" #
;# $
void$$ 
ShrinkBy$$ 
($$ 
int$$ 
numToRemove$$ %
)$$% &
;$$& '
void&& 
Despawn&& 
(&& 
object&& 
obj&& 
)&&  
;&&  !
}'' 
public)) 

	interface)) "
IDespawnableMemoryPool)) +
<))+ ,
TValue)), 2
>))2 3
:))4 5
IMemoryPool))6 A
{** 
void++ 
Despawn++ 
(++ 
TValue++ 
item++  
)++  !
;++! "
},, 
public.. 

	interface.. 
IMemoryPool..  
<..  !
TValue..! '
>..' (
:..) *"
IDespawnableMemoryPool..+ A
<..A B
TValue..B H
>..H I
{// 
TValue00 
Spawn00 
(00 
)00 
;00 
}11 
public33 

	interface33 
IMemoryPool33  
<33  !
in33! #
TParam133$ +
,33+ ,
TValue33- 3
>333 4
:335 6"
IDespawnableMemoryPool337 M
<33M N
TValue33N T
>33T U
{44 
TValue55 
Spawn55 
(55 
TParam155 
param55 "
)55" #
;55# $
}66 
public88 

	interface88 
IMemoryPool88  
<88  !
in88! #
TParam188$ +
,88+ ,
in88- /
TParam2880 7
,887 8
TValue889 ?
>88? @
:88A B"
IDespawnableMemoryPool88C Y
<88Y Z
TValue88Z `
>88` a
{99 
TValue:: 
Spawn:: 
(:: 
TParam1:: 
param1:: #
,::# $
TParam2::% ,
param2::- 3
)::3 4
;::4 5
};; 
public== 

	interface== 
IMemoryPool==  
<==  !
in==! #
TParam1==$ +
,==+ ,
in==- /
TParam2==0 7
,==7 8
in==9 ;
TParam3==< C
,==C D
TValue==E K
>==K L
:==M N"
IDespawnableMemoryPool==O e
<==e f
TValue==f l
>==l m
{>> 
TValue?? 
Spawn?? 
(?? 
TParam1?? 
param1?? #
,??# $
TParam2??% ,
param2??- 3
,??3 4
TParam3??5 <
param3??= C
)??C D
;??D E
}@@ 
publicBB 

	interfaceBB 
IMemoryPoolBB  
<BB  !
inBB! #
TParam1BB$ +
,BB+ ,
inBB- /
TParam2BB0 7
,BB7 8
inBB9 ;
TParam3BB< C
,BBC D
inBBE G
TParam4BBH O
,BBO P
TValueBBQ W
>BBW X
:BBY Z"
IDespawnableMemoryPoolBB[ q
<BBq r
TValueBBr x
>BBx y
{CC 
TValueDD 
SpawnDD 
(DD 
TParam1DD 
param1DD #
,DD# $
TParam2DD% ,
param2DD- 3
,DD3 4
TParam3DD5 <
param3DD= C
,DDC D
TParam4DDE L
param4DDM S
)DDS T
;DDT U
}EE 
publicGG 

	interfaceGG 
IMemoryPoolGG  
<GG  !
inGG! #
TParam1GG$ +
,GG+ ,
inGG- /
TParam2GG0 7
,GG7 8
inGG9 ;
TParam3GG< C
,GGC D
inGGE G
TParam4GGH O
,GGO P
inGGQ S
TParam5GGT [
,GG[ \
TValueGG] c
>GGc d
:GGe f"
IDespawnableMemoryPoolGGg }
<GG} ~
TValue	GG~ Ñ
>
GGÑ Ö
{HH 
TValueII 
SpawnII 
(II 
TParam1II 
param1II #
,II# $
TParam2II% ,
param2II- 3
,II3 4
TParam3II5 <
param3II= C
,IIC D
TParam4IIE L
param4IIM S
,IIS T
TParam5IIU \
param5II] c
)IIc d
;IId e
}JJ 
publicLL 

	interfaceLL 
IMemoryPoolLL  
<LL  !
inLL! #
TParam1LL$ +
,LL+ ,
inLL- /
TParam2LL0 7
,LL7 8
inLL9 ;
TParam3LL< C
,LLC D
inLLE G
TParam4LLH O
,LLO P
inLLQ S
TParam5LLT [
,LL[ \
inLL] _
TParam6LL` g
,LLg h
TValueLLi o
>LLo p
:LLq r#
IDespawnableMemoryPool	LLs â
<
LLâ ä
TValue
LLä ê
>
LLê ë
{MM 
TValueNN 
SpawnNN 
(NN 
TParam1NN 
param1NN #
,NN# $
TParam2NN% ,
param2NN- 3
,NN3 4
TParam3NN5 <
param3NN= C
,NNC D
TParam4NNE L
param4NNM S
,NNS T
TParam5NNU \
param5NN] c
,NNc d
TParam6NNe l
param6NNm s
)NNs t
;NNt u
}OO 
publicQQ 

	interfaceQQ 
IMemoryPoolQQ  
<QQ  !
inQQ! #
TParam1QQ$ +
,QQ+ ,
inQQ- /
TParam2QQ0 7
,QQ7 8
inQQ9 ;
TParam3QQ< C
,QQC D
inQQE G
TParam4QQH O
,QQO P
inQQQ S
TParam5QQT [
,QQ[ \
inQQ] _
TParam6QQ` g
,QQg h
inQQi k
TParam7QQl s
,QQs t
TValueQQu {
>QQ{ |
:QQ} ~#
IDespawnableMemoryPool	QQ ï
<
QQï ñ
TValue
QQñ ú
>
QQú ù
{RR 
TValueSS 
SpawnSS 
(SS 
TParam1SS 
param1SS #
,SS# $
TParam2SS% ,
param2SS- 3
,SS3 4
TParam3SS5 <
param3SS= C
,SSC D
TParam4SSE L
param4SSM S
,SSS T
TParam5SSU \
param5SS] c
,SSc d
TParam6SSe l
param6SSm s
,SSs t
TParam7SSu |
param7	SS} É
)
SSÉ Ñ
;
SSÑ Ö
}TT 
publicVV 

	interfaceVV 
IMemoryPoolVV  
<VV  !
inVV! #
TParam1VV$ +
,VV+ ,
inVV- /
TParam2VV0 7
,VV7 8
inVV9 ;
TParam3VV< C
,VVC D
inVVE G
TParam4VVH O
,VVO P
inVVQ S
TParam5VVT [
,VV[ \
inVV] _
TParam6VV` g
,VVg h
inVVi k
TParam7VVl s
,VVs t
inVVu w
TParam8VVx 
,	VV Ä
TValue
VVÅ á
>
VVá à
:
VVâ ä$
IDespawnableMemoryPool
VVã °
<
VV° ¢
TValue
VV¢ ®
>
VV® ©
{WW 
TValueXX 
SpawnXX 
(XX 
TParam1XX 
param1XX #
,XX# $
TParam2XX% ,
param2XX- 3
,XX3 4
TParam3XX5 <
param3XX= C
,XXC D
TParam4XXE L
param4XXM S
,XXS T
TParam5XXU \
param5XX] c
,XXc d
TParam6XXe l
param6XXm s
,XXs t
TParam7XXu |
param7	XX} É
,
XXÉ Ñ
TParam8
XXÖ å
param8
XXç ì
)
XXì î
;
XXî ï
}YY 
}ZZ È¨
[C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\Context.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class 
Context !
:" #
MonoBehaviour$ 1
{ 
[ 	
SerializeField	 
] 
List 
< %
ScriptableObjectInstaller &
>& ''
_scriptableObjectInstallers( C
=D E
newF I
ListJ N
<N O%
ScriptableObjectInstallerO h
>h i
(i j
)j k
;k l
[ 	 
FormerlySerializedAs	 
( 
$str *
)* +
]+ ,
[ 	 
FormerlySerializedAs	 
( 
$str +
)+ ,
], -
[ 	
SerializeField	 
] 
List 
< 
MonoInstaller 
> 
_monoInstallers +
=, -
new. 1
List2 6
<6 7
MonoInstaller7 D
>D E
(E F
)F G
;G H
[ 	
SerializeField	 
] 
List 
< 
MonoInstaller 
> 
_installerPrefabs -
=. /
new0 3
List4 8
<8 9
MonoInstaller9 F
>F G
(G H
)H I
;I J
List 
< 
InstallerBase 
> 
_normalInstallers -
=. /
new0 3
List4 8
<8 9
InstallerBase9 F
>F G
(G H
)H I
;I J
List 
< 
Type 
> !
_normalInstallerTypes (
=) *
new+ .
List/ 3
<3 4
Type4 8
>8 9
(9 :
): ;
;; <
public 
IEnumerable 
< 
MonoInstaller (
>( )

Installers* 4
{   	
get!! 
{!! 
return!! 
_monoInstallers!! (
;!!( )
}!!* +
set"" 
{## 
_monoInstallers$$ 
.$$  
Clear$$  %
($$% &
)$$& '
;$$' (
_monoInstallers%% 
.%%  
AddRange%%  (
(%%( )
value%%) .
)%%. /
;%%/ 0
}&& 
}'' 	
public)) 
IEnumerable)) 
<)) 
MonoInstaller)) (
>))( )
InstallerPrefabs))* :
{** 	
get++ 
{++ 
return++ 
_installerPrefabs++ *
;++* +
}++, -
set,, 
{-- 
_installerPrefabs.. !
...! "
Clear.." '
(..' (
)..( )
;..) *
_installerPrefabs// !
.//! "
AddRange//" *
(//* +
value//+ 0
)//0 1
;//1 2
}00 
}11 	
public33 
IEnumerable33 
<33 %
ScriptableObjectInstaller33 4
>334 5&
ScriptableObjectInstallers336 P
{44 	
get55 
{55 
return55 '
_scriptableObjectInstallers55 4
;554 5
}556 7
set66 
{77 '
_scriptableObjectInstallers88 +
.88+ ,
Clear88, 1
(881 2
)882 3
;883 4'
_scriptableObjectInstallers99 +
.99+ ,
AddRange99, 4
(994 5
value995 :
)99: ;
;99; <
}:: 
};; 	
public>> 
IEnumerable>> 
<>> 
Type>> 
>>>   
NormalInstallerTypes>>! 5
{?? 	
get@@ 
{@@ 
return@@ !
_normalInstallerTypes@@ .
;@@. /
}@@0 1
setAA 
{BB 
AssertCC 
.CC 
ThatCC 
(CC 
valueCC !
.CC! "
AllCC" %
(CC% &
xCC& '
=>CC( *
xCC+ ,
!=CC- /
nullCC0 4
&&CC5 7
xCC8 9
.CC9 :
DerivesFromCC: E
<CCE F
InstallerBaseCCF S
>CCS T
(CCT U
)CCU V
)CCV W
)CCW X
;CCX Y!
_normalInstallerTypesEE %
.EE% &
ClearEE& +
(EE+ ,
)EE, -
;EE- .!
_normalInstallerTypesFF %
.FF% &
AddRangeFF& .
(FF. /
valueFF/ 4
)FF4 5
;FF5 6
}GG 
}HH 	
publicKK 
IEnumerableKK 
<KK 
InstallerBaseKK (
>KK( )
NormalInstallersKK* :
{LL 	
getMM 
{MM 
returnMM 
_normalInstallersMM *
;MM* +
}MM, -
setNN 
{OO 
_normalInstallersPP !
.PP! "
ClearPP" '
(PP' (
)PP( )
;PP) *
_normalInstallersQQ !
.QQ! "
AddRangeQQ" *
(QQ* +
valueQQ+ 0
)QQ0 1
;QQ1 2
}RR 
}SS 	
publicUU 
abstractUU 
DiContainerUU #
	ContainerUU$ -
{VV 	
getWW 
;WW 
}XX 	
publicYY 
abstractYY 
IEnumerableYY #
<YY# $

GameObjectYY$ .
>YY. /
GetRootGameObjectsYY0 B
(YYB C
)YYC D
;YYD E
public\\ 
void\\ "
AddNormalInstallerType\\ *
(\\* +
Type\\+ /
installerType\\0 =
)\\= >
{]] 	
Assert^^ 
.^^ 
	IsNotNull^^ 
(^^ 
installerType^^ *
)^^* +
;^^+ ,
Assert__ 
.__ 
That__ 
(__ 
installerType__ %
.__% &
DerivesFrom__& 1
<__1 2
InstallerBase__2 ?
>__? @
(__@ A
)__A B
)__B C
;__C D!
_normalInstallerTypesaa !
.aa! "
Addaa" %
(aa% &
installerTypeaa& 3
)aa3 4
;aa4 5
}bb 	
publicdd 
voiddd 
AddNormalInstallerdd &
(dd& '
InstallerBasedd' 4
	installerdd5 >
)dd> ?
{ee 	
_normalInstallersff 
.ff 
Addff !
(ff! "
	installerff" +
)ff+ ,
;ff, -
}gg 	
voidii %
CheckInstallerPrefabTypesii &
(ii& '
Listii' +
<ii+ ,
MonoInstallerii, 9
>ii9 :

installersii; E
,iiE F
ListiiG K
<iiK L
MonoInstalleriiL Y
>iiY Z
installerPrefabsii[ k
)iik l
{jj 	
foreachkk 
(kk 
varkk 
	installerkk "
inkk# %

installerskk& 0
)kk0 1
{ll 
Assertmm 
.mm 
	IsNotNullmm  
(mm  !
	installermm! *
,mm* +
$strmm, S
,mmS T
namemmU Y
)mmY Z
;mmZ [
}{{ 
foreach}} 
(}} 
var}} 
installerPrefab}} (
in}}) +
installerPrefabs}}, <
)}}< =
{~~ 
Assert 
. 
	IsNotNull  
(  !
installerPrefab! 0
,0 1
$str2 P
)P Q
;Q R
Assert
àà 
.
àà 
That
àà 
(
àà 
installerPrefab
àà +
.
àà+ ,
GetComponent
àà, 8
<
àà8 9
MonoInstaller
àà9 F
>
ààF G
(
ààG H
)
ààH I
!=
ààJ L
null
ààM Q
,
ààQ R
$str
ââ j
,
ââj k
installerPrefab
ââl {
.
ââ{ |
nameââ| Ä
)ââÄ Å
;ââÅ Ç
}
ää 
}
ãã 	
	protected
çç 
void
çç 
InstallInstallers
çç (
(
çç( )
)
çç) *
{
éé 	
InstallInstallers
èè 
(
èè 
_normalInstallers
êê !
,
êê! "#
_normalInstallerTypes
êê# 8
,
êê8 9)
_scriptableObjectInstallers
êê: U
,
êêU V
_monoInstallers
êêW f
,
êêf g
_installerPrefabs
êêh y
)
êêy z
;
êêz {
}
ëë 	
	protected
ìì 
void
ìì 
InstallInstallers
ìì (
(
ìì( )
List
îî 
<
îî 
InstallerBase
îî 
>
îî 
normalInstallers
îî  0
,
îî0 1
List
ïï 
<
ïï 
Type
ïï 
>
ïï "
normalInstallerTypes
ïï +
,
ïï+ ,
List
ññ 
<
ññ '
ScriptableObjectInstaller
ññ *
>
ññ* +(
scriptableObjectInstallers
ññ, F
,
ññF G
List
óó 
<
óó 
MonoInstaller
óó 
>
óó 

installers
óó  *
,
óó* +
List
òò 
<
òò 
MonoInstaller
òò 
>
òò 
installerPrefabs
òò  0
)
òò0 1
{
ôô 	'
CheckInstallerPrefabTypes
öö %
(
öö% &

installers
öö& 0
,
öö0 1
installerPrefabs
öö2 B
)
ööB C
;
ööC D
var
ÆÆ 
allInstallers
ÆÆ 
=
ÆÆ 
normalInstallers
ÆÆ  0
.
ÆÆ0 1
Cast
ÆÆ1 5
<
ÆÆ5 6

IInstaller
ÆÆ6 @
>
ÆÆ@ A
(
ÆÆA B
)
ÆÆB C
.
ØØ 
Concat
ØØ 
(
ØØ (
scriptableObjectInstallers
ØØ 2
.
ØØ2 3
Cast
ØØ3 7
<
ØØ7 8

IInstaller
ØØ8 B
>
ØØB C
(
ØØC D
)
ØØD E
)
ØØE F
.
∞∞ 
Concat
∞∞ 
(
∞∞ 

installers
∞∞ "
.
∞∞" #
Cast
∞∞# '
<
∞∞' (

IInstaller
∞∞( 2
>
∞∞2 3
(
∞∞3 4
)
∞∞4 5
)
∞∞5 6
.
∞∞6 7
ToList
∞∞7 =
(
∞∞= >
)
∞∞> ?
;
∞∞? @
foreach
≤≤ 
(
≤≤ 
var
≤≤ 
installerPrefab
≤≤ (
in
≤≤) +
installerPrefabs
≤≤, <
)
≤≤< =
{
≥≥ 
Assert
¥¥ 
.
¥¥ 
	IsNotNull
¥¥  
(
¥¥  !
installerPrefab
¥¥! 0
,
¥¥0 1
$str
¥¥2 X
,
¥¥X Y
GetType
¥¥Z a
(
¥¥a b
)
¥¥b c
)
¥¥c d
;
¥¥d e

GameObject
∂∂ !
installerGameObject
∂∂ .
;
∂∂. /
{
ªª !
installerGameObject
ºº '
=
ºº( )

GameObject
ºº* 4
.
ºº4 5
Instantiate
ºº5 @
(
ºº@ A
installerPrefab
ººA P
.
ººP Q

gameObject
ººQ [
)
ºº[ \
;
ºº\ ]
}
ΩΩ !
installerGameObject
øø #
.
øø# $
	transform
øø$ -
.
øø- .
	SetParent
øø. 7
(
øø7 8
	transform
øø8 A
,
øøA B
false
øøC H
)
øøH I
;
øøI J
var
¿¿ 
	installer
¿¿ 
=
¿¿ !
installerGameObject
¿¿  3
.
¿¿3 4
GetComponent
¿¿4 @
<
¿¿@ A
MonoInstaller
¿¿A N
>
¿¿N O
(
¿¿O P
)
¿¿P Q
;
¿¿Q R
Assert
¬¬ 
.
¬¬ 
	IsNotNull
¬¬  
(
¬¬  !
	installer
¬¬! *
,
¬¬* +
$str
¬¬, `
,
¬¬` a
installerPrefab
¬¬b q
.
¬¬q r
name
¬¬r v
)
¬¬v w
;
¬¬w x
allInstallers
ƒƒ 
.
ƒƒ 
Add
ƒƒ !
(
ƒƒ! "
	installer
ƒƒ" +
)
ƒƒ+ ,
;
ƒƒ, -
}
≈≈ 
foreach
«« 
(
«« 
var
«« 
installerType
«« &
in
««' )"
normalInstallerTypes
««* >
)
««> ?
{
»» 
var
…… 
	installer
…… 
=
…… 
(
……  !
InstallerBase
……! .
)
……. /
	Container
……/ 8
.
……8 9
Instantiate
……9 D
(
……D E
installerType
……E R
)
……R S
;
……S T
{
ŒŒ 
	installer
œœ 
.
œœ 
InstallBindings
œœ -
(
œœ- .
)
œœ. /
;
œœ/ 0
}
–– 
}
—— 
foreach
”” 
(
”” 
var
”” 
	installer
”” "
in
””# %
allInstallers
””& 3
)
””3 4
{
‘‘ 
Assert
’’ 
.
’’ 
	IsNotNull
’’  
(
’’  !
	installer
’’! *
,
’’* +
$str
÷÷ 3
,
÷÷3 4
GetType
÷÷5 <
(
÷÷< =
)
÷÷= >
)
÷÷> ?
;
÷÷? @
	Container
ÿÿ 
.
ÿÿ 
Inject
ÿÿ  
(
ÿÿ  !
	installer
ÿÿ! *
)
ÿÿ* +
;
ÿÿ+ ,
{
›› 
	installer
ﬁﬁ 
.
ﬁﬁ 
InstallBindings
ﬁﬁ -
(
ﬁﬁ- .
)
ﬁﬁ. /
;
ﬁﬁ/ 0
}
ﬂﬂ 
}
‡‡ 
}
·· 	
	protected
„„ 
void
„„ "
InstallSceneBindings
„„ +
(
„„+ ,
List
„„, 0
<
„„0 1
MonoBehaviour
„„1 >
>
„„> ?&
injectableMonoBehaviours
„„@ X
)
„„X Y
{
‰‰ 	
foreach
ÂÂ 
(
ÂÂ 
var
ÂÂ 
binding
ÂÂ  
in
ÂÂ! #&
injectableMonoBehaviours
ÂÂ$ <
.
ÂÂ< =
OfType
ÂÂ= C
<
ÂÂC D
ZenjectBinding
ÂÂD R
>
ÂÂR S
(
ÂÂS T
)
ÂÂT U
)
ÂÂU V
{
ÊÊ 
if
ÁÁ 
(
ÁÁ 
binding
ÁÁ 
==
ÁÁ 
null
ÁÁ #
)
ÁÁ# $
{
ËË 
continue
ÈÈ 
;
ÈÈ 
}
ÍÍ 
if
ÏÏ 
(
ÏÏ 
binding
ÏÏ 
.
ÏÏ 
Context
ÏÏ #
==
ÏÏ$ &
null
ÏÏ' +
||
ÏÏ, .
(
ÏÏ/ 0
binding
ÏÏ0 7
.
ÏÏ7 8
UseSceneContext
ÏÏ8 G
&&
ÏÏH J
this
ÏÏK O
is
ÏÏP R
SceneContext
ÏÏS _
)
ÏÏ_ `
)
ÏÏ` a
{
ÌÌ 
binding
ÓÓ 
.
ÓÓ 
Context
ÓÓ #
=
ÓÓ$ %
this
ÓÓ& *
;
ÓÓ* +
}
ÔÔ 
}
 
foreach
˜˜ 
(
˜˜ 
var
˜˜ 
binding
˜˜  
in
˜˜! #
	Resources
˜˜$ -
.
˜˜- ."
FindObjectsOfTypeAll
˜˜. B
<
˜˜B C
ZenjectBinding
˜˜C Q
>
˜˜Q R
(
˜˜R S
)
˜˜S T
)
˜˜T U
{
¯¯ 
if
˘˘ 
(
˘˘ 
binding
˘˘ 
==
˘˘ 
null
˘˘ #
)
˘˘# $
{
˙˙ 
continue
˚˚ 
;
˚˚ 
}
¸¸ 
if
ÄÄ 
(
ÄÄ 
this
ÄÄ 
is
ÄÄ 
SceneContext
ÄÄ (
)
ÄÄ( )
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
binding
ÇÇ 
.
ÇÇ  
Context
ÇÇ  '
==
ÇÇ( *
null
ÇÇ+ /
&&
ÇÇ0 2
binding
ÇÇ3 :
.
ÇÇ: ;
UseSceneContext
ÇÇ; J
&&
ÉÉ 
binding
ÉÉ "
.
ÉÉ" #

gameObject
ÉÉ# -
.
ÉÉ- .
scene
ÉÉ. 3
==
ÉÉ4 6

gameObject
ÉÉ7 A
.
ÉÉA B
scene
ÉÉB G
)
ÉÉG H
{
ÑÑ 
binding
ÖÖ 
.
ÖÖ  
Context
ÖÖ  '
=
ÖÖ( )
this
ÖÖ* .
;
ÖÖ. /
}
ÜÜ 
}
áá 
if
ââ 
(
ââ 
binding
ââ 
.
ââ 
Context
ââ #
==
ââ$ &
this
ââ' +
)
ââ+ ,
{
ää #
InstallZenjectBinding
ãã )
(
ãã) *
binding
ãã* 1
)
ãã1 2
;
ãã2 3
}
åå 
}
çç 
}
éé 	
void
êê #
InstallZenjectBinding
êê "
(
êê" #
ZenjectBinding
êê# 1
binding
êê2 9
)
êê9 :
{
ëë 	
if
íí 
(
íí 
!
íí 
binding
íí 
.
íí 
enabled
íí  
)
íí  !
{
ìì 
return
îî 
;
îî 
}
ïï 
if
óó 
(
óó 
binding
óó 
.
óó 

Components
óó "
==
óó# %
null
óó& *
||
óó+ -
binding
óó. 5
.
óó5 6

Components
óó6 @
.
óó@ A
IsEmpty
óóA H
(
óóH I
)
óóI J
)
óóJ K
{
òò 
Log
ôô 
.
ôô 
Warn
ôô 
(
ôô 
$str
ôô [
,
ôô[ \
binding
ôô] d
.
ôôd e
name
ôôe i
)
ôôi j
;
ôôj k
return
öö 
;
öö 
}
õõ 
string
ùù 

identifier
ùù 
=
ùù 
null
ùù  $
;
ùù$ %
if
üü 
(
üü 
binding
üü 
.
üü 

Identifier
üü "
.
üü" #
Trim
üü# '
(
üü' (
)
üü( )
.
üü) *
Length
üü* 0
>
üü1 2
$num
üü3 4
)
üü4 5
{
†† 

identifier
°° 
=
°° 
binding
°° $
.
°°$ %

Identifier
°°% /
;
°°/ 0
}
¢¢ 
foreach
§§ 
(
§§ 
var
§§ 
	component
§§ "
in
§§# %
binding
§§& -
.
§§- .

Components
§§. 8
)
§§8 9
{
•• 
var
¶¶ 
bindType
¶¶ 
=
¶¶ 
binding
¶¶ &
.
¶¶& '
BindType
¶¶' /
;
¶¶/ 0
if
®® 
(
®® 
	component
®® 
==
®®  
null
®®! %
)
®®% &
{
©© 
Log
™™ 
.
™™ 
Warn
™™ 
(
™™ 
$str
™™ U
,
™™U V
binding
™™W ^
.
™™^ _
name
™™_ c
)
™™c d
;
™™d e
continue
´´ 
;
´´ 
}
¨¨ 
var
ÆÆ 
componentType
ÆÆ !
=
ÆÆ" #
	component
ÆÆ$ -
.
ÆÆ- .
GetType
ÆÆ. 5
(
ÆÆ5 6
)
ÆÆ6 7
;
ÆÆ7 8
switch
∞∞ 
(
∞∞ 
bindType
∞∞  
)
∞∞  !
{
±± 
case
≤≤ 
ZenjectBinding
≤≤ '
.
≤≤' (
	BindTypes
≤≤( 1
.
≤≤1 2
Self
≤≤2 6
:
≤≤6 7
{
≥≥ 
	Container
¥¥ !
.
¥¥! "
Bind
¥¥" &
(
¥¥& '
componentType
¥¥' 4
)
¥¥4 5
.
¥¥5 6
WithId
¥¥6 <
(
¥¥< =

identifier
¥¥= G
)
¥¥G H
.
¥¥H I
FromInstance
¥¥I U
(
¥¥U V
	component
¥¥V _
)
¥¥_ `
;
¥¥` a
break
µµ 
;
µµ 
}
∂∂ 
case
∑∑ 
ZenjectBinding
∑∑ '
.
∑∑' (
	BindTypes
∑∑( 1
.
∑∑1 2
BaseType
∑∑2 :
:
∑∑: ;
{
∏∏ 
	Container
ππ !
.
ππ! "
Bind
ππ" &
(
ππ& '
componentType
ππ' 4
.
ππ4 5
BaseType
ππ5 =
(
ππ= >
)
ππ> ?
)
ππ? @
.
ππ@ A
WithId
ππA G
(
ππG H

identifier
ππH R
)
ππR S
.
ππS T
FromInstance
ππT `
(
ππ` a
	component
ππa j
)
ππj k
;
ππk l
break
∫∫ 
;
∫∫ 
}
ªª 
case
ºº 
ZenjectBinding
ºº '
.
ºº' (
	BindTypes
ºº( 1
.
ºº1 2
AllInterfaces
ºº2 ?
:
ºº? @
{
ΩΩ 
	Container
ææ !
.
ææ! "
Bind
ææ" &
(
ææ& '
componentType
ææ' 4
.
ææ4 5

Interfaces
ææ5 ?
(
ææ? @
)
ææ@ A
)
ææA B
.
ææB C
WithId
ææC I
(
ææI J

identifier
ææJ T
)
ææT U
.
ææU V
FromInstance
ææV b
(
ææb c
	component
ææc l
)
ææl m
;
ææm n
break
øø 
;
øø 
}
¿¿ 
case
¡¡ 
ZenjectBinding
¡¡ '
.
¡¡' (
	BindTypes
¡¡( 1
.
¡¡1 2"
AllInterfacesAndSelf
¡¡2 F
:
¡¡F G
{
¬¬ 
	Container
√√ !
.
√√! "
Bind
√√" &
(
√√& '
componentType
√√' 4
.
√√4 5

Interfaces
√√5 ?
(
√√? @
)
√√@ A
.
√√A B
Concat
√√B H
(
√√H I
new
√√I L
[
√√L M
]
√√M N
{
√√O P
componentType
√√Q ^
}
√√_ `
)
√√` a
.
√√a b
ToArray
√√b i
(
√√i j
)
√√j k
)
√√k l
.
√√l m
WithId
√√m s
(
√√s t

identifier
√√t ~
)
√√~ 
.√√ Ä
FromInstance√√Ä å
(√√å ç
	component√√ç ñ
)√√ñ ó
;√√ó ò
break
ƒƒ 
;
ƒƒ 
}
≈≈ 
default
∆∆ 
:
∆∆ 
{
«« 
throw
»» 
Assert
»» $
.
»»$ %
CreateException
»»% 4
(
»»4 5
)
»»5 6
;
»»6 7
}
…… 
}
   
}
ÀÀ 
}
ÃÃ 	
	protected
ŒŒ 
abstract
ŒŒ 
void
ŒŒ )
GetInjectableMonoBehaviours
ŒŒ  ;
(
ŒŒ; <
List
ŒŒ< @
<
ŒŒ@ A
MonoBehaviour
ŒŒA N
>
ŒŒN O

components
ŒŒP Z
)
ŒŒZ [
;
ŒŒ[ \
}
œœ 
}–– µH
UC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\IFactory.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IFactory 
{ 
} 
public 

	interface 
IFactory 
< 
out !
TValue" (
>( )
:* +
IFactory, 4
{ 
TValue		 
Create		 
(		 
)		 
;		 
}

 
public 

	interface 
IFactory 
< 
in  
TParam1! (
,( )
out* -
TValue. 4
>4 5
:6 7
IFactory8 @
{ 
TValue 
Create 
( 
TParam1 
param #
)# $
;$ %
} 
public 

	interface 
IFactory 
< 
in  
TParam1! (
,( )
in* ,
TParam2- 4
,4 5
out6 9
TValue: @
>@ A
:B C
IFactoryD L
{ 
TValue 
Create 
( 
TParam1 
param1 $
,$ %
TParam2& -
param2. 4
)4 5
;5 6
} 
public 

	interface 
IFactory 
< 
in  
TParam1! (
,( )
in* ,
TParam2- 4
,4 5
in6 8
TParam39 @
,@ A
outB E
TValueF L
>L M
:N O
IFactoryP X
{ 
TValue 
Create 
( 
TParam1 
param1 $
,$ %
TParam2& -
param2. 4
,4 5
TParam36 =
param3> D
)D E
;E F
} 
public 

	interface 
IFactory 
< 
in  
TParam1! (
,( )
in* ,
TParam2- 4
,4 5
in6 8
TParam39 @
,@ A
inB D
TParam4E L
,L M
outN Q
TValueR X
>X Y
:Z [
IFactory\ d
{ 
TValue 
Create 
( 
TParam1 
param1 $
,$ %
TParam2& -
param2. 4
,4 5
TParam36 =
param3> D
,D E
TParam4F M
param4N T
)T U
;U V
} 
public   

	interface   
IFactory   
<   
in    
TParam1  ! (
,  ( )
in  * ,
TParam2  - 4
,  4 5
in  6 8
TParam3  9 @
,  @ A
in  B D
TParam4  E L
,  L M
in  N P
TParam5  Q X
,  X Y
out  Z ]
TValue  ^ d
>  d e
:  f g
IFactory  h p
{!! 
TValue"" 
Create"" 
("" 
TParam1"" 
param1"" $
,""$ %
TParam2""& -
param2"". 4
,""4 5
TParam3""6 =
param3""> D
,""D E
TParam4""F M
param4""N T
,""T U
TParam5""V ]
param5""^ d
)""d e
;""e f
}## 
public%% 

	interface%% 
IFactory%% 
<%% 
in%%  
TParam1%%! (
,%%( )
in%%* ,
TParam2%%- 4
,%%4 5
in%%6 8
TParam3%%9 @
,%%@ A
in%%B D
TParam4%%E L
,%%L M
in%%N P
TParam5%%Q X
,%%X Y
in%%Z \
TParam6%%] d
,%%d e
out%%f i
TValue%%j p
>%%p q
:%%r s
IFactory%%t |
{&& 
TValue'' 
Create'' 
('' 
TParam1'' 
param1'' $
,''$ %
TParam2''& -
param2''. 4
,''4 5
TParam3''6 =
param3''> D
,''D E
TParam4''F M
param4''N T
,''T U
TParam5''V ]
param5''^ d
,''d e
TParam6''f m
param6''n t
)''t u
;''u v
}(( 
public** 

	interface** 
IFactory** 
<** 
in**  
TParam1**! (
,**( )
in*** ,
TParam2**- 4
,**4 5
in**6 8
TParam3**9 @
,**@ A
in**B D
TParam4**E L
,**L M
in**N P
TParam5**Q X
,**X Y
in**Z \
TParam6**] d
,**d e
in**f h
TParam7**i p
,**p q
out**r u
TValue**v |
>**| }
:**~ 
IFactory
**Ä à
{++ 
TValue,, 
Create,, 
(,, 
TParam1,, 
param1,, $
,,,$ %
TParam2,,& -
param2,,. 4
,,,4 5
TParam3,,6 =
param3,,> D
,,,D E
TParam4,,F M
param4,,N T
,,,T U
TParam5,,V ]
param5,,^ d
,,,d e
TParam6,,f m
param6,,n t
,,,t u
TParam7,,v }
param7	,,~ Ñ
)
,,Ñ Ö
;
,,Ö Ü
}-- 
public// 

	interface// 
IFactory// 
<// 
in//  
TParam1//! (
,//( )
in//* ,
TParam2//- 4
,//4 5
in//6 8
TParam3//9 @
,//@ A
in//B D
TParam4//E L
,//L M
in//N P
TParam5//Q X
,//X Y
in//Z \
TParam6//] d
,//d e
in//f h
TParam7//i p
,//p q
in//r t
TParam8//u |
,//| }
out	//~ Å
TValue
//Ç à
>
//à â
:
//ä ã
IFactory
//å î
{00 
TValue11 
Create11 
(11 
TParam111 
param111 $
,11$ %
TParam211& -
param211. 4
,114 5
TParam3116 =
param311> D
,11D E
TParam411F M
param411N T
,11T U
TParam511V ]
param511^ d
,11d e
TParam611f m
param611n t
,11t u
TParam711v }
param7	11~ Ñ
,
11Ñ Ö
TParam8
11Ü ç
param8
11é î
)
11î ï
;
11ï ñ
}22 
public44 

	interface44 
IFactory44 
<44 
in44  
TParam144! (
,44( )
in44* ,
TParam244- 4
,444 5
in446 8
TParam3449 @
,44@ A
in44B D
TParam444E L
,44L M
in44N P
TParam544Q X
,44X Y
in44Z \
TParam644] d
,44d e
in44f h
TParam744i p
,44p q
in44r t
TParam844u |
,44| }
in	44~ Ä
TParam9
44Å à
,
44à â
out
44ä ç
TValue
44é î
>
44î ï
:
44ñ ó
IFactory
44ò †
{55 
TValue66 
Create66 
(66 
TParam166 
param166 $
,66$ %
TParam266& -
param266. 4
,664 5
TParam3666 =
param366> D
,66D E
TParam466F M
param466N T
,66T U
TParam566V ]
param566^ d
,66d e
TParam666f m
param666n t
,66t u
TParam766v }
param7	66~ Ñ
,
66Ñ Ö
TParam8
66Ü ç
param8
66é î
,
66î ï
TParam9
66ñ ù
param9
66û §
)
66§ •
;
66• ¶
}77 
public99 

	interface99 
IFactory99 
<99 
in99  
TParam199! (
,99( )
in99* ,
TParam299- 4
,994 5
in996 8
TParam3999 @
,99@ A
in99B D
TParam499E L
,99L M
in99N P
TParam599Q X
,99X Y
in99Z \
TParam699] d
,99d e
in99f h
TParam799i p
,99p q
in99r t
TParam899u |
,99| }
in	99~ Ä
TParam9
99Å à
,
99à â
in
99ä å
TParam10
99ç ï
,
99ï ñ
out
99ó ö
TValue
99õ °
>
99° ¢
:
99£ §
IFactory
99• ≠
{:: 
TValue;; 
Create;; 
(;; 
TParam1;; 
param1;; $
,;;$ %
TParam2;;& -
param2;;. 4
,;;4 5
TParam3;;6 =
param3;;> D
,;;D E
TParam4;;F M
param4;;N T
,;;T U
TParam5;;V ]
param5;;^ d
,;;d e
TParam6;;f m
param6;;n t
,;;t u
TParam7;;v }
param7	;;~ Ñ
,
;;Ñ Ö
TParam8
;;Ü ç
param8
;;é î
,
;;î ï
TParam9
;;ñ ù
param9
;;û §
,
;;§ •
TParam10
;;¶ Æ
param10
;;Ø ∂
)
;;∂ ∑
;
;;∑ ∏
}<< 
}== ‘
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ValidationUtil.cs
	namespace 	
Zenject
 
{ 
public 

static 
class 
ValidationUtil &
{		 
public 
static 
List 
< 
TypeValuePair (
>( )
CreateDefaultArgs* ;
(; <
params< B
TypeC G
[G H
]H I
argTypesJ R
)R S
{ 	
return 
argTypes 
. 
Select "
(" #
x# $
=>% '
new( +
TypeValuePair, 9
(9 :
x: ;
,; <
x= >
.> ?
GetDefaultValue? N
(N O
)O P
)P Q
)Q R
.R S
ToListS Y
(Y Z
)Z [
;[ \
} 	
} 
} ˛
rC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\AnimatorInterfaces\IAnimatorMoveHandler.cs
	namespace 	
Zenject
 
{ 
public 

	interface  
IAnimatorMoveHandler )
{ 
void 
OnAnimatorMove 
( 
) 
; 
} 
} •
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenjectStateMachineBehaviourAutoInjecter.cs
	namespace 	
Zenject
 
{ 
public 

class 4
(ZenjectStateMachineBehaviourAutoInjecter 9
:: ;
MonoBehaviour< I
{ 
DiContainer 

_container 
; 
Animator		 
	_animator		 
;		 
[ 	
Inject	 
] 
public 
void 
	Construct 
( 
DiContainer )
	container* 3
)3 4
{ 	

_container 
= 
	container "
;" #
	_animator 
= 
GetComponent $
<$ %
Animator% -
>- .
(. /
)/ 0
;0 1
Assert 
. 
	IsNotNull 
( 
	_animator &
)& '
;' (
} 	
public 
void 
Start 
( 
) 
{ 	
if 
( 
	_animator 
!= 
null !
)! "
{ 
var 

behaviours 
=  
	_animator! *
.* +
GetBehaviours+ 8
<8 9!
StateMachineBehaviour9 N
>N O
(O P
)P Q
;Q R
if 
( 

behaviours 
!= !
null" &
)& '
{ 
foreach   
(   
var    
	behaviour  ! *
in  + -

behaviours  . 8
)  8 9
{!! 

_container"" "
.""" #
Inject""# )
("") *
	behaviour""* 3
)""3 4
;""4 5
}## 
}$$ 
}%% 
}&& 	
}'' 
}(( €Ä
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder3.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
TParam2, 3
,3 4
TParam35 <
,< =
	TContract> G
>G H
:I J!
FactoryFromBinderBaseK `
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func5 9
<9 :
DiContainer: E
,E F
TParam1G N
,N O
TParam2P W
,W X
TParam3Y `
,` a
	TContractb k
>k l
methodm s
)s t
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
TParam2H O
,O P
TParam3Q X
,X Y
	TContractZ c
>c d
(d e
methode k
)k l
;l m
return 
this 
; 
} 	
public &
ConditionCopyNonLazyBinder )
FromFactory* 5
<5 6
TSubFactory6 A
>A B
(B C
)C D
where 
TSubFactory 
: 
IFactory  (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
	TContractD M
>M N
{ 	
return 
this 
. 
FromIFactory $
($ %
x% &
=>' )
x* +
.+ ,
To, .
<. /
TSubFactory/ :
>: ;
(; <
)< =
.= >
AsCached> F
(F G
)G H
)H I
;I J
}   	
public"" %
FactorySubContainerBinder"" (
<""( )
TParam1"") 0
,""0 1
TParam2""2 9
,""9 :
TParam3""; B
,""B C
	TContract""D M
>""M N#
FromSubContainerResolve""O f
(""f g
)""g h
{## 	
return$$ #
FromSubContainerResolve$$ *
($$* +
null$$+ /
)$$/ 0
;$$0 1
}%% 	
public'' %
FactorySubContainerBinder'' (
<''( )
TParam1'') 0
,''0 1
TParam2''2 9
,''9 :
TParam3''; B
,''B C
	TContract''D M
>''M N#
FromSubContainerResolve''O f
(''f g
object''g m
subIdentifier''n {
)''{ |
{(( 	
return)) 
new)) %
FactorySubContainerBinder)) 0
<))0 1
TParam1))1 8
,))8 9
TParam2)): A
,))A B
TParam3))C J
,))J K
	TContract))L U
>))U V
())V W
BindContainer** 
,** 
BindInfo** '
,**' (
FactoryBindInfo**) 8
,**8 9
subIdentifier**: G
)**G H
;**H I
}++ 	
},, 
public00 

static00 
class00 (
FactoryFromBinder3Extensions00 4
{11 
public22 
static22 )
ArgConditionCopyNonLazyBinder22 3
FromIFactory224 @
<22@ A
TParam122A H
,22H I
TParam222J Q
,22Q R
TParam322S Z
,22Z [
	TContract22\ e
>22e f
(22f g
this33 
FactoryFromBinder33 "
<33" #
TParam133# *
,33* +
TParam233, 3
,333 4
TParam3335 <
,33< =
	TContract33> G
>33G H

fromBinder33I S
,33S T
Action44 
<44 !
ConcreteBinderGeneric44 (
<44( )
IFactory44) 1
<441 2
TParam1442 9
,449 :
TParam244; B
,44B C
TParam344D K
,44K L
	TContract44M V
>44V W
>44W X
>44X Y 
factoryBindGenerator44Z n
)44n o
{55 	
Guid66 
	factoryId66 
;66  
factoryBindGenerator77  
(77  !

fromBinder88 
.88  
CreateIFactoryBinder88 /
<88/ 0
IFactory880 8
<888 9
TParam1889 @
,88@ A
TParam288B I
,88I J
TParam388K R
,88R S
	TContract88T ]
>88] ^
>88^ _
(88_ `
out88` c
	factoryId88d m
)88m n
)88n o
;88o p

fromBinder:: 
.:: 
ProviderFunc:: #
=::$ %
(;; 
	container;; 
);; 
=>;; 
{;;  
return;;! '
new;;( +
IFactoryProvider;;, <
<;;< =
TParam1;;= D
,;;D E
TParam2;;F M
,;;M N
TParam3;;O V
,;;V W
	TContract;;X a
>;;a b
(;;b c
	container;;c l
,;;l m
	factoryId;;n w
);;w x
;;;x y
};;z {
;;;{ |
return== 
new== )
ArgConditionCopyNonLazyBinder== 4
(==4 5

fromBinder==5 ?
.==? @
BindInfo==@ H
)==H I
;==I J
}>> 	
public@@ 
static@@ )
ArgConditionCopyNonLazyBinder@@ 3"
FromPoolableMemoryPool@@4 J
<@@J K
TParam1@@K R
,@@R S
TParam2@@T [
,@@[ \
TParam3@@] d
,@@d e
	TContract@@f o
>@@o p
(@@p q
thisAA 
FactoryFromBinderAA "
<AA" #
TParam1AA# *
,AA* +
TParam2AA, 3
,AA3 4
TParam3AA5 <
,AA< =
	TContractAA> G
>AAG H

fromBinderAAI S
)AAS T
whereDD 
	TContractDD 
:DD 
	IPoolableDD '
<DD' (
TParam1DD( /
,DD/ 0
TParam2DD1 8
,DD8 9
TParam3DD: A
,DDA B
IMemoryPoolDDC N
>DDN O
{EE 	
returnFF 

fromBinderFF 
.FF "
FromPoolableMemoryPoolFF 4
<FF4 5
TParam1FF5 <
,FF< =
TParam2FF> E
,FFE F
TParam3FFG N
,FFN O
	TContractFFP Y
>FFY Z
(FFZ [
xFF[ \
=>FF] _
{FF` a
}FFa b
)FFb c
;FFc d
}GG 	
publicII 
staticII )
ArgConditionCopyNonLazyBinderII 3"
FromPoolableMemoryPoolII4 J
<IIJ K
TParam1IIK R
,IIR S
TParam2IIT [
,II[ \
TParam3II] d
,IId e
	TContractIIf o
>IIo p
(IIp q
thisJJ 
FactoryFromBinderJJ "
<JJ" #
TParam1JJ# *
,JJ* +
TParam2JJ, 3
,JJ3 4
TParam3JJ5 <
,JJ< =
	TContractJJ> G
>JJG H

fromBinderJJI S
,JJS T
ActionKK 
<KK .
"MemoryPoolInitialSizeMaxSizeBinderKK 5
<KK5 6
	TContractKK6 ?
>KK? @
>KK@ A
poolBindGeneratorKKB S
)KKS T
whereNN 
	TContractNN 
:NN 
	IPoolableNN '
<NN' (
TParam1NN( /
,NN/ 0
TParam2NN1 8
,NN8 9
TParam3NN: A
,NNA B
IMemoryPoolNNC N
>NNN O
{OO 	
returnPP 

fromBinderPP 
.PP "
FromPoolableMemoryPoolPP 4
<PP4 5
TParam1PP5 <
,PP< =
TParam2PP> E
,PPE F
TParam3PPG N
,PPN O
	TContractPPP Y
,PPY Z
PoolableMemoryPoolPP[ m
<PPm n
TParam1PPn u
,PPu v
TParam2PPw ~
,PP~ 
TParam3
PPÄ á
,
PPá à
IMemoryPool
PPâ î
,
PPî ï
	TContract
PPñ ü
>
PPü †
>
PP† °
(
PP° ¢
poolBindGenerator
PP¢ ≥
)
PP≥ ¥
;
PP¥ µ
}QQ 	
publicTT 
staticTT )
ArgConditionCopyNonLazyBinderTT 3&
FromMonoPoolableMemoryPoolTT4 N
<TTN O
TParam1TTO V
,TTV W
TParam2TTX _
,TT_ `
TParam3TTa h
,TTh i
	TContractTTj s
>TTs t
(TTt u
thisUU 
FactoryFromBinderUU "
<UU" #
TParam1UU# *
,UU* +
TParam2UU, 3
,UU3 4
TParam3UU5 <
,UU< =
	TContractUU> G
>UUG H

fromBinderUUI S
)UUS T
whereXX 
	TContractXX 
:XX 
	ComponentXX '
,XX' (
	IPoolableXX) 2
<XX2 3
TParam1XX3 :
,XX: ;
TParam2XX< C
,XXC D
TParam3XXE L
,XXL M
IMemoryPoolXXN Y
>XXY Z
{YY 	
returnZZ 

fromBinderZZ 
.ZZ &
FromMonoPoolableMemoryPoolZZ 8
<ZZ8 9
TParam1ZZ9 @
,ZZ@ A
TParam2ZZB I
,ZZI J
TParam3ZZK R
,ZZR S
	TContractZZT ]
>ZZ] ^
(ZZ^ _
xZZ_ `
=>ZZa c
{ZZd e
}ZZe f
)ZZf g
;ZZg h
}[[ 	
public]] 
static]] )
ArgConditionCopyNonLazyBinder]] 3&
FromMonoPoolableMemoryPool]]4 N
<]]N O
TParam1]]O V
,]]V W
TParam2]]X _
,]]_ `
TParam3]]a h
,]]h i
	TContract]]j s
>]]s t
(]]t u
this^^ 
FactoryFromBinder^^ "
<^^" #
TParam1^^# *
,^^* +
TParam2^^, 3
,^^3 4
TParam3^^5 <
,^^< =
	TContract^^> G
>^^G H

fromBinder^^I S
,^^S T
Action__ 
<__ .
"MemoryPoolInitialSizeMaxSizeBinder__ 5
<__5 6
	TContract__6 ?
>__? @
>__@ A
poolBindGenerator__B S
)__S T
wherebb 
	TContractbb 
:bb 
	Componentbb '
,bb' (
	IPoolablebb) 2
<bb2 3
TParam1bb3 :
,bb: ;
TParam2bb< C
,bbC D
TParam3bbE L
,bbL M
IMemoryPoolbbN Y
>bbY Z
{cc 	
returndd 

fromBinderdd 
.dd "
FromPoolableMemoryPooldd 4
<dd4 5
TParam1dd5 <
,dd< =
TParam2dd> E
,ddE F
TParam3ddG N
,ddN O
	TContractddP Y
,ddY Z"
MonoPoolableMemoryPooldd[ q
<ddq r
TParam1ddr y
,ddy z
TParam2	dd{ Ç
,
ddÇ É
TParam3
ddÑ ã
,
ddã å
IMemoryPool
ddç ò
,
ddò ô
	TContract
ddö £
>
dd£ §
>
dd§ •
(
dd• ¶
poolBindGenerator
dd¶ ∑
)
dd∑ ∏
;
dd∏ π
}ee 	
publichh 
statichh )
ArgConditionCopyNonLazyBinderhh 3"
FromPoolableMemoryPoolhh4 J
<hhJ K
TParam1hhK R
,hhR S
TParam2hhT [
,hh[ \
TParam3hh] d
,hhd e
	TContracthhf o
,hho p
TMemoryPoolhhq |
>hh| }
(hh} ~
thisii 
FactoryFromBinderii "
<ii" #
TParam1ii# *
,ii* +
TParam2ii, 3
,ii3 4
TParam3ii5 <
,ii< =
	TContractii> G
>iiG H

fromBinderiiI S
)iiS T
wherell 
	TContractll 
:ll 
	IPoolablell '
<ll' (
TParam1ll( /
,ll/ 0
TParam2ll1 8
,ll8 9
TParam3ll: A
,llA B
IMemoryPoolllC N
>llN O
wheremm 
TMemoryPoolmm 
:mm 

MemoryPoolmm  *
<mm* +
TParam1mm+ 2
,mm2 3
TParam2mm4 ;
,mm; <
TParam3mm= D
,mmD E
IMemoryPoolmmF Q
,mmQ R
	TContractmmS \
>mm\ ]
{nn 	
returnoo 

fromBinderoo 
.oo "
FromPoolableMemoryPooloo 4
<oo4 5
TParam1oo5 <
,oo< =
TParam2oo> E
,ooE F
TParam3ooG N
,ooN O
	TContractooP Y
,ooY Z
TMemoryPooloo[ f
>oof g
(oog h
xooh i
=>ooj l
{oom n
}oon o
)ooo p
;oop q
}pp 	
publicrr 
staticrr )
ArgConditionCopyNonLazyBinderrr 3"
FromPoolableMemoryPoolrr4 J
<rrJ K
TParam1rrK R
,rrR S
TParam2rrT [
,rr[ \
TParam3rr] d
,rrd e
	TContractrrf o
,rro p
TMemoryPoolrrq |
>rr| }
(rr} ~
thisss 
FactoryFromBinderss "
<ss" #
TParam1ss# *
,ss* +
TParam2ss, 3
,ss3 4
TParam3ss5 <
,ss< =
	TContractss> G
>ssG H

fromBinderssI S
,ssS T
Actiontt 
<tt .
"MemoryPoolInitialSizeMaxSizeBindertt 5
<tt5 6
	TContracttt6 ?
>tt? @
>tt@ A
poolBindGeneratorttB S
)ttS T
whereww 
	TContractww 
:ww 
	IPoolableww '
<ww' (
TParam1ww( /
,ww/ 0
TParam2ww1 8
,ww8 9
TParam3ww: A
,wwA B
IMemoryPoolwwC N
>wwN O
wherexx 
TMemoryPoolxx 
:xx 

MemoryPoolxx  *
<xx* +
TParam1xx+ 2
,xx2 3
TParam2xx4 ;
,xx; <
TParam3xx= D
,xxD E
IMemoryPoolxxF Q
,xxQ R
	TContractxxS \
>xx\ ]
{yy 	
var|| 
poolId|| 
=|| 
Guid|| 
.|| 
NewGuid|| %
(||% &
)||& '
;||' (
var 
binder 
= 

fromBinder #
.# $
BindContainer$ 1
.1 20
$BindMemoryPoolCustomInterfaceNoFlush2 V
<V W
	TContractW `
,` a
TMemoryPoolb m
,m n
TMemoryPoolo z
>z {
({ |
)| }
.
ÄÄ 
WithId
ÄÄ 
(
ÄÄ 
poolId
ÄÄ 
)
ÄÄ 
;
ÄÄ  
binder
ÉÉ 
.
ÉÉ 
NonLazy
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
poolBindGenerator
ÖÖ 
(
ÖÖ 
binder
ÖÖ $
)
ÖÖ$ %
;
ÖÖ% &

fromBinder
áá 
.
áá 
ProviderFunc
áá #
=
áá$ %
(
àà 
	container
àà 
)
àà 
=>
àà 
{
àà  
return
àà! '
new
àà( +(
PoolableMemoryPoolProvider
àà, F
<
ààF G
TParam1
ààG N
,
ààN O
TParam2
ààP W
,
ààW X
TParam3
ààY `
,
àà` a
	TContract
ààb k
,
ààk l
TMemoryPool
ààm x
>
ààx y
(
àày z
	containerààz É
,ààÉ Ñ
poolIdààÖ ã
)ààã å
;ààå ç
}ààé è
;ààè ê
return
ää 
new
ää +
ArgConditionCopyNonLazyBinder
ää 4
(
ää4 5

fromBinder
ää5 ?
.
ää? @
BindInfo
ää@ H
)
ääH I
;
ääI J
}
ãã 	
}
åå 
}çç ≥
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\PreserveAttribute.cs
	namespace 	

ModestTree
 
. 
Util 
{ 
[ 
AttributeUsage 
( 
AttributeTargets $
.$ %
All% (
,( )
AllowMultiple* 7
=8 9
false: ?
)? @
]@ A
public 

class 
PreserveAttribute "
:# $
	Attribute% .
{ 
} 
}		 ·ã
kC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\MonoPoolableMemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

class "
MonoPoolableMemoryPool '
<' (
TValue( .
>. /
:0 1

MemoryPool2 <
<< =
TValue= C
>C D
where 
TValue 
: 
	Component  
,  !
	IPoolable" +
{ 
	Transform		 
_originalParent		 !
;		! "
[ 	
Inject	 
] 
public "
MonoPoolableMemoryPool %
(% &
)& '
{ 	
} 	
	protected 
override 
void 
	OnCreated  )
() *
TValue* 0
item1 5
)5 6
{ 	
item 
. 

gameObject 
. 
	SetActive %
(% &
false& +
)+ ,
;, -
_originalParent 
= 
item "
." #
	transform# ,
., -
parent- 3
;3 4
} 	
	protected 
override 
void 
OnDestroyed  +
(+ ,
TValue, 2
item3 7
)7 8
{ 	

GameObject 
. 
Destroy 
( 
item #
.# $

gameObject$ .
). /
;/ 0
} 	
	protected 
override 
void 
OnDespawned  +
(+ ,
TValue, 2
item3 7
)7 8
{ 	
item 
. 
OnDespawned 
( 
) 
; 
item 
. 

gameObject 
. 
	SetActive %
(% &
false& +
)+ ,
;, -
if   
(   
item   
.   
	transform   
.   
parent   %
!=  & (
_originalParent  ) 8
)  8 9
{!! 
item"" 
."" 
	transform"" 
."" 
	SetParent"" (
(""( )
_originalParent"") 8
,""8 9
false"": ?
)""? @
;""@ A
}## 
}$$ 	
	protected&& 
override&& 
void&& 
Reinitialize&&  ,
(&&, -
TValue&&- 3
item&&4 8
)&&8 9
{'' 	
item(( 
.(( 

gameObject(( 
.(( 
	SetActive(( %
(((% &
true((& *
)((* +
;((+ ,
item)) 
.)) 
	OnSpawned)) 
()) 
))) 
;)) 
}** 	
}++ 
public.. 

class.. "
MonoPoolableMemoryPool.. '
<..' (
TParam1..( /
,../ 0
TValue..1 7
>..7 8
:// 	

MemoryPool//
 
<// 
TParam1// 
,// 
TValue// $
>//$ %
where00 
TValue00 
:00 
	Component00  
,00  !
	IPoolable00" +
<00+ ,
TParam100, 3
>003 4
{11 
	Transform22 
_originalParent22 !
;22! "
[44 	
Inject44	 
]44 
public55 "
MonoPoolableMemoryPool55 %
(55% &
)55& '
{66 	
}77 	
	protected99 
override99 
void99 
	OnCreated99  )
(99) *
TValue99* 0
item991 5
)995 6
{:: 	
item;; 
.;; 

gameObject;; 
.;; 
	SetActive;; %
(;;% &
false;;& +
);;+ ,
;;;, -
_originalParent<< 
=<< 
item<< "
.<<" #
	transform<<# ,
.<<, -
parent<<- 3
;<<3 4
}== 	
	protected?? 
override?? 
void?? 
OnDestroyed??  +
(??+ ,
TValue??, 2
item??3 7
)??7 8
{@@ 	

GameObjectAA 
.AA 
DestroyAA 
(AA 
itemAA #
.AA# $

gameObjectAA$ .
)AA. /
;AA/ 0
}BB 	
	protectedDD 
overrideDD 
voidDD 
OnDespawnedDD  +
(DD+ ,
TValueDD, 2
itemDD3 7
)DD7 8
{EE 	
itemFF 
.FF 
OnDespawnedFF 
(FF 
)FF 
;FF 
itemGG 
.GG 

gameObjectGG 
.GG 
	SetActiveGG %
(GG% &
falseGG& +
)GG+ ,
;GG, -
ifII 
(II 
itemII 
.II 
	transformII 
.II 
parentII %
!=II& (
_originalParentII) 8
)II8 9
{JJ 
itemKK 
.KK 
	transformKK 
.KK 
	SetParentKK (
(KK( )
_originalParentKK) 8
,KK8 9
falseKK: ?
)KK? @
;KK@ A
}LL 
}MM 	
	protectedOO 
overrideOO 
voidOO 
ReinitializeOO  ,
(OO, -
TParam1OO- 4
p1OO5 7
,OO7 8
TValueOO9 ?
itemOO@ D
)OOD E
{PP 	
itemQQ 
.QQ 

gameObjectQQ 
.QQ 
	SetActiveQQ %
(QQ% &
trueQQ& *
)QQ* +
;QQ+ ,
itemRR 
.RR 
	OnSpawnedRR 
(RR 
p1RR 
)RR 
;RR 
}SS 	
}TT 
publicWW 

classWW "
MonoPoolableMemoryPoolWW '
<WW' (
TParam1WW( /
,WW/ 0
TParam2WW1 8
,WW8 9
TValueWW: @
>WW@ A
:XX 	

MemoryPoolXX
 
<XX 
TParam1XX 
,XX 
TParam2XX %
,XX% &
TValueXX' -
>XX- .
whereYY 
TValueYY 
:YY 
	ComponentYY  
,YY  !
	IPoolableYY" +
<YY+ ,
TParam1YY, 3
,YY3 4
TParam2YY5 <
>YY< =
{ZZ 
	Transform[[ 
_originalParent[[ !
;[[! "
[]] 	
Inject]]	 
]]] 
public^^ "
MonoPoolableMemoryPool^^ %
(^^% &
)^^& '
{__ 	
}`` 	
	protectedbb 
overridebb 
voidbb 
	OnCreatedbb  )
(bb) *
TValuebb* 0
itembb1 5
)bb5 6
{cc 	
itemdd 
.dd 

gameObjectdd 
.dd 
	SetActivedd %
(dd% &
falsedd& +
)dd+ ,
;dd, -
_originalParentee 
=ee 
itemee "
.ee" #
	transformee# ,
.ee, -
parentee- 3
;ee3 4
}ff 	
	protectedhh 
overridehh 
voidhh 
OnDestroyedhh  +
(hh+ ,
TValuehh, 2
itemhh3 7
)hh7 8
{ii 	

GameObjectjj 
.jj 
Destroyjj 
(jj 
itemjj #
.jj# $

gameObjectjj$ .
)jj. /
;jj/ 0
}kk 	
	protectedmm 
overridemm 
voidmm 
OnDespawnedmm  +
(mm+ ,
TValuemm, 2
itemmm3 7
)mm7 8
{nn 	
itemoo 
.oo 
OnDespawnedoo 
(oo 
)oo 
;oo 
itempp 
.pp 

gameObjectpp 
.pp 
	SetActivepp %
(pp% &
falsepp& +
)pp+ ,
;pp, -
ifrr 
(rr 
itemrr 
.rr 
	transformrr 
.rr 
parentrr %
!=rr& (
_originalParentrr) 8
)rr8 9
{ss 
itemtt 
.tt 
	transformtt 
.tt 
	SetParenttt (
(tt( )
_originalParenttt) 8
,tt8 9
falsett: ?
)tt? @
;tt@ A
}uu 
}vv 	
	protectedxx 
overridexx 
voidxx 
Reinitializexx  ,
(xx, -
TParam1xx- 4
p1xx5 7
,xx7 8
TParam2xx9 @
p2xxA C
,xxC D
TValuexxE K
itemxxL P
)xxP Q
{yy 	
itemzz 
.zz 

gameObjectzz 
.zz 
	SetActivezz %
(zz% &
truezz& *
)zz* +
;zz+ ,
item{{ 
.{{ 
	OnSpawned{{ 
({{ 
p1{{ 
,{{ 
p2{{ !
){{! "
;{{" #
}|| 	
}}} 
public
ÄÄ 

class
ÄÄ $
MonoPoolableMemoryPool
ÄÄ '
<
ÄÄ' (
TParam1
ÄÄ( /
,
ÄÄ/ 0
TParam2
ÄÄ1 8
,
ÄÄ8 9
TParam3
ÄÄ: A
,
ÄÄA B
TValue
ÄÄC I
>
ÄÄI J
:
ÅÅ 	

MemoryPool
ÅÅ
 
<
ÅÅ 
TParam1
ÅÅ 
,
ÅÅ 
TParam2
ÅÅ %
,
ÅÅ% &
TParam3
ÅÅ' .
,
ÅÅ. /
TValue
ÅÅ0 6
>
ÅÅ6 7
where
ÇÇ 
TValue
ÇÇ 
:
ÇÇ 
	Component
ÇÇ  
,
ÇÇ  !
	IPoolable
ÇÇ" +
<
ÇÇ+ ,
TParam1
ÇÇ, 3
,
ÇÇ3 4
TParam2
ÇÇ5 <
,
ÇÇ< =
TParam3
ÇÇ> E
>
ÇÇE F
{
ÉÉ 
	Transform
ÑÑ 
_originalParent
ÑÑ !
;
ÑÑ! "
[
ÜÜ 	
Inject
ÜÜ	 
]
ÜÜ 
public
áá $
MonoPoolableMemoryPool
áá %
(
áá% &
)
áá& '
{
àà 	
}
ââ 	
	protected
ãã 
override
ãã 
void
ãã 
	OnCreated
ãã  )
(
ãã) *
TValue
ãã* 0
item
ãã1 5
)
ãã5 6
{
åå 	
item
çç 
.
çç 

gameObject
çç 
.
çç 
	SetActive
çç %
(
çç% &
false
çç& +
)
çç+ ,
;
çç, -
_originalParent
éé 
=
éé 
item
éé "
.
éé" #
	transform
éé# ,
.
éé, -
parent
éé- 3
;
éé3 4
}
èè 	
	protected
ëë 
override
ëë 
void
ëë 
OnDestroyed
ëë  +
(
ëë+ ,
TValue
ëë, 2
item
ëë3 7
)
ëë7 8
{
íí 	

GameObject
ìì 
.
ìì 
Destroy
ìì 
(
ìì 
item
ìì #
.
ìì# $

gameObject
ìì$ .
)
ìì. /
;
ìì/ 0
}
îî 	
	protected
ññ 
override
ññ 
void
ññ 
OnDespawned
ññ  +
(
ññ+ ,
TValue
ññ, 2
item
ññ3 7
)
ññ7 8
{
óó 	
item
òò 
.
òò 
OnDespawned
òò 
(
òò 
)
òò 
;
òò 
item
ôô 
.
ôô 

gameObject
ôô 
.
ôô 
	SetActive
ôô %
(
ôô% &
false
ôô& +
)
ôô+ ,
;
ôô, -
if
õõ 
(
õõ 
item
õõ 
.
õõ 
	transform
õõ 
.
õõ 
parent
õõ %
!=
õõ& (
_originalParent
õõ) 8
)
õõ8 9
{
úú 
item
ùù 
.
ùù 
	transform
ùù 
.
ùù 
	SetParent
ùù (
(
ùù( )
_originalParent
ùù) 8
,
ùù8 9
false
ùù: ?
)
ùù? @
;
ùù@ A
}
ûû 
}
üü 	
	protected
°° 
override
°° 
void
°° 
Reinitialize
°°  ,
(
°°, -
TParam1
°°- 4
p1
°°5 7
,
°°7 8
TParam2
°°9 @
p2
°°A C
,
°°C D
TParam3
°°E L
p3
°°M O
,
°°O P
TValue
°°Q W
item
°°X \
)
°°\ ]
{
¢¢ 	
item
££ 
.
££ 

gameObject
££ 
.
££ 
	SetActive
££ %
(
££% &
true
££& *
)
££* +
;
££+ ,
item
§§ 
.
§§ 
	OnSpawned
§§ 
(
§§ 
p1
§§ 
,
§§ 
p2
§§ !
,
§§! "
p3
§§# %
)
§§% &
;
§§& '
}
•• 	
}
¶¶ 
public
©© 

class
©© $
MonoPoolableMemoryPool
©© '
<
©©' (
TParam1
©©( /
,
©©/ 0
TParam2
©©1 8
,
©©8 9
TParam3
©©: A
,
©©A B
TParam4
©©C J
,
©©J K
TValue
©©L R
>
©©R S
:
™™ 	

MemoryPool
™™
 
<
™™ 
TParam1
™™ 
,
™™ 
TParam2
™™ %
,
™™% &
TParam3
™™' .
,
™™. /
TParam4
™™0 7
,
™™7 8
TValue
™™9 ?
>
™™? @
where
´´ 
TValue
´´ 
:
´´ 
	Component
´´  
,
´´  !
	IPoolable
´´" +
<
´´+ ,
TParam1
´´, 3
,
´´3 4
TParam2
´´5 <
,
´´< =
TParam3
´´> E
,
´´E F
TParam4
´´G N
>
´´N O
{
¨¨ 
	Transform
≠≠ 
_originalParent
≠≠ !
;
≠≠! "
[
ØØ 	
Inject
ØØ	 
]
ØØ 
public
∞∞ $
MonoPoolableMemoryPool
∞∞ %
(
∞∞% &
)
∞∞& '
{
±± 	
}
≤≤ 	
	protected
¥¥ 
override
¥¥ 
void
¥¥ 
	OnCreated
¥¥  )
(
¥¥) *
TValue
¥¥* 0
item
¥¥1 5
)
¥¥5 6
{
µµ 	
item
∂∂ 
.
∂∂ 

gameObject
∂∂ 
.
∂∂ 
	SetActive
∂∂ %
(
∂∂% &
false
∂∂& +
)
∂∂+ ,
;
∂∂, -
_originalParent
∑∑ 
=
∑∑ 
item
∑∑ "
.
∑∑" #
	transform
∑∑# ,
.
∑∑, -
parent
∑∑- 3
;
∑∑3 4
}
∏∏ 	
	protected
∫∫ 
override
∫∫ 
void
∫∫ 
OnDestroyed
∫∫  +
(
∫∫+ ,
TValue
∫∫, 2
item
∫∫3 7
)
∫∫7 8
{
ªª 	

GameObject
ºº 
.
ºº 
Destroy
ºº 
(
ºº 
item
ºº #
.
ºº# $

gameObject
ºº$ .
)
ºº. /
;
ºº/ 0
}
ΩΩ 	
	protected
øø 
override
øø 
void
øø 
OnDespawned
øø  +
(
øø+ ,
TValue
øø, 2
item
øø3 7
)
øø7 8
{
¿¿ 	
item
¡¡ 
.
¡¡ 
OnDespawned
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
item
¬¬ 
.
¬¬ 

gameObject
¬¬ 
.
¬¬ 
	SetActive
¬¬ %
(
¬¬% &
false
¬¬& +
)
¬¬+ ,
;
¬¬, -
if
ƒƒ 
(
ƒƒ 
item
ƒƒ 
.
ƒƒ 
	transform
ƒƒ 
.
ƒƒ 
parent
ƒƒ %
!=
ƒƒ& (
_originalParent
ƒƒ) 8
)
ƒƒ8 9
{
≈≈ 
item
∆∆ 
.
∆∆ 
	transform
∆∆ 
.
∆∆ 
	SetParent
∆∆ (
(
∆∆( )
_originalParent
∆∆) 8
,
∆∆8 9
false
∆∆: ?
)
∆∆? @
;
∆∆@ A
}
«« 
}
»» 	
	protected
   
override
   
void
   
Reinitialize
    ,
(
  , -
TParam1
  - 4
p1
  5 7
,
  7 8
TParam2
  9 @
p2
  A C
,
  C D
TParam3
  E L
p3
  M O
,
  O P
TParam4
  Q X
p4
  Y [
,
  [ \
TValue
  ] c
item
  d h
)
  h i
{
ÀÀ 	
item
ÃÃ 
.
ÃÃ 

gameObject
ÃÃ 
.
ÃÃ 
	SetActive
ÃÃ %
(
ÃÃ% &
true
ÃÃ& *
)
ÃÃ* +
;
ÃÃ+ ,
item
ÕÕ 
.
ÕÕ 
	OnSpawned
ÕÕ 
(
ÕÕ 
p1
ÕÕ 
,
ÕÕ 
p2
ÕÕ !
,
ÕÕ! "
p3
ÕÕ# %
,
ÕÕ% &
p4
ÕÕ' )
)
ÕÕ) *
;
ÕÕ* +
}
ŒŒ 	
}
œœ 
public
““ 

class
““ $
MonoPoolableMemoryPool
““ '
<
““' (
TParam1
““( /
,
““/ 0
TParam2
““1 8
,
““8 9
TParam3
““: A
,
““A B
TParam4
““C J
,
““J K
TParam5
““L S
,
““S T
TValue
““U [
>
““[ \
:
”” 	

MemoryPool
””
 
<
”” 
TParam1
”” 
,
”” 
TParam2
”” %
,
””% &
TParam3
””' .
,
””. /
TParam4
””0 7
,
””7 8
TParam5
””9 @
,
””@ A
TValue
””B H
>
””H I
where
‘‘ 
TValue
‘‘ 
:
‘‘ 
	Component
‘‘  
,
‘‘  !
	IPoolable
‘‘" +
<
‘‘+ ,
TParam1
‘‘, 3
,
‘‘3 4
TParam2
‘‘5 <
,
‘‘< =
TParam3
‘‘> E
,
‘‘E F
TParam4
‘‘G N
,
‘‘N O
TParam5
‘‘P W
>
‘‘W X
{
’’ 
	Transform
÷÷ 
_originalParent
÷÷ !
;
÷÷! "
[
ÿÿ 	
Inject
ÿÿ	 
]
ÿÿ 
public
ŸŸ $
MonoPoolableMemoryPool
ŸŸ %
(
ŸŸ% &
)
ŸŸ& '
{
⁄⁄ 	
}
€€ 	
	protected
›› 
override
›› 
void
›› 
	OnCreated
››  )
(
››) *
TValue
››* 0
item
››1 5
)
››5 6
{
ﬁﬁ 	
item
ﬂﬂ 
.
ﬂﬂ 

gameObject
ﬂﬂ 
.
ﬂﬂ 
	SetActive
ﬂﬂ %
(
ﬂﬂ% &
false
ﬂﬂ& +
)
ﬂﬂ+ ,
;
ﬂﬂ, -
_originalParent
‡‡ 
=
‡‡ 
item
‡‡ "
.
‡‡" #
	transform
‡‡# ,
.
‡‡, -
parent
‡‡- 3
;
‡‡3 4
}
·· 	
	protected
„„ 
override
„„ 
void
„„ 
OnDestroyed
„„  +
(
„„+ ,
TValue
„„, 2
item
„„3 7
)
„„7 8
{
‰‰ 	

GameObject
ÂÂ 
.
ÂÂ 
Destroy
ÂÂ 
(
ÂÂ 
item
ÂÂ #
.
ÂÂ# $

gameObject
ÂÂ$ .
)
ÂÂ. /
;
ÂÂ/ 0
}
ÊÊ 	
	protected
ËË 
override
ËË 
void
ËË 
OnDespawned
ËË  +
(
ËË+ ,
TValue
ËË, 2
item
ËË3 7
)
ËË7 8
{
ÈÈ 	
item
ÍÍ 
.
ÍÍ 
OnDespawned
ÍÍ 
(
ÍÍ 
)
ÍÍ 
;
ÍÍ 
item
ÎÎ 
.
ÎÎ 

gameObject
ÎÎ 
.
ÎÎ 
	SetActive
ÎÎ %
(
ÎÎ% &
false
ÎÎ& +
)
ÎÎ+ ,
;
ÎÎ, -
if
ÌÌ 
(
ÌÌ 
item
ÌÌ 
.
ÌÌ 
	transform
ÌÌ 
.
ÌÌ 
parent
ÌÌ %
!=
ÌÌ& (
_originalParent
ÌÌ) 8
)
ÌÌ8 9
{
ÓÓ 
item
ÔÔ 
.
ÔÔ 
	transform
ÔÔ 
.
ÔÔ 
	SetParent
ÔÔ (
(
ÔÔ( )
_originalParent
ÔÔ) 8
,
ÔÔ8 9
false
ÔÔ: ?
)
ÔÔ? @
;
ÔÔ@ A
}
 
}
ÒÒ 	
	protected
ÛÛ 
override
ÛÛ 
void
ÛÛ 
Reinitialize
ÛÛ  ,
(
ÛÛ, -
TParam1
ÛÛ- 4
p1
ÛÛ5 7
,
ÛÛ7 8
TParam2
ÛÛ9 @
p2
ÛÛA C
,
ÛÛC D
TParam3
ÛÛE L
p3
ÛÛM O
,
ÛÛO P
TParam4
ÛÛQ X
p4
ÛÛY [
,
ÛÛ[ \
TParam5
ÛÛ] d
p5
ÛÛe g
,
ÛÛg h
TValue
ÛÛi o
item
ÛÛp t
)
ÛÛt u
{
ÙÙ 	
item
ıı 
.
ıı 

gameObject
ıı 
.
ıı 
	SetActive
ıı %
(
ıı% &
true
ıı& *
)
ıı* +
;
ıı+ ,
item
ˆˆ 
.
ˆˆ 
	OnSpawned
ˆˆ 
(
ˆˆ 
p1
ˆˆ 
,
ˆˆ 
p2
ˆˆ !
,
ˆˆ! "
p3
ˆˆ# %
,
ˆˆ% &
p4
ˆˆ' )
,
ˆˆ) *
p5
ˆˆ+ -
)
ˆˆ- .
;
ˆˆ. /
}
˜˜ 	
}
¯¯ 
public
˚˚ 

class
˚˚ $
MonoPoolableMemoryPool
˚˚ '
<
˚˚' (
TParam1
˚˚( /
,
˚˚/ 0
TParam2
˚˚1 8
,
˚˚8 9
TParam3
˚˚: A
,
˚˚A B
TParam4
˚˚C J
,
˚˚J K
TParam5
˚˚L S
,
˚˚S T
TParam6
˚˚U \
,
˚˚\ ]
TValue
˚˚^ d
>
˚˚d e
:
¸¸ 	

MemoryPool
¸¸
 
<
¸¸ 
TParam1
¸¸ 
,
¸¸ 
TParam2
¸¸ %
,
¸¸% &
TParam3
¸¸' .
,
¸¸. /
TParam4
¸¸0 7
,
¸¸7 8
TParam5
¸¸9 @
,
¸¸@ A
TParam6
¸¸B I
,
¸¸I J
TValue
¸¸K Q
>
¸¸Q R
where
˝˝ 
TValue
˝˝ 
:
˝˝ 
	Component
˝˝  
,
˝˝  !
	IPoolable
˝˝" +
<
˝˝+ ,
TParam1
˝˝, 3
,
˝˝3 4
TParam2
˝˝5 <
,
˝˝< =
TParam3
˝˝> E
,
˝˝E F
TParam4
˝˝G N
,
˝˝N O
TParam5
˝˝P W
,
˝˝W X
TParam6
˝˝Y `
>
˝˝` a
{
˛˛ 
	Transform
ˇˇ 
_originalParent
ˇˇ !
;
ˇˇ! "
[
ÅÅ 	
Inject
ÅÅ	 
]
ÅÅ 
public
ÇÇ $
MonoPoolableMemoryPool
ÇÇ %
(
ÇÇ% &
)
ÇÇ& '
{
ÉÉ 	
}
ÑÑ 	
	protected
ÜÜ 
override
ÜÜ 
void
ÜÜ 
	OnCreated
ÜÜ  )
(
ÜÜ) *
TValue
ÜÜ* 0
item
ÜÜ1 5
)
ÜÜ5 6
{
áá 	
item
àà 
.
àà 

gameObject
àà 
.
àà 
	SetActive
àà %
(
àà% &
false
àà& +
)
àà+ ,
;
àà, -
_originalParent
ââ 
=
ââ 
item
ââ "
.
ââ" #
	transform
ââ# ,
.
ââ, -
parent
ââ- 3
;
ââ3 4
}
ää 	
	protected
åå 
override
åå 
void
åå 
OnDestroyed
åå  +
(
åå+ ,
TValue
åå, 2
item
åå3 7
)
åå7 8
{
çç 	

GameObject
éé 
.
éé 
Destroy
éé 
(
éé 
item
éé #
.
éé# $

gameObject
éé$ .
)
éé. /
;
éé/ 0
}
èè 	
	protected
ëë 
override
ëë 
void
ëë 
OnDespawned
ëë  +
(
ëë+ ,
TValue
ëë, 2
item
ëë3 7
)
ëë7 8
{
íí 	
item
ìì 
.
ìì 
OnDespawned
ìì 
(
ìì 
)
ìì 
;
ìì 
item
îî 
.
îî 

gameObject
îî 
.
îî 
	SetActive
îî %
(
îî% &
false
îî& +
)
îî+ ,
;
îî, -
if
ññ 
(
ññ 
item
ññ 
.
ññ 
	transform
ññ 
.
ññ 
parent
ññ %
!=
ññ& (
_originalParent
ññ) 8
)
ññ8 9
{
óó 
item
òò 
.
òò 
	transform
òò 
.
òò 
	SetParent
òò (
(
òò( )
_originalParent
òò) 8
,
òò8 9
false
òò: ?
)
òò? @
;
òò@ A
}
ôô 
}
öö 	
	protected
úú 
override
úú 
void
úú 
Reinitialize
úú  ,
(
úú, -
TParam1
úú- 4
p1
úú5 7
,
úú7 8
TParam2
úú9 @
p2
úúA C
,
úúC D
TParam3
úúE L
p3
úúM O
,
úúO P
TParam4
úúQ X
p4
úúY [
,
úú[ \
TParam5
úú] d
p5
úúe g
,
úúg h
TParam6
úúi p
p6
úúq s
,
úús t
TValue
úúu {
itemúú| Ä
)úúÄ Å
{
ùù 	
item
ûû 
.
ûû 

gameObject
ûû 
.
ûû 
	SetActive
ûû %
(
ûû% &
true
ûû& *
)
ûû* +
;
ûû+ ,
item
üü 
.
üü 
	OnSpawned
üü 
(
üü 
p1
üü 
,
üü 
p2
üü !
,
üü! "
p3
üü# %
,
üü% &
p4
üü' )
,
üü) *
p5
üü+ -
,
üü- .
p6
üü/ 1
)
üü1 2
;
üü2 3
}
†† 	
}
°° 
public
§§ 

class
§§ $
MonoPoolableMemoryPool
§§ '
<
§§' (
TParam1
§§( /
,
§§/ 0
TParam2
§§1 8
,
§§8 9
TParam3
§§: A
,
§§A B
TParam4
§§C J
,
§§J K
TParam5
§§L S
,
§§S T
TParam6
§§U \
,
§§\ ]
TParam7
§§^ e
,
§§e f
TValue
§§g m
>
§§m n
:
•• 	

MemoryPool
••
 
<
•• 
TParam1
•• 
,
•• 
TParam2
•• %
,
••% &
TParam3
••' .
,
••. /
TParam4
••0 7
,
••7 8
TParam5
••9 @
,
••@ A
TParam6
••B I
,
••I J
TParam7
••K R
,
••R S
TValue
••T Z
>
••Z [
where
¶¶ 
TValue
¶¶ 
:
¶¶ 
	Component
¶¶  
,
¶¶  !
	IPoolable
¶¶" +
<
¶¶+ ,
TParam1
¶¶, 3
,
¶¶3 4
TParam2
¶¶5 <
,
¶¶< =
TParam3
¶¶> E
,
¶¶E F
TParam4
¶¶G N
,
¶¶N O
TParam5
¶¶P W
,
¶¶W X
TParam6
¶¶Y `
,
¶¶` a
TParam7
¶¶b i
>
¶¶i j
{
ßß 
	Transform
®® 
_originalParent
®® !
;
®®! "
[
™™ 	
Inject
™™	 
]
™™ 
public
´´ $
MonoPoolableMemoryPool
´´ %
(
´´% &
)
´´& '
{
¨¨ 	
}
≠≠ 	
	protected
ØØ 
override
ØØ 
void
ØØ 
	OnCreated
ØØ  )
(
ØØ) *
TValue
ØØ* 0
item
ØØ1 5
)
ØØ5 6
{
∞∞ 	
item
±± 
.
±± 

gameObject
±± 
.
±± 
	SetActive
±± %
(
±±% &
false
±±& +
)
±±+ ,
;
±±, -
_originalParent
≤≤ 
=
≤≤ 
item
≤≤ "
.
≤≤" #
	transform
≤≤# ,
.
≤≤, -
parent
≤≤- 3
;
≤≤3 4
}
≥≥ 	
	protected
µµ 
override
µµ 
void
µµ 
OnDestroyed
µµ  +
(
µµ+ ,
TValue
µµ, 2
item
µµ3 7
)
µµ7 8
{
∂∂ 	

GameObject
∑∑ 
.
∑∑ 
Destroy
∑∑ 
(
∑∑ 
item
∑∑ #
.
∑∑# $

gameObject
∑∑$ .
)
∑∑. /
;
∑∑/ 0
}
∏∏ 	
	protected
∫∫ 
override
∫∫ 
void
∫∫ 
OnDespawned
∫∫  +
(
∫∫+ ,
TValue
∫∫, 2
item
∫∫3 7
)
∫∫7 8
{
ªª 	
item
ºº 
.
ºº 
OnDespawned
ºº 
(
ºº 
)
ºº 
;
ºº 
item
ΩΩ 
.
ΩΩ 

gameObject
ΩΩ 
.
ΩΩ 
	SetActive
ΩΩ %
(
ΩΩ% &
false
ΩΩ& +
)
ΩΩ+ ,
;
ΩΩ, -
if
øø 
(
øø 
item
øø 
.
øø 
	transform
øø 
.
øø 
parent
øø %
!=
øø& (
_originalParent
øø) 8
)
øø8 9
{
¿¿ 
item
¡¡ 
.
¡¡ 
	transform
¡¡ 
.
¡¡ 
	SetParent
¡¡ (
(
¡¡( )
_originalParent
¡¡) 8
,
¡¡8 9
false
¡¡: ?
)
¡¡? @
;
¡¡@ A
}
¬¬ 
}
√√ 	
	protected
≈≈ 
override
≈≈ 
void
≈≈ 
Reinitialize
≈≈  ,
(
≈≈, -
TParam1
≈≈- 4
p1
≈≈5 7
,
≈≈7 8
TParam2
≈≈9 @
p2
≈≈A C
,
≈≈C D
TParam3
≈≈E L
p3
≈≈M O
,
≈≈O P
TParam4
≈≈Q X
p4
≈≈Y [
,
≈≈[ \
TParam5
≈≈] d
p5
≈≈e g
,
≈≈g h
TParam6
≈≈i p
p6
≈≈q s
,
≈≈s t
TParam7
≈≈u |
p7
≈≈} 
,≈≈ Ä
TValue≈≈Å á
item≈≈à å
)≈≈å ç
{
∆∆ 	
item
«« 
.
«« 

gameObject
«« 
.
«« 
	SetActive
«« %
(
««% &
true
««& *
)
««* +
;
««+ ,
item
»» 
.
»» 
	OnSpawned
»» 
(
»» 
p1
»» 
,
»» 
p2
»» !
,
»»! "
p3
»»# %
,
»»% &
p4
»»' )
,
»») *
p5
»»+ -
,
»»- .
p6
»»/ 1
,
»»1 2
p7
»»3 5
)
»»5 6
;
»»6 7
}
…… 	
}
   
public
ÕÕ 

class
ÕÕ $
MonoPoolableMemoryPool
ÕÕ '
<
ÕÕ' (
TParam1
ÕÕ( /
,
ÕÕ/ 0
TParam2
ÕÕ1 8
,
ÕÕ8 9
TParam3
ÕÕ: A
,
ÕÕA B
TParam4
ÕÕC J
,
ÕÕJ K
TParam5
ÕÕL S
,
ÕÕS T
TParam6
ÕÕU \
,
ÕÕ\ ]
TParam7
ÕÕ^ e
,
ÕÕe f
TParam8
ÕÕg n
,
ÕÕn o
TValue
ÕÕp v
>
ÕÕv w
:
ŒŒ 	

MemoryPool
ŒŒ
 
<
ŒŒ 
TParam1
ŒŒ 
,
ŒŒ 
TParam2
ŒŒ %
,
ŒŒ% &
TParam3
ŒŒ' .
,
ŒŒ. /
TParam4
ŒŒ0 7
,
ŒŒ7 8
TParam5
ŒŒ9 @
,
ŒŒ@ A
TParam6
ŒŒB I
,
ŒŒI J
TParam7
ŒŒK R
,
ŒŒR S
TParam8
ŒŒT [
,
ŒŒ[ \
TValue
ŒŒ] c
>
ŒŒc d
where
œœ 
TValue
œœ 
:
œœ 
	Component
œœ  
,
œœ  !
	IPoolable
œœ" +
<
œœ+ ,
TParam1
œœ, 3
,
œœ3 4
TParam2
œœ5 <
,
œœ< =
TParam3
œœ> E
,
œœE F
TParam4
œœG N
,
œœN O
TParam5
œœP W
,
œœW X
TParam6
œœY `
,
œœ` a
TParam7
œœb i
,
œœi j
TParam8
œœk r
>
œœr s
{
–– 
	Transform
—— 
_originalParent
—— !
;
——! "
[
”” 	
Inject
””	 
]
”” 
public
‘‘ $
MonoPoolableMemoryPool
‘‘ %
(
‘‘% &
)
‘‘& '
{
’’ 	
}
÷÷ 	
	protected
ÿÿ 
override
ÿÿ 
void
ÿÿ 
	OnCreated
ÿÿ  )
(
ÿÿ) *
TValue
ÿÿ* 0
item
ÿÿ1 5
)
ÿÿ5 6
{
ŸŸ 	
item
⁄⁄ 
.
⁄⁄ 

gameObject
⁄⁄ 
.
⁄⁄ 
	SetActive
⁄⁄ %
(
⁄⁄% &
false
⁄⁄& +
)
⁄⁄+ ,
;
⁄⁄, -
_originalParent
€€ 
=
€€ 
item
€€ "
.
€€" #
	transform
€€# ,
.
€€, -
parent
€€- 3
;
€€3 4
}
‹‹ 	
	protected
ﬁﬁ 
override
ﬁﬁ 
void
ﬁﬁ 
OnDestroyed
ﬁﬁ  +
(
ﬁﬁ+ ,
TValue
ﬁﬁ, 2
item
ﬁﬁ3 7
)
ﬁﬁ7 8
{
ﬂﬂ 	

GameObject
‡‡ 
.
‡‡ 
Destroy
‡‡ 
(
‡‡ 
item
‡‡ #
.
‡‡# $

gameObject
‡‡$ .
)
‡‡. /
;
‡‡/ 0
}
·· 	
	protected
„„ 
override
„„ 
void
„„ 
OnDespawned
„„  +
(
„„+ ,
TValue
„„, 2
item
„„3 7
)
„„7 8
{
‰‰ 	
item
ÂÂ 
.
ÂÂ 
OnDespawned
ÂÂ 
(
ÂÂ 
)
ÂÂ 
;
ÂÂ 
item
ÊÊ 
.
ÊÊ 

gameObject
ÊÊ 
.
ÊÊ 
	SetActive
ÊÊ %
(
ÊÊ% &
false
ÊÊ& +
)
ÊÊ+ ,
;
ÊÊ, -
if
ËË 
(
ËË 
item
ËË 
.
ËË 
	transform
ËË 
.
ËË 
parent
ËË %
!=
ËË& (
_originalParent
ËË) 8
)
ËË8 9
{
ÈÈ 
item
ÍÍ 
.
ÍÍ 
	transform
ÍÍ 
.
ÍÍ 
	SetParent
ÍÍ (
(
ÍÍ( )
_originalParent
ÍÍ) 8
,
ÍÍ8 9
false
ÍÍ: ?
)
ÍÍ? @
;
ÍÍ@ A
}
ÎÎ 
}
ÏÏ 	
	protected
ÓÓ 
override
ÓÓ 
void
ÓÓ 
Reinitialize
ÓÓ  ,
(
ÓÓ, -
TParam1
ÓÓ- 4
p1
ÓÓ5 7
,
ÓÓ7 8
TParam2
ÓÓ9 @
p2
ÓÓA C
,
ÓÓC D
TParam3
ÓÓE L
p3
ÓÓM O
,
ÓÓO P
TParam4
ÓÓQ X
p4
ÓÓY [
,
ÓÓ[ \
TParam5
ÓÓ] d
p5
ÓÓe g
,
ÓÓg h
TParam6
ÓÓi p
p6
ÓÓq s
,
ÓÓs t
TParam7
ÓÓu |
p7
ÓÓ} 
,ÓÓ Ä
TParam8ÓÓÅ à
p8ÓÓâ ã
,ÓÓã å
TValueÓÓç ì
itemÓÓî ò
)ÓÓò ô
{
ÔÔ 	
item
 
.
 

gameObject
 
.
 
	SetActive
 %
(
% &
true
& *
)
* +
;
+ ,
item
ÒÒ 
.
ÒÒ 
	OnSpawned
ÒÒ 
(
ÒÒ 
p1
ÒÒ 
,
ÒÒ 
p2
ÒÒ !
,
ÒÒ! "
p3
ÒÒ# %
,
ÒÒ% &
p4
ÒÒ' )
,
ÒÒ) *
p5
ÒÒ+ -
,
ÒÒ- .
p6
ÒÒ/ 1
,
ÒÒ1 2
p7
ÒÒ3 5
,
ÒÒ5 6
p8
ÒÒ7 9
)
ÒÒ9 :
;
ÒÒ: ;
}
ÚÚ 	
}
ÛÛ 
}ÙÙ ö"
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\CachedOpenTypeProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 "
CachedOpenTypeProvider		 '
:		( )
	IProvider		* 3
{

 
readonly 
	IProvider 
_creator #
;# $
readonly 

Dictionary 
< 
Type  
,  !
CachedProvider" 0
>0 1
_providerMap2 >
=? @
newA D

DictionaryE O
<O P
TypeP T
,T U
CachedProviderV d
>d e
(e f
)f g
;g h
public "
CachedOpenTypeProvider %
(% &
	IProvider& /
creator0 7
)7 8
{ 	
Assert 
. 
That 
( 
creator 
.  '
TypeVariesBasedOnMemberType  ;
); <
;< =
_creator 
= 
creator 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{   
throw"" 
Assert"" 
."" 
CreateException"" ,
("", -
)""- .
;"". /
}## 
}$$ 	
public&& 
int&& 
NumInstances&& 
{'' 	
get(( 
{)) 
{-- 
return.. 
_providerMap.. '
...' (
Values..( .
.... /
Select../ 5
(..5 6
x..6 7
=>..8 :
x..; <
...< =
NumInstances..= I
)..I J
...J K
Sum..K N
(..N O
)..O P
;..P Q
}// 
}00 
}11 	
public55 
void55 

ClearCache55 
(55 
)55  
{66 	
{:: 
_providerMap;; 
.;; 
Clear;; "
(;;" #
);;# $
;;;$ %
}<< 
}== 	
public?? 
Type?? 
GetInstanceType?? #
(??# $
InjectContext??$ 1
context??2 9
)??9 :
{@@ 	
returnAA 
_creatorAA 
.AA 
GetInstanceTypeAA +
(AA+ ,
contextAA, 3
)AA3 4
;AA4 5
}BB 	
publicDD 
voidDD *
GetAllInstancesWithInjectSplitDD 2
(DD2 3
InjectContextEE 
contextEE !
,EE! "
ListEE# '
<EE' (
TypeValuePairEE( 5
>EE5 6
argsEE7 ;
,EE; <
outEE= @
ActionEEA G
injectActionEEH T
,EET U
ListEEV Z
<EEZ [
objectEE[ a
>EEa b
bufferEEc i
)EEi j
{FF 	
AssertGG 
.GG 
	IsNotNullGG 
(GG 
contextGG $
)GG$ %
;GG% &
CachedProviderII 
providerII #
;II# $
{NN 
ifOO 
(OO 
!OO 
_providerMapOO !
.OO! "
TryGetValueOO" -
(OO- .
contextOO. 5
.OO5 6

MemberTypeOO6 @
,OO@ A
outOOB E
providerOOF N
)OON O
)OOO P
{PP 
providerQQ 
=QQ 
newQQ "
CachedProviderQQ# 1
(QQ1 2
_creatorQQ2 :
)QQ: ;
;QQ; <
_providerMapRR  
.RR  !
AddRR! $
(RR$ %
contextRR% ,
.RR, -

MemberTypeRR- 7
,RR7 8
providerRR9 A
)RRA B
;RRB C
}SS 
}TT 
providerVV 
.VV *
GetAllInstancesWithInjectSplitVV 3
(VV3 4
contextWW 
,WW 
argsWW 
,WW 
outWW "
injectActionWW# /
,WW/ 0
bufferWW1 7
)WW7 8
;WW8 9
}XX 	
}YY 
}ZZ ı˛
iC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\FromBinders\FromBinder.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class 

FromBinder $
:% &8
,ScopeConcreteIdArgConditionCopyNonLazyBinder' S
{ 
public 

FromBinder 
( 
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
: 
base 
( 
bindInfo 
) 
{ 	
BindStatement 
= 
bindStatement )
;) *
BindContainer 
= 
bindContainer )
;) *
} 	
	protected 
DiContainer 
BindContainer +
{ 	
get 
; 
private 
set 
; 
} 	
	protected 
BindStatement 
BindStatement  -
{ 	
get   
;   
private!! 
set!! 
;!! 
}"" 	
	protected$$ 
IBindingFinalizer$$ #
SubFinalizer$$$ 0
{%% 	
set&& 
{&& 
BindStatement&& 
.&&  
SetFinalizer&&  ,
(&&, -
value&&- 2
)&&2 3
;&&3 4
}&&5 6
}'' 	
	protected)) 
IEnumerable)) 
<)) 
Type)) "
>))" #
AllParentTypes))$ 2
{** 	
get++ 
{++ 
return++ 
BindInfo++ !
.++! "
ContractTypes++" /
.++/ 0
Concat++0 6
(++6 7
BindInfo++7 ?
.++? @
ToTypes++@ G
)++G H
;++H I
}++J K
},, 	
	protected.. 
IEnumerable.. 
<.. 
Type.. "
>.." #
ConcreteTypes..$ 1
{// 	
get00 
{11 
if22 
(22 
BindInfo22 
.22 
ToChoice22 %
==22& (
	ToChoices22) 2
.222 3
Self223 7
)227 8
{33 
return44 
BindInfo44 #
.44# $
ContractTypes44$ 1
;441 2
}55 
Assert77 
.77 

IsNotEmpty77 !
(77! "
BindInfo77" *
.77* +
ToTypes77+ 2
)772 3
;773 4
return88 
BindInfo88 
.88  
ToTypes88  '
;88' (
}99 
}:: 	
public== 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder== ;
FromNew==< C
(==C D
)==D E
{>> 	
BindingUtil?? 
.?? '
AssertTypesAreNotComponents?? 3
(??3 4
ConcreteTypes??4 A
)??A B
;??B C
BindingUtil@@ 
.@@ %
AssertTypesAreNotAbstract@@ 1
(@@1 2
ConcreteTypes@@2 ?
)@@? @
;@@@ A
returnBB 
thisBB 
;BB 
}CC 	
publicEE 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderEE ;
FromResolveEE< G
(EEG H
)EEH I
{FF 	
returnGG 
FromResolveGG 
(GG 
nullGG #
)GG# $
;GG$ %
}HH 	
publicJJ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderJJ ;
FromResolveJJ< G
(JJG H
objectJJH N
subIdentifierJJO \
)JJ\ ]
{KK 	
returnLL 
FromResolveLL 
(LL 
subIdentifierLL ,
,LL, -
InjectSourcesLL. ;
.LL; <
AnyLL< ?
)LL? @
;LL@ A
}MM 	
publicOO 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderOO ;
FromResolveOO< G
(OOG H
objectOOH N
subIdentifierOOO \
,OO\ ]
InjectSourcesOO^ k
sourceOOl r
)OOr s
{PP 	
returnQQ 
FromResolveInternalQQ &
(QQ& '
subIdentifierQQ' 4
,QQ4 5
falseQQ6 ;
,QQ; <
sourceQQ= C
)QQC D
;QQD E
}RR 	
publicTT 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderTT ;
FromResolveAllTT< J
(TTJ K
)TTK L
{UU 	
returnVV 
FromResolveAllVV !
(VV! "
nullVV" &
)VV& '
;VV' (
}WW 	
publicYY 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderYY ;
FromResolveAllYY< J
(YYJ K
objectYYK Q
subIdentifierYYR _
)YY_ `
{ZZ 	
return[[ 
FromResolveAll[[ !
([[! "
subIdentifier[[" /
,[[/ 0
InjectSources[[1 >
.[[> ?
Any[[? B
)[[B C
;[[C D
}\\ 	
public^^ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder^^ ;
FromResolveAll^^< J
(^^J K
object^^K Q
subIdentifier^^R _
,^^_ `
InjectSources^^a n
source^^o u
)^^u v
{__ 	
return`` 
FromResolveInternal`` &
(``& '
subIdentifier``' 4
,``4 5
true``6 :
,``: ;
source``< B
)``B C
;``C D
}aa 	8
,ScopeConcreteIdArgConditionCopyNonLazyBindercc 4
FromResolveInternalcc5 H
(ccH I
objectccI O
subIdentifierccP ]
,cc] ^
boolcc_ c
matchAllccd l
,ccl m
InjectSourcesccn {
source	cc| Ç
)
ccÇ É
{dd 	
BindInfoee 
.ee  
RequireExplicitScopeee )
=ee* +
falseee, 1
;ee1 2
BindInfogg 
.gg !
MarkAsCreationBindinggg *
=gg+ ,
falsegg- 2
;gg2 3
SubFinalizerii 
=ii 
newii $
ScopableBindingFinalizerii 7
(ii7 8
BindInfojj 
,jj 
(kk 
	containerkk 
,kk 
typekk  
)kk  !
=>kk" $
newkk% (
ResolveProviderkk) 8
(kk8 9
typell 
,ll 
	containerll #
,ll# $
subIdentifierll% 2
,ll2 3
falsell4 9
,ll9 :
sourcell; A
,llA B
matchAllllC K
)llK L
)llL M
;llM N
returnnn 
newnn 8
,ScopeConcreteIdArgConditionCopyNonLazyBindernn C
(nnC D
BindInfonnD L
)nnL M
;nnM N
}oo 	
publicqq 
SubContainerBinderqq !&
FromSubContainerResolveAllqq" <
(qq< =
)qq= >
{rr 	
returnss &
FromSubContainerResolveAllss -
(ss- .
nullss. 2
)ss2 3
;ss3 4
}tt 	
publicvv 
SubContainerBindervv !&
FromSubContainerResolveAllvv" <
(vv< =
objectvv= C
subIdentifiervvD Q
)vvQ R
{ww 	
returnxx +
FromSubContainerResolveInternalxx 2
(xx2 3
subIdentifierxx3 @
,xx@ A
truexxB F
)xxF G
;xxG H
}yy 	
public{{ 
SubContainerBinder{{ !#
FromSubContainerResolve{{" 9
({{9 :
){{: ;
{|| 	
return}} #
FromSubContainerResolve}} *
(}}* +
null}}+ /
)}}/ 0
;}}0 1
}~~ 	
public
ÄÄ  
SubContainerBinder
ÄÄ !%
FromSubContainerResolve
ÄÄ" 9
(
ÄÄ9 :
object
ÄÄ: @
subIdentifier
ÄÄA N
)
ÄÄN O
{
ÅÅ 	
return
ÇÇ -
FromSubContainerResolveInternal
ÇÇ 2
(
ÇÇ2 3
subIdentifier
ÇÇ3 @
,
ÇÇ@ A
false
ÇÇB G
)
ÇÇG H
;
ÇÇH I
}
ÉÉ 	 
SubContainerBinder
ÖÖ -
FromSubContainerResolveInternal
ÖÖ :
(
ÖÖ: ;
object
ÜÜ 
subIdentifier
ÜÜ  
,
ÜÜ  !
bool
ÜÜ" &

resolveAll
ÜÜ' 1
)
ÜÜ1 2
{
áá 	
BindInfo
ää 
.
ää "
RequireExplicitScope
ää )
=
ää* +
true
ää, 0
;
ää0 1
BindInfo
åå 
.
åå #
MarkAsCreationBinding
åå *
=
åå+ ,
false
åå- 2
;
åå2 3
return
éé 
new
éé  
SubContainerBinder
éé )
(
éé) *
BindInfo
èè 
,
èè 
BindStatement
èè '
,
èè' (
subIdentifier
èè) 6
,
èè6 7

resolveAll
èè8 B
)
èèB C
;
èèC D
}
êê 	
	protected
íí :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
íí >
FromIFactoryBase
íí? O
<
ííO P
	TContract
ííP Y
>
ííY Z
(
ííZ [
Action
ìì 
<
ìì #
ConcreteBinderGeneric
ìì (
<
ìì( )
IFactory
ìì) 1
<
ìì1 2
	TContract
ìì2 ;
>
ìì; <
>
ìì< =
>
ìì= >"
factoryBindGenerator
ìì? S
)
ììS T
{
îî 	
var
óó 
	factoryId
óó 
=
óó 
Guid
óó  
.
óó  !
NewGuid
óó! (
(
óó( )
)
óó) *
;
óó* +
var
öö 
	subBinder
öö 
=
öö 
BindContainer
öö )
.
öö) *
BindNoFlush
öö* 5
<
öö5 6
IFactory
öö6 >
<
öö> ?
	TContract
öö? H
>
ööH I
>
ööI J
(
ööJ K
)
ööK L
.
õõ 
WithId
õõ 
(
õõ 
	factoryId
õõ !
)
õõ! "
;
õõ" #"
factoryBindGenerator
ùù  
(
ùù  !
	subBinder
ùù! *
)
ùù* +
;
ùù+ ,
BindInfo
°° 
.
°° "
RequireExplicitScope
°° )
=
°°* +
false
°°, 1
;
°°1 2
BindInfo
££ 
.
££ #
MarkAsCreationBinding
££ *
=
££+ ,
false
££- 2
;
££2 3
SubFinalizer
•• 
=
•• 
new
•• &
ScopableBindingFinalizer
•• 7
(
••7 8
BindInfo
¶¶ 
,
¶¶ 
(
ßß 
	container
ßß 
,
ßß 
type
ßß  
)
ßß  !
=>
ßß" $
new
ßß% (
IFactoryProvider
ßß) 9
<
ßß9 :
	TContract
ßß: C
>
ßßC D
(
ßßD E
	container
ßßE N
,
ßßN O
	factoryId
ßßP Y
)
ßßY Z
)
ßßZ [
;
ßß[ \
var
©© 
binder
©© 
=
©© 
new
©© :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
©© I
(
©©I J
BindInfo
©©J R
)
©©R S
;
©©S T
binder
´´ 
.
´´ &
AddSecondaryCopyBindInfo
´´ +
(
´´+ ,
	subBinder
´´, 5
.
´´5 6
BindInfo
´´6 >
)
´´> ?
;
´´? @
return
¨¨ 
binder
¨¨ 
;
¨¨ 
}
≠≠ 	
public
±± :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
±± ;
FromComponentsOn
±±< L
(
±±L M

GameObject
±±M W

gameObject
±±X b
)
±±b c
{
≤≤ 	
BindingUtil
≥≥ 
.
≥≥ %
AssertIsValidGameObject
≥≥ /
(
≥≥/ 0

gameObject
≥≥0 :
)
≥≥: ;
;
≥≥; <
BindingUtil
¥¥ 
.
¥¥ 
AssertIsComponent
¥¥ )
(
¥¥) *
ConcreteTypes
¥¥* 7
)
¥¥7 8
;
¥¥8 9
BindingUtil
µµ 
.
µµ '
AssertTypesAreNotAbstract
µµ 1
(
µµ1 2
ConcreteTypes
µµ2 ?
)
µµ? @
;
µµ@ A
BindInfo
∑∑ 
.
∑∑ "
RequireExplicitScope
∑∑ )
=
∑∑* +
true
∑∑, 0
;
∑∑0 1
SubFinalizer
∏∏ 
=
∏∏ 
new
∏∏ &
ScopableBindingFinalizer
∏∏ 7
(
∏∏7 8
BindInfo
ππ 
,
ππ 
(
∫∫ 
	container
∫∫ 
,
∫∫ 
type
∫∫  
)
∫∫  !
=>
∫∫" $
new
∫∫% (0
"GetFromGameObjectComponentProvider
∫∫) K
(
∫∫K L
type
ªª 
,
ªª 

gameObject
ªª $
,
ªª$ %
false
ªª& +
)
ªª+ ,
)
ªª, -
;
ªª- .
return
ΩΩ 
new
ΩΩ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ΩΩ C
(
ΩΩC D
BindInfo
ΩΩD L
)
ΩΩL M
;
ΩΩM N
}
ææ 	
public
¿¿ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
¿¿ ;
FromComponentOn
¿¿< K
(
¿¿K L

GameObject
¿¿L V

gameObject
¿¿W a
)
¿¿a b
{
¡¡ 	
BindingUtil
¬¬ 
.
¬¬ %
AssertIsValidGameObject
¬¬ /
(
¬¬/ 0

gameObject
¬¬0 :
)
¬¬: ;
;
¬¬; <
BindingUtil
√√ 
.
√√ 
AssertIsComponent
√√ )
(
√√) *
ConcreteTypes
√√* 7
)
√√7 8
;
√√8 9
BindingUtil
ƒƒ 
.
ƒƒ '
AssertTypesAreNotAbstract
ƒƒ 1
(
ƒƒ1 2
ConcreteTypes
ƒƒ2 ?
)
ƒƒ? @
;
ƒƒ@ A
BindInfo
∆∆ 
.
∆∆ "
RequireExplicitScope
∆∆ )
=
∆∆* +
true
∆∆, 0
;
∆∆0 1
SubFinalizer
«« 
=
«« 
new
«« &
ScopableBindingFinalizer
«« 7
(
««7 8
BindInfo
»» 
,
»» 
(
…… 
	container
…… 
,
…… 
type
……  
)
……  !
=>
……" $
new
……% (0
"GetFromGameObjectComponentProvider
……) K
(
……K L
type
   
,
   

gameObject
   $
,
  $ %
true
  & *
)
  * +
)
  + ,
;
  , -
return
ÃÃ 
new
ÃÃ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÃÃ C
(
ÃÃC D
BindInfo
ÃÃD L
)
ÃÃL M
;
ÃÃM N
}
ÕÕ 	
public
œœ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
œœ ;
FromComponentsOn
œœ< L
(
œœL M
Func
œœM Q
<
œœQ R
InjectContext
œœR _
,
œœ_ `

GameObject
œœa k
>
œœk l
gameObjectGetter
œœm }
)
œœ} ~
{
–– 	
BindingUtil
—— 
.
—— 
AssertIsComponent
—— )
(
——) *
ConcreteTypes
——* 7
)
——7 8
;
——8 9
BindingUtil
““ 
.
““ '
AssertTypesAreNotAbstract
““ 1
(
““1 2
ConcreteTypes
““2 ?
)
““? @
;
““@ A
BindInfo
‘‘ 
.
‘‘ "
RequireExplicitScope
‘‘ )
=
‘‘* +
false
‘‘, 1
;
‘‘1 2
SubFinalizer
’’ 
=
’’ 
new
’’ &
ScopableBindingFinalizer
’’ 7
(
’’7 8
BindInfo
÷÷ 
,
÷÷ 
(
◊◊ 
	container
◊◊ 
,
◊◊ 
type
◊◊  
)
◊◊  !
=>
◊◊" $
new
◊◊% (6
(GetFromGameObjectGetterComponentProvider
◊◊) Q
(
◊◊Q R
type
ÿÿ 
,
ÿÿ 
gameObjectGetter
ÿÿ *
,
ÿÿ* +
false
ÿÿ, 1
)
ÿÿ1 2
)
ÿÿ2 3
;
ÿÿ3 4
return
⁄⁄ 
new
⁄⁄ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
⁄⁄ C
(
⁄⁄C D
BindInfo
⁄⁄D L
)
⁄⁄L M
;
⁄⁄M N
}
€€ 	
public
›› :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
›› ;
FromComponentOn
››< K
(
››K L
Func
››L P
<
››P Q
InjectContext
››Q ^
,
››^ _

GameObject
››` j
>
››j k
gameObjectGetter
››l |
)
››| }
{
ﬁﬁ 	
BindingUtil
ﬂﬂ 
.
ﬂﬂ 
AssertIsComponent
ﬂﬂ )
(
ﬂﬂ) *
ConcreteTypes
ﬂﬂ* 7
)
ﬂﬂ7 8
;
ﬂﬂ8 9
BindingUtil
‡‡ 
.
‡‡ '
AssertTypesAreNotAbstract
‡‡ 1
(
‡‡1 2
ConcreteTypes
‡‡2 ?
)
‡‡? @
;
‡‡@ A
BindInfo
‚‚ 
.
‚‚ "
RequireExplicitScope
‚‚ )
=
‚‚* +
false
‚‚, 1
;
‚‚1 2
SubFinalizer
„„ 
=
„„ 
new
„„ &
ScopableBindingFinalizer
„„ 7
(
„„7 8
BindInfo
‰‰ 
,
‰‰ 
(
ÂÂ 
	container
ÂÂ 
,
ÂÂ 
type
ÂÂ  
)
ÂÂ  !
=>
ÂÂ" $
new
ÂÂ% (6
(GetFromGameObjectGetterComponentProvider
ÂÂ) Q
(
ÂÂQ R
type
ÊÊ 
,
ÊÊ 
gameObjectGetter
ÊÊ *
,
ÊÊ* +
true
ÊÊ, 0
)
ÊÊ0 1
)
ÊÊ1 2
;
ÊÊ2 3
return
ËË 
new
ËË :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ËË C
(
ËËC D
BindInfo
ËËD L
)
ËËL M
;
ËËM N
}
ÈÈ 	
public
ÎÎ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÎÎ ;"
FromComponentsOnRoot
ÎÎ< P
(
ÎÎP Q
)
ÎÎQ R
{
ÏÏ 	
return
ÌÌ 
FromComponentsOn
ÌÌ #
(
ÌÌ# $
ctx
ÓÓ 
=>
ÓÓ 
ctx
ÓÓ 
.
ÓÓ 
	Container
ÓÓ $
.
ÓÓ$ %
Resolve
ÓÓ% ,
<
ÓÓ, -
Context
ÓÓ- 4
>
ÓÓ4 5
(
ÓÓ5 6
)
ÓÓ6 7
.
ÓÓ7 8

gameObject
ÓÓ8 B
)
ÓÓB C
;
ÓÓC D
}
ÔÔ 	
public
ÒÒ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÒÒ ;!
FromComponentOnRoot
ÒÒ< O
(
ÒÒO P
)
ÒÒP Q
{
ÚÚ 	
return
ÛÛ 
FromComponentOn
ÛÛ "
(
ÛÛ" #
ctx
ÙÙ 
=>
ÙÙ 
ctx
ÙÙ 
.
ÙÙ 
	Container
ÙÙ $
.
ÙÙ$ %
Resolve
ÙÙ% ,
<
ÙÙ, -
Context
ÙÙ- 4
>
ÙÙ4 5
(
ÙÙ5 6
)
ÙÙ6 7
.
ÙÙ7 8

gameObject
ÙÙ8 B
)
ÙÙB C
;
ÙÙC D
}
ıı 	
public
˜˜ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
˜˜ ; 
FromNewComponentOn
˜˜< N
(
˜˜N O

GameObject
˜˜O Y

gameObject
˜˜Z d
)
˜˜d e
{
¯¯ 	
BindingUtil
˘˘ 
.
˘˘ %
AssertIsValidGameObject
˘˘ /
(
˘˘/ 0

gameObject
˘˘0 :
)
˘˘: ;
;
˘˘; <
BindingUtil
˙˙ 
.
˙˙ 
AssertIsComponent
˙˙ )
(
˙˙) *
ConcreteTypes
˙˙* 7
)
˙˙7 8
;
˙˙8 9
BindingUtil
˚˚ 
.
˚˚ '
AssertTypesAreNotAbstract
˚˚ 1
(
˚˚1 2
ConcreteTypes
˚˚2 ?
)
˚˚? @
;
˚˚@ A
BindInfo
˝˝ 
.
˝˝ "
RequireExplicitScope
˝˝ )
=
˝˝* +
true
˝˝, 0
;
˝˝0 1
SubFinalizer
˛˛ 
=
˛˛ 
new
˛˛ &
ScopableBindingFinalizer
˛˛ 7
(
˛˛7 8
BindInfo
ˇˇ 
,
ˇˇ 
(
ÄÄ 
	container
ÄÄ 
,
ÄÄ 
type
ÄÄ  
)
ÄÄ  !
=>
ÄÄ" $
new
ÄÄ% (6
(AddToExistingGameObjectComponentProvider
ÄÄ) Q
(
ÄÄQ R

gameObject
ÅÅ 
,
ÅÅ 
	container
ÅÅ  )
,
ÅÅ) *
type
ÅÅ+ /
,
ÅÅ/ 0
BindInfo
ÅÅ1 9
.
ÅÅ9 :
	Arguments
ÅÅ: C
,
ÅÅC D
BindInfo
ÅÅE M
.
ÅÅM N 
ConcreteIdentifier
ÅÅN `
,
ÅÅ` a
BindInfo
ÅÅb j
.
ÅÅj k"
InstantiatedCallback
ÅÅk 
)ÅÅ Ä
)ÅÅÄ Å
;ÅÅÅ Ç
return
ÉÉ 
new
ÉÉ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÉÉ C
(
ÉÉC D
BindInfo
ÉÉD L
)
ÉÉL M
;
ÉÉM N
}
ÑÑ 	
public
ÜÜ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÜÜ ; 
FromNewComponentOn
ÜÜ< N
(
ÜÜN O
Func
ÜÜO S
<
ÜÜS T
InjectContext
ÜÜT a
,
ÜÜa b

GameObject
ÜÜc m
>
ÜÜm n
gameObjectGetter
ÜÜo 
)ÜÜ Ä
{
áá 	
BindingUtil
àà 
.
àà 
AssertIsComponent
àà )
(
àà) *
ConcreteTypes
àà* 7
)
àà7 8
;
àà8 9
BindingUtil
ââ 
.
ââ '
AssertTypesAreNotAbstract
ââ 1
(
ââ1 2
ConcreteTypes
ââ2 ?
)
ââ? @
;
ââ@ A
BindInfo
ãã 
.
ãã "
RequireExplicitScope
ãã )
=
ãã* +
true
ãã, 0
;
ãã0 1
SubFinalizer
åå 
=
åå 
new
åå &
ScopableBindingFinalizer
åå 7
(
åå7 8
BindInfo
çç 
,
çç 
(
éé 
	container
éé 
,
éé 
type
éé  
)
éé  !
=>
éé" $
new
éé% (<
.AddToExistingGameObjectComponentProviderGetter
éé) W
(
ééW X
gameObjectGetter
èè $
,
èè$ %
	container
èè& /
,
èè/ 0
type
èè1 5
,
èè5 6
BindInfo
èè7 ?
.
èè? @
	Arguments
èè@ I
,
èèI J
BindInfo
èèK S
.
èèS T 
ConcreteIdentifier
èèT f
,
èèf g
BindInfo
èèh p
.
èèp q#
InstantiatedCallbackèèq Ö
)èèÖ Ü
)èèÜ á
;èèá à
return
ëë 
new
ëë :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ëë C
(
ëëC D
BindInfo
ëëD L
)
ëëL M
;
ëëM N
}
íí 	
public
îî :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
îî ;%
FromNewComponentSibling
îî< S
(
îîS T
)
îîT U
{
ïï 	
BindingUtil
ññ 
.
ññ 
AssertIsComponent
ññ )
(
ññ) *
ConcreteTypes
ññ* 7
)
ññ7 8
;
ññ8 9
BindingUtil
óó 
.
óó '
AssertTypesAreNotAbstract
óó 1
(
óó1 2
ConcreteTypes
óó2 ?
)
óó? @
;
óó@ A
BindInfo
ôô 
.
ôô "
RequireExplicitScope
ôô )
=
ôô* +
true
ôô, 0
;
ôô0 1
SubFinalizer
öö 
=
öö 
new
öö ,
SingleProviderBindingFinalizer
öö =
(
öö= >
BindInfo
õõ 
,
õõ 
(
õõ 
	container
õõ $
,
õõ$ %
type
õõ& *
)
õõ* +
=>
õõ, .
new
õõ/ 25
'AddToCurrentGameObjectComponentProvider
õõ3 Z
(
õõZ [
	container
úú 
,
úú 
type
úú #
,
úú# $
BindInfo
úú% -
.
úú- .
	Arguments
úú. 7
,
úú7 8
BindInfo
úú9 A
.
úúA B 
ConcreteIdentifier
úúB T
,
úúT U
BindInfo
úúV ^
.
úú^ _"
InstantiatedCallback
úú_ s
)
úús t
)
úút u
;
úúu v
return
ûû 
new
ûû :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ûû C
(
ûûC D
BindInfo
ûûD L
)
ûûL M
;
ûûM N
}
üü 	
public
°° :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
°° ;$
FromNewComponentOnRoot
°°< R
(
°°R S
)
°°S T
{
¢¢ 	
return
££  
FromNewComponentOn
££ %
(
££% &
ctx
§§ 
=>
§§ 
ctx
§§ 
.
§§ 
	Container
§§ $
.
§§$ %
Resolve
§§% ,
<
§§, -
Context
§§- 4
>
§§4 5
(
§§5 6
)
§§6 7
.
§§7 8

gameObject
§§8 B
)
§§B C
;
§§C D
}
•• 	
public
ßß G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ßß H-
FromNewComponentOnNewGameObject
ßßI h
(
ßßh i
)
ßßi j
{
®® 	
return
©© -
FromNewComponentOnNewGameObject
©© 2
(
©©2 3
new
©©3 6*
GameObjectCreationParameters
©©7 S
(
©©S T
)
©©T U
)
©©U V
;
©©V W
}
™™ 	
internal
¨¨ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¨¨ J-
FromNewComponentOnNewGameObject
¨¨K j
(
¨¨j k*
GameObjectCreationParameters
≠≠ (
gameObjectInfo
≠≠) 7
)
≠≠7 8
{
ÆÆ 	
BindingUtil
ØØ 
.
ØØ 
AssertIsComponent
ØØ )
(
ØØ) *
ConcreteTypes
ØØ* 7
)
ØØ7 8
;
ØØ8 9
BindingUtil
∞∞ 
.
∞∞ '
AssertTypesAreNotAbstract
∞∞ 1
(
∞∞1 2
ConcreteTypes
∞∞2 ?
)
∞∞? @
;
∞∞@ A
BindInfo
≤≤ 
.
≤≤ "
RequireExplicitScope
≤≤ )
=
≤≤* +
true
≤≤, 0
;
≤≤0 1
SubFinalizer
≥≥ 
=
≥≥ 
new
≥≥ &
ScopableBindingFinalizer
≥≥ 7
(
≥≥7 8
BindInfo
¥¥ 
,
¥¥ 
(
µµ 
	container
µµ 
,
µµ 
type
µµ  
)
µµ  !
=>
µµ" $
new
µµ% (1
#AddToNewGameObjectComponentProvider
µµ) L
(
µµL M
	container
∂∂ 
,
∂∂ 
type
∑∑ 
,
∑∑ 
BindInfo
∏∏ 
.
∏∏ 
	Arguments
∏∏ &
,
∏∏& '
gameObjectInfo
ππ "
,
ππ" #
BindInfo
ππ$ ,
.
ππ, - 
ConcreteIdentifier
ππ- ?
,
ππ? @
BindInfo
ππA I
.
ππI J"
InstantiatedCallback
ππJ ^
)
ππ^ _
)
ππ_ `
;
ππ` a
return
ªª 
new
ªª G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ªª P
(
ªªP Q
BindInfo
ªªQ Y
,
ªªY Z
gameObjectInfo
ªª[ i
)
ªªi j
;
ªªj k
}
ºº 	
public
ææ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ææ H1
#FromNewComponentOnNewPrefabResource
ææI l
(
ææl m
string
ææm s
resourcePathææt Ä
)ææÄ Å
{
øø 	
return
¿¿ 1
#FromNewComponentOnNewPrefabResource
¿¿ 6
(
¿¿6 7
resourcePath
¿¿7 C
,
¿¿C D
new
¿¿E H*
GameObjectCreationParameters
¿¿I e
(
¿¿e f
)
¿¿f g
)
¿¿g h
;
¿¿h i
}
¡¡ 	
internal
√√ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
√√ J1
#FromNewComponentOnNewPrefabResource
√√K n
(
√√n o
string
ƒƒ 
resourcePath
ƒƒ 
,
ƒƒ  *
GameObjectCreationParameters
ƒƒ! =
gameObjectInfo
ƒƒ> L
)
ƒƒL M
{
≈≈ 	
BindingUtil
∆∆ 
.
∆∆ '
AssertIsValidResourcePath
∆∆ 1
(
∆∆1 2
resourcePath
∆∆2 >
)
∆∆> ?
;
∆∆? @
BindingUtil
«« 
.
«« 
AssertIsComponent
«« )
(
««) *
ConcreteTypes
««* 7
)
««7 8
;
««8 9
BindingUtil
»» 
.
»» '
AssertTypesAreNotAbstract
»» 1
(
»»1 2
ConcreteTypes
»»2 ?
)
»»? @
;
»»@ A
BindInfo
   
.
   "
RequireExplicitScope
   )
=
  * +
true
  , 0
;
  0 1
SubFinalizer
ÀÀ 
=
ÀÀ 
new
ÀÀ ,
PrefabResourceBindingFinalizer
ÀÀ =
(
ÀÀ= >
BindInfo
ÃÃ 
,
ÃÃ 
gameObjectInfo
ÃÃ (
,
ÃÃ( )
resourcePath
ÃÃ* 6
,
ÃÃ6 7
(
ÕÕ 
contractType
ÕÕ 
,
ÕÕ 
instantiator
ÕÕ +
)
ÕÕ+ ,
=>
ÕÕ- /
new
ÕÕ0 32
$InstantiateOnPrefabComponentProvider
ÕÕ4 X
(
ÕÕX Y
contractType
ÕÕY e
,
ÕÕe f
instantiator
ÕÕg s
)
ÕÕs t
)
ÕÕt u
;
ÕÕu v
return
œœ 
new
œœ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
œœ P
(
œœP Q
BindInfo
œœQ Y
,
œœY Z
gameObjectInfo
œœ[ i
)
œœi j
;
œœj k
}
–– 	
public
““ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
““ H)
FromNewComponentOnNewPrefab
““I d
(
““d e
UnityEngine
““e p
.
““p q
Object
““q w
prefab
““x ~
)
““~ 
{
”” 	
return
‘‘ )
FromNewComponentOnNewPrefab
‘‘ .
(
‘‘. /
prefab
‘‘/ 5
,
‘‘5 6
new
‘‘7 :*
GameObjectCreationParameters
‘‘; W
(
‘‘W X
)
‘‘X Y
)
‘‘Y Z
;
‘‘Z [
}
’’ 	
internal
◊◊ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
◊◊ J)
FromNewComponentOnNewPrefab
◊◊K f
(
◊◊f g
UnityEngine
ÿÿ 
.
ÿÿ 
Object
ÿÿ 
prefab
ÿÿ %
,
ÿÿ% &*
GameObjectCreationParameters
ÿÿ' C
gameObjectInfo
ÿÿD R
)
ÿÿR S
{
ŸŸ 	
BindingUtil
⁄⁄ 
.
⁄⁄ !
AssertIsValidPrefab
⁄⁄ +
(
⁄⁄+ ,
prefab
⁄⁄, 2
)
⁄⁄2 3
;
⁄⁄3 4
BindingUtil
€€ 
.
€€ 
AssertIsComponent
€€ )
(
€€) *
ConcreteTypes
€€* 7
)
€€7 8
;
€€8 9
BindingUtil
‹‹ 
.
‹‹ '
AssertTypesAreNotAbstract
‹‹ 1
(
‹‹1 2
ConcreteTypes
‹‹2 ?
)
‹‹? @
;
‹‹@ A
BindInfo
ﬁﬁ 
.
ﬁﬁ "
RequireExplicitScope
ﬁﬁ )
=
ﬁﬁ* +
true
ﬁﬁ, 0
;
ﬁﬁ0 1
SubFinalizer
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ $
PrefabBindingFinalizer
ﬂﬂ 5
(
ﬂﬂ5 6
BindInfo
‡‡ 
,
‡‡ 
gameObjectInfo
‡‡ (
,
‡‡( )
prefab
‡‡* 0
,
‡‡0 1
(
·· 
contractType
·· 
,
·· 
instantiator
·· +
)
··+ ,
=>
··- /
new
‚‚ 2
$InstantiateOnPrefabComponentProvider
‚‚ <
(
‚‚< =
contractType
‚‚= I
,
‚‚I J
instantiator
‚‚K W
)
‚‚W X
)
‚‚X Y
;
‚‚Y Z
return
‰‰ 
new
‰‰ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
‰‰ P
(
‰‰P Q
BindInfo
‰‰Q Y
,
‰‰Y Z
gameObjectInfo
‰‰[ i
)
‰‰i j
;
‰‰j k
}
ÂÂ 	
public
ÁÁ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÁÁ H&
FromComponentInNewPrefab
ÁÁI a
(
ÁÁa b
UnityEngine
ÁÁb m
.
ÁÁm n
Object
ÁÁn t
prefab
ÁÁu {
)
ÁÁ{ |
{
ËË 	
return
ÈÈ &
FromComponentInNewPrefab
ÈÈ +
(
ÈÈ+ ,
prefab
ÍÍ 
,
ÍÍ 
new
ÍÍ *
GameObjectCreationParameters
ÍÍ 8
(
ÍÍ8 9
)
ÍÍ9 :
)
ÍÍ: ;
;
ÍÍ; <
}
ÎÎ 	
internal
ÌÌ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÌÌ J&
FromComponentInNewPrefab
ÌÌK c
(
ÌÌc d
UnityEngine
ÓÓ 
.
ÓÓ 
Object
ÓÓ 
prefab
ÓÓ %
,
ÓÓ% &*
GameObjectCreationParameters
ÓÓ' C
gameObjectInfo
ÓÓD R
)
ÓÓR S
{
ÔÔ 	
BindingUtil
 
.
 !
AssertIsValidPrefab
 +
(
+ ,
prefab
, 2
)
2 3
;
3 4
BindingUtil
ÒÒ 
.
ÒÒ *
AssertIsInterfaceOrComponent
ÒÒ 4
(
ÒÒ4 5
AllParentTypes
ÒÒ5 C
)
ÒÒC D
;
ÒÒD E
BindInfo
ÛÛ 
.
ÛÛ "
RequireExplicitScope
ÛÛ )
=
ÛÛ* +
true
ÛÛ, 0
;
ÛÛ0 1
SubFinalizer
ÙÙ 
=
ÙÙ 
new
ÙÙ $
PrefabBindingFinalizer
ÙÙ 5
(
ÙÙ5 6
BindInfo
ıı 
,
ıı 
gameObjectInfo
ıı (
,
ıı( )
prefab
ıı* 0
,
ıı0 1
(
ˆˆ 
contractType
ˆˆ 
,
ˆˆ 
instantiator
ˆˆ +
)
ˆˆ+ ,
=>
ˆˆ- /
new
ˆˆ0 3,
GetFromPrefabComponentProvider
ˆˆ4 R
(
ˆˆR S
contractType
ˆˆS _
,
ˆˆ_ `
instantiator
ˆˆa m
,
ˆˆm n
true
ˆˆo s
)
ˆˆs t
)
ˆˆt u
;
ˆˆu v
return
¯¯ 
new
¯¯ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¯¯ P
(
¯¯P Q
BindInfo
¯¯Q Y
,
¯¯Y Z
gameObjectInfo
¯¯[ i
)
¯¯i j
;
¯¯j k
}
˘˘ 	
public
˚˚ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
˚˚ H'
FromComponentsInNewPrefab
˚˚I b
(
˚˚b c
UnityEngine
˚˚c n
.
˚˚n o
Object
˚˚o u
prefab
˚˚v |
)
˚˚| }
{
¸¸ 	
return
˝˝ '
FromComponentsInNewPrefab
˝˝ ,
(
˝˝, -
prefab
˛˛ 
,
˛˛ 
new
˛˛ *
GameObjectCreationParameters
˛˛ 8
(
˛˛8 9
)
˛˛9 :
)
˛˛: ;
;
˛˛; <
}
ˇˇ 	
internal
ÅÅ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÅÅ J'
FromComponentsInNewPrefab
ÅÅK d
(
ÅÅd e
UnityEngine
ÇÇ 
.
ÇÇ 
Object
ÇÇ 
prefab
ÇÇ %
,
ÇÇ% &*
GameObjectCreationParameters
ÇÇ' C
gameObjectInfo
ÇÇD R
)
ÇÇR S
{
ÉÉ 	
BindingUtil
ÑÑ 
.
ÑÑ !
AssertIsValidPrefab
ÑÑ +
(
ÑÑ+ ,
prefab
ÑÑ, 2
)
ÑÑ2 3
;
ÑÑ3 4
BindingUtil
ÖÖ 
.
ÖÖ *
AssertIsInterfaceOrComponent
ÖÖ 4
(
ÖÖ4 5
AllParentTypes
ÖÖ5 C
)
ÖÖC D
;
ÖÖD E
BindInfo
áá 
.
áá "
RequireExplicitScope
áá )
=
áá* +
true
áá, 0
;
áá0 1
SubFinalizer
àà 
=
àà 
new
àà $
PrefabBindingFinalizer
àà 5
(
àà5 6
BindInfo
ââ 
,
ââ 
gameObjectInfo
ââ (
,
ââ( )
prefab
ââ* 0
,
ââ0 1
(
ää 
contractType
ää 
,
ää 
instantiator
ää +
)
ää+ ,
=>
ää- /
new
ää0 3,
GetFromPrefabComponentProvider
ää4 R
(
ääR S
contractType
ääS _
,
ää_ `
instantiator
ääa m
,
ääm n
false
ääo t
)
äät u
)
ääu v
;
ääv w
return
åå 
new
åå G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
åå P
(
ååP Q
BindInfo
ååQ Y
,
ååY Z
gameObjectInfo
åå[ i
)
ååi j
;
ååj k
}
çç 	
public
èè G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
èè H.
 FromComponentInNewPrefabResource
èèI i
(
èèi j
string
èèj p
resourcePath
èèq }
)
èè} ~
{
êê 	
return
ëë .
 FromComponentInNewPrefabResource
ëë 3
(
ëë3 4
resourcePath
ëë4 @
,
ëë@ A
new
ëëB E*
GameObjectCreationParameters
ëëF b
(
ëëb c
)
ëëc d
)
ëëd e
;
ëëe f
}
íí 	
internal
îî G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
îî J.
 FromComponentInNewPrefabResource
îîK k
(
îîk l
string
ïï 
resourcePath
ïï 
,
ïï  *
GameObjectCreationParameters
ïï! =
gameObjectInfo
ïï> L
)
ïïL M
{
ññ 	
BindingUtil
óó 
.
óó '
AssertIsValidResourcePath
óó 1
(
óó1 2
resourcePath
óó2 >
)
óó> ?
;
óó? @
BindingUtil
òò 
.
òò *
AssertIsInterfaceOrComponent
òò 4
(
òò4 5
AllParentTypes
òò5 C
)
òòC D
;
òòD E
BindInfo
öö 
.
öö "
RequireExplicitScope
öö )
=
öö* +
true
öö, 0
;
öö0 1
SubFinalizer
õõ 
=
õõ 
new
õõ ,
PrefabResourceBindingFinalizer
õõ =
(
õõ= >
BindInfo
úú 
,
úú 
gameObjectInfo
úú (
,
úú( )
resourcePath
úú* 6
,
úú6 7
(
ùù 
contractType
ùù 
,
ùù 
instantiator
ùù +
)
ùù+ ,
=>
ùù- /
new
ùù0 3,
GetFromPrefabComponentProvider
ùù4 R
(
ùùR S
contractType
ùùS _
,
ùù_ `
instantiator
ùùa m
,
ùùm n
true
ùùo s
)
ùùs t
)
ùùt u
;
ùùu v
return
üü 
new
üü G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
üü P
(
üüP Q
BindInfo
üüQ Y
,
üüY Z
gameObjectInfo
üü[ i
)
üüi j
;
üüj k
}
†† 	
public
¢¢ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¢¢ H/
!FromComponentsInNewPrefabResource
¢¢I j
(
¢¢j k
string
¢¢k q
resourcePath
¢¢r ~
)
¢¢~ 
{
££ 	
return
§§ /
!FromComponentsInNewPrefabResource
§§ 4
(
§§4 5
resourcePath
§§5 A
,
§§A B
new
§§C F*
GameObjectCreationParameters
§§G c
(
§§c d
)
§§d e
)
§§e f
;
§§f g
}
•• 	
internal
ßß G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ßß J/
!FromComponentsInNewPrefabResource
ßßK l
(
ßßl m
string
®® 
resourcePath
®® 
,
®®  *
GameObjectCreationParameters
®®! =
gameObjectInfo
®®> L
)
®®L M
{
©© 	
BindingUtil
™™ 
.
™™ '
AssertIsValidResourcePath
™™ 1
(
™™1 2
resourcePath
™™2 >
)
™™> ?
;
™™? @
BindingUtil
´´ 
.
´´ *
AssertIsInterfaceOrComponent
´´ 4
(
´´4 5
AllParentTypes
´´5 C
)
´´C D
;
´´D E
BindInfo
≠≠ 
.
≠≠ "
RequireExplicitScope
≠≠ )
=
≠≠* +
true
≠≠, 0
;
≠≠0 1
SubFinalizer
ÆÆ 
=
ÆÆ 
new
ÆÆ ,
PrefabResourceBindingFinalizer
ÆÆ =
(
ÆÆ= >
BindInfo
ØØ 
,
ØØ 
gameObjectInfo
ØØ (
,
ØØ( )
resourcePath
ØØ* 6
,
ØØ6 7
(
∞∞ 
contractType
∞∞ 
,
∞∞ 
instantiator
∞∞ +
)
∞∞+ ,
=>
∞∞- /
new
∞∞0 3,
GetFromPrefabComponentProvider
∞∞4 R
(
∞∞R S
contractType
∞∞S _
,
∞∞_ `
instantiator
∞∞a m
,
∞∞m n
false
∞∞o t
)
∞∞t u
)
∞∞u v
;
∞∞v w
return
≤≤ 
new
≤≤ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
≤≤ P
(
≤≤P Q
BindInfo
≤≤Q Y
,
≤≤Y Z
gameObjectInfo
≤≤[ i
)
≤≤i j
;
≤≤j k
}
≥≥ 	
public
µµ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
µµ ;%
FromNewScriptableObject
µµ< S
(
µµS T
ScriptableObject
µµT d
resource
µµe m
)
µµm n
{
∂∂ 	
return
∑∑ *
FromScriptableObjectInternal
∑∑ /
(
∑∑/ 0
resource
∑∑0 8
,
∑∑8 9
true
∑∑: >
)
∑∑> ?
;
∑∑? @
}
∏∏ 	
public
∫∫ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
∫∫ ;"
FromScriptableObject
∫∫< P
(
∫∫P Q
ScriptableObject
∫∫Q a
resource
∫∫b j
)
∫∫j k
{
ªª 	
return
ºº *
FromScriptableObjectInternal
ºº /
(
ºº/ 0
resource
ºº0 8
,
ºº8 9
false
ºº: ?
)
ºº? @
;
ºº@ A
}
ΩΩ 	:
,ScopeConcreteIdArgConditionCopyNonLazyBinder
øø 4*
FromScriptableObjectInternal
øø5 Q
(
øøQ R
ScriptableObject
¿¿ 
resource
¿¿ %
,
¿¿% &
bool
¿¿' +
	createNew
¿¿, 5
)
¿¿5 6
{
¡¡ 	
BindingUtil
¬¬ 
.
¬¬ 1
#AssertIsInterfaceOrScriptableObject
¬¬ ;
(
¬¬; <
AllParentTypes
¬¬< J
)
¬¬J K
;
¬¬K L
BindInfo
ƒƒ 
.
ƒƒ "
RequireExplicitScope
ƒƒ )
=
ƒƒ* +
true
ƒƒ, 0
;
ƒƒ0 1
SubFinalizer
≈≈ 
=
≈≈ 
new
≈≈ &
ScopableBindingFinalizer
≈≈ 7
(
≈≈7 8
BindInfo
∆∆ 
,
∆∆ 
(
«« 
	container
«« 
,
«« 
type
««  
)
««  !
=>
««" $
new
««% (.
 ScriptableObjectInstanceProvider
««) I
(
««I J
resource
»» 
,
»» 
type
»» "
,
»»" #
	container
»»$ -
,
»»- .
BindInfo
»»/ 7
.
»»7 8
	Arguments
»»8 A
,
»»A B
	createNew
»»C L
,
»»L M
BindInfo
…… 
.
……  
ConcreteIdentifier
…… /
,
……/ 0
BindInfo
……1 9
.
……9 :"
InstantiatedCallback
……: N
)
……N O
)
……O P
;
……P Q
return
ÀÀ 
new
ÀÀ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÀÀ C
(
ÀÀC D
BindInfo
ÀÀD L
)
ÀÀL M
;
ÀÀM N
}
ÃÃ 	
public
ŒŒ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ŒŒ ;-
FromNewScriptableObjectResource
ŒŒ< [
(
ŒŒ[ \
string
ŒŒ\ b
resourcePath
ŒŒc o
)
ŒŒo p
{
œœ 	
return
–– 2
$FromScriptableObjectResourceInternal
–– 7
(
––7 8
resourcePath
––8 D
,
––D E
true
––F J
)
––J K
;
––K L
}
—— 	
public
”” :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
”” ;*
FromScriptableObjectResource
””< X
(
””X Y
string
””Y _
resourcePath
””` l
)
””l m
{
‘‘ 	
return
’’ 2
$FromScriptableObjectResourceInternal
’’ 7
(
’’7 8
resourcePath
’’8 D
,
’’D E
false
’’F K
)
’’K L
;
’’L M
}
÷÷ 	:
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÿÿ 42
$FromScriptableObjectResourceInternal
ÿÿ5 Y
(
ÿÿY Z
string
ŸŸ 
resourcePath
ŸŸ 
,
ŸŸ  
bool
ŸŸ! %
	createNew
ŸŸ& /
)
ŸŸ/ 0
{
⁄⁄ 	
BindingUtil
€€ 
.
€€ '
AssertIsValidResourcePath
€€ 1
(
€€1 2
resourcePath
€€2 >
)
€€> ?
;
€€? @
BindingUtil
‹‹ 
.
‹‹ 1
#AssertIsInterfaceOrScriptableObject
‹‹ ;
(
‹‹; <
AllParentTypes
‹‹< J
)
‹‹J K
;
‹‹K L
BindInfo
ﬁﬁ 
.
ﬁﬁ "
RequireExplicitScope
ﬁﬁ )
=
ﬁﬁ* +
true
ﬁﬁ, 0
;
ﬁﬁ0 1
SubFinalizer
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ &
ScopableBindingFinalizer
ﬂﬂ 7
(
ﬂﬂ7 8
BindInfo
‡‡ 
,
‡‡ 
(
·· 
	container
·· 
,
·· 
type
··  
)
··  !
=>
··" $
new
··% (.
 ScriptableObjectResourceProvider
··) I
(
··I J
resourcePath
‚‚  
,
‚‚  !
type
‚‚" &
,
‚‚& '
	container
‚‚( 1
,
‚‚1 2
BindInfo
‚‚3 ;
.
‚‚; <
	Arguments
‚‚< E
,
‚‚E F
	createNew
‚‚G P
,
‚‚P Q
BindInfo
„„ 
.
„„  
ConcreteIdentifier
„„ /
,
„„/ 0
BindInfo
„„1 9
.
„„9 :"
InstantiatedCallback
„„: N
)
„„N O
)
„„O P
;
„„P Q
return
ÂÂ 
new
ÂÂ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÂÂ C
(
ÂÂC D
BindInfo
ÂÂD L
)
ÂÂL M
;
ÂÂM N
}
ÊÊ 	
public
ËË :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ËË ;
FromResource
ËË< H
(
ËËH I
string
ËËI O
resourcePath
ËËP \
)
ËË\ ]
{
ÈÈ 	
BindingUtil
ÍÍ 
.
ÍÍ *
AssertDerivesFromUnityObject
ÍÍ 4
(
ÍÍ4 5
ConcreteTypes
ÍÍ5 B
)
ÍÍB C
;
ÍÍC D
BindInfo
ÏÏ 
.
ÏÏ "
RequireExplicitScope
ÏÏ )
=
ÏÏ* +
false
ÏÏ, 1
;
ÏÏ1 2
SubFinalizer
ÌÌ 
=
ÌÌ 
new
ÌÌ &
ScopableBindingFinalizer
ÌÌ 7
(
ÌÌ7 8
BindInfo
ÓÓ 
,
ÓÓ 
(
ÔÔ 
_
ÔÔ 
,
ÔÔ 
type
ÔÔ 
)
ÔÔ 
=>
ÔÔ 
new
ÔÔ  
ResourceProvider
ÔÔ! 1
(
ÔÔ1 2
resourcePath
ÔÔ2 >
,
ÔÔ> ?
type
ÔÔ@ D
,
ÔÔD E
true
ÔÔF J
)
ÔÔJ K
)
ÔÔK L
;
ÔÔL M
return
ÒÒ 
new
ÒÒ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÒÒ C
(
ÒÒC D
BindInfo
ÒÒD L
)
ÒÒL M
;
ÒÒM N
}
ÚÚ 	
public
ÙÙ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÙÙ ;
FromResources
ÙÙ< I
(
ÙÙI J
string
ÙÙJ P
resourcePath
ÙÙQ ]
)
ÙÙ] ^
{
ıı 	
BindingUtil
ˆˆ 
.
ˆˆ *
AssertDerivesFromUnityObject
ˆˆ 4
(
ˆˆ4 5
ConcreteTypes
ˆˆ5 B
)
ˆˆB C
;
ˆˆC D
BindInfo
¯¯ 
.
¯¯ "
RequireExplicitScope
¯¯ )
=
¯¯* +
false
¯¯, 1
;
¯¯1 2
SubFinalizer
˘˘ 
=
˘˘ 
new
˘˘ &
ScopableBindingFinalizer
˘˘ 7
(
˘˘7 8
BindInfo
˙˙ 
,
˙˙ 
(
˚˚ 
_
˚˚ 
,
˚˚ 
type
˚˚ 
)
˚˚ 
=>
˚˚ 
new
˚˚  
ResourceProvider
˚˚! 1
(
˚˚1 2
resourcePath
˚˚2 >
,
˚˚> ?
type
˚˚@ D
,
˚˚D E
false
˚˚F K
)
˚˚K L
)
˚˚L M
;
˚˚M N
return
˝˝ 
new
˝˝ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
˝˝ C
(
˝˝C D
BindInfo
˝˝D L
)
˝˝L M
;
˝˝M N
}
˛˛ 	
public
ÄÄ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÄÄ ;%
FromComponentInChildren
ÄÄ< S
(
ÄÄS T
bool
ÅÅ 
includeInactive
ÅÅ  
=
ÅÅ! "
true
ÅÅ# '
)
ÅÅ' (
{
ÇÇ 	
BindingUtil
ÉÉ 
.
ÉÉ *
AssertIsInterfaceOrComponent
ÉÉ 4
(
ÉÉ4 5
AllParentTypes
ÉÉ5 C
)
ÉÉC D
;
ÉÉD E
BindInfo
ÖÖ 
.
ÖÖ "
RequireExplicitScope
ÖÖ )
=
ÖÖ* +
false
ÖÖ, 1
;
ÖÖ1 2
BindInfo
àà 
.
àà #
MarkAsCreationBinding
àà *
=
àà+ ,
false
àà- 2
;
àà2 3
SubFinalizer
ää 
=
ää 
new
ää &
ScopableBindingFinalizer
ää 7
(
ää7 8
BindInfo
ãã 
,
ãã 
(
åå 
	container
åå 
,
åå 
concreteType
åå (
)
åå( )
=>
åå* ,
new
åå- 0+
MethodMultipleProviderUntyped
åå1 N
(
ååN O
ctx
ååO R
=>
ååS U
{
çç 
Assert
éé 
.
éé 
That
éé #
(
éé# $
ctx
éé$ '
.
éé' (

ObjectType
éé( 2
.
éé2 3 
DerivesFromOrEqual
éé3 E
<
ééE F
MonoBehaviour
ééF S
>
ééS T
(
ééT U
)
ééU V
,
ééV W
$str
èè h
)
èèh i
;
èèi j
Assert
ëë 
.
ëë 
	IsNotNull
ëë (
(
ëë( )
ctx
ëë) ,
.
ëë, -
ObjectInstance
ëë- ;
)
ëë; <
;
ëë< =
var
ìì 
monoBehaviour
ìì )
=
ìì* +
(
ìì, -
MonoBehaviour
ìì- :
)
ìì: ;
ctx
ìì; >
.
ìì> ?
ObjectInstance
ìì? M
;
ììM N
var
ïï 
match
ïï !
=
ïï" #
monoBehaviour
ïï$ 1
.
ïï1 2$
GetComponentInChildren
ïï2 H
(
ïïH I
concreteType
ïïI U
,
ïïU V
includeInactive
ïïW f
)
ïïf g
;
ïïg h
if
óó 
(
óó 
match
óó !
==
óó" $
null
óó% )
)
óó) *
{
òò 
Assert
ôô "
.
ôô" #
That
ôô# '
(
ôô' (
ctx
ôô( +
.
ôô+ ,
Optional
ôô, 4
,
ôô4 5
$str
öö  v
,
ööv w
concreteTypeööx Ñ
)ööÑ Ö
;ööÖ Ü
return
õõ "

Enumerable
õõ# -
.
õõ- .
Empty
õõ. 3
<
õõ3 4
object
õõ4 :
>
õõ: ;
(
õõ; <
)
õõ< =
;
õõ= >
}
úú 
return
ûû 
new
ûû "
object
ûû# )
[
ûû) *
]
ûû* +
{
ûû, -
match
ûû. 3
}
ûû4 5
;
ûû5 6
}
üü 
,
üü 
	container
†† 
)
†† 
)
†† 
;
††  
return
¢¢ 
this
¢¢ 
;
¢¢ 
}
££ 	
	protected
•• :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
•• >*
FromComponentsInChildrenBase
••? [
(
••[ \
bool
¶¶ 
excludeSelf
¶¶ 
,
¶¶ 
Func
¶¶ "
<
¶¶" #
	Component
¶¶# ,
,
¶¶, -
bool
¶¶. 2
>
¶¶2 3
	predicate
¶¶4 =
,
¶¶= >
bool
¶¶? C
includeInactive
¶¶D S
)
¶¶S T
{
ßß 	
BindingUtil
®® 
.
®® *
AssertIsInterfaceOrComponent
®® 4
(
®®4 5
AllParentTypes
®®5 C
)
®®C D
;
®®D E
BindInfo
™™ 
.
™™ "
RequireExplicitScope
™™ )
=
™™* +
false
™™, 1
;
™™1 2
BindInfo
≠≠ 
.
≠≠ #
MarkAsCreationBinding
≠≠ *
=
≠≠+ ,
false
≠≠- 2
;
≠≠2 3
SubFinalizer
ØØ 
=
ØØ 
new
ØØ &
ScopableBindingFinalizer
ØØ 7
(
ØØ7 8
BindInfo
∞∞ 
,
∞∞ 
(
±± 
	container
±± 
,
±± 
concreteType
±± (
)
±±( )
=>
±±* ,
new
±±- 0+
MethodMultipleProviderUntyped
±±1 N
(
±±N O
ctx
±±O R
=>
±±S U
{
≤≤ 
Assert
≥≥ 
.
≥≥ 
That
≥≥ #
(
≥≥# $
ctx
≥≥$ '
.
≥≥' (

ObjectType
≥≥( 2
.
≥≥2 3 
DerivesFromOrEqual
≥≥3 E
<
≥≥E F
MonoBehaviour
≥≥F S
>
≥≥S T
(
≥≥T U
)
≥≥U V
,
≥≥V W
$str
¥¥ i
)
¥¥i j
;
¥¥j k
Assert
∂∂ 
.
∂∂ 
	IsNotNull
∂∂ (
(
∂∂( )
ctx
∂∂) ,
.
∂∂, -
ObjectInstance
∂∂- ;
)
∂∂; <
;
∂∂< =
var
∏∏ 
monoBehaviour
∏∏ )
=
∏∏* +
(
∏∏, -
MonoBehaviour
∏∏- :
)
∏∏: ;
ctx
∏∏; >
.
∏∏> ?
ObjectInstance
∏∏? M
;
∏∏M N
var
∫∫ 
res
∫∫ 
=
∫∫  !
monoBehaviour
∫∫" /
.
∫∫/ 0%
GetComponentsInChildren
∫∫0 G
(
∫∫G H
concreteType
∫∫H T
,
∫∫T U
includeInactive
∫∫V e
)
∫∫e f
.
ªª 
Where
ªª "
(
ªª" #
x
ªª# $
=>
ªª% '
!
ªª( )
ReferenceEquals
ªª) 8
(
ªª8 9
x
ªª9 :
,
ªª: ;
ctx
ªª< ?
.
ªª? @
ObjectInstance
ªª@ N
)
ªªN O
)
ªªO P
;
ªªP Q
if
ΩΩ 
(
ΩΩ 
excludeSelf
ΩΩ '
)
ΩΩ' (
{
ææ 
res
øø 
=
øø  !
res
øø" %
.
øø% &
Where
øø& +
(
øø+ ,
x
øø, -
=>
øø. 0
x
øø1 2
.
øø2 3

gameObject
øø3 =
!=
øø> @
monoBehaviour
øøA N
.
øøN O

gameObject
øøO Y
)
øøY Z
;
øøZ [
}
¿¿ 
if
¬¬ 
(
¬¬ 
	predicate
¬¬ %
!=
¬¬& (
null
¬¬) -
)
¬¬- .
{
√√ 
res
ƒƒ 
=
ƒƒ  !
res
ƒƒ" %
.
ƒƒ% &
Where
ƒƒ& +
(
ƒƒ+ ,
	predicate
ƒƒ, 5
)
ƒƒ5 6
;
ƒƒ6 7
}
≈≈ 
return
«« 
res
«« "
.
««" #
Cast
««# '
<
««' (
object
««( .
>
««. /
(
««/ 0
)
««0 1
;
««1 2
}
»» 
,
»» 
	container
…… 
)
…… 
)
…… 
;
……  
return
ÀÀ 
this
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
public
ŒŒ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ŒŒ ;$
FromComponentInParents
ŒŒ< R
(
ŒŒR S
bool
œœ 
excludeSelf
œœ 
=
œœ 
false
œœ $
,
œœ$ %
bool
œœ& *
includeInactive
œœ+ :
=
œœ; <
true
œœ= A
)
œœA B
{
–– 	
BindingUtil
—— 
.
—— *
AssertIsInterfaceOrComponent
—— 4
(
——4 5
AllParentTypes
——5 C
)
——C D
;
——D E
BindInfo
”” 
.
”” "
RequireExplicitScope
”” )
=
””* +
false
””, 1
;
””1 2
BindInfo
÷÷ 
.
÷÷ #
MarkAsCreationBinding
÷÷ *
=
÷÷+ ,
false
÷÷- 2
;
÷÷2 3
SubFinalizer
ÿÿ 
=
ÿÿ 
new
ÿÿ &
ScopableBindingFinalizer
ÿÿ 7
(
ÿÿ7 8
BindInfo
ŸŸ 
,
ŸŸ 
(
⁄⁄ 
	container
⁄⁄ 
,
⁄⁄ 
concreteType
⁄⁄ (
)
⁄⁄( )
=>
⁄⁄* ,
new
⁄⁄- 0+
MethodMultipleProviderUntyped
⁄⁄1 N
(
⁄⁄N O
ctx
⁄⁄O R
=>
⁄⁄S U
{
€€ 
Assert
‹‹ 
.
‹‹ 
That
‹‹ #
(
‹‹# $
ctx
‹‹$ '
.
‹‹' (

ObjectType
‹‹( 2
.
‹‹2 3 
DerivesFromOrEqual
‹‹3 E
<
‹‹E F
MonoBehaviour
‹‹F S
>
‹‹S T
(
‹‹T U
)
‹‹U V
,
‹‹V W
$str
›› e
)
››e f
;
››f g
Assert
ﬂﬂ 
.
ﬂﬂ 
	IsNotNull
ﬂﬂ (
(
ﬂﬂ( )
ctx
ﬂﬂ) ,
.
ﬂﬂ, -
ObjectInstance
ﬂﬂ- ;
)
ﬂﬂ; <
;
ﬂﬂ< =
var
·· 
monoBehaviour
·· )
=
··* +
(
··, -
MonoBehaviour
··- :
)
··: ;
ctx
··; >
.
··> ?
ObjectInstance
··? M
;
··M N
var
„„ 
matches
„„ #
=
„„$ %
monoBehaviour
„„& 3
.
„„3 4#
GetComponentsInParent
„„4 I
(
„„I J
concreteType
„„J V
,
„„V W
includeInactive
„„X g
)
„„g h
.
‰‰ 
Where
‰‰ "
(
‰‰" #
x
‰‰# $
=>
‰‰% '
!
‰‰( )
ReferenceEquals
‰‰) 8
(
‰‰8 9
x
‰‰9 :
,
‰‰: ;
ctx
‰‰< ?
.
‰‰? @
ObjectInstance
‰‰@ N
)
‰‰N O
)
‰‰O P
;
‰‰P Q
if
ÊÊ 
(
ÊÊ 
excludeSelf
ÊÊ '
)
ÊÊ' (
{
ÁÁ 
matches
ËË #
=
ËË$ %
matches
ËË& -
.
ËË- .
Where
ËË. 3
(
ËË3 4
x
ËË4 5
=>
ËË6 8
x
ËË9 :
.
ËË: ;

gameObject
ËË; E
!=
ËËF H
monoBehaviour
ËËI V
.
ËËV W

gameObject
ËËW a
)
ËËa b
;
ËËb c
}
ÈÈ 
var
ÎÎ 
match
ÎÎ !
=
ÎÎ" #
matches
ÎÎ$ +
.
ÎÎ+ ,
FirstOrDefault
ÎÎ, :
(
ÎÎ: ;
)
ÎÎ; <
;
ÎÎ< =
if
ÌÌ 
(
ÌÌ 
match
ÌÌ !
==
ÌÌ" $
null
ÌÌ% )
)
ÌÌ) *
{
ÓÓ 
Assert
ÔÔ "
.
ÔÔ" #
That
ÔÔ# '
(
ÔÔ' (
ctx
ÔÔ( +
.
ÔÔ+ ,
Optional
ÔÔ, 4
,
ÔÔ4 5
$str
  u
,
u v
concreteTypew É
)É Ñ
;Ñ Ö
return
ÚÚ "

Enumerable
ÚÚ# -
.
ÚÚ- .
Empty
ÚÚ. 3
<
ÚÚ3 4
object
ÚÚ4 :
>
ÚÚ: ;
(
ÚÚ; <
)
ÚÚ< =
;
ÚÚ= >
}
ÛÛ 
return
ıı 
new
ıı "
object
ıı# )
[
ıı) *
]
ıı* +
{
ıı, -
match
ıı. 3
}
ıı4 5
;
ıı5 6
}
ˆˆ 
,
ˆˆ 
	container
˜˜ 
)
˜˜ 
)
˜˜ 
;
˜˜  
return
˘˘ 
this
˘˘ 
;
˘˘ 
}
˙˙ 	
public
¸¸ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
¸¸ ;%
FromComponentsInParents
¸¸< S
(
¸¸S T
bool
˝˝ 
excludeSelf
˝˝ 
=
˝˝ 
false
˝˝ $
,
˝˝$ %
bool
˝˝& *
includeInactive
˝˝+ :
=
˝˝; <
true
˝˝= A
)
˝˝A B
{
˛˛ 	
BindingUtil
ˇˇ 
.
ˇˇ *
AssertIsInterfaceOrComponent
ˇˇ 4
(
ˇˇ4 5
AllParentTypes
ˇˇ5 C
)
ˇˇC D
;
ˇˇD E
BindInfo
ÅÅ 
.
ÅÅ "
RequireExplicitScope
ÅÅ )
=
ÅÅ* +
false
ÅÅ, 1
;
ÅÅ1 2
BindInfo
ÑÑ 
.
ÑÑ #
MarkAsCreationBinding
ÑÑ *
=
ÑÑ+ ,
false
ÑÑ- 2
;
ÑÑ2 3
SubFinalizer
ÜÜ 
=
ÜÜ 
new
ÜÜ &
ScopableBindingFinalizer
ÜÜ 7
(
ÜÜ7 8
BindInfo
áá 
,
áá 
(
àà 
	container
àà 
,
àà 
concreteType
àà (
)
àà( )
=>
àà* ,
new
àà- 0+
MethodMultipleProviderUntyped
àà1 N
(
ààN O
ctx
ààO R
=>
ààS U
{
ââ 
Assert
ää 
.
ää 
That
ää #
(
ää# $
ctx
ää$ '
.
ää' (

ObjectType
ää( 2
.
ää2 3 
DerivesFromOrEqual
ää3 E
<
ääE F
MonoBehaviour
ääF S
>
ääS T
(
ääT U
)
ääU V
,
ääV W
$str
ãã e
)
ããe f
;
ããf g
Assert
çç 
.
çç 
	IsNotNull
çç (
(
çç( )
ctx
çç) ,
.
çç, -
ObjectInstance
çç- ;
)
çç; <
;
çç< =
var
èè 
monoBehaviour
èè )
=
èè* +
(
èè, -
MonoBehaviour
èè- :
)
èè: ;
ctx
èè; >
.
èè> ?
ObjectInstance
èè? M
;
èèM N
var
ëë 
res
ëë 
=
ëë  !
monoBehaviour
ëë" /
.
ëë/ 0#
GetComponentsInParent
ëë0 E
(
ëëE F
concreteType
ëëF R
,
ëëR S
includeInactive
ëëT c
)
ëëc d
.
íí 
Where
íí "
(
íí" #
x
íí# $
=>
íí% '
!
íí( )
ReferenceEquals
íí) 8
(
íí8 9
x
íí9 :
,
íí: ;
ctx
íí< ?
.
íí? @
ObjectInstance
íí@ N
)
ííN O
)
ííO P
;
ííP Q
if
îî 
(
îî 
excludeSelf
îî '
)
îî' (
{
ïï 
res
ññ 
=
ññ  !
res
ññ" %
.
ññ% &
Where
ññ& +
(
ññ+ ,
x
ññ, -
=>
ññ. 0
x
ññ1 2
.
ññ2 3

gameObject
ññ3 =
!=
ññ> @
monoBehaviour
ññA N
.
ññN O

gameObject
ññO Y
)
ññY Z
;
ññZ [
}
óó 
return
ôô 
res
ôô "
.
ôô" #
Cast
ôô# '
<
ôô' (
object
ôô( .
>
ôô. /
(
ôô/ 0
)
ôô0 1
;
ôô1 2
}
öö 
,
öö 
	container
õõ 
)
õõ 
)
õõ 
;
õõ  
return
ùù 
this
ùù 
;
ùù 
}
ûû 	
public
†† :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
†† ;"
FromComponentSibling
††< P
(
††P Q
)
††Q R
{
°° 	
BindingUtil
¢¢ 
.
¢¢ *
AssertIsInterfaceOrComponent
¢¢ 4
(
¢¢4 5
AllParentTypes
¢¢5 C
)
¢¢C D
;
¢¢D E
BindInfo
§§ 
.
§§ "
RequireExplicitScope
§§ )
=
§§* +
false
§§, 1
;
§§1 2
BindInfo
ßß 
.
ßß #
MarkAsCreationBinding
ßß *
=
ßß+ ,
false
ßß- 2
;
ßß2 3
SubFinalizer
©© 
=
©© 
new
©© &
ScopableBindingFinalizer
©© 7
(
©©7 8
BindInfo
™™ 
,
™™ 
(
´´ 
	container
´´ 
,
´´ 
concreteType
´´ (
)
´´( )
=>
´´* ,
new
´´- 0+
MethodMultipleProviderUntyped
´´1 N
(
´´N O
ctx
´´O R
=>
´´S U
{
¨¨ 
Assert
≠≠ 
.
≠≠ 
That
≠≠ #
(
≠≠# $
ctx
≠≠$ '
.
≠≠' (

ObjectType
≠≠( 2
.
≠≠2 3 
DerivesFromOrEqual
≠≠3 E
<
≠≠E F
MonoBehaviour
≠≠F S
>
≠≠S T
(
≠≠T U
)
≠≠U V
,
≠≠V W
$str
ÆÆ e
)
ÆÆe f
;
ÆÆf g
Assert
∞∞ 
.
∞∞ 
	IsNotNull
∞∞ (
(
∞∞( )
ctx
∞∞) ,
.
∞∞, -
ObjectInstance
∞∞- ;
)
∞∞; <
;
∞∞< =
var
≤≤ 
monoBehaviour
≤≤ )
=
≤≤* +
(
≤≤, -
MonoBehaviour
≤≤- :
)
≤≤: ;
ctx
≤≤; >
.
≤≤> ?
ObjectInstance
≤≤? M
;
≤≤M N
var
¥¥ 
match
¥¥ !
=
¥¥" #
monoBehaviour
¥¥$ 1
.
¥¥1 2
GetComponent
¥¥2 >
(
¥¥> ?
concreteType
¥¥? K
)
¥¥K L
;
¥¥L M
if
∂∂ 
(
∂∂ 
match
∂∂ !
==
∂∂" $
null
∂∂% )
)
∂∂) *
{
∑∑ 
Assert
∏∏ "
.
∏∏" #
That
∏∏# '
(
∏∏' (
ctx
∏∏( +
.
∏∏+ ,
Optional
∏∏, 4
,
∏∏4 5
$str
ππ  s
,
ππs t
concreteTypeππu Å
)ππÅ Ç
;ππÇ É
return
∫∫ "

Enumerable
∫∫# -
.
∫∫- .
Empty
∫∫. 3
<
∫∫3 4
object
∫∫4 :
>
∫∫: ;
(
∫∫; <
)
∫∫< =
;
∫∫= >
}
ªª 
return
ΩΩ 
new
ΩΩ "
object
ΩΩ# )
[
ΩΩ) *
]
ΩΩ* +
{
ΩΩ, -
match
ΩΩ. 3
}
ΩΩ4 5
;
ΩΩ5 6
}
ææ 
,
ææ 
	container
øø 
)
øø 
)
øø 
;
øø  
return
¡¡ 
this
¡¡ 
;
¡¡ 
}
¬¬ 	
public
ƒƒ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ƒƒ ;#
FromComponentsSibling
ƒƒ< Q
(
ƒƒQ R
)
ƒƒR S
{
≈≈ 	
BindingUtil
∆∆ 
.
∆∆ *
AssertIsInterfaceOrComponent
∆∆ 4
(
∆∆4 5
AllParentTypes
∆∆5 C
)
∆∆C D
;
∆∆D E
BindInfo
»» 
.
»» "
RequireExplicitScope
»» )
=
»»* +
false
»», 1
;
»»1 2
BindInfo
ÀÀ 
.
ÀÀ #
MarkAsCreationBinding
ÀÀ *
=
ÀÀ+ ,
false
ÀÀ- 2
;
ÀÀ2 3
SubFinalizer
ÕÕ 
=
ÕÕ 
new
ÕÕ &
ScopableBindingFinalizer
ÕÕ 7
(
ÕÕ7 8
BindInfo
ŒŒ 
,
ŒŒ 
(
œœ 
	container
œœ 
,
œœ 
concreteType
œœ (
)
œœ( )
=>
œœ* ,
new
œœ- 0+
MethodMultipleProviderUntyped
œœ1 N
(
œœN O
ctx
œœO R
=>
œœS U
{
–– 
Assert
—— 
.
—— 
That
—— #
(
——# $
ctx
——$ '
.
——' (

ObjectType
——( 2
.
——2 3 
DerivesFromOrEqual
——3 E
<
——E F
MonoBehaviour
——F S
>
——S T
(
——T U
)
——U V
,
——V W
$str
““ e
)
““e f
;
““f g
Assert
‘‘ 
.
‘‘ 
	IsNotNull
‘‘ (
(
‘‘( )
ctx
‘‘) ,
.
‘‘, -
ObjectInstance
‘‘- ;
)
‘‘; <
;
‘‘< =
var
÷÷ 
monoBehaviour
÷÷ )
=
÷÷* +
(
÷÷, -
MonoBehaviour
÷÷- :
)
÷÷: ;
ctx
÷÷; >
.
÷÷> ?
ObjectInstance
÷÷? M
;
÷÷M N
return
ÿÿ 
monoBehaviour
ÿÿ ,
.
ÿÿ, -
GetComponents
ÿÿ- :
(
ÿÿ: ;
concreteType
ÿÿ; G
)
ÿÿG H
.
ŸŸ 
Where
ŸŸ "
(
ŸŸ" #
x
ŸŸ# $
=>
ŸŸ% '
!
ŸŸ( )
ReferenceEquals
ŸŸ) 8
(
ŸŸ8 9
x
ŸŸ9 :
,
ŸŸ: ;
monoBehaviour
ŸŸ< I
)
ŸŸI J
)
ŸŸJ K
.
ŸŸK L
Cast
ŸŸL P
<
ŸŸP Q
object
ŸŸQ W
>
ŸŸW X
(
ŸŸX Y
)
ŸŸY Z
;
ŸŸZ [
}
⁄⁄ 
,
⁄⁄ 
	container
€€ 
)
€€ 
)
€€ 
;
€€  
return
›› 
this
›› 
;
›› 
}
ﬁﬁ 	
public
‡‡ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
‡‡ ;&
FromComponentInHierarchy
‡‡< T
(
‡‡T U
bool
·· 
includeInactive
··  
=
··! "
true
··# '
)
··' (
{
‚‚ 	
BindingUtil
„„ 
.
„„ *
AssertIsInterfaceOrComponent
„„ 4
(
„„4 5
AllParentTypes
„„5 C
)
„„C D
;
„„D E
BindInfo
ÁÁ 
.
ÁÁ "
RequireExplicitScope
ÁÁ )
=
ÁÁ* +
true
ÁÁ, 0
;
ÁÁ0 1
BindInfo
ÍÍ 
.
ÍÍ #
MarkAsCreationBinding
ÍÍ *
=
ÍÍ+ ,
false
ÍÍ- 2
;
ÍÍ2 3
SubFinalizer
ÏÏ 
=
ÏÏ 
new
ÏÏ &
ScopableBindingFinalizer
ÏÏ 7
(
ÏÏ7 8
BindInfo
ÌÌ 
,
ÌÌ 
(
ÓÓ 
	container
ÓÓ 
,
ÓÓ 
concreteType
ÓÓ (
)
ÓÓ( )
=>
ÓÓ* ,
new
ÓÓ- 0+
MethodMultipleProviderUntyped
ÓÓ1 N
(
ÓÓN O
ctx
ÓÓO R
=>
ÓÓS U
{
ÔÔ 
var
 
match
 !
=
" #
	container
$ -
.
- .
Resolve
. 5
<
5 6
Context
6 =
>
= >
(
> ?
)
? @
.
@ A 
GetRootGameObjects
A S
(
S T
)
T U
.
ÒÒ 
Select
ÒÒ #
(
ÒÒ# $
x
ÒÒ$ %
=>
ÒÒ& (
x
ÒÒ) *
.
ÒÒ* +$
GetComponentInChildren
ÒÒ+ A
(
ÒÒA B
concreteType
ÒÒB N
,
ÒÒN O
includeInactive
ÒÒP _
)
ÒÒ_ `
)
ÒÒ` a
.
ÚÚ 
Where
ÚÚ "
(
ÚÚ" #
x
ÚÚ# $
=>
ÚÚ% '
x
ÚÚ( )
!=
ÚÚ* ,
null
ÚÚ- 1
&&
ÚÚ2 4
!
ÚÚ5 6
ReferenceEquals
ÚÚ6 E
(
ÚÚE F
x
ÚÚF G
,
ÚÚG H
ctx
ÚÚI L
.
ÚÚL M
ObjectInstance
ÚÚM [
)
ÚÚ[ \
)
ÚÚ\ ]
.
ÚÚ] ^
FirstOrDefault
ÚÚ^ l
(
ÚÚl m
)
ÚÚm n
;
ÚÚn o
if
ÙÙ 
(
ÙÙ 
match
ÙÙ !
==
ÙÙ" $
null
ÙÙ% )
)
ÙÙ) *
{
ıı 
Assert
ˆˆ "
.
ˆˆ" #
That
ˆˆ# '
(
ˆˆ' (
ctx
ˆˆ( +
.
ˆˆ+ ,
Optional
ˆˆ, 4
,
ˆˆ4 5
$str
˜˜  w
,
˜˜w x
concreteType˜˜y Ö
)˜˜Ö Ü
;˜˜Ü á
return
¯¯ "

Enumerable
¯¯# -
.
¯¯- .
Empty
¯¯. 3
<
¯¯3 4
object
¯¯4 :
>
¯¯: ;
(
¯¯; <
)
¯¯< =
;
¯¯= >
}
˘˘ 
return
˚˚ 
new
˚˚ "
object
˚˚# )
[
˚˚) *
]
˚˚* +
{
˚˚, -
match
˚˚. 3
}
˚˚4 5
;
˚˚5 6
}
¸¸ 
,
¸¸ 
	container
˝˝ 
)
˝˝ 
)
˝˝ 
;
˝˝  
return
ˇˇ 
this
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
	protected
ÇÇ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÇÇ >+
FromComponentsInHierarchyBase
ÇÇ? \
(
ÇÇ\ ]
Func
ÉÉ 
<
ÉÉ 
	Component
ÉÉ 
,
ÉÉ 
bool
ÉÉ  
>
ÉÉ  !
	predicate
ÉÉ" +
=
ÉÉ, -
null
ÉÉ. 2
,
ÉÉ2 3
bool
ÉÉ4 8
includeInactive
ÉÉ9 H
=
ÉÉI J
true
ÉÉK O
)
ÉÉO P
{
ÑÑ 	
BindingUtil
ÖÖ 
.
ÖÖ *
AssertIsInterfaceOrComponent
ÖÖ 4
(
ÖÖ4 5
AllParentTypes
ÖÖ5 C
)
ÖÖC D
;
ÖÖD E
BindInfo
áá 
.
áá "
RequireExplicitScope
áá )
=
áá* +
true
áá, 0
;
áá0 1
BindInfo
ää 
.
ää #
MarkAsCreationBinding
ää *
=
ää+ ,
false
ää- 2
;
ää2 3
SubFinalizer
åå 
=
åå 
new
åå &
ScopableBindingFinalizer
åå 7
(
åå7 8
BindInfo
çç 
,
çç 
(
éé 
	container
éé 
,
éé 
concreteType
éé (
)
éé( )
=>
éé* ,
new
éé- 0+
MethodMultipleProviderUntyped
éé1 N
(
ééN O
ctx
ééO R
=>
ééS U
{
èè 
var
êê 
res
êê 
=
êê  !
	container
êê" +
.
êê+ ,
Resolve
êê, 3
<
êê3 4
Context
êê4 ;
>
êê; <
(
êê< =
)
êê= >
.
êê> ? 
GetRootGameObjects
êê? Q
(
êêQ R
)
êêR S
.
ëë 

SelectMany
ëë '
(
ëë' (
x
ëë( )
=>
ëë* ,
x
ëë- .
.
ëë. /%
GetComponentsInChildren
ëë/ F
(
ëëF G
concreteType
ëëG S
,
ëëS T
includeInactive
ëëU d
)
ëëd e
)
ëëe f
.
íí 
Where
íí "
(
íí" #
x
íí# $
=>
íí% '
!
íí( )
ReferenceEquals
íí) 8
(
íí8 9
x
íí9 :
,
íí: ;
ctx
íí< ?
.
íí? @
ObjectInstance
íí@ N
)
ííN O
)
ííO P
;
ííP Q
if
îî 
(
îî 
	predicate
îî %
!=
îî& (
null
îî) -
)
îî- .
{
ïï 
res
ññ 
=
ññ  !
res
ññ" %
.
ññ% &
Where
ññ& +
(
ññ+ ,
	predicate
ññ, 5
)
ññ5 6
;
ññ6 7
}
óó 
return
ôô 
res
ôô "
.
ôô" #
Cast
ôô# '
<
ôô' (
object
ôô( .
>
ôô. /
(
ôô/ 0
)
ôô0 1
;
ôô1 2
}
öö 
,
öö 
	container
õõ 
)
õõ 
)
õõ 
;
õõ  
return
ùù 
this
ùù 
;
ùù 
}
ûû 	
public
°° :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
°° ;
FromMethodUntyped
°°< M
(
°°M N
Func
°°N R
<
°°R S
InjectContext
°°S `
,
°°` a
object
°°b h
>
°°h i
method
°°j p
)
°°p q
{
¢¢ 	
BindInfo
££ 
.
££ "
RequireExplicitScope
££ )
=
££* +
false
££, 1
;
££1 2
BindInfo
•• 
.
•• #
MarkAsCreationBinding
•• *
=
••+ ,
false
••- 2
;
••2 3
SubFinalizer
¶¶ 
=
¶¶ 
new
¶¶ &
ScopableBindingFinalizer
¶¶ 7
(
¶¶7 8
BindInfo
ßß 
,
ßß 
(
®® 
	container
®® 
,
®® 
type
®®  
)
®®  !
=>
®®" $
new
®®% (#
MethodProviderUntyped
®®) >
(
®®> ?
method
®®? E
,
®®E F
	container
®®G P
)
®®P Q
)
®®Q R
;
®®R S
return
™™ 
this
™™ 
;
™™ 
}
´´ 	
public
≠≠ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
≠≠ ;'
FromMethodMultipleUntyped
≠≠< U
(
≠≠U V
Func
≠≠V Z
<
≠≠Z [
InjectContext
≠≠[ h
,
≠≠h i
IEnumerable
≠≠j u
<
≠≠u v
object
≠≠v |
>
≠≠| }
>
≠≠} ~
method≠≠ Ö
)≠≠Ö Ü
{
ÆÆ 	
BindInfo
ØØ 
.
ØØ "
RequireExplicitScope
ØØ )
=
ØØ* +
false
ØØ, 1
;
ØØ1 2
BindInfo
±± 
.
±± #
MarkAsCreationBinding
±± *
=
±±+ ,
false
±±- 2
;
±±2 3
SubFinalizer
≤≤ 
=
≤≤ 
new
≤≤ &
ScopableBindingFinalizer
≤≤ 7
(
≤≤7 8
BindInfo
≥≥ 
,
≥≥ 
(
¥¥ 
	container
¥¥ 
,
¥¥ 
type
¥¥  
)
¥¥  !
=>
¥¥" $
new
¥¥% (+
MethodMultipleProviderUntyped
¥¥) F
(
¥¥F G
method
¥¥G M
,
¥¥M N
	container
¥¥O X
)
¥¥X Y
)
¥¥Y Z
;
¥¥Z [
return
∂∂ 
this
∂∂ 
;
∂∂ 
}
∑∑ 	
	protected
ππ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ππ >
FromMethodBase
ππ? M
<
ππM N
	TConcrete
ππN W
>
ππW X
(
ππX Y
Func
ππY ]
<
ππ] ^
InjectContext
ππ^ k
,
ππk l
	TConcrete
ππm v
>
ππv w
method
ππx ~
)
ππ~ 
{
∫∫ 	
BindingUtil
ªª 
.
ªª &
AssertIsDerivedFromTypes
ªª 0
(
ªª0 1
typeof
ªª1 7
(
ªª7 8
	TConcrete
ªª8 A
)
ªªA B
,
ªªB C
AllParentTypes
ªªD R
)
ªªR S
;
ªªS T
BindInfo
ΩΩ 
.
ΩΩ "
RequireExplicitScope
ΩΩ )
=
ΩΩ* +
false
ΩΩ, 1
;
ΩΩ1 2
BindInfo
øø 
.
øø #
MarkAsCreationBinding
øø *
=
øø+ ,
false
øø- 2
;
øø2 3
SubFinalizer
¿¿ 
=
¿¿ 
new
¿¿ &
ScopableBindingFinalizer
¿¿ 7
(
¿¿7 8
BindInfo
¡¡ 
,
¡¡ 
(
¬¬ 
	container
¬¬ 
,
¬¬ 
type
¬¬  
)
¬¬  !
=>
¬¬" $
new
¬¬% (
MethodProvider
¬¬) 7
<
¬¬7 8
	TConcrete
¬¬8 A
>
¬¬A B
(
¬¬B C
method
¬¬C I
,
¬¬I J
	container
¬¬K T
)
¬¬T U
)
¬¬U V
;
¬¬V W
return
ƒƒ 
this
ƒƒ 
;
ƒƒ 
}
≈≈ 	
	protected
«« :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
«« >$
FromMethodMultipleBase
««? U
<
««U V
	TConcrete
««V _
>
««_ `
(
««` a
Func
««a e
<
««e f
InjectContext
««f s
,
««s t
IEnumerable««u Ä
<««Ä Å
	TConcrete««Å ä
>««ä ã
>««ã å
method««ç ì
)««ì î
{
»» 	
BindInfo
…… 
.
…… "
RequireExplicitScope
…… )
=
……* +
false
……, 1
;
……1 2
BindInfo
ÀÀ 
.
ÀÀ #
MarkAsCreationBinding
ÀÀ *
=
ÀÀ+ ,
false
ÀÀ- 2
;
ÀÀ2 3
SubFinalizer
ÃÃ 
=
ÃÃ 
new
ÃÃ &
ScopableBindingFinalizer
ÃÃ 7
(
ÃÃ7 8
BindInfo
ÕÕ 
,
ÕÕ 
(
ŒŒ 
	container
ŒŒ 
,
ŒŒ 
type
ŒŒ  
)
ŒŒ  !
=>
ŒŒ" $
new
ŒŒ% ($
MethodProviderMultiple
ŒŒ) ?
<
ŒŒ? @
	TConcrete
ŒŒ@ I
>
ŒŒI J
(
ŒŒJ K
method
ŒŒK Q
,
ŒŒQ R
	container
ŒŒS \
)
ŒŒ\ ]
)
ŒŒ] ^
;
ŒŒ^ _
return
–– 
this
–– 
;
–– 
}
—— 	
	protected
”” :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
”” >#
FromResolveGetterBase
””? T
<
””T U
TObj
””U Y
,
””Y Z
TResult
””[ b
>
””b c
(
””c d
object
‘‘ 

identifier
‘‘ 
,
‘‘ 
Func
‘‘ #
<
‘‘# $
TObj
‘‘$ (
,
‘‘( )
TResult
‘‘* 1
>
‘‘1 2
method
‘‘3 9
,
‘‘9 :
InjectSources
‘‘; H
source
‘‘I O
,
‘‘O P
bool
‘‘Q U
matchMultiple
‘‘V c
)
‘‘c d
{
’’ 	
BindingUtil
÷÷ 
.
÷÷ &
AssertIsDerivedFromTypes
÷÷ 0
(
÷÷0 1
typeof
÷÷1 7
(
÷÷7 8
TResult
÷÷8 ?
)
÷÷? @
,
÷÷@ A
AllParentTypes
÷÷B P
)
÷÷P Q
;
÷÷Q R
BindInfo
ÿÿ 
.
ÿÿ "
RequireExplicitScope
ÿÿ )
=
ÿÿ* +
false
ÿÿ, 1
;
ÿÿ1 2
BindInfo
⁄⁄ 
.
⁄⁄ #
MarkAsCreationBinding
⁄⁄ *
=
⁄⁄+ ,
false
⁄⁄- 2
;
⁄⁄2 3
SubFinalizer
€€ 
=
€€ 
new
€€ &
ScopableBindingFinalizer
€€ 7
(
€€7 8
BindInfo
‹‹ 
,
‹‹ 
(
›› 
	container
›› 
,
›› 
type
››  
)
››  !
=>
››" $
new
››% (
GetterProvider
››) 7
<
››7 8
TObj
››8 <
,
››< =
TResult
››> E
>
››E F
(
››F G

identifier
››G Q
,
››Q R
method
››S Y
,
››Y Z
	container
››[ d
,
››d e
source
››f l
,
››l m
matchMultiple
››n {
)
››{ |
)
››| }
;
››} ~
return
ﬂﬂ 
new
ﬂﬂ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ﬂﬂ C
(
ﬂﬂC D
BindInfo
ﬂﬂD L
)
ﬂﬂL M
;
ﬂﬂM N
}
‡‡ 	
	protected
‚‚ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
‚‚ >
FromInstanceBase
‚‚? O
(
‚‚O P
object
‚‚P V
instance
‚‚W _
)
‚‚_ `
{
„„ 	
BindingUtil
‰‰ 
.
‰‰ .
 AssertInstanceDerivesFromOrEqual
‰‰ 8
(
‰‰8 9
instance
‰‰9 A
,
‰‰A B
AllParentTypes
‰‰C Q
)
‰‰Q R
;
‰‰R S
BindInfo
ÊÊ 
.
ÊÊ "
RequireExplicitScope
ÊÊ )
=
ÊÊ* +
false
ÊÊ, 1
;
ÊÊ1 2
BindInfo
ËË 
.
ËË #
MarkAsCreationBinding
ËË *
=
ËË+ ,
false
ËË- 2
;
ËË2 3
SubFinalizer
ÈÈ 
=
ÈÈ 
new
ÈÈ &
ScopableBindingFinalizer
ÈÈ 7
(
ÈÈ7 8
BindInfo
ÍÍ 
,
ÍÍ 
(
ÎÎ 
	container
ÎÎ 
,
ÎÎ 
type
ÎÎ  
)
ÎÎ  !
=>
ÎÎ" $
new
ÎÎ% (
InstanceProvider
ÎÎ) 9
(
ÎÎ9 :
type
ÎÎ: >
,
ÎÎ> ?
instance
ÎÎ@ H
,
ÎÎH I
	container
ÎÎJ S
)
ÎÎS T
)
ÎÎT U
;
ÎÎU V
return
ÌÌ 
new
ÌÌ :
,ScopeConcreteIdArgConditionCopyNonLazyBinder
ÌÌ C
(
ÌÌC D
BindInfo
ÌÌD L
)
ÌÌL M
;
ÌÌM N
}
ÓÓ 	
}
ÔÔ 
} ó.
{C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConcreteBinders\ConcreteBinderNonGeneric.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class $
ConcreteBinderNonGeneric )
:* + 
FromBinderNonGeneric, @
{		 
public

 $
ConcreteBinderNonGeneric

 '
(

' (
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
bindStatement, 9
)9 :
{ 	
ToSelf 
( 
) 
; 
} 	
public  
FromBinderNonGeneric #
ToSelf$ *
(* +
)+ ,
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
BindInfo 
.  
RequireExplicitScope )
=* +
true, 0
;0 1
SubFinalizer 
= 
new $
ScopableBindingFinalizer 7
(7 8
BindInfo 
, 
( 
	container $
,$ %
type& *
)* +
=>, .
new/ 2
TransientProvider3 D
(D E
type 
, 
	container #
,# $
BindInfo% -
.- .
	Arguments. 7
,7 8
BindInfo9 A
.A B
ContextInfoB M
,M N
BindInfoO W
.W X
ConcreteIdentifierX j
,j k
BindInfo 
.  
InstantiatedCallback 1
)1 2
)2 3
;3 4
return 
this 
; 
} 	
public    
FromBinderNonGeneric   #
To  $ &
<  & '
	TConcrete  ' 0
>  0 1
(  1 2
)  2 3
{!! 	
return"" 
To"" 
("" 
typeof"" 
("" 
	TConcrete"" &
)""& '
)""' (
;""( )
}## 	
public%%  
FromBinderNonGeneric%% #
To%%$ &
(%%& '
params%%' -
Type%%. 2
[%%2 3
]%%3 4
concreteTypes%%5 B
)%%B C
{&& 	
return'' 
To'' 
('' 
('' 
IEnumerable'' "
<''" #
Type''# '
>''' (
)''( )
concreteTypes'') 6
)''6 7
;''7 8
}(( 	
public**  
FromBinderNonGeneric** #
To**$ &
(**& '
IEnumerable**' 2
<**2 3
Type**3 7
>**7 8
concreteTypes**9 F
)**F G
{++ 	
BindInfo,, 
.,, 
ToChoice,, 
=,, 
	ToChoices,,  )
.,,) *
Concrete,,* 2
;,,2 3
BindInfo-- 
.-- 
ToTypes-- 
.-- 
Clear-- "
(--" #
)--# $
;--$ %
BindInfo.. 
... 
ToTypes.. 
... 
AddRange.. %
(..% &
concreteTypes..& 3
)..3 4
;..4 5
if00 
(00 
BindInfo00 
.00 
ToTypes00  
.00  !
Count00! &
>00' (
$num00) *
&&00+ -
BindInfo00. 6
.006 7
ContractTypes007 D
.00D E
Count00E J
>00K L
$num00M N
)00N O
{11 
BindInfo33 
.33 
InvalidBindResponse33 ,
=33- . 
InvalidBindResponses33/ C
.33C D
Skip33D H
;33H I
}44 
else55 
{66 
BindingUtil77 
.77 $
AssertIsDerivedFromTypes77 4
(774 5
concreteTypes775 B
,77B C
BindInfo77D L
.77L M
ContractTypes77M Z
,77Z [
BindInfo77\ d
.77d e
InvalidBindResponse77e x
)77x y
;77y z
}88 
return:: 
this:: 
;:: 
};; 	
public>>  
FromBinderNonGeneric>> #
To>>$ &
(>>& '
Action?? 
<?? '
ConventionSelectTypesBinder?? .
>??. /
	generator??0 9
)??9 :
{@@ 	
varAA 
bindInfoAA 
=AA 
newAA 
ConventionBindInfoAA 1
(AA1 2
)AA2 3
;AA3 4
BindInfoEE 
.EE 
InvalidBindResponseEE (
=EE) * 
InvalidBindResponsesEE+ ?
.EE? @
SkipEE@ D
;EED E
	generatorGG 
(GG 
newGG '
ConventionSelectTypesBinderGG 5
(GG5 6
bindInfoGG6 >
)GG> ?
)GG? @
;GG@ A
BindInfoII 
.II 
ToChoiceII 
=II 
	ToChoicesII  )
.II) *
ConcreteII* 2
;II2 3
BindInfoJJ 
.JJ 
ToTypesJJ 
.JJ 
ClearJJ "
(JJ" #
)JJ# $
;JJ$ %
BindInfoKK 
.KK 
ToTypesKK 
.KK 
AddRangeKK %
(KK% &
bindInfoKK& .
.KK. /
ResolveTypesKK/ ;
(KK; <
)KK< =
)KK= >
;KK> ?
returnMM 
thisMM 
;MM 
}NN 	
}PP 
}QQ ˚M
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\PrefabResourceBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 *
PrefabResourceBindingFinalizer

 /
:

0 1$
ProviderBindingFinalizer

2 J
{ 
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
readonly 
string 
_resourcePath %
;% &
readonly 
Func 
< 
Type 
, 
IPrefabInstantiator /
,/ 0
	IProvider1 :
>: ;
_providerFactory< L
;L M
public *
PrefabResourceBindingFinalizer -
(- .
BindInfo 
bindInfo 
, (
GameObjectCreationParameters (
gameObjectBindInfo) ;
,; <
string 
resourcePath 
,  
Func! %
<% &
Type& *
,* +
IPrefabInstantiator, ?
,? @
	IProviderA J
>J K
providerFactoryL [
)[ \
: 
base 
( 
bindInfo 
) 
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
_resourcePath 
= 
resourcePath (
;( )
_providerFactory 
= 
providerFactory .
;. /
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert 
. 
IsEmpty 
( 
BindInfo '
.' (
ToTypes( /
)/ 0
;0 1
FinalizeBindingSelf   #
(  # $
	container  $ -
)  - .
;  . /
}!! 
else"" 
{## #
FinalizeBindingConcrete$$ '
($$' (
	container$$( 1
,$$1 2
BindInfo$$3 ;
.$$; <
ToTypes$$< C
)$$C D
;$$D E
}%% 
}&& 	
void(( #
FinalizeBindingConcrete(( $
((($ %
DiContainer((% 0
	container((1 :
,((: ;
List((< @
<((@ A
Type((A E
>((E F
concreteTypes((G T
)((T U
{)) 	
var** 
scope** 
=** 
GetScope**  
(**  !
)**! "
;**" #
switch,, 
(,, 
scope,, 
),, 
{-- 
case.. 

ScopeTypes.. 
...  
	Transient..  )
:..) *
{// ;
/RegisterProvidersForAllContractsPerConcreteType00 C
(00C D
	container11 !
,11! "
concreteTypes22 %
,22% &
(33 
_33 
,33 
concreteType33 (
)33( )
=>33* ,
_providerFactory44 ,
(44, -
concreteType55  ,
,55, -
new66  #
PrefabInstantiator66$ 6
(666 7
	container77$ -
,77- .
_gameObjectBindInfo88$ 7
,887 8
concreteType99$ 0
,990 1
concreteTypes::$ 1
,::1 2
BindInfo;;$ ,
.;;, -
	Arguments;;- 6
,;;6 7
new<<$ '"
PrefabProviderResource<<( >
(<<> ?
_resourcePath<<? L
)<<L M
,<<M N
BindInfo==$ ,
.==, - 
InstantiatedCallback==- A
)==A B
)==B C
)==C D
;==D E
break>> 
;>> 
}?? 
case@@ 

ScopeTypes@@ 
.@@  
	Singleton@@  )
:@@) *
{AA 
varBB 
argumentTargetBB &
=BB' (
concreteTypesBB) 6
.BB6 7
OnlyOrDefaultBB7 D
(BBD E
)BBE F
;BBF G
ifDD 
(DD 
argumentTargetDD &
==DD' )
nullDD* .
)DD. /
{EE 
AssertFF 
.FF 
ThatFF #
(FF# $
BindInfoFF$ ,
.FF, -
	ArgumentsFF- 6
.FF6 7
IsEmptyFF7 >
(FF> ?
)FF? @
,FF@ A
$strGG t
)GGt u
;GGu v
}HH 
varJJ 
prefabCreatorJJ %
=JJ& '
newJJ( +$
PrefabInstantiatorCachedJJ, D
(JJD E
newKK 
PrefabInstantiatorKK .
(KK. /
	containerLL %
,LL% &
_gameObjectBindInfoMM /
,MM/ 0
argumentTargetNN *
,NN* +
concreteTypesOO )
,OO) *
BindInfoPP $
.PP$ %
	ArgumentsPP% .
,PP. /
newQQ "
PrefabProviderResourceQQ  6
(QQ6 7
_resourcePathQQ7 D
)QQD E
,QQE F
BindInfoRR $
.RR$ % 
InstantiatedCallbackRR% 9
)RR9 :
)RR: ;
;RR; <;
/RegisterProvidersForAllContractsPerConcreteTypeTT C
(TTC D
	containerUU !
,UU! "
concreteTypesVV %
,VV% &
(WW 
_WW 
,WW 
concreteTypeWW (
)WW( )
=>WW* ,
BindingUtilWW- 8
.WW8 9 
CreateCachedProviderWW9 M
(WWM N
_providerFactoryXX ,
(XX, -
concreteTypeXX- 9
,XX9 :
prefabCreatorXX; H
)XXH I
)XXI J
)XXJ K
;XXK L
breakYY 
;YY 
}ZZ 
default[[ 
:[[ 
{\\ 
throw]] 
Assert]]  
.]]  !
CreateException]]! 0
(]]0 1
)]]1 2
;]]2 3
}^^ 
}__ 
}`` 	
voidbb 
FinalizeBindingSelfbb  
(bb  !
DiContainerbb! ,
	containerbb- 6
)bb6 7
{cc 	
vardd 
scopedd 
=dd 
GetScopedd  
(dd  !
)dd! "
;dd" #
switchff 
(ff 
scopeff 
)ff 
{gg 
casehh 

ScopeTypeshh 
.hh  
	Transienthh  )
:hh) *
{ii '
RegisterProviderPerContractjj /
(jj/ 0
	containerkk !
,kk! "
(ll 
_ll 
,ll 
contractTypell (
)ll( )
=>ll* ,
_providerFactorymm ,
(mm, -
contractTypenn  ,
,nn, -
newoo  #
PrefabInstantiatoroo$ 6
(oo6 7
	containerpp$ -
,pp- .
_gameObjectBindInfoqq$ 7
,qq7 8
contractTyperr$ 0
,rr0 1
BindInfoss$ ,
.ss, -
ContractTypesss- :
,ss: ;
BindInfott$ ,
.tt, -
	Argumentstt- 6
,tt6 7
newuu$ '"
PrefabProviderResourceuu( >
(uu> ?
_resourcePathuu? L
)uuL M
,uuM N
BindInfovv$ ,
.vv, - 
InstantiatedCallbackvv- A
)vvA B
)vvB C
)vvC D
;vvD E
breakww 
;ww 
}xx 
caseyy 

ScopeTypesyy 
.yy  
	Singletonyy  )
:yy) *
{zz 
var{{ 
argumentTarget{{ &
={{' (
BindInfo{{) 1
.{{1 2
ContractTypes{{2 ?
.{{? @
OnlyOrDefault{{@ M
({{M N
){{N O
;{{O P
if}} 
(}} 
argumentTarget}} &
==}}' )
null}}* .
)}}. /
{~~ 
Assert 
. 
That #
(# $
BindInfo$ ,
., -
	Arguments- 6
.6 7
IsEmpty7 >
(> ?
)? @
,@ A
$str
ÄÄ t
)
ÄÄt u
;
ÄÄu v
}
ÅÅ 
var
ÉÉ 
prefabCreator
ÉÉ %
=
ÉÉ& '
new
ÉÉ( +&
PrefabInstantiatorCached
ÉÉ, D
(
ÉÉD E
new
ÑÑ  
PrefabInstantiator
ÑÑ .
(
ÑÑ. /
	container
ÖÖ %
,
ÖÖ% &!
_gameObjectBindInfo
ÜÜ /
,
ÜÜ/ 0
argumentTarget
áá *
,
áá* +
BindInfo
àà $
.
àà$ %
ContractTypes
àà% 2
,
àà2 3
BindInfo
ââ $
.
ââ$ %
	Arguments
ââ% .
,
ââ. /
new
ää $
PrefabProviderResource
ää  6
(
ää6 7
_resourcePath
ää7 D
)
ääD E
,
ääE F
BindInfo
ãã $
.
ãã$ %"
InstantiatedCallback
ãã% 9
)
ãã9 :
)
ãã: ;
;
ãã; <)
RegisterProviderPerContract
çç /
(
çç/ 0
	container
éé !
,
éé! "
(
èè 
_
èè 
,
èè 
contractType
èè (
)
èè( )
=>
èè* ,
BindingUtil
êê '
.
êê' ("
CreateCachedProvider
êê( <
(
êê< =
_providerFactory
ëë  0
(
ëë0 1
contractType
ëë1 =
,
ëë= >
prefabCreator
ëë? L
)
ëëL M
)
ëëM N
)
ëëN O
;
ëëO P
break
íí 
;
íí 
}
ìì 
default
îî 
:
îî 
{
ïï 
throw
ññ 
Assert
ññ  
.
ññ  !
CreateException
ññ! 0
(
ññ0 1
)
ññ1 2
;
ññ2 3
}
óó 
}
òò 
}
ôô 	
}
öö 
}õõ Ï
çC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\Untyped\FactoryFromBinderUntyped.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class $
FactoryFromBinderUntyped )
:* +!
FactoryFromBinderBase, A
{ 
public $
FactoryFromBinderUntyped '
(' (
DiContainer		 
bindContainer		 %
,		% &
Type		' +
contractType		, 8
,		8 9
BindInfo		: B
bindInfo		C K
,		K L
FactoryBindInfo		M \
factoryBindInfo		] l
)		l m
:

 
base

 
(

 
bindContainer

  
,

  !
contractType

" .
,

. /
bindInfo

0 8
,

8 9
factoryBindInfo

: I
)

I J
{ 	
} 	
} 
} À
jC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\NullBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class  
NullBindingFinalizer %
:& '
IBindingFinalizer( 9
{ 
public %
BindingInheritanceMethods ($
BindingInheritanceMethod) A
{ 	
get 
{ 
return %
BindingInheritanceMethods 2
.2 3
None3 7
;7 8
}9 :
}		 	
public 
void 
FinalizeBinding #
(# $
DiContainer$ /
	container0 9
)9 :
{ 	
} 	
} 
} Ω
hC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\DictionaryPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
DictionaryPool 
<  
TKey  $
,$ %
TValue& ,
>, -
:. /
StaticMemoryPool0 @
<@ A

DictionaryA K
<K L
TKeyL P
,P Q
TValueR X
>X Y
>Y Z
{ 
static 
DictionaryPool 
< 
TKey "
," #
TValue$ *
>* +
	_instance, 5
=6 7
new8 ;
DictionaryPool< J
<J K
TKeyK O
,O P
TValueQ W
>W X
(X Y
)Y Z
;Z [
public

 
DictionaryPool

 
(

 
)

 
{ 	
OnSpawnMethod 
= 
	OnSpawned %
;% &
OnDespawnedMethod 
= 
OnDespawned  +
;+ ,
} 	
public 
static 
DictionaryPool $
<$ %
TKey% )
,) *
TValue+ 1
>1 2
Instance3 ;
{ 	
get 
{ 
return 
	_instance "
;" #
}$ %
} 	
static 
void 
	OnSpawned 
( 

Dictionary (
<( )
TKey) -
,- .
TValue/ 5
>5 6
items7 <
)< =
{ 	
Assert 
. 
That 
( 
items 
. 
IsEmpty %
(% &
)& '
)' (
;( )
} 	
static 
void 
OnDespawned 
(  

Dictionary  *
<* +
TKey+ /
,/ 0
TValue1 7
>7 8
items9 >
)> ?
{ 	
items 
. 
Clear 
( 
) 
; 
} 	
} 
} Ò
PC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\LookupId.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
LookupId 
{ 
public 
	IProvider 
Provider !
;! "
public		 
	BindingId		 
	BindingId		 "
;		" #
public 
LookupId 
( 
) 
{ 	
} 	
public 
LookupId 
( 
	IProvider !
provider" *
,* +
	BindingId, 5
	bindingId6 ?
)? @
{ 	
Assert 
. 
	IsNotNull 
( 
provider %
)% &
;& '
Assert 
. 
	IsNotNull 
( 
	bindingId &
)& '
;' (
Provider 
= 
provider 
;  
	BindingId 
= 
	bindingId !
;! "
} 	
public 
override 
int 
GetHashCode '
(' (
)( )
{ 	
int 
hash 
= 
$num 
; 
hash 
= 
hash 
* 
$num 
+ 
Provider '
.' (
GetHashCode( 3
(3 4
)4 5
;5 6
hash 
= 
hash 
* 
$num 
+ 
	BindingId (
.( )
GetHashCode) 4
(4 5
)5 6
;6 7
return 
hash 
; 
} 	
} 
}   ∞
xC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\GameObjectProviders\EmptyGameObjectProvider.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class #
EmptyGameObjectProvider (
:) *
	IProvider+ 4
{ 
readonly 
DiContainer 

_container '
;' (
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
public #
EmptyGameObjectProvider &
(& '
DiContainer 
	container !
,! "(
GameObjectCreationParameters# ?
gameObjectBindInfo@ R
)R S
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5

_container 
= 
	container "
;" #
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public!! 
Type!! 
GetInstanceType!! #
(!!# $
InjectContext!!$ 1
context!!2 9
)!!9 :
{"" 	
return## 
typeof## 
(## 

GameObject## $
)##$ %
;##% &
}$$ 	
public&& 
void&& *
GetAllInstancesWithInjectSplit&& 2
(&&2 3
InjectContext'' 
context'' !
,''! "
List''# '
<''' (
TypeValuePair''( 5
>''5 6
args''7 ;
,''; <
out''= @
Action''A G
injectAction''H T
,''T U
List''V Z
<''Z [
object''[ a
>''a b
buffer''c i
)''i j
{(( 	
Assert)) 
.)) 
IsEmpty)) 
()) 
args)) 
)))  
;))  !
injectAction++ 
=++ 
null++ 
;++  
var-- 
gameObj-- 
=-- 

_container-- $
.--$ %!
CreateEmptyGameObject--% :
(--: ;
_gameObjectBindInfo--; N
,--N O
context--P W
)--W X
;--X Y
buffer.. 
... 
Add.. 
(.. 
gameObj.. 
).. 
;..  
}// 	
}00 
}11 Ì
}C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\PlaceholderFactoryBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class .
"PlaceholderFactoryBindingFinalizer 3
<3 4
	TContract4 =
>= >
:? @$
ProviderBindingFinalizerA Y
{ 
readonly		 
FactoryBindInfo		  
_factoryBindInfo		! 1
;		1 2
public .
"PlaceholderFactoryBindingFinalizer 1
(1 2
BindInfo 
bindInfo 
, 
FactoryBindInfo .
factoryBindInfo/ >
)> ?
: 
base 
( 
bindInfo 
) 
{ 	
Assert 
. 
That 
( 
factoryBindInfo '
.' (
FactoryType( 3
.3 4
DerivesFrom4 ?
<? @
IPlaceholderFactory@ S
>S T
(T U
)U V
)V W
;W X
_factoryBindInfo 
= 
factoryBindInfo .
;. /
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
var 
provider 
= 
_factoryBindInfo +
.+ ,
ProviderFunc, 8
(8 9
	container9 B
)B C
;C D
var 
transientProvider !
=" #
new$ '
TransientProvider( 9
(9 :
_factoryBindInfo  
.  !
FactoryType! ,
,, -
	container 
, 
_factoryBindInfo  
.  !
	Arguments! *
.* +
Concat+ 1
(1 2

InjectUtil 
. !
CreateArgListExplicit 4
(4 5
provider  
,  !
new   
InjectContext   )
(  ) *
	container  * 3
,  3 4
typeof  5 ;
(  ; <
	TContract  < E
)  E F
)  F G
)  G H
)  H I
.  I J
ToList  J P
(  P Q
)  Q R
,  R S
BindInfo!! 
.!! 
ContextInfo!! $
,!!$ %
BindInfo!!& .
.!!. /
ConcreteIdentifier!!/ A
,!!A B
null!!C G
)!!G H
;!!H I
	IProvider## 
mainProvider## "
;##" #
if%% 
(%% 
BindInfo%% 
.%% 
Scope%% 
==%% !

ScopeTypes%%" ,
.%%, -
Unset%%- 2
||%%3 5
BindInfo%%6 >
.%%> ?
Scope%%? D
==%%E G

ScopeTypes%%H R
.%%R S
	Singleton%%S \
)%%\ ]
{&& 
mainProvider'' 
='' 
BindingUtil'' *
.''* + 
CreateCachedProvider''+ ?
(''? @
transientProvider''@ Q
)''Q R
;''R S
}(( 
else)) 
{** 
Assert++ 
.++ 
IsEqual++ 
(++ 
BindInfo++ '
.++' (
Scope++( -
,++- .

ScopeTypes++/ 9
.++9 :
	Transient++: C
)++C D
;++D E
mainProvider,, 
=,, 
transientProvider,, 0
;,,0 1
}-- +
RegisterProviderForAllContracts// +
(//+ ,
	container//, 5
,//5 6
mainProvider//7 C
)//C D
;//D E
}00 	
}11 
}22 ¸Ç
UC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\ValuePair.cs
	namespace 	

ModestTree
 
. 
Util 
{ 
public 

class 
	ValuePair 
< 
T1 
, 
T2 !
>! "
{ 
public 
readonly 
T1 
First  
;  !
public		 
readonly		 
T2		 
Second		 !
;		! "
public 
	ValuePair 
( 
) 
{ 	
First 
= 
default 
( 
T1 
) 
;  
Second 
= 
default 
( 
T2 
)  
;  !
} 	
public 
	ValuePair 
( 
T1 
first !
,! "
T2# %
second& ,
), -
{ 	
First 
= 
first 
; 
Second 
= 
second 
; 
} 	
public 
override 
bool 
Equals #
(# $
Object$ *
obj+ .
). /
{ 	
var 
that 
= 
obj 
as 
	ValuePair '
<' (
T1( *
,* +
T2, .
>. /
;/ 0
if 
( 
that 
== 
null 
) 
{ 
return 
false 
; 
} 
return   
Equals   
(   
that   
)   
;    
}!! 	
public## 
bool## 
Equals## 
(## 
	ValuePair## $
<##$ %
T1##% '
,##' (
T2##) +
>##+ ,
that##- 1
)##1 2
{$$ 	
if%% 
(%% 
that%% 
==%% 
null%% 
)%% 
{&& 
return'' 
false'' 
;'' 
}(( 
return** 
object** 
.** 
Equals**  
(**  !
First**! &
,**& '
that**( ,
.**, -
First**- 2
)**2 3
&&**4 6
object**7 =
.**= >
Equals**> D
(**D E
Second**E K
,**K L
that**M Q
.**Q R
Second**R X
)**X Y
;**Y Z
}++ 	
public-- 
override-- 
int-- 
GetHashCode-- '
(--' (
)--( )
{.. 	
	unchecked// 
{00 
int11 
hash11 
=11 
$num11 
;11 
hash22 
=22 
hash22 
*22 
$num22  
+22! "
(22# $
First22$ )
==22* ,
null22- 1
?222 3
$num224 5
:226 7
First228 =
.22= >
GetHashCode22> I
(22I J
)22J K
)22K L
;22L M
hash33 
=33 
hash33 
*33 
$num33  
+33! "
(33# $
Second33$ *
==33+ -
null33. 2
?333 4
$num335 6
:337 8
Second339 ?
.33? @
GetHashCode33@ K
(33K L
)33L M
)33M N
;33N O
return44 
hash44 
;44 
}55 
}66 	
}77 
public99 

class99 
	ValuePair99 
<99 
T199 
,99 
T299 !
,99! "
T399# %
>99% &
{:: 
public;; 
readonly;; 
T1;; 
First;;  
;;;  !
public<< 
readonly<< 
T2<< 
Second<< !
;<<! "
public== 
readonly== 
T3== 
Third==  
;==  !
public?? 
	ValuePair?? 
(?? 
)?? 
{@@ 	
FirstAA 
=AA 
defaultAA 
(AA 
T1AA 
)AA 
;AA  
SecondBB 
=BB 
defaultBB 
(BB 
T2BB 
)BB  
;BB  !
ThirdCC 
=CC 
defaultCC 
(CC 
T3CC 
)CC 
;CC  
}DD 	
publicFF 
	ValuePairFF 
(FF 
T1FF 
firstFF !
,FF! "
T2FF# %
secondFF& ,
,FF, -
T3FF. 0
thirdFF1 6
)FF6 7
{GG 	
FirstHH 
=HH 
firstHH 
;HH 
SecondII 
=II 
secondII 
;II 
ThirdJJ 
=JJ 
thirdJJ 
;JJ 
}KK 	
publicMM 
overrideMM 
boolMM 
EqualsMM #
(MM# $
ObjectMM$ *
objMM+ .
)MM. /
{NN 	
varOO 
thatOO 
=OO 
objOO 
asOO 
	ValuePairOO '
<OO' (
T1OO( *
,OO* +
T2OO, .
,OO. /
T3OO0 2
>OO2 3
;OO3 4
ifQQ 
(QQ 
thatQQ 
==QQ 
nullQQ 
)QQ 
{RR 
returnSS 
falseSS 
;SS 
}TT 
returnVV 
EqualsVV 
(VV 
thatVV 
)VV 
;VV  
}WW 	
publicYY 
boolYY 
EqualsYY 
(YY 
	ValuePairYY $
<YY$ %
T1YY% '
,YY' (
T2YY) +
,YY+ ,
T3YY- /
>YY/ 0
thatYY1 5
)YY5 6
{ZZ 	
if[[ 
([[ 
that[[ 
==[[ 
null[[ 
)[[ 
{\\ 
return]] 
false]] 
;]] 
}^^ 
return`` 
object`` 
.`` 
Equals``  
(``  !
First``! &
,``& '
that``( ,
.``, -
First``- 2
)``2 3
&&``4 6
object``7 =
.``= >
Equals``> D
(``D E
Second``E K
,``K L
that``M Q
.``Q R
Second``R X
)``X Y
&&``Z \
object``] c
.``c d
Equals``d j
(``j k
Third``k p
,``p q
that``r v
.``v w
Third``w |
)``| }
;``} ~
}aa 	
publiccc 
overridecc 
intcc 
GetHashCodecc '
(cc' (
)cc( )
{dd 	
	uncheckedee 
{ff 
intgg 
hashgg 
=gg 
$numgg 
;gg 
hashhh 
=hh 
hashhh 
*hh 
$numhh  
+hh! "
(hh# $
Firsthh$ )
==hh* ,
nullhh- 1
?hh2 3
$numhh4 5
:hh6 7
Firsthh8 =
.hh= >
GetHashCodehh> I
(hhI J
)hhJ K
)hhK L
;hhL M
hashii 
=ii 
hashii 
*ii 
$numii  
+ii! "
(ii# $
Secondii$ *
==ii+ -
nullii. 2
?ii3 4
$numii5 6
:ii7 8
Secondii9 ?
.ii? @
GetHashCodeii@ K
(iiK L
)iiL M
)iiM N
;iiN O
hashjj 
=jj 
hashjj 
*jj 
$numjj  
+jj! "
(jj# $
Thirdjj$ )
==jj* ,
nulljj- 1
?jj2 3
$numjj4 5
:jj6 7
Thirdjj8 =
.jj= >
GetHashCodejj> I
(jjI J
)jjJ K
)jjK L
;jjL M
returnkk 
hashkk 
;kk 
}ll 
}mm 	
}nn 
publicpp 

classpp 
	ValuePairpp 
<pp 
T1pp 
,pp 
T2pp !
,pp! "
T3pp# %
,pp% &
T4pp' )
>pp) *
{qq 
publicrr 
readonlyrr 
T1rr 
Firstrr  
;rr  !
publicss 
readonlyss 
T2ss 
Secondss !
;ss! "
publictt 
readonlytt 
T3tt 
Thirdtt  
;tt  !
publicuu 
readonlyuu 
T4uu 
Fourthuu !
;uu! "
publicww 
	ValuePairww 
(ww 
)ww 
{xx 	
Firstyy 
=yy 
defaultyy 
(yy 
T1yy 
)yy 
;yy  
Secondzz 
=zz 
defaultzz 
(zz 
T2zz 
)zz  
;zz  !
Third{{ 
={{ 
default{{ 
({{ 
T3{{ 
){{ 
;{{  
Fourth|| 
=|| 
default|| 
(|| 
T4|| 
)||  
;||  !
}}} 	
public 
	ValuePair 
( 
T1 
first !
,! "
T2# %
second& ,
,, -
T3. 0
third1 6
,6 7
T48 :
fourth; A
)A B
{
ÄÄ 	
First
ÅÅ 
=
ÅÅ 
first
ÅÅ 
;
ÅÅ 
Second
ÇÇ 
=
ÇÇ 
second
ÇÇ 
;
ÇÇ 
Third
ÉÉ 
=
ÉÉ 
third
ÉÉ 
;
ÉÉ 
Fourth
ÑÑ 
=
ÑÑ 
fourth
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
public
áá 
override
áá 
bool
áá 
Equals
áá #
(
áá# $
Object
áá$ *
obj
áá+ .
)
áá. /
{
àà 	
var
ââ 
that
ââ 
=
ââ 
obj
ââ 
as
ââ 
	ValuePair
ââ '
<
ââ' (
T1
ââ( *
,
ââ* +
T2
ââ, .
,
ââ. /
T3
ââ0 2
,
ââ2 3
T4
ââ4 6
>
ââ6 7
;
ââ7 8
if
ãã 
(
ãã 
that
ãã 
==
ãã 
null
ãã 
)
ãã 
{
åå 
return
çç 
false
çç 
;
çç 
}
éé 
return
êê 
Equals
êê 
(
êê 
that
êê 
)
êê 
;
êê  
}
ëë 	
public
ìì 
bool
ìì 
Equals
ìì 
(
ìì 
	ValuePair
ìì $
<
ìì$ %
T1
ìì% '
,
ìì' (
T2
ìì) +
,
ìì+ ,
T3
ìì- /
,
ìì/ 0
T4
ìì1 3
>
ìì3 4
that
ìì5 9
)
ìì9 :
{
îî 	
if
ïï 
(
ïï 
that
ïï 
==
ïï 
null
ïï 
)
ïï 
{
ññ 
return
óó 
false
óó 
;
óó 
}
òò 
return
öö 
object
öö 
.
öö 
Equals
öö  
(
öö  !
First
öö! &
,
öö& '
that
öö( ,
.
öö, -
First
öö- 2
)
öö2 3
&&
öö4 6
object
öö7 =
.
öö= >
Equals
öö> D
(
ööD E
Second
ööE K
,
ööK L
that
ööM Q
.
ööQ R
Second
ööR X
)
ööX Y
&&
õõ 
object
õõ 
.
õõ 
Equals
õõ  
(
õõ  !
Third
õõ! &
,
õõ& '
that
õõ( ,
.
õõ, -
Third
õõ- 2
)
õõ2 3
&&
õõ4 6
object
õõ7 =
.
õõ= >
Equals
õõ> D
(
õõD E
Fourth
õõE K
,
õõK L
that
õõM Q
.
õõQ R
Fourth
õõR X
)
õõX Y
;
õõY Z
}
úú 	
public
ûû 
override
ûû 
int
ûû 
GetHashCode
ûû '
(
ûû' (
)
ûû( )
{
üü 	
	unchecked
†† 
{
°° 
int
¢¢ 
hash
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
hash
££ 
=
££ 
hash
££ 
*
££ 
$num
££  
+
££! "
(
££# $
First
££$ )
==
££* ,
null
££- 1
?
££2 3
$num
££4 5
:
££6 7
First
££8 =
.
££= >
GetHashCode
££> I
(
££I J
)
££J K
)
££K L
;
££L M
hash
§§ 
=
§§ 
hash
§§ 
*
§§ 
$num
§§  
+
§§! "
(
§§# $
Second
§§$ *
==
§§+ -
null
§§. 2
?
§§3 4
$num
§§5 6
:
§§7 8
Second
§§9 ?
.
§§? @
GetHashCode
§§@ K
(
§§K L
)
§§L M
)
§§M N
;
§§N O
hash
•• 
=
•• 
hash
•• 
*
•• 
$num
••  
+
••! "
(
••# $
Third
••$ )
==
••* ,
null
••- 1
?
••2 3
$num
••4 5
:
••6 7
Third
••8 =
.
••= >
GetHashCode
••> I
(
••I J
)
••J K
)
••K L
;
••L M
hash
¶¶ 
=
¶¶ 
hash
¶¶ 
*
¶¶ 
$num
¶¶  
+
¶¶! "
(
¶¶# $
Fourth
¶¶$ *
==
¶¶+ -
null
¶¶. 2
?
¶¶3 4
$num
¶¶5 6
:
¶¶7 8
Fourth
¶¶9 ?
.
¶¶? @
GetHashCode
¶¶@ K
(
¶¶K L
)
¶¶L M
)
¶¶M N
;
¶¶N O
return
ßß 
hash
ßß 
;
ßß 
}
®® 
}
©© 	
}
™™ 
public
¨¨ 

static
¨¨ 
class
¨¨ 
	ValuePair
¨¨ !
{
≠≠ 
public
ÆÆ 
static
ÆÆ 
	ValuePair
ÆÆ 
<
ÆÆ  
T1
ÆÆ  "
,
ÆÆ" #
T2
ÆÆ$ &
>
ÆÆ& '
New
ÆÆ( +
<
ÆÆ+ ,
T1
ÆÆ, .
,
ÆÆ. /
T2
ÆÆ0 2
>
ÆÆ2 3
(
ÆÆ3 4
T1
ÆÆ4 6
first
ÆÆ7 <
,
ÆÆ< =
T2
ÆÆ> @
second
ÆÆA G
)
ÆÆG H
{
ØØ 	
return
∞∞ 
new
∞∞ 
	ValuePair
∞∞  
<
∞∞  !
T1
∞∞! #
,
∞∞# $
T2
∞∞% '
>
∞∞' (
(
∞∞( )
first
∞∞) .
,
∞∞. /
second
∞∞0 6
)
∞∞6 7
;
∞∞7 8
}
±± 	
public
≥≥ 
static
≥≥ 
	ValuePair
≥≥ 
<
≥≥  
T1
≥≥  "
,
≥≥" #
T2
≥≥$ &
,
≥≥& '
T3
≥≥( *
>
≥≥* +
New
≥≥, /
<
≥≥/ 0
T1
≥≥0 2
,
≥≥2 3
T2
≥≥4 6
,
≥≥6 7
T3
≥≥8 :
>
≥≥: ;
(
≥≥; <
T1
≥≥< >
first
≥≥? D
,
≥≥D E
T2
≥≥F H
second
≥≥I O
,
≥≥O P
T3
≥≥Q S
third
≥≥T Y
)
≥≥Y Z
{
¥¥ 	
return
µµ 
new
µµ 
	ValuePair
µµ  
<
µµ  !
T1
µµ! #
,
µµ# $
T2
µµ% '
,
µµ' (
T3
µµ) +
>
µµ+ ,
(
µµ, -
first
µµ- 2
,
µµ2 3
second
µµ4 :
,
µµ: ;
third
µµ< A
)
µµA B
;
µµB C
}
∂∂ 	
public
∏∏ 
static
∏∏ 
	ValuePair
∏∏ 
<
∏∏  
T1
∏∏  "
,
∏∏" #
T2
∏∏$ &
,
∏∏& '
T3
∏∏( *
,
∏∏* +
T4
∏∏, .
>
∏∏. /
New
∏∏0 3
<
∏∏3 4
T1
∏∏4 6
,
∏∏6 7
T2
∏∏8 :
,
∏∏: ;
T3
∏∏< >
,
∏∏> ?
T4
∏∏@ B
>
∏∏B C
(
∏∏C D
T1
∏∏D F
first
∏∏G L
,
∏∏L M
T2
∏∏N P
second
∏∏Q W
,
∏∏W X
T3
∏∏Y [
third
∏∏\ a
,
∏∏a b
T4
∏∏c e
fourth
∏∏f l
)
∏∏l m
{
ππ 	
return
∫∫ 
new
∫∫ 
	ValuePair
∫∫  
<
∫∫  !
T1
∫∫! #
,
∫∫# $
T2
∫∫% '
,
∫∫' (
T3
∫∫) +
,
∫∫+ ,
T4
∫∫- /
>
∫∫/ 0
(
∫∫0 1
first
∫∫1 6
,
∫∫6 7
second
∫∫8 >
,
∫∫> ?
third
∫∫@ E
,
∫∫E F
fourth
∫∫G M
)
∫∫M N
;
∫∫N O
}
ªª 	
}
ºº 
}ΩΩ ˆ+
äC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByNewPrefabWithParams.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

class 4
(SubContainerCreatorByNewPrefabWithParams 9
:: ; 
ISubContainerCreator< P
{ 
readonly 
DiContainer 

_container '
;' (
readonly 
IPrefabProvider  
_prefabProvider! 0
;0 1
readonly 
Type 
_installerType $
;$ %
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
public 4
(SubContainerCreatorByNewPrefabWithParams 7
(7 8
Type 
installerType 
, 
DiContainer  +
	container, 5
,5 6
IPrefabProvider7 F
prefabProviderG U
,U V(
GameObjectCreationParameters (
gameObjectBindInfo) ;
); <
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
_prefabProvider 
= 
prefabProvider ,
;, -

_container 
= 
	container "
;" #
_installerType 
= 
installerType *
;* +
} 	
	protected 
DiContainer 
	Container '
{ 	
get 
{ 
return 

_container #
;# $
}% &
}   	
DiContainer"" 
CreateTempContainer"" '
(""' (
List""( ,
<"", -
TypeValuePair""- :
>"": ;
args""< @
)""@ A
{## 	
var$$ 
tempSubContainer$$  
=$$! "
	Container$$# ,
.$$, -
CreateSubContainer$$- ?
($$? @
)$$@ A
;$$A B
var&&  
installerInjectables&& $
=&&% &
TypeAnalyzer&&' 3
.&&3 4
GetInfo&&4 ;
(&&; <
_installerType&&< J
)&&J K
;&&K L
foreach(( 
((( 
var(( 
argPair((  
in((! #
args(($ (
)((( )
{)) 
var,, 
match,, 
=,,  
installerInjectables,, 0
.,,0 1
AllInjectables,,1 ?
.-- 
Where-- 
(-- 
x-- 
=>-- 
argPair--  '
.--' (
Type--( ,
.--, -
DerivesFromOrEqual--- ?
(--? @
x--@ A
.--A B

MemberType--B L
)--L M
)--M N
... 
OrderBy.. 
(.. 
x.. 
=>.. !
ZenUtilInternal.." 1
...1 2
GetInheritanceDelta..2 E
(..E F
argPair..F M
...M N
Type..N R
,..R S
x..T U
...U V

MemberType..V `
)..` a
)..a b
...b c
FirstOrDefault..c q
(..q r
)..r s
;..s t
Assert00 
.00 
That00 
(00 
match00 !
!=00" $
null00% )
,00) *
$str11 t
,11t u
argPair22 
.22 
Type22  
,22  !
_installerType22" 0
)220 1
;221 2
tempSubContainer44  
.44  !
Bind44! %
(44% &
match44& +
.44+ ,

MemberType44, 6
)446 7
.55 
FromInstance55 !
(55! "
argPair55" )
.55) *
Value55* /
)55/ 0
.550 1
WhenInjectedInto551 A
(55A B
_installerType55B P
)55P Q
;55Q R
}66 
return88 
tempSubContainer88 #
;88# $
}99 	
public;; 
DiContainer;; 
CreateSubContainer;; -
(;;- .
List;;. 2
<;;2 3
TypeValuePair;;3 @
>;;@ A
args;;B F
,;;F G
InjectContext;;H U
parentContext;;V c
);;c d
{<< 	
Assert== 
.== 
That== 
(== 
!== 
args== 
.== 
IsEmpty== %
(==% &
)==& '
)==' (
;==( )
var?? 
prefab?? 
=?? 
_prefabProvider?? (
.??( )
	GetPrefab??) 2
(??2 3
)??3 4
;??4 5
var@@ 

gameObject@@ 
=@@ 
CreateTempContainer@@ 0
(@@0 1
args@@1 5
)@@5 6
.@@6 7
InstantiatePrefab@@7 H
(@@H I
prefab@@I O
,@@O P
_gameObjectBindInfo@@Q d
)@@d e
;@@e f
varBB 
contextBB 
=BB 

gameObjectBB $
.BB$ %
GetComponentBB% 1
<BB1 2
GameObjectContextBB2 C
>BBC D
(BBD E
)BBE F
;BBF G
AssertDD 
.DD 
ThatDD 
(DD 
contextDD 
!=DD  "
nullDD# '
,DD' (
$strEE f
,EEf g
prefabEEh n
.EEn o
nameEEo s
)EEs t
;EEt u
returnII 
contextII 
.II 
	ContainerII $
;II$ %
}JJ 	
}KK 
}LL åÜ
bC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\ProjectContext.cs
	namespace 	
Zenject
 
{ 
public 

class 
ProjectContext 
:  !
Context" )
{ 
public 
event 
Action 

PreInstall &
;& '
public 
event 
Action 
PostInstall '
;' (
public 
event 
Action 

PreResolve &
;& '
public 
event 
Action 
PostResolve '
;' (
public 
const 
string &
ProjectContextResourcePath 6
=7 8
$str9 I
;I J
public 
const 
string )
ProjectContextResourcePathOld 9
=: ;
$str< T
;T U
static 
ProjectContext 
	_instance '
;' (
[ 	
Tooltip	 
( 
$str h
)h i
]i j
[ 	
SerializeField	 
] 
bool )
_parentNewObjectsUnderContext *
=+ ,
true- 1
;1 2
[   	
SerializeField  	 
]   )
ReflectionBakingCoverageModes!! %/
#_editorReflectionBakingCoverageMode!!& I
=!!J K)
ReflectionBakingCoverageModes!!L i
.!!i j'
FallbackToDirectReflection	!!j Ñ
;
!!Ñ Ö
[## 	
SerializeField##	 
]## )
ReflectionBakingCoverageModes$$ %/
#_buildsReflectionBakingCoverageMode$$& I
=$$J K)
ReflectionBakingCoverageModes$$L i
.$$i j'
FallbackToDirectReflection	$$j Ñ
;
$$Ñ Ö
[&& 	
SerializeField&&	 
]&& 
ZenjectSettings'' 
	_settings'' !
=''" #
null''$ (
;''( )
DiContainer)) 

_container)) 
;)) 
public++ 
override++ 
DiContainer++ #
	Container++$ -
{,, 	
get-- 
{-- 
return-- 

_container-- #
;--# $
}--% &
}.. 	
public00 
static00 
bool00 
HasInstance00 &
{11 	
get22 
{22 
return22 
	_instance22 "
!=22# %
null22& *
;22* +
}22, -
}33 	
public55 
static55 
ProjectContext55 $
Instance55% -
{66 	
get77 
{88 
if99 
(99 
	_instance99 
==99  
null99! %
)99% &
{:: $
InstantiateAndInitialize;; ,
(;;, -
);;- .
;;;. /
Assert<< 
.<< 
	IsNotNull<< $
(<<$ %
	_instance<<% .
)<<. /
;<</ 0
}== 
return?? 
	_instance??  
;??  !
}@@ 
}AA 	
publicCC 
staticCC 
boolCC 
ValidateOnNextRunCC ,
{DD 	
getEE 
;EE 
setFF 
;FF 
}GG 	
publicII 
overrideII 
IEnumerableII #
<II# $

GameObjectII$ .
>II. /
GetRootGameObjectsII0 B
(IIB C
)IIC D
{JJ 	
returnKK 
newKK 
[KK 
]KK 
{KK 

gameObjectKK %
}KK& '
;KK' (
}LL 	
publicNN 
staticNN 

GameObjectNN  
TryGetPrefabNN! -
(NN- .
)NN. /
{OO 	
varPP 
prefabsPP 
=PP 
	ResourcesPP #
.PP# $
LoadAllPP$ +
(PP+ ,&
ProjectContextResourcePathPP, F
,PPF G
typeofPPH N
(PPN O

GameObjectPPO Y
)PPY Z
)PPZ [
;PP[ \
ifRR 
(RR 
prefabsRR 
.RR 
LengthRR 
>RR  
$numRR! "
)RR" #
{SS 
AssertTT 
.TT 
ThatTT 
(TT 
prefabsTT #
.TT# $
LengthTT$ *
==TT+ -
$numTT. /
,TT/ 0
$strUU S
,UUS T&
ProjectContextResourcePathUUU o
)UUo p
;UUp q
returnVV 
(VV 

GameObjectVV "
)VV" #
prefabsVV# *
[VV* +
$numVV+ ,
]VV, -
;VV- .
}WW 
prefabsYY 
=YY 
	ResourcesYY 
.YY  
LoadAllYY  '
(YY' ()
ProjectContextResourcePathOldYY( E
,YYE F
typeofYYG M
(YYM N

GameObjectYYN X
)YYX Y
)YYY Z
;YYZ [
if[[ 
([[ 
prefabs[[ 
.[[ 
Length[[ 
>[[  
$num[[! "
)[[" #
{\\ 
Assert]] 
.]] 
That]] 
(]] 
prefabs]] #
.]]# $
Length]]$ *
==]]+ -
$num]]. /
,]]/ 0
$str^^ S
,^^S T)
ProjectContextResourcePathOld^^U r
)^^r s
;^^s t
return__ 
(__ 

GameObject__ "
)__" #
prefabs__# *
[__* +
$num__+ ,
]__, -
;__- .
}`` 
returnbb 
nullbb 
;bb 
}cc 	
staticee 
voidee $
InstantiateAndInitializeee ,
(ee, -
)ee- .
{ff 	
ProfileBlockhh 
.hh 
UnityMainThreadhh (
=hh) *
Threadhh+ 1
.hh1 2
CurrentThreadhh2 ?
;hh? @
Assertkk 
.kk 
Thatkk 
(kk 
FindObjectsOfTypekk )
<kk) *
ProjectContextkk* 8
>kk8 9
(kk9 :
)kk: ;
.kk; <
IsEmptykk< C
(kkC D
)kkD E
,kkE F
$strll G
)llG H
;llH I
varnn 
prefabnn 
=nn 
TryGetPrefabnn %
(nn% &
)nn& '
;nn' (
varpp 
prefabWasActivepp 
=pp  !
falsepp" '
;pp' (
{uu 
ifvv 
(vv 
prefabvv 
==vv 
nullvv "
)vv" #
{ww 
	_instancexx 
=xx 
newxx  #

GameObjectxx$ .
(xx. /
$strxx/ ?
)xx? @
.yy 
AddComponentyy %
<yy% &
ProjectContextyy& 4
>yy4 5
(yy5 6
)yy6 7
;yy7 8
}zz 
else{{ 
{|| 
prefabWasActive}} #
=}}$ %
prefab}}& ,
.}}, -

activeSelf}}- 7
;}}7 8

GameObject 
gameObjectInstance 1
;1 2
if
ÅÅ 
(
ÅÅ 
prefabWasActive
ÅÅ &
)
ÅÅ& '
{
ÇÇ  
gameObjectInstance
ÑÑ *
=
ÑÑ+ ,

GameObject
ÑÑ- 7
.
ÑÑ7 8
Instantiate
ÑÑ8 C
(
ÑÑC D
prefab
ÑÑD J
,
ÑÑJ K
ZenUtilInternal
ÑÑL [
.
ÑÑ[ \-
GetOrCreateInactivePrefabParent
ÑÑ\ {
(
ÑÑ{ |
)
ÑÑ| }
)
ÑÑ} ~
;
ÑÑ~  
gameObjectInstance
ÖÖ *
.
ÖÖ* +
	SetActive
ÖÖ+ 4
(
ÖÖ4 5
false
ÖÖ5 :
)
ÖÖ: ;
;
ÖÖ; < 
gameObjectInstance
ÜÜ *
.
ÜÜ* +
	transform
ÜÜ+ 4
.
ÜÜ4 5
	SetParent
ÜÜ5 >
(
ÜÜ> ?
null
ÜÜ? C
,
ÜÜC D
false
ÜÜE J
)
ÜÜJ K
;
ÜÜK L
}
áá 
else
àà 
{
ââ  
gameObjectInstance
ää *
=
ää+ ,

GameObject
ää- 7
.
ää7 8
Instantiate
ää8 C
(
ääC D
prefab
ääD J
)
ääJ K
;
ääK L
}
ãã 
	_instance
ôô 
=
ôô  
gameObjectInstance
ôô  2
.
ôô2 3
GetComponent
ôô3 ?
<
ôô? @
ProjectContext
ôô@ N
>
ôôN O
(
ôôO P
)
ôôP Q
;
ôôQ R
Assert
õõ 
.
õõ 
	IsNotNull
õõ $
(
õõ$ %
	_instance
õõ% .
,
õõ. /
$str
úú b
,
úúb c(
ProjectContextResourcePath
úúd ~
)
úú~ 
;úú Ä
}
ùù 
}
ûû 
	_instance
¢¢ 
.
¢¢ 

Initialize
¢¢  
(
¢¢  !
)
¢¢! "
;
¢¢" #
if
§§ 
(
§§ 
prefabWasActive
§§ 
)
§§  
{
•• 
{
©© 
	_instance
´´ 
.
´´ 

gameObject
´´ (
.
´´( )
	SetActive
´´) 2
(
´´2 3
true
´´3 7
)
´´7 8
;
´´8 9
}
¨¨ 
}
≠≠ 
}
ÆÆ 	
public
∞∞ 
bool
∞∞ *
ParentNewObjectsUnderContext
∞∞ 0
{
±± 	
get
≤≤ 
{
≤≤ 
return
≤≤ +
_parentNewObjectsUnderContext
≤≤ 6
;
≤≤6 7
}
≤≤8 9
set
≥≥ 
{
≥≥ +
_parentNewObjectsUnderContext
≥≥ /
=
≥≥0 1
value
≥≥2 7
;
≥≥7 8
}
≥≥9 :
}
¥¥ 	
public
∂∂ 
void
∂∂ !
EnsureIsInitialized
∂∂ '
(
∂∂' (
)
∂∂( )
{
∑∑ 	
}
ππ 	
public
ªª 
void
ªª 
Awake
ªª 
(
ªª 
)
ªª 
{
ºº 	
if
ΩΩ 
(
ΩΩ 
Application
ΩΩ 
.
ΩΩ 
	isPlaying
ΩΩ %
)
ΩΩ% &
{
¬¬ 
DontDestroyOnLoad
√√ !
(
√√! "

gameObject
√√" ,
)
√√, -
;
√√- .
}
ƒƒ 
}
≈≈ 	
void
«« 

Initialize
«« 
(
«« 
)
«« 
{
»» 	
Assert
…… 
.
…… 
IsNull
…… 
(
…… 

_container
…… $
)
……$ %
;
……% &
if
ÀÀ 
(
ÀÀ 
Application
ÀÀ 
.
ÀÀ 
isEditor
ÀÀ $
)
ÀÀ$ %
{
ÃÃ 
TypeAnalyzer
ÕÕ 
.
ÕÕ *
ReflectionBakingCoverageMode
ÕÕ 9
=
ÕÕ: ;1
#_editorReflectionBakingCoverageMode
ÕÕ< _
;
ÕÕ_ `
}
ŒŒ 
else
œœ 
{
–– 
TypeAnalyzer
—— 
.
—— *
ReflectionBakingCoverageMode
—— 9
=
——: ;1
#_buildsReflectionBakingCoverageMode
——< _
;
——_ `
}
““ 
var
‘‘ 
isValidating
‘‘ 
=
‘‘ 
ValidateOnNextRun
‘‘ 0
;
‘‘0 1
ValidateOnNextRun
◊◊ 
=
◊◊ 
false
◊◊  %
;
◊◊% &

_container
ŸŸ 
=
ŸŸ 
new
ŸŸ 
DiContainer
ŸŸ (
(
ŸŸ( )
new
⁄⁄ 
[
⁄⁄ 
]
⁄⁄ 
{
⁄⁄ 
StaticContext
⁄⁄ %
.
⁄⁄% &
	Container
⁄⁄& /
}
⁄⁄0 1
,
⁄⁄1 2
isValidating
⁄⁄3 ?
)
⁄⁄? @
;
⁄⁄@ A
if
›› 
(
›› 

PreInstall
›› 
!=
›› 
null
›› "
)
››" #
{
ﬁﬁ 

PreInstall
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
var
‚‚ &
injectableMonoBehaviours
‚‚ (
=
‚‚) *
new
‚‚+ .
List
‚‚/ 3
<
‚‚3 4
MonoBehaviour
‚‚4 A
>
‚‚A B
(
‚‚B C
)
‚‚C D
;
‚‚D E)
GetInjectableMonoBehaviours
„„ '
(
„„' (&
injectableMonoBehaviours
„„( @
)
„„@ A
;
„„A B
foreach
ÂÂ 
(
ÂÂ 
var
ÂÂ 
instance
ÂÂ !
in
ÂÂ" $&
injectableMonoBehaviours
ÂÂ% =
)
ÂÂ= >
{
ÊÊ 

_container
ÁÁ 
.
ÁÁ 
QueueForInject
ÁÁ )
(
ÁÁ) *
instance
ÁÁ* 2
)
ÁÁ2 3
;
ÁÁ3 4
}
ËË 

_container
ÍÍ 
.
ÍÍ 
IsInstalling
ÍÍ #
=
ÍÍ$ %
true
ÍÍ& *
;
ÍÍ* +
try
ÏÏ 
{
ÌÌ 
InstallBindings
ÓÓ 
(
ÓÓ  &
injectableMonoBehaviours
ÓÓ  8
)
ÓÓ8 9
;
ÓÓ9 :
}
ÔÔ 
finally
 
{
ÒÒ 

_container
ÚÚ 
.
ÚÚ 
IsInstalling
ÚÚ '
=
ÚÚ( )
false
ÚÚ* /
;
ÚÚ/ 0
}
ÛÛ 
if
ıı 
(
ıı 
PostInstall
ıı 
!=
ıı 
null
ıı #
)
ıı# $
{
ˆˆ 
PostInstall
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜ 
}
¯¯ 
if
˙˙ 
(
˙˙ 

PreResolve
˙˙ 
!=
˙˙ 
null
˙˙ "
)
˙˙" #
{
˚˚ 

PreResolve
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
˝˝ 

_container
ˇˇ 
.
ˇˇ 
ResolveRoots
ˇˇ #
(
ˇˇ# $
)
ˇˇ$ %
;
ˇˇ% &
if
ÅÅ 
(
ÅÅ 
PostResolve
ÅÅ 
!=
ÅÅ 
null
ÅÅ #
)
ÅÅ# $
{
ÇÇ 
PostResolve
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
	protected
áá 
override
áá 
void
áá )
GetInjectableMonoBehaviours
áá  ;
(
áá; <
List
áá< @
<
áá@ A
MonoBehaviour
ááA N
>
ááN O
monoBehaviours
ááP ^
)
áá^ _
{
àà 	
ZenUtilInternal
ââ 
.
ââ B
4AddStateMachineBehaviourAutoInjectersUnderGameObject
ââ P
(
ââP Q

gameObject
ââQ [
)
ââ[ \
;
ââ\ ]
ZenUtilInternal
ää 
.
ää 8
*GetInjectableMonoBehavioursUnderGameObject
ää F
(
ääF G

gameObject
ääG Q
,
ääQ R
monoBehaviours
ääS a
)
ääa b
;
ääb c
}
ãã 	
void
çç 
InstallBindings
çç 
(
çç 
List
çç !
<
çç! "
MonoBehaviour
çç" /
>
çç/ 0&
injectableMonoBehaviours
çç1 I
)
ççI J
{
éé 	
if
èè 
(
èè +
_parentNewObjectsUnderContext
èè -
)
èè- .
{
êê 

_container
ëë 
.
ëë 
DefaultParent
ëë (
=
ëë) *
	transform
ëë+ 4
;
ëë4 5
}
íí 
else
ìì 
{
îî 

_container
ïï 
.
ïï 
DefaultParent
ïï (
=
ïï) *
null
ïï+ /
;
ïï/ 0
}
ññ 

_container
òò 
.
òò 
Settings
òò 
=
òò  !
	_settings
òò" +
??
òò, .
ZenjectSettings
òò/ >
.
òò> ?
Default
òò? F
;
òòF G

_container
öö 
.
öö 
Bind
öö 
<
öö  
ZenjectSceneLoader
öö .
>
öö. /
(
öö/ 0
)
öö0 1
.
öö1 2
AsSingle
öö2 :
(
öö: ;
)
öö; <
;
öö< =&
ZenjectManagersInstaller
úú $
.
úú$ %
Install
úú% ,
(
úú, -

_container
úú- 7
)
úú7 8
;
úú8 9

_container
ûû 
.
ûû 
Bind
ûû 
<
ûû 
Context
ûû #
>
ûû# $
(
ûû$ %
)
ûû% &
.
ûû& '
FromInstance
ûû' 3
(
ûû3 4
this
ûû4 8
)
ûû8 9
;
ûû9 :

_container
†† 
.
†† 
Bind
†† 
(
†† 
typeof
†† "
(
††" #
ProjectKernel
††# 0
)
††0 1
,
††1 2
typeof
††3 9
(
††9 :

MonoKernel
††: D
)
††D E
)
††E F
.
°° 
To
°° 
<
°° 
ProjectKernel
°° !
>
°°! "
(
°°" #
)
°°# $
.
°°$ % 
FromNewComponentOn
°°% 7
(
°°7 8

gameObject
°°8 B
)
°°B C
.
°°C D
AsSingle
°°D L
(
°°L M
)
°°M N
.
°°N O
NonLazy
°°O V
(
°°V W
)
°°W X
;
°°X Y

_container
££ 
.
££ 
Bind
££ 
<
££ "
SceneContextRegistry
££ 0
>
££0 1
(
££1 2
)
££2 3
.
££3 4
AsSingle
££4 <
(
££< =
)
££= >
;
££> ?"
InstallSceneBindings
••  
(
••  !&
injectableMonoBehaviours
••! 9
)
••9 :
;
••: ;
InstallInstallers
ßß 
(
ßß 
)
ßß 
;
ßß  
}
©© 	
}
™™ 
}´´ 
rC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\StaticMemoryPoolRegistry.cs
	namespace 	
Zenject
 
{ 
public 

static 
class $
StaticMemoryPoolRegistry 0
{		 
public

 
static

 
event

 
Action

 "
<

" #
IMemoryPool

# .
>

. /
	PoolAdded

0 9
=

: ;
delegate

< D
{

E F
}

F G
;

G H
public 
static 
event 
Action "
<" #
IMemoryPool# .
>. /
PoolRemoved0 ;
=< =
delegate> F
{G H
}H I
;I J
readonly 
static 
List 
< 
IMemoryPool (
>( )
_pools* 0
=1 2
new3 6
List7 ;
<; <
IMemoryPool< G
>G H
(H I
)I J
;J K
public 
static 
IEnumerable !
<! "
IMemoryPool" -
>- .
Pools/ 4
{ 	
get 
{ 
return 
_pools 
;  
}! "
} 	
public 
static 
void 
Add 
( 
IMemoryPool *

memoryPool+ 5
)5 6
{ 	
_pools 
. 
Add 
( 

memoryPool !
)! "
;" #
	PoolAdded 
( 

memoryPool  
)  !
;! "
} 	
public 
static 
void 
Remove !
(! "
IMemoryPool" -

memoryPool. 8
)8 9
{ 	
_pools 
. 
RemoveWithConfirm $
($ %

memoryPool% /
)/ 0
;0 1
PoolRemoved 
( 

memoryPool "
)" #
;# $
} 	
} 
}!! É
hC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodProviderWithContainer.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 '
MethodProviderWithContainer

 ,
<

, -
TValue

- 3
>

3 4
:

5 6
	IProvider

7 @
{ 
readonly 
Func 
< 
DiContainer !
,! "
TValue# )
>) *
_method+ 2
;2 3
public '
MethodProviderWithContainer *
(* +
Func+ /
</ 0
DiContainer0 ;
,; <
TValue= C
>C D
methodE K
)K L
{ 	
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{ 	
return 
typeof 
( 
TValue  
)  !
;! "
}   	
public"" 
void"" *
GetAllInstancesWithInjectSplit"" 2
(""2 3
InjectContext## 
context## !
,##! "
List### '
<##' (
TypeValuePair##( 5
>##5 6
args##7 ;
,##; <
out##= @
Action##A G
injectAction##H T
,##T U
List##V Z
<##Z [
object##[ a
>##a b
buffer##c i
)##i j
{$$ 	
Assert%% 
.%% 
IsEmpty%% 
(%% 
args%% 
)%%  
;%%  !
Assert&& 
.&& 
	IsNotNull&& 
(&& 
context&& $
)&&$ %
;&&% &
Assert(( 
.(( 
That(( 
((( 
typeof(( 
((( 
TValue(( %
)((% &
.((& '
DerivesFromOrEqual((' 9
(((9 :
context((: A
.((A B

MemberType((B L
)((L M
)((M N
;((N O
injectAction** 
=** 
null** 
;**  
if++ 
(++ 
context++ 
.++ 
	Container++ !
.++! "
IsValidating++" .
)++. /
{,, 
buffer.. 
... 
Add.. 
(.. 
new.. 
ValidationMarker.. /
(../ 0
typeof..0 6
(..6 7
TValue..7 =
)..= >
)..> ?
)..? @
;..@ A
}// 
else00 
{11 
buffer22 
.22 
Add22 
(22 
_method22 "
(22" #
context22# *
.22* +
	Container22+ 4
)224 5
)225 6
;226 7
}33 
}44 	
}55 
[99 
NoReflectionBaking99 
]99 
public:: 

class:: '
MethodProviderWithContainer:: ,
<::, -
TParam1::- 4
,::4 5
TValue::6 <
>::< =
:::> ?
	IProvider::@ I
{;; 
readonly<< 
Func<< 
<<< 
DiContainer<< !
,<<! "
TParam1<<# *
,<<* +
TValue<<, 2
><<2 3
_method<<4 ;
;<<; <
public>> '
MethodProviderWithContainer>> *
(>>* +
Func>>+ /
<>>/ 0
DiContainer>>0 ;
,>>; <
TParam1>>= D
,>>D E
TValue>>F L
>>>L M
method>>N T
)>>T U
{?? 	
_method@@ 
=@@ 
method@@ 
;@@ 
}AA 	
publicCC 
boolCC 
IsCachedCC 
{DD 	
getEE 
{EE 
returnEE 
falseEE 
;EE 
}EE  !
}FF 	
publicHH 
boolHH '
TypeVariesBasedOnMemberTypeHH /
{II 	
getJJ 
{JJ 
returnJJ 
falseJJ 
;JJ 
}JJ  !
}KK 	
publicMM 
TypeMM 
GetInstanceTypeMM #
(MM# $
InjectContextMM$ 1
contextMM2 9
)MM9 :
{NN 	
returnOO 
typeofOO 
(OO 
TValueOO  
)OO  !
;OO! "
}PP 	
publicRR 
voidRR *
GetAllInstancesWithInjectSplitRR 2
(RR2 3
InjectContextSS 
contextSS !
,SS! "
ListSS# '
<SS' (
TypeValuePairSS( 5
>SS5 6
argsSS7 ;
,SS; <
outSS= @
ActionSSA G
injectActionSSH T
,SST U
ListSSV Z
<SSZ [
objectSS[ a
>SSa b
bufferSSc i
)SSi j
{TT 	
AssertUU 
.UU 
IsEqualUU 
(UU 
argsUU 
.UU  
CountUU  %
,UU% &
$numUU' (
)UU( )
;UU) *
AssertVV 
.VV 
	IsNotNullVV 
(VV 
contextVV $
)VV$ %
;VV% &
AssertXX 
.XX 
ThatXX 
(XX 
typeofXX 
(XX 
TValueXX %
)XX% &
.XX& '
DerivesFromOrEqualXX' 9
(XX9 :
contextXX: A
.XXA B

MemberTypeXXB L
)XXL M
)XXM N
;XXN O
AssertYY 
.YY 
ThatYY 
(YY 
argsYY 
[YY 
$numYY 
]YY 
.YY  
TypeYY  $
.YY$ %
DerivesFromOrEqualYY% 7
(YY7 8
typeofYY8 >
(YY> ?
TParam1YY? F
)YYF G
)YYG H
)YYH I
;YYI J
injectAction[[ 
=[[ 
null[[ 
;[[  
if\\ 
(\\ 
context\\ 
.\\ 
	Container\\ !
.\\! "
IsValidating\\" .
)\\. /
{]] 
buffer__ 
.__ 
Add__ 
(__ 
new__ 
ValidationMarker__ /
(__/ 0
typeof__0 6
(__6 7
TValue__7 =
)__= >
)__> ?
)__? @
;__@ A
}`` 
elseaa 
{bb 
buffercc 
.cc 
Addcc 
(cc 
_methoddd 
(dd 
contextee 
.ee  
	Containeree  )
,ee) *
(ff 
TParam1ff  
)ff  !
argsff! %
[ff% &
$numff& '
]ff' (
.ff( )
Valueff) .
)ff. /
)ff/ 0
;ff0 1
}gg 
}hh 	
}ii 
[mm 
NoReflectionBakingmm 
]mm 
publicnn 

classnn '
MethodProviderWithContainernn ,
<nn, -
TParam1nn- 4
,nn4 5
TParam2nn6 =
,nn= >
TValuenn? E
>nnE F
:nnG H
	IProvidernnI R
{oo 
readonlypp 
Funcpp 
<pp 
DiContainerpp !
,pp! "
TParam1pp# *
,pp* +
TParam2pp, 3
,pp3 4
TValuepp5 ;
>pp; <
_methodpp= D
;ppD E
publicrr '
MethodProviderWithContainerrr *
(rr* +
Funcrr+ /
<rr/ 0
DiContainerrr0 ;
,rr; <
TParam1rr= D
,rrD E
TParam2rrF M
,rrM N
TValuerrO U
>rrU V
methodrrW ]
)rr] ^
{ss 	
_methodtt 
=tt 
methodtt 
;tt 
}uu 	
publicww 
boolww 
IsCachedww 
{xx 	
getyy 
{yy 
returnyy 
falseyy 
;yy 
}yy  !
}zz 	
public|| 
bool|| '
TypeVariesBasedOnMemberType|| /
{}} 	
get~~ 
{~~ 
return~~ 
false~~ 
;~~ 
}~~  !
} 	
public
ÅÅ 
Type
ÅÅ 
GetInstanceType
ÅÅ #
(
ÅÅ# $
InjectContext
ÅÅ$ 1
context
ÅÅ2 9
)
ÅÅ9 :
{
ÇÇ 	
return
ÉÉ 
typeof
ÉÉ 
(
ÉÉ 
TValue
ÉÉ  
)
ÉÉ  !
;
ÉÉ! "
}
ÑÑ 	
public
ÜÜ 
void
ÜÜ ,
GetAllInstancesWithInjectSplit
ÜÜ 2
(
ÜÜ2 3
InjectContext
áá 
context
áá !
,
áá! "
List
áá# '
<
áá' (
TypeValuePair
áá( 5
>
áá5 6
args
áá7 ;
,
áá; <
out
áá= @
Action
ááA G
injectAction
ááH T
,
ááT U
List
ááV Z
<
ááZ [
object
áá[ a
>
ááa b
buffer
áác i
)
áái j
{
àà 	
Assert
ââ 
.
ââ 
IsEqual
ââ 
(
ââ 
args
ââ 
.
ââ  
Count
ââ  %
,
ââ% &
$num
ââ' (
)
ââ( )
;
ââ) *
Assert
ää 
.
ää 
	IsNotNull
ää 
(
ää 
context
ää $
)
ää$ %
;
ää% &
Assert
åå 
.
åå 
That
åå 
(
åå 
typeof
åå 
(
åå 
TValue
åå %
)
åå% &
.
åå& ' 
DerivesFromOrEqual
åå' 9
(
åå9 :
context
åå: A
.
ååA B

MemberType
ååB L
)
ååL M
)
ååM N
;
ååN O
Assert
çç 
.
çç 
That
çç 
(
çç 
args
çç 
[
çç 
$num
çç 
]
çç 
.
çç  
Type
çç  $
.
çç$ % 
DerivesFromOrEqual
çç% 7
(
çç7 8
typeof
çç8 >
(
çç> ?
TParam1
çç? F
)
ççF G
)
ççG H
)
ççH I
;
ççI J
Assert
éé 
.
éé 
That
éé 
(
éé 
args
éé 
[
éé 
$num
éé 
]
éé 
.
éé  
Type
éé  $
.
éé$ % 
DerivesFromOrEqual
éé% 7
(
éé7 8
typeof
éé8 >
(
éé> ?
TParam2
éé? F
)
ééF G
)
ééG H
)
ééH I
;
ééI J
injectAction
êê 
=
êê 
null
êê 
;
êê  
if
ëë 
(
ëë 
context
ëë 
.
ëë 
	Container
ëë !
.
ëë! "
IsValidating
ëë" .
)
ëë. /
{
íí 
buffer
îî 
.
îî 
Add
îî 
(
îî 
new
îî 
ValidationMarker
îî /
(
îî/ 0
typeof
îî0 6
(
îî6 7
TValue
îî7 =
)
îî= >
)
îî> ?
)
îî? @
;
îî@ A
}
ïï 
else
ññ 
{
óó 
buffer
òò 
.
òò 
Add
òò 
(
òò 
_method
ôô 
(
ôô 
context
öö 
.
öö  
	Container
öö  )
,
öö) *
(
õõ 
TParam1
õõ  
)
õõ  !
args
õõ! %
[
õõ% &
$num
õõ& '
]
õõ' (
.
õõ( )
Value
õõ) .
,
õõ. /
(
úú 
TParam2
úú  
)
úú  !
args
úú! %
[
úú% &
$num
úú& '
]
úú' (
.
úú( )
Value
úú) .
)
úú. /
)
úú/ 0
;
úú0 1
}
ùù 
}
ûû 	
}
üü 
[
££  
NoReflectionBaking
££ 
]
££ 
public
§§ 

class
§§ )
MethodProviderWithContainer
§§ ,
<
§§, -
TParam1
§§- 4
,
§§4 5
TParam2
§§6 =
,
§§= >
TParam3
§§? F
,
§§F G
TValue
§§H N
>
§§N O
:
§§P Q
	IProvider
§§R [
{
•• 
readonly
¶¶ 
Func
¶¶ 
<
¶¶ 
DiContainer
¶¶ !
,
¶¶! "
TParam1
¶¶# *
,
¶¶* +
TParam2
¶¶, 3
,
¶¶3 4
TParam3
¶¶5 <
,
¶¶< =
TValue
¶¶> D
>
¶¶D E
_method
¶¶F M
;
¶¶M N
public
®® )
MethodProviderWithContainer
®® *
(
®®* +
Func
®®+ /
<
®®/ 0
DiContainer
®®0 ;
,
®®; <
TParam1
®®= D
,
®®D E
TParam2
®®F M
,
®®M N
TParam3
®®O V
,
®®V W
TValue
®®X ^
>
®®^ _
method
®®` f
)
®®f g
{
©© 	
_method
™™ 
=
™™ 
method
™™ 
;
™™ 
}
´´ 	
public
≠≠ 
bool
≠≠ 
IsCached
≠≠ 
{
ÆÆ 	
get
ØØ 
{
ØØ 
return
ØØ 
false
ØØ 
;
ØØ 
}
ØØ  !
}
∞∞ 	
public
≤≤ 
bool
≤≤ )
TypeVariesBasedOnMemberType
≤≤ /
{
≥≥ 	
get
¥¥ 
{
¥¥ 
return
¥¥ 
false
¥¥ 
;
¥¥ 
}
¥¥  !
}
µµ 	
public
∑∑ 
Type
∑∑ 
GetInstanceType
∑∑ #
(
∑∑# $
InjectContext
∑∑$ 1
context
∑∑2 9
)
∑∑9 :
{
∏∏ 	
return
ππ 
typeof
ππ 
(
ππ 
TValue
ππ  
)
ππ  !
;
ππ! "
}
∫∫ 	
public
ºº 
void
ºº ,
GetAllInstancesWithInjectSplit
ºº 2
(
ºº2 3
InjectContext
ΩΩ 
context
ΩΩ !
,
ΩΩ! "
List
ΩΩ# '
<
ΩΩ' (
TypeValuePair
ΩΩ( 5
>
ΩΩ5 6
args
ΩΩ7 ;
,
ΩΩ; <
out
ΩΩ= @
Action
ΩΩA G
injectAction
ΩΩH T
,
ΩΩT U
List
ΩΩV Z
<
ΩΩZ [
object
ΩΩ[ a
>
ΩΩa b
buffer
ΩΩc i
)
ΩΩi j
{
ææ 	
Assert
øø 
.
øø 
IsEqual
øø 
(
øø 
args
øø 
.
øø  
Count
øø  %
,
øø% &
$num
øø' (
)
øø( )
;
øø) *
Assert
¿¿ 
.
¿¿ 
	IsNotNull
¿¿ 
(
¿¿ 
context
¿¿ $
)
¿¿$ %
;
¿¿% &
Assert
¬¬ 
.
¬¬ 
That
¬¬ 
(
¬¬ 
typeof
¬¬ 
(
¬¬ 
TValue
¬¬ %
)
¬¬% &
.
¬¬& ' 
DerivesFromOrEqual
¬¬' 9
(
¬¬9 :
context
¬¬: A
.
¬¬A B

MemberType
¬¬B L
)
¬¬L M
)
¬¬M N
;
¬¬N O
Assert
√√ 
.
√√ 
That
√√ 
(
√√ 
args
√√ 
[
√√ 
$num
√√ 
]
√√ 
.
√√  
Type
√√  $
.
√√$ % 
DerivesFromOrEqual
√√% 7
(
√√7 8
typeof
√√8 >
(
√√> ?
TParam1
√√? F
)
√√F G
)
√√G H
)
√√H I
;
√√I J
Assert
ƒƒ 
.
ƒƒ 
That
ƒƒ 
(
ƒƒ 
args
ƒƒ 
[
ƒƒ 
$num
ƒƒ 
]
ƒƒ 
.
ƒƒ  
Type
ƒƒ  $
.
ƒƒ$ % 
DerivesFromOrEqual
ƒƒ% 7
(
ƒƒ7 8
typeof
ƒƒ8 >
(
ƒƒ> ?
TParam2
ƒƒ? F
)
ƒƒF G
)
ƒƒG H
)
ƒƒH I
;
ƒƒI J
Assert
≈≈ 
.
≈≈ 
That
≈≈ 
(
≈≈ 
args
≈≈ 
[
≈≈ 
$num
≈≈ 
]
≈≈ 
.
≈≈  
Type
≈≈  $
.
≈≈$ % 
DerivesFromOrEqual
≈≈% 7
(
≈≈7 8
typeof
≈≈8 >
(
≈≈> ?
TParam3
≈≈? F
)
≈≈F G
)
≈≈G H
)
≈≈H I
;
≈≈I J
injectAction
«« 
=
«« 
null
«« 
;
««  
if
»» 
(
»» 
context
»» 
.
»» 
	Container
»» !
.
»»! "
IsValidating
»»" .
)
»». /
{
…… 
buffer
ÀÀ 
.
ÀÀ 
Add
ÀÀ 
(
ÀÀ 
new
ÀÀ 
ValidationMarker
ÀÀ /
(
ÀÀ/ 0
typeof
ÀÀ0 6
(
ÀÀ6 7
TValue
ÀÀ7 =
)
ÀÀ= >
)
ÀÀ> ?
)
ÀÀ? @
;
ÀÀ@ A
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
buffer
œœ 
.
œœ 
Add
œœ 
(
œœ 
_method
–– 
(
–– 
context
—— 
.
——  
	Container
——  )
,
——) *
(
““ 
TParam1
““  
)
““  !
args
““! %
[
““% &
$num
““& '
]
““' (
.
““( )
Value
““) .
,
““. /
(
”” 
TParam2
””  
)
””  !
args
””! %
[
””% &
$num
””& '
]
””' (
.
””( )
Value
””) .
,
””. /
(
‘‘ 
TParam3
‘‘  
)
‘‘  !
args
‘‘! %
[
‘‘% &
$num
‘‘& '
]
‘‘' (
.
‘‘( )
Value
‘‘) .
)
‘‘. /
)
‘‘/ 0
;
‘‘0 1
}
’’ 
}
÷÷ 	
}
◊◊ 
[
€€  
NoReflectionBaking
€€ 
]
€€ 
public
‹‹ 

class
‹‹ )
MethodProviderWithContainer
‹‹ ,
<
‹‹, -
TParam1
‹‹- 4
,
‹‹4 5
TParam2
‹‹6 =
,
‹‹= >
TParam3
‹‹? F
,
‹‹F G
TParam4
‹‹H O
,
‹‹O P
TValue
‹‹Q W
>
‹‹W X
:
‹‹Y Z
	IProvider
‹‹[ d
{
›› 
readonly
ﬁﬁ 
Func
‚‚ 
<
‚‚ 
DiContainer
‚‚ 
,
‚‚ 
TParam1
‚‚ %
,
‚‚% &
TParam2
‚‚' .
,
‚‚. /
TParam3
‚‚0 7
,
‚‚7 8
TParam4
‚‚9 @
,
‚‚@ A
TValue
‚‚B H
>
‚‚H I
_method
‚‚J Q
;
‚‚Q R
public
‰‰ )
MethodProviderWithContainer
‰‰ *
(
‰‰* +
Func
ËË 
<
ËË 
DiContainer
ËË 
,
ËË 
TParam1
ËË %
,
ËË% &
TParam2
ËË' .
,
ËË. /
TParam3
ËË0 7
,
ËË7 8
TParam4
ËË9 @
,
ËË@ A
TValue
ËËB H
>
ËËH I
method
ËËJ P
)
ËËP Q
{
ÈÈ 	
_method
ÍÍ 
=
ÍÍ 
method
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÌÌ 
bool
ÌÌ 
IsCached
ÌÌ 
{
ÓÓ 	
get
ÔÔ 
{
ÔÔ 
return
ÔÔ 
false
ÔÔ 
;
ÔÔ 
}
ÔÔ  !
}
 	
public
ÚÚ 
bool
ÚÚ )
TypeVariesBasedOnMemberType
ÚÚ /
{
ÛÛ 	
get
ÙÙ 
{
ÙÙ 
return
ÙÙ 
false
ÙÙ 
;
ÙÙ 
}
ÙÙ  !
}
ıı 	
public
˜˜ 
Type
˜˜ 
GetInstanceType
˜˜ #
(
˜˜# $
InjectContext
˜˜$ 1
context
˜˜2 9
)
˜˜9 :
{
¯¯ 	
return
˘˘ 
typeof
˘˘ 
(
˘˘ 
TValue
˘˘  
)
˘˘  !
;
˘˘! "
}
˙˙ 	
public
¸¸ 
void
¸¸ ,
GetAllInstancesWithInjectSplit
¸¸ 2
(
¸¸2 3
InjectContext
˝˝ 
context
˝˝ !
,
˝˝! "
List
˝˝# '
<
˝˝' (
TypeValuePair
˝˝( 5
>
˝˝5 6
args
˝˝7 ;
,
˝˝; <
out
˝˝= @
Action
˝˝A G
injectAction
˝˝H T
,
˝˝T U
List
˝˝V Z
<
˝˝Z [
object
˝˝[ a
>
˝˝a b
buffer
˝˝c i
)
˝˝i j
{
˛˛ 	
Assert
ˇˇ 
.
ˇˇ 
IsEqual
ˇˇ 
(
ˇˇ 
args
ˇˇ 
.
ˇˇ  
Count
ˇˇ  %
,
ˇˇ% &
$num
ˇˇ' (
)
ˇˇ( )
;
ˇˇ) *
Assert
ÄÄ 
.
ÄÄ 
	IsNotNull
ÄÄ 
(
ÄÄ 
context
ÄÄ $
)
ÄÄ$ %
;
ÄÄ% &
Assert
ÇÇ 
.
ÇÇ 
That
ÇÇ 
(
ÇÇ 
typeof
ÇÇ 
(
ÇÇ 
TValue
ÇÇ %
)
ÇÇ% &
.
ÇÇ& ' 
DerivesFromOrEqual
ÇÇ' 9
(
ÇÇ9 :
context
ÇÇ: A
.
ÇÇA B

MemberType
ÇÇB L
)
ÇÇL M
)
ÇÇM N
;
ÇÇN O
Assert
ÉÉ 
.
ÉÉ 
That
ÉÉ 
(
ÉÉ 
args
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
.
ÉÉ  
Type
ÉÉ  $
.
ÉÉ$ % 
DerivesFromOrEqual
ÉÉ% 7
(
ÉÉ7 8
typeof
ÉÉ8 >
(
ÉÉ> ?
TParam1
ÉÉ? F
)
ÉÉF G
)
ÉÉG H
)
ÉÉH I
;
ÉÉI J
Assert
ÑÑ 
.
ÑÑ 
That
ÑÑ 
(
ÑÑ 
args
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
.
ÑÑ  
Type
ÑÑ  $
.
ÑÑ$ % 
DerivesFromOrEqual
ÑÑ% 7
(
ÑÑ7 8
typeof
ÑÑ8 >
(
ÑÑ> ?
TParam2
ÑÑ? F
)
ÑÑF G
)
ÑÑG H
)
ÑÑH I
;
ÑÑI J
Assert
ÖÖ 
.
ÖÖ 
That
ÖÖ 
(
ÖÖ 
args
ÖÖ 
[
ÖÖ 
$num
ÖÖ 
]
ÖÖ 
.
ÖÖ  
Type
ÖÖ  $
.
ÖÖ$ % 
DerivesFromOrEqual
ÖÖ% 7
(
ÖÖ7 8
typeof
ÖÖ8 >
(
ÖÖ> ?
TParam3
ÖÖ? F
)
ÖÖF G
)
ÖÖG H
)
ÖÖH I
;
ÖÖI J
Assert
ÜÜ 
.
ÜÜ 
That
ÜÜ 
(
ÜÜ 
args
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
.
ÜÜ  
Type
ÜÜ  $
.
ÜÜ$ % 
DerivesFromOrEqual
ÜÜ% 7
(
ÜÜ7 8
typeof
ÜÜ8 >
(
ÜÜ> ?
TParam4
ÜÜ? F
)
ÜÜF G
)
ÜÜG H
)
ÜÜH I
;
ÜÜI J
injectAction
àà 
=
àà 
null
àà 
;
àà  
if
ââ 
(
ââ 
context
ââ 
.
ââ 
	Container
ââ !
.
ââ! "
IsValidating
ââ" .
)
ââ. /
{
ää 
buffer
åå 
.
åå 
Add
åå 
(
åå 
new
åå 
ValidationMarker
åå /
(
åå/ 0
typeof
åå0 6
(
åå6 7
TValue
åå7 =
)
åå= >
)
åå> ?
)
åå? @
;
åå@ A
}
çç 
else
éé 
{
èè 
buffer
êê 
.
êê 
Add
êê 
(
êê 
_method
ëë 
(
ëë 
context
íí 
.
íí  
	Container
íí  )
,
íí) *
(
ìì 
TParam1
ìì  
)
ìì  !
args
ìì! %
[
ìì% &
$num
ìì& '
]
ìì' (
.
ìì( )
Value
ìì) .
,
ìì. /
(
îî 
TParam2
îî  
)
îî  !
args
îî! %
[
îî% &
$num
îî& '
]
îî' (
.
îî( )
Value
îî) .
,
îî. /
(
ïï 
TParam3
ïï  
)
ïï  !
args
ïï! %
[
ïï% &
$num
ïï& '
]
ïï' (
.
ïï( )
Value
ïï) .
,
ïï. /
(
ññ 
TParam4
ññ  
)
ññ  !
args
ññ! %
[
ññ% &
$num
ññ& '
]
ññ' (
.
ññ( )
Value
ññ) .
)
ññ. /
)
ññ/ 0
;
ññ0 1
}
óó 
}
òò 	
}
ôô 
[
ùù  
NoReflectionBaking
ùù 
]
ùù 
public
ûû 

class
ûû )
MethodProviderWithContainer
ûû ,
<
ûû, -
TParam1
ûû- 4
,
ûû4 5
TParam2
ûû6 =
,
ûû= >
TParam3
ûû? F
,
ûûF G
TParam4
ûûH O
,
ûûO P
TParam5
ûûQ X
,
ûûX Y
TValue
ûûZ `
>
ûû` a
:
ûûb c
	IProvider
ûûd m
{
üü 
readonly
†† 
Func
§§ 
<
§§ 
DiContainer
§§ 
,
§§ 
TParam1
§§ %
,
§§% &
TParam2
§§' .
,
§§. /
TParam3
§§0 7
,
§§7 8
TParam4
§§9 @
,
§§@ A
TParam5
§§B I
,
§§I J
TValue
§§K Q
>
§§Q R
_method
§§S Z
;
§§Z [
public
¶¶ )
MethodProviderWithContainer
¶¶ *
(
¶¶* +
Func
™™ 
<
™™ 
DiContainer
™™ 
,
™™ 
TParam1
™™ %
,
™™% &
TParam2
™™' .
,
™™. /
TParam3
™™0 7
,
™™7 8
TParam4
™™9 @
,
™™@ A
TParam5
™™B I
,
™™I J
TValue
™™K Q
>
™™Q R
method
™™S Y
)
™™Y Z
{
´´ 	
_method
¨¨ 
=
¨¨ 
method
¨¨ 
;
¨¨ 
}
≠≠ 	
public
ØØ 
bool
ØØ 
IsCached
ØØ 
{
∞∞ 	
get
±± 
{
±± 
return
±± 
false
±± 
;
±± 
}
±±  !
}
≤≤ 	
public
¥¥ 
bool
¥¥ )
TypeVariesBasedOnMemberType
¥¥ /
{
µµ 	
get
∂∂ 
{
∂∂ 
return
∂∂ 
false
∂∂ 
;
∂∂ 
}
∂∂  !
}
∑∑ 	
public
ππ 
Type
ππ 
GetInstanceType
ππ #
(
ππ# $
InjectContext
ππ$ 1
context
ππ2 9
)
ππ9 :
{
∫∫ 	
return
ªª 
typeof
ªª 
(
ªª 
TValue
ªª  
)
ªª  !
;
ªª! "
}
ºº 	
public
ææ 
void
ææ ,
GetAllInstancesWithInjectSplit
ææ 2
(
ææ2 3
InjectContext
øø 
context
øø !
,
øø! "
List
øø# '
<
øø' (
TypeValuePair
øø( 5
>
øø5 6
args
øø7 ;
,
øø; <
out
øø= @
Action
øøA G
injectAction
øøH T
,
øøT U
List
øøV Z
<
øøZ [
object
øø[ a
>
øøa b
buffer
øøc i
)
øøi j
{
¿¿ 	
Assert
¡¡ 
.
¡¡ 
IsEqual
¡¡ 
(
¡¡ 
args
¡¡ 
.
¡¡  
Count
¡¡  %
,
¡¡% &
$num
¡¡' (
)
¡¡( )
;
¡¡) *
Assert
¬¬ 
.
¬¬ 
	IsNotNull
¬¬ 
(
¬¬ 
context
¬¬ $
)
¬¬$ %
;
¬¬% &
Assert
ƒƒ 
.
ƒƒ 
That
ƒƒ 
(
ƒƒ 
typeof
ƒƒ 
(
ƒƒ 
TValue
ƒƒ %
)
ƒƒ% &
.
ƒƒ& ' 
DerivesFromOrEqual
ƒƒ' 9
(
ƒƒ9 :
context
ƒƒ: A
.
ƒƒA B

MemberType
ƒƒB L
)
ƒƒL M
)
ƒƒM N
;
ƒƒN O
Assert
≈≈ 
.
≈≈ 
That
≈≈ 
(
≈≈ 
args
≈≈ 
[
≈≈ 
$num
≈≈ 
]
≈≈ 
.
≈≈  
Type
≈≈  $
.
≈≈$ % 
DerivesFromOrEqual
≈≈% 7
(
≈≈7 8
typeof
≈≈8 >
(
≈≈> ?
TParam1
≈≈? F
)
≈≈F G
)
≈≈G H
)
≈≈H I
;
≈≈I J
Assert
∆∆ 
.
∆∆ 
That
∆∆ 
(
∆∆ 
args
∆∆ 
[
∆∆ 
$num
∆∆ 
]
∆∆ 
.
∆∆  
Type
∆∆  $
.
∆∆$ % 
DerivesFromOrEqual
∆∆% 7
(
∆∆7 8
typeof
∆∆8 >
(
∆∆> ?
TParam2
∆∆? F
)
∆∆F G
)
∆∆G H
)
∆∆H I
;
∆∆I J
Assert
«« 
.
«« 
That
«« 
(
«« 
args
«« 
[
«« 
$num
«« 
]
«« 
.
««  
Type
««  $
.
««$ % 
DerivesFromOrEqual
««% 7
(
««7 8
typeof
««8 >
(
««> ?
TParam3
««? F
)
««F G
)
««G H
)
««H I
;
««I J
Assert
»» 
.
»» 
That
»» 
(
»» 
args
»» 
[
»» 
$num
»» 
]
»» 
.
»»  
Type
»»  $
.
»»$ % 
DerivesFromOrEqual
»»% 7
(
»»7 8
typeof
»»8 >
(
»»> ?
TParam4
»»? F
)
»»F G
)
»»G H
)
»»H I
;
»»I J
Assert
…… 
.
…… 
That
…… 
(
…… 
args
…… 
[
…… 
$num
…… 
]
…… 
.
……  
Type
……  $
.
……$ % 
DerivesFromOrEqual
……% 7
(
……7 8
typeof
……8 >
(
……> ?
TParam5
……? F
)
……F G
)
……G H
)
……H I
;
……I J
injectAction
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ  
if
ÃÃ 
(
ÃÃ 
context
ÃÃ 
.
ÃÃ 
	Container
ÃÃ !
.
ÃÃ! "
IsValidating
ÃÃ" .
)
ÃÃ. /
{
ÕÕ 
buffer
œœ 
.
œœ 
Add
œœ 
(
œœ 
new
œœ 
ValidationMarker
œœ /
(
œœ/ 0
typeof
œœ0 6
(
œœ6 7
TValue
œœ7 =
)
œœ= >
)
œœ> ?
)
œœ? @
;
œœ@ A
}
–– 
else
—— 
{
““ 
buffer
”” 
.
”” 
Add
”” 
(
”” 
_method
‘‘ 
(
‘‘ 
context
’’ 
.
’’  
	Container
’’  )
,
’’) *
(
÷÷ 
TParam1
÷÷  
)
÷÷  !
args
÷÷! %
[
÷÷% &
$num
÷÷& '
]
÷÷' (
.
÷÷( )
Value
÷÷) .
,
÷÷. /
(
◊◊ 
TParam2
◊◊  
)
◊◊  !
args
◊◊! %
[
◊◊% &
$num
◊◊& '
]
◊◊' (
.
◊◊( )
Value
◊◊) .
,
◊◊. /
(
ÿÿ 
TParam3
ÿÿ  
)
ÿÿ  !
args
ÿÿ! %
[
ÿÿ% &
$num
ÿÿ& '
]
ÿÿ' (
.
ÿÿ( )
Value
ÿÿ) .
,
ÿÿ. /
(
ŸŸ 
TParam4
ŸŸ  
)
ŸŸ  !
args
ŸŸ! %
[
ŸŸ% &
$num
ŸŸ& '
]
ŸŸ' (
.
ŸŸ( )
Value
ŸŸ) .
,
ŸŸ. /
(
⁄⁄ 
TParam5
⁄⁄  
)
⁄⁄  !
args
⁄⁄! %
[
⁄⁄% &
$num
⁄⁄& '
]
⁄⁄' (
.
⁄⁄( )
Value
⁄⁄) .
)
⁄⁄. /
)
⁄⁄/ 0
;
⁄⁄0 1
}
€€ 
}
‹‹ 	
}
›› 
[
··  
NoReflectionBaking
·· 
]
·· 
public
‚‚ 

class
‚‚ )
MethodProviderWithContainer
‚‚ ,
<
‚‚, -
TParam1
‚‚- 4
,
‚‚4 5
TParam2
‚‚6 =
,
‚‚= >
TParam3
‚‚? F
,
‚‚F G
TParam4
‚‚H O
,
‚‚O P
TParam5
‚‚Q X
,
‚‚X Y
TParam6
‚‚Z a
,
‚‚a b
TValue
‚‚c i
>
‚‚i j
:
‚‚k l
	IProvider
‚‚m v
{
„„ 
readonly
‰‰ 
Func
ËË 
<
ËË 
DiContainer
ËË 
,
ËË 
TParam1
ËË %
,
ËË% &
TParam2
ËË' .
,
ËË. /
TParam3
ËË0 7
,
ËË7 8
TParam4
ËË9 @
,
ËË@ A
TParam5
ËËB I
,
ËËI J
TParam6
ËËK R
,
ËËR S
TValue
ËËT Z
>
ËËZ [
_method
ËË\ c
;
ËËc d
public
ÍÍ )
MethodProviderWithContainer
ÍÍ *
(
ÍÍ* +
Func
ÓÓ 
<
ÓÓ 
DiContainer
ÓÓ 
,
ÓÓ 
TParam1
ÓÓ %
,
ÓÓ% &
TParam2
ÓÓ' .
,
ÓÓ. /
TParam3
ÓÓ0 7
,
ÓÓ7 8
TParam4
ÓÓ9 @
,
ÓÓ@ A
TParam5
ÓÓB I
,
ÓÓI J
TParam6
ÓÓK R
,
ÓÓR S
TValue
ÓÓT Z
>
ÓÓZ [
method
ÓÓ\ b
)
ÓÓb c
{
ÔÔ 	
_method
 
=
 
method
 
;
 
}
ÒÒ 	
public
ÛÛ 
bool
ÛÛ 
IsCached
ÛÛ 
{
ÙÙ 	
get
ıı 
{
ıı 
return
ıı 
false
ıı 
;
ıı 
}
ıı  !
}
ˆˆ 	
public
¯¯ 
bool
¯¯ )
TypeVariesBasedOnMemberType
¯¯ /
{
˘˘ 	
get
˙˙ 
{
˙˙ 
return
˙˙ 
false
˙˙ 
;
˙˙ 
}
˙˙  !
}
˚˚ 	
public
˝˝ 
Type
˝˝ 
GetInstanceType
˝˝ #
(
˝˝# $
InjectContext
˝˝$ 1
context
˝˝2 9
)
˝˝9 :
{
˛˛ 	
return
ˇˇ 
typeof
ˇˇ 
(
ˇˇ 
TValue
ˇˇ  
)
ˇˇ  !
;
ˇˇ! "
}
ÄÄ 	
public
ÇÇ 
void
ÇÇ ,
GetAllInstancesWithInjectSplit
ÇÇ 2
(
ÇÇ2 3
InjectContext
ÉÉ 
context
ÉÉ !
,
ÉÉ! "
List
ÉÉ# '
<
ÉÉ' (
TypeValuePair
ÉÉ( 5
>
ÉÉ5 6
args
ÉÉ7 ;
,
ÉÉ; <
out
ÉÉ= @
Action
ÉÉA G
injectAction
ÉÉH T
,
ÉÉT U
List
ÉÉV Z
<
ÉÉZ [
object
ÉÉ[ a
>
ÉÉa b
buffer
ÉÉc i
)
ÉÉi j
{
ÑÑ 	
Assert
ÖÖ 
.
ÖÖ 
IsEqual
ÖÖ 
(
ÖÖ 
args
ÖÖ 
.
ÖÖ  
Count
ÖÖ  %
,
ÖÖ% &
$num
ÖÖ' (
)
ÖÖ( )
;
ÖÖ) *
Assert
ÜÜ 
.
ÜÜ 
	IsNotNull
ÜÜ 
(
ÜÜ 
context
ÜÜ $
)
ÜÜ$ %
;
ÜÜ% &
Assert
àà 
.
àà 
That
àà 
(
àà 
typeof
àà 
(
àà 
TValue
àà %
)
àà% &
.
àà& ' 
DerivesFromOrEqual
àà' 9
(
àà9 :
context
àà: A
.
ààA B

MemberType
ààB L
)
ààL M
)
ààM N
;
ààN O
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
args
ââ 
[
ââ 
$num
ââ 
]
ââ 
.
ââ  
Type
ââ  $
.
ââ$ % 
DerivesFromOrEqual
ââ% 7
(
ââ7 8
typeof
ââ8 >
(
ââ> ?
TParam1
ââ? F
)
ââF G
)
ââG H
)
ââH I
;
ââI J
Assert
ää 
.
ää 
That
ää 
(
ää 
args
ää 
[
ää 
$num
ää 
]
ää 
.
ää  
Type
ää  $
.
ää$ % 
DerivesFromOrEqual
ää% 7
(
ää7 8
typeof
ää8 >
(
ää> ?
TParam2
ää? F
)
ääF G
)
ääG H
)
ääH I
;
ääI J
Assert
ãã 
.
ãã 
That
ãã 
(
ãã 
args
ãã 
[
ãã 
$num
ãã 
]
ãã 
.
ãã  
Type
ãã  $
.
ãã$ % 
DerivesFromOrEqual
ãã% 7
(
ãã7 8
typeof
ãã8 >
(
ãã> ?
TParam3
ãã? F
)
ããF G
)
ããG H
)
ããH I
;
ããI J
Assert
åå 
.
åå 
That
åå 
(
åå 
args
åå 
[
åå 
$num
åå 
]
åå 
.
åå  
Type
åå  $
.
åå$ % 
DerivesFromOrEqual
åå% 7
(
åå7 8
typeof
åå8 >
(
åå> ?
TParam4
åå? F
)
ååF G
)
ååG H
)
ååH I
;
ååI J
Assert
çç 
.
çç 
That
çç 
(
çç 
args
çç 
[
çç 
$num
çç 
]
çç 
.
çç  
Type
çç  $
.
çç$ % 
DerivesFromOrEqual
çç% 7
(
çç7 8
typeof
çç8 >
(
çç> ?
TParam5
çç? F
)
ççF G
)
ççG H
)
ççH I
;
ççI J
Assert
éé 
.
éé 
That
éé 
(
éé 
args
éé 
[
éé 
$num
éé 
]
éé 
.
éé  
Type
éé  $
.
éé$ % 
DerivesFromOrEqual
éé% 7
(
éé7 8
typeof
éé8 >
(
éé> ?
TParam6
éé? F
)
ééF G
)
ééG H
)
ééH I
;
ééI J
injectAction
êê 
=
êê 
null
êê 
;
êê  
if
ëë 
(
ëë 
context
ëë 
.
ëë 
	Container
ëë !
.
ëë! "
IsValidating
ëë" .
)
ëë. /
{
íí 
buffer
îî 
.
îî 
Add
îî 
(
îî 
new
îî 
ValidationMarker
îî /
(
îî/ 0
typeof
îî0 6
(
îî6 7
TValue
îî7 =
)
îî= >
)
îî> ?
)
îî? @
;
îî@ A
}
ïï 
else
ññ 
{
óó 
buffer
òò 
.
òò 
Add
òò 
(
òò 
_method
ôô 
(
ôô 
context
öö 
.
öö  
	Container
öö  )
,
öö) *
(
õõ 
TParam1
õõ  
)
õõ  !
args
õõ! %
[
õõ% &
$num
õõ& '
]
õõ' (
.
õõ( )
Value
õõ) .
,
õõ. /
(
úú 
TParam2
úú  
)
úú  !
args
úú! %
[
úú% &
$num
úú& '
]
úú' (
.
úú( )
Value
úú) .
,
úú. /
(
ùù 
TParam3
ùù  
)
ùù  !
args
ùù! %
[
ùù% &
$num
ùù& '
]
ùù' (
.
ùù( )
Value
ùù) .
,
ùù. /
(
ûû 
TParam4
ûû  
)
ûû  !
args
ûû! %
[
ûû% &
$num
ûû& '
]
ûû' (
.
ûû( )
Value
ûû) .
,
ûû. /
(
üü 
TParam5
üü  
)
üü  !
args
üü! %
[
üü% &
$num
üü& '
]
üü' (
.
üü( )
Value
üü) .
,
üü. /
(
†† 
TParam6
††  
)
††  !
args
††! %
[
††% &
$num
††& '
]
††' (
.
††( )
Value
††) .
)
††. /
)
††/ 0
;
††0 1
}
°° 
}
¢¢ 	
}
££ 
[
ßß  
NoReflectionBaking
ßß 
]
ßß 
public
®® 

class
®® )
MethodProviderWithContainer
®® ,
<
®®, -
TParam1
®®- 4
,
®®4 5
TParam2
®®6 =
,
®®= >
TParam3
®®? F
,
®®F G
TParam4
®®H O
,
®®O P
TParam5
®®Q X
,
®®X Y
TParam6
®®Z a
,
®®a b
TParam7
®®c j
,
®®j k
TParam8
®®l s
,
®®s t
TParam9
®®u |
,
®®| }
TParam10®®~ Ü
,®®Ü á
TValue®®à é
>®®é è
:®®ê ë
	IProvider®®í õ
{
©© 
readonly
™™ 
Func
ÆÆ 
<
ÆÆ 
DiContainer
ÆÆ 
,
ÆÆ 
TParam1
ÆÆ %
,
ÆÆ% &
TParam2
ÆÆ' .
,
ÆÆ. /
TParam3
ÆÆ0 7
,
ÆÆ7 8
TParam4
ÆÆ9 @
,
ÆÆ@ A
TParam5
ÆÆB I
,
ÆÆI J
TParam6
ÆÆK R
,
ÆÆR S
TParam7
ÆÆT [
,
ÆÆ[ \
TParam8
ÆÆ] d
,
ÆÆd e
TParam9
ÆÆf m
,
ÆÆm n
TParam10
ÆÆo w
,
ÆÆw x
TValue
ÆÆy 
>ÆÆ Ä
_methodÆÆÅ à
;ÆÆà â
public
∞∞ )
MethodProviderWithContainer
∞∞ *
(
∞∞* +
Func
¥¥ 
<
¥¥ 
DiContainer
¥¥ 
,
¥¥ 
TParam1
¥¥ %
,
¥¥% &
TParam2
¥¥' .
,
¥¥. /
TParam3
¥¥0 7
,
¥¥7 8
TParam4
¥¥9 @
,
¥¥@ A
TParam5
¥¥B I
,
¥¥I J
TParam6
¥¥K R
,
¥¥R S
TParam7
¥¥T [
,
¥¥[ \
TParam8
¥¥] d
,
¥¥d e
TParam9
¥¥f m
,
¥¥m n
TParam10
¥¥o w
,
¥¥w x
TValue
¥¥y 
>¥¥ Ä
method¥¥Å á
)¥¥á à
{
µµ 	
_method
∂∂ 
=
∂∂ 
method
∂∂ 
;
∂∂ 
}
∑∑ 	
public
ππ 
bool
ππ 
IsCached
ππ 
{
∫∫ 	
get
ªª 
{
ªª 
return
ªª 
false
ªª 
;
ªª 
}
ªª  !
}
ºº 	
public
ææ 
bool
ææ )
TypeVariesBasedOnMemberType
ææ /
{
øø 	
get
¿¿ 
{
¿¿ 
return
¿¿ 
false
¿¿ 
;
¿¿ 
}
¿¿  !
}
¡¡ 	
public
√√ 
Type
√√ 
GetInstanceType
√√ #
(
√√# $
InjectContext
√√$ 1
context
√√2 9
)
√√9 :
{
ƒƒ 	
return
≈≈ 
typeof
≈≈ 
(
≈≈ 
TValue
≈≈  
)
≈≈  !
;
≈≈! "
}
∆∆ 	
public
»» 
void
»» ,
GetAllInstancesWithInjectSplit
»» 2
(
»»2 3
InjectContext
…… 
context
…… !
,
……! "
List
……# '
<
……' (
TypeValuePair
……( 5
>
……5 6
args
……7 ;
,
……; <
out
……= @
Action
……A G
injectAction
……H T
,
……T U
List
……V Z
<
……Z [
object
……[ a
>
……a b
buffer
……c i
)
……i j
{
   	
Assert
ÀÀ 
.
ÀÀ 
IsEqual
ÀÀ 
(
ÀÀ 
args
ÀÀ 
.
ÀÀ  
Count
ÀÀ  %
,
ÀÀ% &
$num
ÀÀ' )
)
ÀÀ) *
;
ÀÀ* +
Assert
ÃÃ 
.
ÃÃ 
	IsNotNull
ÃÃ 
(
ÃÃ 
context
ÃÃ $
)
ÃÃ$ %
;
ÃÃ% &
Assert
ŒŒ 
.
ŒŒ 
That
ŒŒ 
(
ŒŒ 
typeof
ŒŒ 
(
ŒŒ 
TValue
ŒŒ %
)
ŒŒ% &
.
ŒŒ& ' 
DerivesFromOrEqual
ŒŒ' 9
(
ŒŒ9 :
context
ŒŒ: A
.
ŒŒA B

MemberType
ŒŒB L
)
ŒŒL M
)
ŒŒM N
;
ŒŒN O
Assert
œœ 
.
œœ 
That
œœ 
(
œœ 
args
œœ 
[
œœ 
$num
œœ 
]
œœ 
.
œœ  
Type
œœ  $
.
œœ$ % 
DerivesFromOrEqual
œœ% 7
(
œœ7 8
typeof
œœ8 >
(
œœ> ?
TParam1
œœ? F
)
œœF G
)
œœG H
)
œœH I
;
œœI J
Assert
–– 
.
–– 
That
–– 
(
–– 
args
–– 
[
–– 
$num
–– 
]
–– 
.
––  
Type
––  $
.
––$ % 
DerivesFromOrEqual
––% 7
(
––7 8
typeof
––8 >
(
––> ?
TParam2
––? F
)
––F G
)
––G H
)
––H I
;
––I J
Assert
—— 
.
—— 
That
—— 
(
—— 
args
—— 
[
—— 
$num
—— 
]
—— 
.
——  
Type
——  $
.
——$ % 
DerivesFromOrEqual
——% 7
(
——7 8
typeof
——8 >
(
——> ?
TParam3
——? F
)
——F G
)
——G H
)
——H I
;
——I J
Assert
““ 
.
““ 
That
““ 
(
““ 
args
““ 
[
““ 
$num
““ 
]
““ 
.
““  
Type
““  $
.
““$ % 
DerivesFromOrEqual
““% 7
(
““7 8
typeof
““8 >
(
““> ?
TParam4
““? F
)
““F G
)
““G H
)
““H I
;
““I J
Assert
”” 
.
”” 
That
”” 
(
”” 
args
”” 
[
”” 
$num
”” 
]
”” 
.
””  
Type
””  $
.
””$ % 
DerivesFromOrEqual
””% 7
(
””7 8
typeof
””8 >
(
””> ?
TParam5
””? F
)
””F G
)
””G H
)
””H I
;
””I J
Assert
‘‘ 
.
‘‘ 
That
‘‘ 
(
‘‘ 
args
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
.
‘‘  
Type
‘‘  $
.
‘‘$ % 
DerivesFromOrEqual
‘‘% 7
(
‘‘7 8
typeof
‘‘8 >
(
‘‘> ?
TParam6
‘‘? F
)
‘‘F G
)
‘‘G H
)
‘‘H I
;
‘‘I J
Assert
’’ 
.
’’ 
That
’’ 
(
’’ 
args
’’ 
[
’’ 
$num
’’ 
]
’’ 
.
’’  
Type
’’  $
.
’’$ % 
DerivesFromOrEqual
’’% 7
(
’’7 8
typeof
’’8 >
(
’’> ?
TParam7
’’? F
)
’’F G
)
’’G H
)
’’H I
;
’’I J
Assert
÷÷ 
.
÷÷ 
That
÷÷ 
(
÷÷ 
args
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
.
÷÷  
Type
÷÷  $
.
÷÷$ % 
DerivesFromOrEqual
÷÷% 7
(
÷÷7 8
typeof
÷÷8 >
(
÷÷> ?
TParam8
÷÷? F
)
÷÷F G
)
÷÷G H
)
÷÷H I
;
÷÷I J
Assert
◊◊ 
.
◊◊ 
That
◊◊ 
(
◊◊ 
args
◊◊ 
[
◊◊ 
$num
◊◊ 
]
◊◊ 
.
◊◊  
Type
◊◊  $
.
◊◊$ % 
DerivesFromOrEqual
◊◊% 7
(
◊◊7 8
typeof
◊◊8 >
(
◊◊> ?
TParam9
◊◊? F
)
◊◊F G
)
◊◊G H
)
◊◊H I
;
◊◊I J
Assert
ÿÿ 
.
ÿÿ 
That
ÿÿ 
(
ÿÿ 
args
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
.
ÿÿ  
Type
ÿÿ  $
.
ÿÿ$ % 
DerivesFromOrEqual
ÿÿ% 7
(
ÿÿ7 8
typeof
ÿÿ8 >
(
ÿÿ> ?
TParam10
ÿÿ? G
)
ÿÿG H
)
ÿÿH I
)
ÿÿI J
;
ÿÿJ K
injectAction
⁄⁄ 
=
⁄⁄ 
null
⁄⁄ 
;
⁄⁄  
if
€€ 
(
€€ 
context
€€ 
.
€€ 
	Container
€€ !
.
€€! "
IsValidating
€€" .
)
€€. /
{
‹‹ 
buffer
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ 
(
ﬁﬁ 
new
ﬁﬁ 
ValidationMarker
ﬁﬁ /
(
ﬁﬁ/ 0
typeof
ﬁﬁ0 6
(
ﬁﬁ6 7
TValue
ﬁﬁ7 =
)
ﬁﬁ= >
)
ﬁﬁ> ?
)
ﬁﬁ? @
;
ﬁﬁ@ A
}
ﬂﬂ 
else
‡‡ 
{
·· 
buffer
‚‚ 
.
‚‚ 
Add
‚‚ 
(
‚‚ 
_method
„„ 
(
„„ 
context
‰‰ 
.
‰‰  
	Container
‰‰  )
,
‰‰) *
(
ÂÂ 
TParam1
ÂÂ  
)
ÂÂ  !
args
ÂÂ! %
[
ÂÂ% &
$num
ÂÂ& '
]
ÂÂ' (
.
ÂÂ( )
Value
ÂÂ) .
,
ÂÂ. /
(
ÊÊ 
TParam2
ÊÊ  
)
ÊÊ  !
args
ÊÊ! %
[
ÊÊ% &
$num
ÊÊ& '
]
ÊÊ' (
.
ÊÊ( )
Value
ÊÊ) .
,
ÊÊ. /
(
ÁÁ 
TParam3
ÁÁ  
)
ÁÁ  !
args
ÁÁ! %
[
ÁÁ% &
$num
ÁÁ& '
]
ÁÁ' (
.
ÁÁ( )
Value
ÁÁ) .
,
ÁÁ. /
(
ËË 
TParam4
ËË  
)
ËË  !
args
ËË! %
[
ËË% &
$num
ËË& '
]
ËË' (
.
ËË( )
Value
ËË) .
,
ËË. /
(
ÈÈ 
TParam5
ÈÈ  
)
ÈÈ  !
args
ÈÈ! %
[
ÈÈ% &
$num
ÈÈ& '
]
ÈÈ' (
.
ÈÈ( )
Value
ÈÈ) .
,
ÈÈ. /
(
ÍÍ 
TParam6
ÍÍ  
)
ÍÍ  !
args
ÍÍ! %
[
ÍÍ% &
$num
ÍÍ& '
]
ÍÍ' (
.
ÍÍ( )
Value
ÍÍ) .
,
ÍÍ. /
(
ÎÎ 
TParam7
ÎÎ  
)
ÎÎ  !
args
ÎÎ! %
[
ÎÎ% &
$num
ÎÎ& '
]
ÎÎ' (
.
ÎÎ( )
Value
ÎÎ) .
,
ÎÎ. /
(
ÏÏ 
TParam8
ÏÏ  
)
ÏÏ  !
args
ÏÏ! %
[
ÏÏ% &
$num
ÏÏ& '
]
ÏÏ' (
.
ÏÏ( )
Value
ÏÏ) .
,
ÏÏ. /
(
ÌÌ 
TParam9
ÌÌ  
)
ÌÌ  !
args
ÌÌ! %
[
ÌÌ% &
$num
ÌÌ& '
]
ÌÌ' (
.
ÌÌ( )
Value
ÌÌ) .
,
ÌÌ. /
(
ÓÓ 
TParam10
ÓÓ !
)
ÓÓ! "
args
ÓÓ" &
[
ÓÓ& '
$num
ÓÓ' (
]
ÓÓ( )
.
ÓÓ) *
Value
ÓÓ* /
)
ÓÓ/ 0
)
ÓÓ0 1
;
ÓÓ1 2
}
ÔÔ 
}
 	
}
ÒÒ 
}ÚÚ ±ª
gC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ReflectionInfoTypeInfoConverter.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
public 

static 
class +
ReflectionInfoTypeInfoConverter 7
{ 
public 
static 
InjectTypeInfo $
.$ %
InjectMethodInfo% 5
ConvertMethod6 C
(C D
ReflectionTypeInfo 
. 
InjectMethodInfo /
injectMethod0 <
)< =
{ 	
var 

methodInfo 
= 
injectMethod )
.) *

MethodInfo* 4
;4 5
var 
action 
= $
TryCreateActionForMethod 1
(1 2

methodInfo2 <
)< =
;= >
if 
( 
action 
== 
null 
) 
{ 
action 
= 
( 
obj 
, 
args #
)# $
=>% '

methodInfo( 2
.2 3
Invoke3 9
(9 :
obj: =
,= >
args? C
)C D
;D E
} 
return 
new 
InjectTypeInfo %
.% &
InjectMethodInfo& 6
(6 7
action 
, 
injectMethod 
. 

Parameters '
.' (
Select( .
(. /
x/ 0
=>1 3
x4 5
.5 6
InjectableInfo6 D
)D E
.E F
ToArrayF M
(M N
)N O
,O P

methodInfo 
. 
Name 
)  
;  !
}   	
public"" 
static"" 
InjectTypeInfo"" $
.""$ %!
InjectConstructorInfo""% :
ConvertConstructor""; M
(""M N
ReflectionTypeInfo## 
.## !
InjectConstructorInfo## 4
injectConstructor##5 F
,##F G
Type##H L
type##M Q
)##Q R
{$$ 	
return%% 
new%% 
InjectTypeInfo%% %
.%%% &!
InjectConstructorInfo%%& ;
(%%; <"
TryCreateFactoryMethod&& &
(&&& '
type&&' +
,&&+ ,
injectConstructor&&- >
)&&> ?
,&&? @
injectConstructor'' !
.''! "

Parameters''" ,
.'', -
Select''- 3
(''3 4
x''4 5
=>''6 8
x''9 :
.'': ;
InjectableInfo''; I
)''I J
.''J K
ToArray''K R
(''R S
)''S T
)''T U
;''U V
}(( 	
public** 
static** 
InjectTypeInfo** $
.**$ %
InjectMemberInfo**% 5
ConvertField**6 B
(**B C
Type++ 

parentType++ 
,++ 
ReflectionTypeInfo++ /
.++/ 0
InjectFieldInfo++0 ?
injectField++@ K
)++K L
{,, 	
return-- 
new-- 
InjectTypeInfo-- %
.--% &
InjectMemberInfo--& 6
(--6 7
	GetSetter.. 
(.. 

parentType.. $
,..$ %
injectField..& 1
...1 2
	FieldInfo..2 ;
)..; <
,..< =
injectField..> I
...I J
InjectableInfo..J X
)..X Y
;..Y Z
}// 	
public11 
static11 
InjectTypeInfo11 $
.11$ %
InjectMemberInfo11% 5
ConvertProperty116 E
(11E F
Type22 

parentType22 
,22 
ReflectionTypeInfo22 /
.22/ 0
InjectPropertyInfo220 B
injectProperty22C Q
)22Q R
{33 	
return44 
new44 
InjectTypeInfo44 %
.44% &
InjectMemberInfo44& 6
(446 7
	GetSetter55 
(55 

parentType55 $
,55$ %
injectProperty55& 4
.554 5
PropertyInfo555 A
)55A B
,55B C
injectProperty55D R
.55R S
InjectableInfo55S a
)55a b
;55b c
}66 	
static88 
ZenFactoryMethod88 "
TryCreateFactoryMethod88  6
(886 7
Type99 
type99 
,99 
ReflectionTypeInfo99 )
.99) *!
InjectConstructorInfo99* ?
reflectionInfo99@ N
)99N O
{:: 	
if<< 
(<< 
type<< 
.<< 
DerivesFromOrEqual<< '
<<<' (
	Component<<( 1
><<1 2
(<<2 3
)<<3 4
)<<4 5
{== 
return>> 
null>> 
;>> 
}?? 
ifBB 
(BB 
typeBB 
.BB 

IsAbstractBB 
(BB  
)BB  !
)BB! "
{CC 
AssertDD 
.DD 
ThatDD 
(DD 
reflectionInfoDD *
.DD* +

ParametersDD+ 5
.DD5 6
IsEmptyDD6 =
(DD= >
)DD> ?
)DD? @
;DD@ A
returnEE 
nullEE 
;EE 
}FF 
varHH 
constructorHH 
=HH 
reflectionInfoHH ,
.HH, -
ConstructorInfoHH- <
;HH< =
varJJ 
factoryMethodJJ 
=JJ :
.TryCreateFactoryMethodCompiledLambdaExpressionJJ  N
(JJN O
typeJJO S
,JJS T
constructorJJU `
)JJ` a
;JJa b
ifLL 
(LL 
factoryMethodLL 
==LL  
nullLL! %
)LL% &
{MM 
ifNN 
(NN 
constructorNN 
==NN  "
nullNN# '
)NN' (
{OO 
factoryMethodUU !
=UU" #
argsUU$ (
=>UU) +
{VV 
AssertWW 
.WW 
ThatWW #
(WW# $
argsWW$ (
.WW( )
LengthWW) /
==WW0 2
$numWW3 4
)WW4 5
;WW5 6
returnXX 
	ActivatorXX (
.XX( )
CreateInstanceXX) 7
(XX7 8
typeXX8 <
,XX< =
newXX> A
objectXXB H
[XXH I
$numXXI J
]XXJ K
)XXK L
;XXL M
}YY 
;YY 
}ZZ 
else[[ 
{\\ 
factoryMethod]] !
=]]" #
constructor]]$ /
.]]/ 0
Invoke]]0 6
;]]6 7
}^^ 
}__ 
returnaa 
factoryMethodaa  
;aa  !
}bb 	
staticdd 
ZenFactoryMethoddd :
.TryCreateFactoryMethodCompiledLambdaExpressiondd  N
(ddN O
Typeee 
typeee 
,ee 
ConstructorInfoee &
constructoree' 2
)ee2 3
{ff 	
ifii 
(ii 
typeii 
.ii %
ContainsGenericParametersii .
)ii. /
{jj 
returnkk 
nullkk 
;kk 
}ll 
ParameterExpressionnn 
paramnn  %
=nn& '

Expressionnn( 2
.nn2 3
	Parameternn3 <
(nn< =
typeofnn= C
(nnC D
objectnnD J
[nnJ K
]nnK L
)nnL M
)nnM N
;nnN O
ifpp 
(pp 
constructorpp 
==pp 
nullpp #
)pp# $
{qq 
returnrr 

Expressionrr !
.rr! "
Lambdarr" (
<rr( )
ZenFactoryMethodrr) 9
>rr9 :
(rr: ;

Expressionss 
.ss 
Convertss &
(ss& '

Expressiontt "
.tt" #
Newtt# &
(tt& '
typett' +
)tt+ ,
,tt, -
typeoftt. 4
(tt4 5
objecttt5 ;
)tt; <
)tt< =
,tt= >
paramtt? D
)ttD E
.ttE F
CompilettF M
(ttM N
)ttN O
;ttO P
}uu 
ParameterInfoww 
[ww 
]ww 
parww 
=ww  !
constructorww" -
.ww- .
GetParametersww. ;
(ww; <
)ww< =
;ww= >

Expressionxx 
[xx 
]xx 
argsxx 
=xx 
newxx  #

Expressionxx$ .
[xx. /
parxx/ 2
.xx2 3
Lengthxx3 9
]xx9 :
;xx: ;
forzz 
(zz 
intzz 
izz 
=zz 
$numzz 
;zz 
izz 
!=zz  
parzz! $
.zz$ %
Lengthzz% +
;zz+ ,
++zz- /
izz/ 0
)zz0 1
{{{ 
args|| 
[|| 
i|| 
]|| 
=|| 

Expression|| $
.||$ %
Convert||% ,
(||, -

Expression}} 
.}} 

ArrayIndex}} )
(}}) *
param~~ 
,~~ 

Expression~~ )
.~~) *
Constant~~* 2
(~~2 3
i~~3 4
)~~4 5
)~~5 6
,~~6 7
par~~8 ;
[~~; <
i~~< =
]~~= >
.~~> ?
ParameterType~~? L
)~~L M
;~~M N
} 
return
ÅÅ 

Expression
ÅÅ 
.
ÅÅ 
Lambda
ÅÅ $
<
ÅÅ$ %
ZenFactoryMethod
ÅÅ% 5
>
ÅÅ5 6
(
ÅÅ6 7

Expression
ÇÇ 
.
ÇÇ 
Convert
ÇÇ "
(
ÇÇ" #

Expression
ÉÉ 
.
ÉÉ 
New
ÉÉ "
(
ÉÉ" #
constructor
ÉÉ# .
,
ÉÉ. /
args
ÉÉ0 4
)
ÉÉ4 5
,
ÉÉ5 6
typeof
ÉÉ7 =
(
ÉÉ= >
object
ÉÉ> D
)
ÉÉD E
)
ÉÉE F
,
ÉÉF G
param
ÉÉH M
)
ÉÉM N
.
ÉÉN O
Compile
ÉÉO V
(
ÉÉV W
)
ÉÉW X
;
ÉÉX Y
}
áá 	
static
ââ 
ZenInjectMethod
ââ &
TryCreateActionForMethod
ââ 7
(
ââ7 8

MethodInfo
ââ8 B

methodInfo
ââC M
)
ââM N
{
ää 	
if
çç 
(
çç 

methodInfo
çç 
.
çç 
DeclaringType
çç (
.
çç( )'
ContainsGenericParameters
çç) B
)
ççB C
{
éé 
return
èè 
null
èè 
;
èè 
}
êê 
ParameterInfo
íí 
[
íí 
]
íí 
par
íí 
=
íí  !

methodInfo
íí" ,
.
íí, -
GetParameters
íí- :
(
íí: ;
)
íí; <
;
íí< =
if
îî 
(
îî 
par
îî 
.
îî 
Any
îî 
(
îî 
x
îî 
=>
îî 
x
îî 
.
îî 
ParameterType
îî ,
.
îî, -'
ContainsGenericParameters
îî- F
)
îîF G
)
îîG H
{
ïï 
return
ññ 
null
ññ 
;
ññ 
}
óó 

Expression
ôô 
[
ôô 
]
ôô 
args
ôô 
=
ôô 
new
ôô  #

Expression
ôô$ .
[
ôô. /
par
ôô/ 2
.
ôô2 3
Length
ôô3 9
]
ôô9 :
;
ôô: ;!
ParameterExpression
öö 
	argsParam
öö  )
=
öö* +

Expression
öö, 6
.
öö6 7
	Parameter
öö7 @
(
öö@ A
typeof
ööA G
(
ööG H
object
ööH N
[
ööN O
]
ööO P
)
ööP Q
)
ööQ R
;
ööR S!
ParameterExpression
õõ 
instanceParam
õõ  -
=
õõ. /

Expression
õõ0 :
.
õõ: ;
	Parameter
õõ; D
(
õõD E
typeof
õõE K
(
õõK L
object
õõL R
)
õõR S
)
õõS T
;
õõT U
for
ùù 
(
ùù 
int
ùù 
i
ùù 
=
ùù 
$num
ùù 
;
ùù 
i
ùù 
!=
ùù  
par
ùù! $
.
ùù$ %
Length
ùù% +
;
ùù+ ,
++
ùù- /
i
ùù/ 0
)
ùù0 1
{
ûû 
args
üü 
[
üü 
i
üü 
]
üü 
=
üü 

Expression
üü $
.
üü$ %
Convert
üü% ,
(
üü, -

Expression
†† 
.
†† 

ArrayIndex
†† )
(
††) *
	argsParam
°° !
,
°°! "

Expression
°°# -
.
°°- .
Constant
°°. 6
(
°°6 7
i
°°7 8
)
°°8 9
)
°°9 :
,
°°: ;
par
°°< ?
[
°°? @
i
°°@ A
]
°°A B
.
°°B C
ParameterType
°°C P
)
°°P Q
;
°°Q R
}
¢¢ 
return
§§ 

Expression
§§ 
.
§§ 
Lambda
§§ $
<
§§$ %
ZenInjectMethod
§§% 4
>
§§4 5
(
§§5 6

Expression
•• 
.
•• 
Call
•• 
(
••  

Expression
¶¶ 
.
¶¶ 
Convert
¶¶ &
(
¶¶& '
instanceParam
¶¶' 4
,
¶¶4 5

methodInfo
¶¶6 @
.
¶¶@ A
DeclaringType
¶¶A N
)
¶¶N O
,
¶¶O P

methodInfo
¶¶Q [
,
¶¶[ \
args
¶¶] a
)
¶¶a b
,
¶¶b c
instanceParam
ßß 
,
ßß 
	argsParam
ßß (
)
ßß( )
.
ßß) *
Compile
ßß* 1
(
ßß1 2
)
ßß2 3
;
ßß3 4
}
´´ 	
static
ÆÆ 
IEnumerable
ÆÆ 
<
ÆÆ 
	FieldInfo
ÆÆ $
>
ÆÆ$ %
GetAllFields
ÆÆ& 2
(
ÆÆ2 3
Type
ÆÆ3 7
t
ÆÆ8 9
,
ÆÆ9 :
BindingFlags
ÆÆ; G
flags
ÆÆH M
)
ÆÆM N
{
ØØ 	
if
∞∞ 
(
∞∞ 
t
∞∞ 
==
∞∞ 
null
∞∞ 
)
∞∞ 
{
±± 
return
≤≤ 

Enumerable
≤≤ !
.
≤≤! "
Empty
≤≤" '
<
≤≤' (
	FieldInfo
≤≤( 1
>
≤≤1 2
(
≤≤2 3
)
≤≤3 4
;
≤≤4 5
}
≥≥ 
return
µµ 
t
µµ 
.
µµ 
	GetFields
µµ 
(
µµ 
flags
µµ $
)
µµ$ %
.
µµ% &
Concat
µµ& ,
(
µµ, -
GetAllFields
µµ- 9
(
µµ9 :
t
µµ: ;
.
µµ; <
BaseType
µµ< D
,
µµD E
flags
µµF K
)
µµK L
)
µµL M
.
µµM N
Distinct
µµN V
(
µµV W
)
µµW X
;
µµX Y
}
∂∂ 	
static
∏∏ #
ZenMemberSetterMethod
∏∏ $#
GetOnlyPropertySetter
∏∏% :
(
∏∏: ;
Type
ππ 

parentType
ππ 
,
ππ 
string
∫∫ 
propertyName
∫∫ 
)
∫∫  
{
ªª 	
Assert
ºº 
.
ºº 
That
ºº 
(
ºº 

parentType
ºº "
!=
ºº# %
null
ºº& *
)
ºº* +
;
ºº+ ,
Assert
ΩΩ 
.
ΩΩ 
That
ΩΩ 
(
ΩΩ 
!
ΩΩ 
string
ΩΩ 
.
ΩΩ  
IsNullOrEmpty
ΩΩ  -
(
ΩΩ- .
propertyName
ΩΩ. :
)
ΩΩ: ;
)
ΩΩ; <
;
ΩΩ< =
var
øø 
	allFields
øø 
=
øø 
GetAllFields
øø (
(
øø( )

parentType
¿¿ 
,
¿¿ 
BindingFlags
¿¿ (
.
¿¿( )
Instance
¿¿) 1
|
¿¿2 3
BindingFlags
¿¿4 @
.
¿¿@ A
Public
¿¿A G
|
¿¿H I
BindingFlags
¿¿J V
.
¿¿V W
	NonPublic
¿¿W `
|
¿¿a b
BindingFlags
¿¿c o
.
¿¿o p
FlattenHierarchy¿¿p Ä
)¿¿Ä Å
.¿¿Å Ç
ToList¿¿Ç à
(¿¿à â
)¿¿â ä
;¿¿ä ã
var
¬¬ 
writeableFields
¬¬ 
=
¬¬  !
	allFields
¬¬" +
.
¬¬+ ,
Where
¬¬, 1
(
¬¬1 2
f
¬¬2 3
=>
¬¬4 6
f
¬¬7 8
.
¬¬8 9
Name
¬¬9 =
==
¬¬> @
string
¬¬A G
.
¬¬G H
Format
¬¬H N
(
¬¬N O
$str
¬¬O R
+
¬¬S T
propertyName
¬¬U a
+
¬¬b c
$str
¬¬d v
,
¬¬v w
propertyName¬¬x Ñ
)¬¬Ñ Ö
)¬¬Ö Ü
.¬¬Ü á
ToList¬¬á ç
(¬¬ç é
)¬¬é è
;¬¬è ê
if
ƒƒ 
(
ƒƒ 
!
ƒƒ 
writeableFields
ƒƒ  
.
ƒƒ  !
Any
ƒƒ! $
(
ƒƒ$ %
)
ƒƒ% &
)
ƒƒ& '
{
≈≈ 
throw
∆∆ 
new
∆∆ 
ZenjectException
∆∆ *
(
∆∆* +
string
∆∆+ 1
.
∆∆1 2
Format
∆∆2 8
(
∆∆8 9
$str
«« W
,
««W X
propertyName
»»  
,
»»  !

parentType
»»" ,
.
»», -
FullName
»»- 5
,
»»5 6
string
»»7 =
.
»»= >
Join
»»> B
(
»»B C
$str
»»C F
,
»»F G
	allFields
»»H Q
.
»»Q R
Select
»»R X
(
»»X Y
f
»»Y Z
=>
»»[ ]
f
»»^ _
.
»»_ `
Name
»»` d
)
»»d e
.
»»e f
ToArray
»»f m
(
»»m n
)
»»n o
)
»»o p
)
»»p q
)
»»q r
;
»»r s
}
…… 
return
ÀÀ 
(
ÀÀ 

injectable
ÀÀ 
,
ÀÀ 
value
ÀÀ  %
)
ÀÀ% &
=>
ÀÀ' )
writeableFields
ÀÀ* 9
.
ÀÀ9 :
ForEach
ÀÀ: A
(
ÀÀA B
f
ÀÀB C
=>
ÀÀD F
f
ÀÀG H
.
ÀÀH I
SetValue
ÀÀI Q
(
ÀÀQ R

injectable
ÀÀR \
,
ÀÀ\ ]
value
ÀÀ^ c
)
ÀÀc d
)
ÀÀd e
;
ÀÀe f
}
ÃÃ 	
static
œœ #
ZenMemberSetterMethod
œœ $
	GetSetter
œœ% .
(
œœ. /
Type
œœ/ 3

parentType
œœ4 >
,
œœ> ?

MemberInfo
œœ@ J
memInfo
œœK R
)
œœR S
{
–– 	
var
—— 
setterMethod
—— 
=
—— .
 TryGetSetterAsCompiledExpression
—— ?
(
——? @

parentType
——@ J
,
——J K
memInfo
——L S
)
——S T
;
——T U
if
”” 
(
”” 
setterMethod
”” 
!=
”” 
null
””  $
)
””$ %
{
‘‘ 
return
’’ 
setterMethod
’’ #
;
’’# $
}
÷÷ 
var
ÿÿ 
	fieldInfo
ÿÿ 
=
ÿÿ 
memInfo
ÿÿ #
as
ÿÿ$ &
	FieldInfo
ÿÿ' 0
;
ÿÿ0 1
var
ŸŸ 
propInfo
ŸŸ 
=
ŸŸ 
memInfo
ŸŸ "
as
ŸŸ# %
PropertyInfo
ŸŸ& 2
;
ŸŸ2 3
if
€€ 
(
€€ 
	fieldInfo
€€ 
!=
€€ 
null
€€ !
)
€€! "
{
‹‹ 
return
›› 
(
›› 
(
›› 

injectable
›› #
,
››# $
value
››% *
)
››* +
=>
››, .
	fieldInfo
››/ 8
.
››8 9
SetValue
››9 A
(
››A B

injectable
››B L
,
››L M
value
››N S
)
››S T
)
››T U
;
››U V
}
ﬁﬁ 
Assert
‡‡ 
.
‡‡ 
	IsNotNull
‡‡ 
(
‡‡ 
propInfo
‡‡ %
)
‡‡% &
;
‡‡& '
if
ÂÂ 
(
ÂÂ 
propInfo
ÂÂ 
.
ÂÂ 
CanWrite
ÂÂ !
)
ÂÂ! "
{
ÊÊ 
return
ÁÁ 
(
ÁÁ 
(
ÁÁ 

injectable
ÁÁ #
,
ÁÁ# $
value
ÁÁ% *
)
ÁÁ* +
=>
ÁÁ, .
propInfo
ÁÁ/ 7
.
ÁÁ7 8
SetValue
ÁÁ8 @
(
ÁÁ@ A

injectable
ÁÁA K
,
ÁÁK L
value
ÁÁM R
,
ÁÁR S
null
ÁÁT X
)
ÁÁX Y
)
ÁÁY Z
;
ÁÁZ [
}
ËË 
return
ÍÍ #
GetOnlyPropertySetter
ÍÍ (
(
ÍÍ( )

parentType
ÍÍ) 3
,
ÍÍ3 4
propInfo
ÍÍ5 =
.
ÍÍ= >
Name
ÍÍ> B
)
ÍÍB C
;
ÍÍC D
}
ÏÏ 	
static
ÓÓ #
ZenMemberSetterMethod
ÓÓ $.
 TryGetSetterAsCompiledExpression
ÓÓ% E
(
ÓÓE F
Type
ÓÓF J

parentType
ÓÓK U
,
ÓÓU V

MemberInfo
ÓÓW a
memInfo
ÓÓb i
)
ÓÓi j
{
ÔÔ 	
if
ÚÚ 
(
ÚÚ 

parentType
ÚÚ 
.
ÚÚ '
ContainsGenericParameters
ÚÚ 4
)
ÚÚ4 5
{
ÛÛ 
return
ÙÙ 
null
ÙÙ 
;
ÙÙ 
}
ıı 
var
˜˜ 
	fieldInfo
˜˜ 
=
˜˜ 
memInfo
˜˜ #
as
˜˜$ &
	FieldInfo
˜˜' 0
;
˜˜0 1
var
¯¯ 
propInfo
¯¯ 
=
¯¯ 
memInfo
¯¯ "
as
¯¯# %
PropertyInfo
¯¯& 2
;
¯¯2 3
if
˝˝ 
(
˝˝ 
!
˝˝ 

parentType
˝˝ 
.
˝˝ 
IsValueType
˝˝ '
(
˝˝' (
)
˝˝( )
&&
˝˝* ,
(
˝˝- .
	fieldInfo
˝˝. 7
==
˝˝8 :
null
˝˝; ?
||
˝˝@ B
!
˝˝C D
	fieldInfo
˝˝D M
.
˝˝M N

IsInitOnly
˝˝N X
)
˝˝X Y
&&
˝˝Z \
(
˝˝] ^
propInfo
˝˝^ f
==
˝˝g i
null
˝˝j n
||
˝˝o q
propInfo
˝˝r z
.
˝˝z {
CanWrite˝˝{ É
)˝˝É Ñ
)˝˝Ñ Ö
{
˛˛ 
Type
ˇˇ 

memberType
ˇˇ 
=
ˇˇ  !
	fieldInfo
ˇˇ" +
!=
ˇˇ, .
null
ˇˇ/ 3
?
ÄÄ 
	fieldInfo
ÄÄ 
.
ÄÄ  
	FieldType
ÄÄ  )
:
ÄÄ* +
propInfo
ÄÄ, 4
.
ÄÄ4 5
PropertyType
ÄÄ5 A
;
ÄÄA B
var
ÇÇ 
	typeParam
ÇÇ 
=
ÇÇ 

Expression
ÇÇ  *
.
ÇÇ* +
	Parameter
ÇÇ+ 4
(
ÇÇ4 5
typeof
ÇÇ5 ;
(
ÇÇ; <
object
ÇÇ< B
)
ÇÇB C
)
ÇÇC D
;
ÇÇD E
var
ÉÉ 

valueParam
ÉÉ 
=
ÉÉ  

Expression
ÉÉ! +
.
ÉÉ+ ,
	Parameter
ÉÉ, 5
(
ÉÉ5 6
typeof
ÉÉ6 <
(
ÉÉ< =
object
ÉÉ= C
)
ÉÉC D
)
ÉÉD E
;
ÉÉE F
return
ÖÖ 

Expression
ÖÖ !
.
ÖÖ! "
Lambda
ÖÖ" (
<
ÖÖ( )#
ZenMemberSetterMethod
ÖÖ) >
>
ÖÖ> ?
(
ÖÖ? @

Expression
ÜÜ 
.
ÜÜ 
Assign
ÜÜ %
(
ÜÜ% &

Expression
áá "
.
áá" #
MakeMemberAccess
áá# 3
(
áá3 4

Expression
áá4 >
.
áá> ?
Convert
áá? F
(
ááF G
	typeParam
ááG P
,
ááP Q

parentType
ááR \
)
áá\ ]
,
áá] ^
memInfo
áá_ f
)
ááf g
,
áág h

Expression
àà "
.
àà" #
Convert
àà# *
(
àà* +

valueParam
àà+ 5
,
àà5 6

memberType
àà7 A
)
ààA B
)
ààB C
,
ààC D
	typeParam
ââ !
,
ââ! "

valueParam
ââ# -
)
ââ- .
.
ââ. /
Compile
ââ/ 6
(
ââ6 7
)
ââ7 8
;
ââ8 9
}
ää 
return
çç 
null
çç 
;
çç 
}
éé 	
}
èè 
}êê ÷	
}C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConcreteBinders\ConcreteIdBinderNonGeneric.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class &
ConcreteIdBinderNonGeneric +
:, -$
ConcreteBinderNonGeneric. F
{ 
public &
ConcreteIdBinderNonGeneric )
() *
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
:		 
base		 
(		 
bindContainer		  
,		  !
bindInfo		" *
,		* +
bindStatement		, 9
)		9 :
{

 	
} 	
public $
ConcreteBinderNonGeneric '
WithId( .
(. /
object/ 5

identifier6 @
)@ A
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} é1
xC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConcreteBinders\ConcreteBinderGeneric.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 !
ConcreteBinderGeneric		 &
<		& '
	TContract		' 0
>		0 1
:		2 3
FromBinderGeneric		4 E
<		E F
	TContract		F O
>		O P
{

 
public !
ConcreteBinderGeneric $
($ %
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
bindStatement, 9
)9 :
{ 	
ToSelf 
( 
) 
; 
} 	
public 
FromBinderGeneric  
<  !
	TContract! *
>* +
ToSelf, 2
(2 3
)3 4
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
BindInfo 
.  
RequireExplicitScope )
=* +
true, 0
;0 1
SubFinalizer 
= 
new $
ScopableBindingFinalizer 7
(7 8
BindInfo 
, 
( 
	container $
,$ %
type& *
)* +
=>, .
new/ 2
TransientProvider3 D
(D E
type 
, 
	container #
,# $
BindInfo% -
.- .
	Arguments. 7
,7 8
BindInfo 
. 
ContextInfo (
,( )
BindInfo* 2
.2 3
ConcreteIdentifier3 E
,E F
BindInfo 
.  
InstantiatedCallback 1
)1 2
)2 3
;3 4
return 
this 
; 
}   	
public"" 
FromBinderGeneric""  
<""  !
	TConcrete""! *
>""* +
To"", .
<"". /
	TConcrete""/ 8
>""8 9
(""9 :
)"": ;
where## 
	TConcrete## 
:## 
	TContract## '
{$$ 	
BindInfo%% 
.%% 
ToChoice%% 
=%% 
	ToChoices%%  )
.%%) *
Concrete%%* 2
;%%2 3
BindInfo&& 
.&& 
ToTypes&& 
.&& 
Clear&& "
(&&" #
)&&# $
;&&$ %
BindInfo'' 
.'' 
ToTypes'' 
.'' 
Add''  
(''  !
typeof''! '
(''' (
	TConcrete''( 1
)''1 2
)''2 3
;''3 4
return)) 
new)) 
FromBinderGeneric)) (
<))( )
	TConcrete))) 2
>))2 3
())3 4
BindContainer** 
,** 
BindInfo** '
,**' (
BindStatement**) 6
)**6 7
;**7 8
}++ 	
public--  
FromBinderNonGeneric-- #
To--$ &
(--& '
params--' -
Type--. 2
[--2 3
]--3 4
concreteTypes--5 B
)--B C
{.. 	
return// 
To// 
(// 
(// 
IEnumerable// "
<//" #
Type//# '
>//' (
)//( )
concreteTypes//) 6
)//6 7
;//7 8
}00 	
public22  
FromBinderNonGeneric22 #
To22$ &
(22& '
IEnumerable22' 2
<222 3
Type223 7
>227 8
concreteTypes229 F
)22F G
{33 	
BindingUtil44 
.44 $
AssertIsDerivedFromTypes44 0
(440 1
concreteTypes55 
,55 
BindInfo55 '
.55' (
ContractTypes55( 5
,555 6
BindInfo557 ?
.55? @
InvalidBindResponse55@ S
)55S T
;55T U
BindInfo77 
.77 
ToChoice77 
=77 
	ToChoices77  )
.77) *
Concrete77* 2
;772 3
BindInfo88 
.88 
ToTypes88 
.88 
Clear88 "
(88" #
)88# $
;88$ %
BindInfo99 
.99 
ToTypes99 
.99 
AddRange99 %
(99% &
concreteTypes99& 3
)993 4
;994 5
return;; 
new;;  
FromBinderNonGeneric;; +
(;;+ ,
BindContainer<< 
,<< 
BindInfo<< '
,<<' (
BindStatement<<) 6
)<<6 7
;<<7 8
}== 	
public@@  
FromBinderNonGeneric@@ #
To@@$ &
(@@& '
ActionAA 
<AA '
ConventionSelectTypesBinderAA .
>AA. /
	generatorAA0 9
)AA9 :
{BB 	
varCC 
bindInfoCC 
=CC 
newCC 
ConventionBindInfoCC 1
(CC1 2
)CC2 3
;CC3 4
bindInfoFF 
.FF 
AddTypeFilterFF "
(FF" #
concreteTypeGG 
=>GG 
BindInfoGG  (
.GG( )
ContractTypesGG) 6
.GG6 7
AllGG7 :
(GG: ;
contractTypeGG; G
=>GGH J
concreteTypeGGK W
.GGW X
DerivesFromOrEqualGGX j
(GGj k
contractTypeGGk w
)GGw x
)GGx y
)GGy z
;GGz {
	generatorII 
(II 
newII '
ConventionSelectTypesBinderII 5
(II5 6
bindInfoII6 >
)II> ?
)II? @
;II@ A
returnJJ 
ToJJ 
(JJ 
bindInfoJJ 
.JJ 
ResolveTypesJJ +
(JJ+ ,
)JJ, -
)JJ- .
;JJ. /
}KK 	
}MM 
}NN Â
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder0.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
	TContract' 0
>0 1
:2 3
FactoryFromBinder4 E
<E F
	TContractF O
>O P
{ 
public		 !
FactoryToChoiceBinder		 $
(		$ %
DiContainer

 
	container

 !
,

! "
BindInfo

# +
bindInfo

, 4
,

4 5
FactoryBindInfo

6 E
factoryBindInfo

F U
)

U V
: 
base 
( 
	container 
, 
bindInfo &
,& '
factoryBindInfo( 7
)7 8
{ 	
} 	
public 
FactoryFromBinder  
<  !
	TContract! *
>* +
ToSelf, 2
(2 3
)3 4
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public $
FactoryFromBinderUntyped '
To( *
(* +
Type+ /
concreteType0 <
)< =
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
concreteType! -
)- .
;. /
return 
new $
FactoryFromBinderUntyped /
(/ 0
BindContainer 
, 
concreteType +
,+ ,
BindInfo- 5
,5 6
FactoryBindInfo7 F
)F G
;G H
} 	
public   
FactoryFromBinder    
<    !
	TConcrete  ! *
>  * +
To  , .
<  . /
	TConcrete  / 8
>  8 9
(  9 :
)  : ;
where!! 
	TConcrete!! 
:!! 
	TContract!! '
{"" 	
BindInfo## 
.## 
ToChoice## 
=## 
	ToChoices##  )
.##) *
Concrete##* 2
;##2 3
BindInfo$$ 
.$$ 
ToTypes$$ 
.$$ 
Clear$$ "
($$" #
)$$# $
;$$$ %
BindInfo%% 
.%% 
ToTypes%% 
.%% 
Add%%  
(%%  !
typeof%%! '
(%%' (
	TConcrete%%( 1
)%%1 2
)%%2 3
;%%3 4
return'' 
new'' 
FactoryFromBinder'' (
<''( )
	TConcrete'') 2
>''2 3
(''3 4
BindContainer''4 A
,''A B
BindInfo''C K
,''K L
FactoryBindInfo''M \
)''\ ]
;''] ^
}(( 	
})) 
}** …U
QC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\UnityUtil.cs
	namespace 	

ModestTree
 
. 
Util 
{		 
public

 

static

 
class

 
	UnityUtil

 !
{ 
public 
static 
IEnumerable !
<! "
Scene" '
>' (
	AllScenes) 2
{ 	
get 
{ 
for 
( 
int 
i 
= 
$num 
; 
i  !
<" #
SceneManager$ 0
.0 1

sceneCount1 ;
;; <
i= >
++> @
)@ A
{ 
yield 
return  
SceneManager! -
.- .

GetSceneAt. 8
(8 9
i9 :
): ;
;; <
} 
} 
} 	
public 
static 
IEnumerable !
<! "
Scene" '
>' (
AllLoadedScenes) 8
{ 	
get 
{ 
return 
	AllScenes "
." #
Where# (
(( )
scene) .
=>/ 1
scene2 7
.7 8
isLoaded8 @
)@ A
;A B
}C D
} 	
public 
static 
bool 
IsAltKeyDown '
{ 	
get 
{ 
return 
Input 
. 
GetKey %
(% &
KeyCode& -
.- .
LeftAlt. 5
)5 6
||7 9
Input: ?
.? @
GetKey@ F
(F G
KeyCodeG N
.N O
RightAltO W
)W X
;X Y
}Z [
} 	
public!! 
static!! 
bool!! 
IsControlKeyDown!! +
{"" 	
get## 
{## 
return## 
Input## 
.## 
GetKey## %
(##% &
KeyCode##& -
.##- .
LeftControl##. 9
)##9 :
||##; =
Input##> C
.##C D
GetKey##D J
(##J K
KeyCode##K R
.##R S
RightControl##S _
)##_ `
;##` a
}##b c
}$$ 	
public&& 
static&& 
bool&& 
IsShiftKeyDown&& )
{'' 	
get(( 
{(( 
return(( 
Input(( 
.(( 
GetKey(( %
(((% &
KeyCode((& -
.((- .
	LeftShift((. 7
)((7 8
||((9 ;
Input((< A
.((A B
GetKey((B H
(((H I
KeyCode((I P
.((P Q

RightShift((Q [
)(([ \
;((\ ]
}((^ _
})) 	
public++ 
static++ 
bool++ "
WasShiftKeyJustPressed++ 1
{,, 	
get-- 
{-- 
return-- 
Input-- 
.-- 

GetKeyDown-- )
(--) *
KeyCode--* 1
.--1 2
	LeftShift--2 ;
)--; <
||--= ?
Input--@ E
.--E F

GetKeyDown--F P
(--P Q
KeyCode--Q X
.--X Y

RightShift--Y c
)--c d
;--d e
}--f g
}.. 	
public00 
static00 
bool00  
WasAltKeyJustPressed00 /
{11 	
get22 
{22 
return22 
Input22 
.22 

GetKeyDown22 )
(22) *
KeyCode22* 1
.221 2
LeftAlt222 9
)229 :
||22; =
Input22> C
.22C D

GetKeyDown22D N
(22N O
KeyCode22O V
.22V W
RightAlt22W _
)22_ `
;22` a
}22b c
}33 	
public55 
static55 
int55 
GetDepthLevel55 '
(55' (
	Transform55( 1
	transform552 ;
)55; <
{66 	
if77 
(77 
	transform77 
==77 
null77 !
)77! "
{88 
return99 
$num99 
;99 
}:: 
return<< 
$num<< 
+<< 
GetDepthLevel<< $
(<<$ %
	transform<<% .
.<<. /
parent<</ 5
)<<5 6
;<<6 7
}== 	
public?? 
static?? 

GameObject??  
GetRootParentOrSelf??! 4
(??4 5

GameObject??5 ?

gameObject??@ J
)??J K
{@@ 	
returnAA 
GetParentsAndSelfAA $
(AA$ %

gameObjectAA% /
.AA/ 0
	transformAA0 9
)AA9 :
.AA: ;
SelectAA; A
(AAA B
xAAB C
=>AAD F
xAAG H
.AAH I

gameObjectAAI S
)AAS T
.AAT U
LastOrDefaultAAU b
(AAb c
)AAc d
;AAd e
}BB 	
publicDD 
staticDD 
IEnumerableDD !
<DD! "
	TransformDD" +
>DD+ ,

GetParentsDD- 7
(DD7 8
	TransformDD8 A
	transformDDB K
)DDK L
{EE 	
ifFF 
(FF 
	transformFF 
==FF 
nullFF !
)FF! "
{GG 
yieldHH 
breakHH 
;HH 
}II 
foreachKK 
(KK 
varKK 
ancestorKK !
inKK" $
GetParentsAndSelfKK% 6
(KK6 7
	transformKK7 @
.KK@ A
parentKKA G
)KKG H
)KKH I
{LL 
yieldMM 
returnMM 
ancestorMM %
;MM% &
}NN 
}OO 	
publicQQ 
staticQQ 
IEnumerableQQ !
<QQ! "
	TransformQQ" +
>QQ+ ,
GetParentsAndSelfQQ- >
(QQ> ?
	TransformQQ? H
	transformQQI R
)QQR S
{RR 	
ifSS 
(SS 
	transformSS 
==SS 
nullSS !
)SS! "
{TT 
yieldUU 
breakUU 
;UU 
}VV 
yieldXX 
returnXX 
	transformXX "
;XX" #
foreachZZ 
(ZZ 
varZZ 
ancestorZZ !
inZZ" $
GetParentsAndSelfZZ% 6
(ZZ6 7
	transformZZ7 @
.ZZ@ A
parentZZA G
)ZZG H
)ZZH I
{[[ 
yield\\ 
return\\ 
ancestor\\ %
;\\% &
}]] 
}^^ 	
public`` 
static`` 
IEnumerable`` !
<``! "
	Component``" +
>``+ ,*
GetComponentsInChildrenTopDown``- K
(``K L

GameObject``L V

gameObject``W a
,``a b
bool``c g
includeInactive``h w
)``w x
{aa 	
returnbb 

gameObjectbb 
.bb #
GetComponentsInChildrenbb 5
<bb5 6
	Componentbb6 ?
>bb? @
(bb@ A
includeInactivebbA P
)bbP Q
.cc 
OrderBycc 
(cc 
xcc 
=>cc 
xdd 
==dd 
nulldd 
?dd 
intdd  #
.dd# $
MinValuedd$ ,
:dd- .
GetDepthLeveldd/ <
(dd< =
xdd= >
.dd> ?
	transformdd? H
)ddH I
)ddI J
;ddJ K
}ee 	
publicgg 
staticgg 
IEnumerablegg !
<gg! "
	Componentgg" +
>gg+ ,+
GetComponentsInChildrenBottomUpgg- L
(ggL M

GameObjectggM W

gameObjectggX b
,ggb c
boolggd h
includeInactiveggi x
)ggx y
{hh 	
returnii 

gameObjectii 
.ii #
GetComponentsInChildrenii 5
<ii5 6
	Componentii6 ?
>ii? @
(ii@ A
includeInactiveiiA P
)iiP Q
.jj 
OrderByDescendingjj "
(jj" #
xjj# $
=>jj% '
xkk 
==kk 
nullkk 
?kk 
intkk  #
.kk# $
MinValuekk$ ,
:kk- .
GetDepthLevelkk/ <
(kk< =
xkk= >
.kk> ?
	transformkk? H
)kkH I
)kkI J
;kkJ K
}ll 	
publicnn 
staticnn 
IEnumerablenn !
<nn! "

GameObjectnn" ,
>nn, -$
GetDirectChildrenAndSelfnn. F
(nnF G

GameObjectnnG Q
objnnR U
)nnU V
{oo 	
yieldpp 
returnpp 
objpp 
;pp 
foreachrr 
(rr 
	Transformrr 
childrr $
inrr% '
objrr( +
.rr+ ,
	transformrr, 5
)rr5 6
{ss 
yieldtt 
returntt 
childtt "
.tt" #

gameObjecttt# -
;tt- .
}uu 
}vv 	
publicxx 
staticxx 
IEnumerablexx !
<xx! "

GameObjectxx" ,
>xx, -
GetDirectChildrenxx. ?
(xx? @

GameObjectxx@ J
objxxK N
)xxN O
{yy 	
foreachzz 
(zz 
	Transformzz 
childzz $
inzz% '
objzz( +
.zz+ ,
	transformzz, 5
)zz5 6
{{{ 
yield|| 
return|| 
child|| "
.||" #

gameObject||# -
;||- .
}}} 
}~~ 	
public
ÄÄ 
static
ÄÄ 
IEnumerable
ÄÄ !
<
ÄÄ! "

GameObject
ÄÄ" ,
>
ÄÄ, -
GetAllGameObjects
ÄÄ. ?
(
ÄÄ? @
)
ÄÄ@ A
{
ÅÅ 	
return
ÇÇ 

GameObject
ÇÇ 
.
ÇÇ 
FindObjectsOfType
ÇÇ /
<
ÇÇ/ 0
	Transform
ÇÇ0 9
>
ÇÇ9 :
(
ÇÇ: ;
)
ÇÇ; <
.
ÇÇ< =
Select
ÇÇ= C
(
ÇÇC D
x
ÇÇD E
=>
ÇÇF H
x
ÇÇI J
.
ÇÇJ K

gameObject
ÇÇK U
)
ÇÇU V
;
ÇÇV W
}
ÉÉ 	
public
ÖÖ 
static
ÖÖ 
List
ÖÖ 
<
ÖÖ 

GameObject
ÖÖ %
>
ÖÖ% &#
GetAllRootGameObjects
ÖÖ' <
(
ÖÖ< =
)
ÖÖ= >
{
ÜÜ 	
return
áá 
GetAllGameObjects
áá $
(
áá$ %
)
áá% &
.
áá& '
Where
áá' ,
(
áá, -
x
áá- .
=>
áá/ 1
x
áá2 3
.
áá3 4
	transform
áá4 =
.
áá= >
parent
áá> D
==
ááE G
null
ááH L
)
ááL M
.
ááM N
ToList
ááN T
(
ááT U
)
ááU V
;
ááV W
}
àà 	
}
ââ 
}ää ñ6
rC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\SubContainerBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class (
SubContainerBindingFinalizer -
:. /$
ProviderBindingFinalizer0 H
{		 
readonly

 
object

 
_subIdentifier

 &
;

& '
readonly 
bool 
_resolveAll !
;! "
readonly 
Func 
< 
DiContainer !
,! " 
ISubContainerCreator# 7
>7 8
_creatorFactory9 H
;H I
public (
SubContainerBindingFinalizer +
(+ ,
BindInfo 
bindInfo 
, 
object %
subIdentifier& 3
,3 4
bool 

resolveAll 
, 
Func !
<! "
DiContainer" -
,- . 
ISubContainerCreator/ C
>C D
creatorFactoryE S
)S T
: 
base 
( 
bindInfo 
) 
{ 	
_subIdentifier 
= 
subIdentifier *
;* +
_resolveAll 
= 

resolveAll $
;$ %
_creatorFactory 
= 
creatorFactory ,
;, -
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert 
. 
IsEmpty 
( 
BindInfo '
.' (
ToTypes( /
)/ 0
;0 1
FinalizeBindingSelf #
(# $
	container$ -
)- .
;. /
} 
else 
{   #
FinalizeBindingConcrete!! '
(!!' (
	container!!( 1
,!!1 2
BindInfo!!3 ;
.!!; <
ToTypes!!< C
)!!C D
;!!D E
}"" 
}## 	
void%% #
FinalizeBindingConcrete%% $
(%%$ %
DiContainer%%% 0
	container%%1 :
,%%: ;
List%%< @
<%%@ A
Type%%A E
>%%E F
concreteTypes%%G T
)%%T U
{&& 	
var'' 
scope'' 
='' 
GetScope''  
(''  !
)''! "
;''" #
switch)) 
()) 
scope)) 
))) 
{** 
case++ 

ScopeTypes++ 
.++  
	Transient++  )
:++) *
{,, ;
/RegisterProvidersForAllContractsPerConcreteType-- C
(--C D
	container.. !
,..! "
concreteTypes// %
,//% &
(00 
_00 
,00 
concreteType00 (
)00( )
=>00* ,
new11 *
SubContainerDependencyProvider11  >
(11> ?
concreteType22  ,
,22, -
_subIdentifier22. <
,22< =
_creatorFactory22> M
(22M N
	container22N W
)22W X
,22X Y
_resolveAll22Z e
)22e f
)22f g
;22g h
break33 
;33 
}44 
case55 

ScopeTypes55 
.55  
	Singleton55  )
:55) *
{66 
var77 
containerCreator77 (
=77) *
new77+ .%
SubContainerCreatorCached77/ H
(77H I
_creatorFactory77I X
(77X Y
	container77Y b
)77b c
)77c d
;77d e;
/RegisterProvidersForAllContractsPerConcreteType99 C
(99C D
	container:: !
,::! "
concreteTypes;; %
,;;% &
(<< 
_<< 
,<< 
concreteType<< (
)<<( )
=><<* ,
new== *
SubContainerDependencyProvider==  >
(==> ?
concreteType>>  ,
,>>, -
_subIdentifier>>. <
,>>< =
containerCreator>>> N
,>>N O
_resolveAll>>P [
)>>[ \
)>>\ ]
;>>] ^
break?? 
;?? 
}@@ 
defaultAA 
:AA 
{BB 
throwCC 
AssertCC  
.CC  !
CreateExceptionCC! 0
(CC0 1
)CC1 2
;CC2 3
}DD 
}EE 
}FF 	
voidHH 
FinalizeBindingSelfHH  
(HH  !
DiContainerHH! ,
	containerHH- 6
)HH6 7
{II 	
varJJ 
scopeJJ 
=JJ 
GetScopeJJ  
(JJ  !
)JJ! "
;JJ" #
switchLL 
(LL 
scopeLL 
)LL 
{MM 
caseNN 

ScopeTypesNN 
.NN  
	TransientNN  )
:NN) *
{OO '
RegisterProviderPerContractPP /
(PP/ 0
	containerQQ !
,QQ! "
(RR 
_RR 
,RR 
contractTypeRR (
)RR( )
=>RR* ,
newRR- 0*
SubContainerDependencyProviderRR1 O
(RRO P
contractTypeSS (
,SS( )
_subIdentifierSS* 8
,SS8 9
_creatorFactorySS: I
(SSI J
	containerSSJ S
)SSS T
,SST U
_resolveAllSSV a
)SSa b
)SSb c
;SSc d
breakTT 
;TT 
}UU 
caseVV 

ScopeTypesVV 
.VV  
	SingletonVV  )
:VV) *
{WW 
varXX 
containerCreatorXX (
=XX) *
newXX+ .%
SubContainerCreatorCachedXX/ H
(XXH I
_creatorFactoryXXI X
(XXX Y
	containerXXY b
)XXb c
)XXc d
;XXd e'
RegisterProviderPerContractZZ /
(ZZ/ 0
	container[[ !
,[[! "
(\\ 
_\\ 
,\\ 
contractType\\ (
)\\( )
=>\\* ,
new]] *
SubContainerDependencyProvider]]  >
(]]> ?
contractType^^  ,
,^^, -
_subIdentifier^^. <
,^^< =
containerCreator^^> N
,^^N O
_resolveAll^^P [
)^^[ \
)^^\ ]
;^^] ^
break__ 
;__ 
}`` 
defaultaa 
:aa 
{bb 
throwcc 
Assertcc  
.cc  !
CreateExceptioncc! 0
(cc0 1
)cc1 2
;cc2 3
}dd 
}ee 
}ff 	
}gg 
}hh “
jC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Main\SignalBusInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class 
SignalBusInstaller #
:$ %
	Installer& /
</ 0
SignalBusInstaller0 B
>B C
{ 
public 
override 
void 
InstallBindings ,
(, -
)- .
{		 	
Assert

 
.

 
That

 
(

 
!

 
	Container

 "
.

" #

HasBinding

# -
<

- .
	SignalBus

. 7
>

7 8
(

8 9
)

9 :
,

: ;
$str	

< ï
)


ï ñ
;


ñ ó
	Container 
. #
BindInterfacesAndSelfTo -
<- .
	SignalBus. 7
>7 8
(8 9
)9 :
.: ;
AsSingle; C
(C D
)D E
.E F$
CopyIntoAllSubContainersF ^
(^ _
)_ `
;` a
	Container 
. 
BindInterfacesTo &
<& '-
!SignalDeclarationAsyncInitializer' H
>H I
(I J
)J K
.K L
AsSingleL T
(T U
)U V
.V W$
CopyIntoAllSubContainersW o
(o p
)p q
;q r
	Container 
. 
BindMemoryPool $
<$ %
SignalSubscription% 7
,7 8
SignalSubscription9 K
.K L
PoolL P
>P Q
(Q R
)R S
;S T
	Container 
. ,
 BindLateDisposableExecutionOrder 6
<6 7
	SignalBus7 @
>@ A
(A B
-B C
$numC F
)F G
;G H
	Container 
. 
BindFactory !
<! "%
SignalDeclarationBindInfo" ;
,; <
SignalDeclaration= N
,N O
SignalDeclarationP a
.a b
Factoryb i
>i j
(j k
)k l
;l m
} 	
} 
} ƒ'
qC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Conventions\ConventionBindInfo.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
ConventionBindInfo #
{ 
readonly 
List 
< 
Func 
< 
Type 
,  
bool! %
>% &
>& '
_typeFilters( 4
=5 6
new7 :
List; ?
<? @
Func@ D
<D E
TypeE I
,I J
boolK O
>O P
>P Q
(Q R
)R S
;S T
readonly 
List 
< 
Func 
< 
Assembly #
,# $
bool% )
>) *
>* +
_assemblyFilters, <
== >
new? B
ListC G
<G H
FuncH L
<L M
AssemblyM U
,U V
boolW [
>[ \
>\ ]
(] ^
)^ _
;_ `
static 

Dictionary 
< 
Assembly "
," #
Type$ (
[( )
]) *
>* +
_assemblyTypeCache, >
=? @
newA D

DictionaryE O
<O P
AssemblyP X
,X Y
TypeZ ^
[^ _
]_ `
>` a
(a b
)b c
;c d
public 
void 
AddAssemblyFilter %
(% &
Func& *
<* +
Assembly+ 3
,3 4
bool5 9
>9 :
	predicate; D
)D E
{ 	
_assemblyFilters 
. 
Add  
(  !
	predicate! *
)* +
;+ ,
} 	
public 
void 
AddTypeFilter !
(! "
Func" &
<& '
Type' +
,+ ,
bool- 1
>1 2
	predicate3 <
)< =
{ 	
_typeFilters 
. 
Add 
( 
	predicate &
)& '
;' (
} 	
IEnumerable 
< 
Assembly 
> 
GetAllAssemblies .
(. /
)/ 0
{   	
return## 
	AppDomain## 
.## 
CurrentDomain## *
.##* +
GetAssemblies##+ 8
(##8 9
)##9 :
;##: ;
}$$ 	
bool&& !
ShouldIncludeAssembly&& "
(&&" #
Assembly&&# +
assembly&&, 4
)&&4 5
{'' 	
return(( 
_assemblyFilters(( #
.((# $
All(($ '
(((' (
	predicate((( 1
=>((2 4
	predicate((5 >
(((> ?
assembly((? G
)((G H
)((H I
;((I J
})) 	
bool++ 
ShouldIncludeType++ 
(++ 
Type++ #
type++$ (
)++( )
{,, 	
return-- 
_typeFilters-- 
.--  
All--  #
(--# $
	predicate--$ -
=>--. 0
	predicate--1 :
(--: ;
type--; ?
)--? @
)--@ A
;--A B
}.. 	
Type00 
[00 
]00 
GetTypes00 
(00 
Assembly00  
assembly00! )
)00) *
{11 	
Type22 
[22 
]22 
types22 
;22 
{77 
if99 
(99 
!99 
_assemblyTypeCache99 '
.99' (
TryGetValue99( 3
(993 4
assembly994 <
,99< =
out99> A
types99B G
)99G H
)99H I
{:: 
types;; 
=;; 
assembly;; $
.;;$ %
GetTypes;;% -
(;;- .
);;. /
;;;/ 0
_assemblyTypeCache<< &
[<<& '
assembly<<' /
]<</ 0
=<<1 2
types<<3 8
;<<8 9
}== 
}>> 
return@@ 
types@@ 
;@@ 
}AA 	
publicCC 
ListCC 
<CC 
TypeCC 
>CC 
ResolveTypesCC &
(CC& '
)CC' (
{DD 	
returnEE 
GetAllAssembliesEE #
(EE# $
)EE$ %
.FF 
WhereFF 
(FF !
ShouldIncludeAssemblyFF ,
)FF, -
.GG 

SelectManyGG 
(GG 
assemblyGG $
=>GG% '
GetTypesGG( 0
(GG0 1
assemblyGG1 9
)GG9 :
)GG: ;
.HH 
WhereHH 
(HH 
ShouldIncludeTypeHH (
)HH( )
.HH) *
ToListHH* 0
(HH0 1
)HH1 2
;HH2 3
}II 	
}JJ 
}KK ¨ê
SC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\DiContainer.cs
	namespace 	
Zenject
 
{ 
public 

delegate 
bool 
BindingCondition )
() *
InjectContext* 7
c8 9
)9 :
;: ;
[ 
NoReflectionBaking 
] 
public 

class 
DiContainer 
: 
IInstantiator ,
{ 
readonly 

Dictionary 
< 
Type  
,  !
IDecoratorProvider" 4
>4 5
_decorators6 A
=B C
newD G

DictionaryH R
<R S
TypeS W
,W X
IDecoratorProviderY k
>k l
(l m
)m n
;n o
readonly 

Dictionary 
< 
	BindingId %
,% &
List' +
<+ ,
ProviderInfo, 8
>8 9
>9 :

_providers; E
=F G
newH K

DictionaryL V
<V W
	BindingIdW `
,` a
Listb f
<f g
ProviderInfog s
>s t
>t u
(u v
)v w
;w x
readonly 
DiContainer 
[ 
] 
[ 
]  
_containerLookups! 2
=3 4
new5 8
DiContainer9 D
[D E
$numE F
]F G
[G H
]H I
;I J
readonly 
HashSet 
< 
LookupId !
>! "
_resolvesInProgress# 6
=7 8
new9 <
HashSet= D
<D E
LookupIdE M
>M N
(N O
)O P
;P Q
readonly 
HashSet 
< 
LookupId !
>! "$
_resolvesTwiceInProgress# ;
=< =
new> A
HashSetB I
<I J
LookupIdJ R
>R S
(S T
)T U
;U V
readonly  
LazyInstanceInjector %
_lazyInjector& 3
;3 4
readonly!! !
SingletonMarkRegistry!! &"
_singletonMarkRegistry!!' =
=!!> ?
new!!@ C!
SingletonMarkRegistry!!D Y
(!!Y Z
)!!Z [
;!![ \
readonly"" 
Queue"" 
<"" 
BindStatement"" $
>""$ %
_currentBindings""& 6
=""7 8
new""9 <
Queue""= B
<""B C
BindStatement""C P
>""P Q
(""Q R
)""R S
;""S T
readonly## 
List## 
<## 
BindStatement## #
>### $
_childBindings##% 3
=##4 5
new##6 9
List##: >
<##> ?
BindStatement##? L
>##L M
(##M N
)##N O
;##O P
readonly%% 
HashSet%% 
<%% 
Type%% 
>%% 
_validatedTypes%% .
=%%/ 0
new%%1 4
HashSet%%5 <
<%%< =
Type%%= A
>%%A B
(%%B C
)%%C D
;%%D E
readonly&& 
List&& 
<&& 
IValidatable&& "
>&&" #
_validationQueue&&$ 4
=&&5 6
new&&7 :
List&&; ?
<&&? @
IValidatable&&@ L
>&&L M
(&&M N
)&&N O
;&&O P
	Transform)) 
_contextTransform)) #
;))# $
bool** (
_hasLookedUpContextTransform** )
;**) *
	Transform++ #
_inheritedDefaultParent++ )
;++) *
	Transform,, "
_explicitDefaultParent,, (
;,,( )
bool-- %
_hasExplicitDefaultParent-- &
;--& '
ZenjectSettings00 
	_settings00 !
;00! "
bool22 
_hasResolvedRoots22 
;22 
bool33  
_isFinalizingBinding33 !
;33! "
bool44 
_isValidating44 
;44 
bool55 
_isInstalling55 
;55 
bool77 '
_hasDisplayedInstallWarning77 (
;77( )
public:: 
DiContainer:: 
(:: 
IEnumerable;; 
<;; 
DiContainer;; #
>;;# $&
parentContainersEnumerable;;% ?
,;;? @
bool;;A E
isValidating;;F R
);;R S
{<< 	
_isValidating== 
=== 
isValidating== (
;==( )
_lazyInjector?? 
=?? 
new??  
LazyInstanceInjector??  4
(??4 5
this??5 9
)??9 :
;??: ;"
InstallDefaultBindingsAA "
(AA" #
)AA# $
;AA$ %
FlushBindingsBB 
(BB 
)BB 
;BB 
AssertCC 
.CC 
ThatCC 
(CC 
_currentBindingsCC (
.CC( )
CountCC) .
==CC/ 1
$numCC2 3
)CC3 4
;CC4 5
	_settingsEE 
=EE 
ZenjectSettingsEE '
.EE' (
DefaultEE( /
;EE/ 0
varGG 

selfLookupGG 
=GG 
newGG  
[GG  !
]GG! "
{GG# $
thisGG% )
}GG* +
;GG+ ,
_containerLookupsHH 
[HH 
(HH 
intHH "
)HH" #
InjectSourcesHH# 0
.HH0 1
LocalHH1 6
]HH6 7
=HH8 9

selfLookupHH: D
;HHD E
varJJ 
parentContainersJJ  
=JJ! "&
parentContainersEnumerableJJ# =
.JJ= >
ToArrayJJ> E
(JJE F
)JJF G
;JJG H
_containerLookupsKK 
[KK 
(KK 
intKK "
)KK" #
InjectSourcesKK# 0
.KK0 1
ParentKK1 7
]KK7 8
=KK9 :
parentContainersKK; K
;KKK L
varMM 
ancestorContainersMM "
=MM# $#
FlattenInheritanceChainMM% <
(MM< =
)MM= >
.MM> ?
ToArrayMM? F
(MMF G
)MMG H
;MMH I
_containerLookupsOO 
[OO 
(OO 
intOO "
)OO" #
InjectSourcesOO# 0
.OO0 1
	AnyParentOO1 :
]OO: ;
=OO< =
ancestorContainersOO> P
;OOP Q
_containerLookupsPP 
[PP 
(PP 
intPP "
)PP" #
InjectSourcesPP# 0
.PP0 1
AnyPP1 4
]PP4 5
=PP6 7

selfLookupPP8 B
.PPB C
ConcatPPC I
(PPI J
ancestorContainersPPJ \
)PP\ ]
.PP] ^
ToArrayPP^ e
(PPe f
)PPf g
;PPg h
ifRR 
(RR 
!RR 
parentContainersRR !
.RR! "
IsEmptyRR" )
(RR) *
)RR* +
)RR+ ,
{SS 
forTT 
(TT 
intTT 
iTT 
=TT 
$numTT 
;TT 
iTT  !
<TT" #
parentContainersTT$ 4
.TT4 5
LengthTT5 ;
;TT; <
iTT= >
++TT> @
)TT@ A
{UU 
parentContainersVV $
[VV$ %
iVV% &
]VV& '
.VV' (
FlushBindingsVV( 5
(VV5 6
)VV6 7
;VV7 8
}WW #
_inheritedDefaultParentZZ '
=ZZ( )
parentContainersZZ* :
.ZZ: ;
FirstZZ; @
(ZZ@ A
)ZZA B
.ZZB C
DefaultParentZZC P
;ZZP Q
foreach__ 
(__ 
var__ 
ancestorContainer__ .
in__/ 1
ancestorContainers__2 D
.__D E
Distinct__E M
(__M N
)__N O
)__O P
{`` 
foreachaa 
(aa 
varaa  
bindingaa! (
inaa) +
ancestorContaineraa, =
.aa= >
_childBindingsaa> L
)aaL M
{bb 
ifcc 
(cc  
ShouldInheritBindingcc 0
(cc0 1
bindingcc1 8
,cc8 9
ancestorContainercc: K
)ccK L
)ccL M
{dd 
FinalizeBindingee +
(ee+ ,
bindingee, 3
)ee3 4
;ee4 5
}ff 
}gg 
}hh 
Assertjj 
.jj 
Thatjj 
(jj 
_currentBindingsjj ,
.jj, -
Countjj- 2
==jj3 5
$numjj6 7
)jj7 8
;jj8 9
Assertkk 
.kk 
Thatkk 
(kk 
_childBindingskk *
.kk* +
Countkk+ 0
==kk1 3
$numkk4 5
)kk5 6
;kk6 7
}ll 
varoo 
settingsoo 
=oo 

TryResolveoo %
<oo% &
ZenjectSettingsoo& 5
>oo5 6
(oo6 7
)oo7 8
;oo8 9
ifqq 
(qq 
settingsqq 
!=qq 
nullqq  
)qq  !
{rr 
	_settingsss 
=ss 
settingsss $
;ss$ %
}tt 
}uu 	
publicww 
DiContainerww 
(ww 
boolww 
isValidatingww  ,
)ww, -
:xx 
thisxx 
(xx 

Enumerablexx 
.xx 
Emptyxx #
<xx# $
DiContainerxx$ /
>xx/ 0
(xx0 1
)xx1 2
,xx2 3
isValidatingxx4 @
)xx@ A
{yy 	
}zz 	
public|| 
DiContainer|| 
(|| 
)|| 
:}} 
this}} 
(}} 

Enumerable}} 
.}} 
Empty}} #
<}}# $
DiContainer}}$ /
>}}/ 0
(}}0 1
)}}1 2
,}}2 3
false}}4 9
)}}9 :
{~~ 	
} 	
public
ÅÅ 
DiContainer
ÅÅ 
(
ÅÅ 
DiContainer
ÅÅ &
parentContainer
ÅÅ' 6
,
ÅÅ6 7
bool
ÅÅ8 <
isValidating
ÅÅ= I
)
ÅÅI J
:
ÇÇ 
this
ÇÇ 
(
ÇÇ 
new
ÇÇ 
[
ÇÇ 
]
ÇÇ 
{
ÇÇ 
parentContainer
ÇÇ +
}
ÇÇ, -
,
ÇÇ- .
isValidating
ÇÇ/ ;
)
ÇÇ; <
{
ÉÉ 	
}
ÑÑ 	
public
ÜÜ 
DiContainer
ÜÜ 
(
ÜÜ 
DiContainer
ÜÜ &
parentContainer
ÜÜ' 6
)
ÜÜ6 7
:
áá 
this
áá 
(
áá 
new
áá 
[
áá 
]
áá 
{
áá 
parentContainer
áá +
}
áá, -
,
áá- .
false
áá/ 4
)
áá4 5
{
àà 	
}
ââ 	
public
ãã 
DiContainer
ãã 
(
ãã 
IEnumerable
ãã &
<
ãã& '
DiContainer
ãã' 2
>
ãã2 3
parentContainers
ãã4 D
)
ããD E
:
åå 
this
åå 
(
åå 
parentContainers
åå #
,
åå# $
false
åå% *
)
åå* +
{
çç 	
}
éé 	
public
îî 
ZenjectSettings
îî 
Settings
îî '
{
ïï 	
get
ññ 
{
ññ 
return
ññ 
	_settings
ññ "
;
ññ" #
}
ññ$ %
set
óó 
{
òò 
	_settings
ôô 
=
ôô 
value
ôô !
;
ôô! "
Rebind
öö 
<
öö 
ZenjectSettings
öö &
>
öö& '
(
öö' (
)
öö( )
.
öö) *
FromInstance
öö* 6
(
öö6 7
value
öö7 <
)
öö< =
;
öö= >
}
õõ 
}
úú 	
internal
ûû #
SingletonMarkRegistry
ûû &#
SingletonMarkRegistry
ûû' <
{
üü 	
get
†† 
{
†† 
return
†† $
_singletonMarkRegistry
†† /
;
††/ 0
}
††1 2
}
°° 	
public
££ 
IEnumerable
££ 
<
££ 
	IProvider
££ $
>
££$ %
AllProviders
££& 2
{
§§ 	
get
¶¶ 
{
¶¶ 
return
¶¶ 

_providers
¶¶ #
.
¶¶# $
Values
¶¶$ *
.
¶¶* +

SelectMany
¶¶+ 5
(
¶¶5 6
x
¶¶6 7
=>
¶¶8 :
x
¶¶; <
)
¶¶< =
.
¶¶= >
Select
¶¶> D
(
¶¶D E
x
¶¶E F
=>
¶¶G I
x
¶¶J K
.
¶¶K L
Provider
¶¶L T
)
¶¶T U
.
¶¶U V
Distinct
¶¶V ^
(
¶¶^ _
)
¶¶_ `
;
¶¶` a
}
¶¶b c
}
ßß 	
void
©© $
InstallDefaultBindings
©© #
(
©©# $
)
©©$ %
{
™™ 	
Bind
´´ 
(
´´ 
typeof
´´ 
(
´´ 
DiContainer
´´ #
)
´´# $
,
´´$ %
typeof
´´& ,
(
´´, -
IInstantiator
´´- :
)
´´: ;
)
´´; <
.
´´< =
FromInstance
´´= I
(
´´I J
this
´´J N
)
´´N O
;
´´O P
Bind
¨¨ 
(
¨¨ 
typeof
¨¨ 
(
¨¨ 

LazyInject
¨¨ "
<
¨¨" #
>
¨¨# $
)
¨¨$ %
)
¨¨% &
.
¨¨& '
FromMethodUntyped
¨¨' 8
(
¨¨8 9
CreateLazyBinding
¨¨9 J
)
¨¨J K
.
¨¨K L
Lazy
¨¨L P
(
¨¨P Q
)
¨¨Q R
;
¨¨R S
}
≠≠ 	
object
ØØ 
CreateLazyBinding
ØØ  
(
ØØ  !
InjectContext
ØØ! .
context
ØØ/ 6
)
ØØ6 7
{
∞∞ 	
var
≤≤ 

newContext
≤≤ 
=
≤≤ 
context
≤≤ $
.
≤≤$ %
Clone
≤≤% *
(
≤≤* +
)
≤≤+ ,
;
≤≤, -

newContext
≥≥ 
.
≥≥ 

MemberType
≥≥ !
=
≥≥" #
context
≥≥$ +
.
≥≥+ ,

MemberType
≥≥, 6
.
≥≥6 7
GenericArguments
≥≥7 G
(
≥≥G H
)
≥≥H I
.
≥≥I J
Single
≥≥J P
(
≥≥P Q
)
≥≥Q R
;
≥≥R S
var
µµ 
result
µµ 
=
µµ 
	Activator
µµ "
.
µµ" #
CreateInstance
µµ# 1
(
µµ1 2
typeof
∂∂ 
(
∂∂ 

LazyInject
∂∂ !
<
∂∂! "
>
∂∂" #
)
∂∂# $
.
∑∑ 
MakeGenericType
∑∑  
(
∑∑  !

newContext
∑∑! +
.
∑∑+ ,

MemberType
∑∑, 6
)
∑∑6 7
,
∑∑7 8
this
∑∑9 =
,
∑∑= >

newContext
∑∑? I
)
∑∑I J
;
∑∑J K
if
ππ 
(
ππ 
_isValidating
ππ 
)
ππ 
{
∫∫ 
QueueForValidate
ªª  
(
ªª  !
(
ªª! "
IValidatable
ªª" .
)
ªª. /
result
ªª/ 5
)
ªª5 6
;
ªª6 7
}
ºº 
return
ææ 
result
ææ 
;
ææ 
}
øø 	
public
¡¡ 
void
¡¡ 
QueueForValidate
¡¡ $
(
¡¡$ %
IValidatable
¡¡% 1
validatable
¡¡2 =
)
¡¡= >
{
¬¬ 	
if
ƒƒ 
(
ƒƒ 
!
ƒƒ 
_hasResolvedRoots
ƒƒ "
)
ƒƒ" #
{
≈≈ 
var
∆∆ 
concreteType
∆∆  
=
∆∆! "
validatable
∆∆# .
.
∆∆. /
GetType
∆∆/ 6
(
∆∆6 7
)
∆∆7 8
;
∆∆8 9
if
»» 
(
»» 
!
»» 
_validatedTypes
»» $
.
»»$ %
Contains
»»% -
(
»»- .
concreteType
»». :
)
»»: ;
)
»»; <
{
…… 
_validatedTypes
   #
.
  # $
Add
  $ '
(
  ' (
concreteType
  ( 4
)
  4 5
;
  5 6
_validationQueue
ÀÀ $
.
ÀÀ$ %
Add
ÀÀ% (
(
ÀÀ( )
validatable
ÀÀ) 4
)
ÀÀ4 5
;
ÀÀ5 6
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 	
bool
–– "
ShouldInheritBinding
–– !
(
––! "
BindStatement
––" /
binding
––0 7
,
––7 8
DiContainer
––9 D
ancestorContainer
––E V
)
––V W
{
—— 	
if
““ 
(
““ 
binding
““ 
.
““ &
BindingInheritanceMethod
““ 0
==
““1 3'
BindingInheritanceMethods
““4 M
.
““M N
CopyIntoAll
““N Y
||
”” 
binding
”” 
.
”” &
BindingInheritanceMethod
”” 3
==
””4 6'
BindingInheritanceMethods
””7 P
.
””P Q
MoveIntoAll
””Q \
)
””\ ]
{
‘‘ 
return
’’ 
true
’’ 
;
’’ 
}
÷÷ 
if
ÿÿ 
(
ÿÿ 
(
ÿÿ 
binding
ÿÿ 
.
ÿÿ &
BindingInheritanceMethod
ÿÿ 1
==
ÿÿ2 4'
BindingInheritanceMethods
ÿÿ5 N
.
ÿÿN O
CopyDirectOnly
ÿÿO ]
||
ŸŸ 
binding
ŸŸ 
.
ŸŸ &
BindingInheritanceMethod
ŸŸ 7
==
ŸŸ8 :'
BindingInheritanceMethods
ŸŸ; T
.
ŸŸT U
MoveDirectOnly
ŸŸU c
)
ŸŸc d
&&
⁄⁄ 
ParentContainers
⁄⁄ #
.
⁄⁄# $
Contains
⁄⁄$ ,
(
⁄⁄, -
ancestorContainer
⁄⁄- >
)
⁄⁄> ?
)
⁄⁄? @
{
€€ 
return
‹‹ 
true
‹‹ 
;
‹‹ 
}
›› 
return
ﬂﬂ 
false
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
	Transform
‰‰ 
ContextTransform
‰‰ "
{
ÂÂ 	
get
ÊÊ 
{
ÁÁ 
if
ËË 
(
ËË 
!
ËË *
_hasLookedUpContextTransform
ËË 1
)
ËË1 2
{
ÈÈ *
_hasLookedUpContextTransform
ÍÍ 0
=
ÍÍ1 2
true
ÍÍ3 7
;
ÍÍ7 8
var
ÏÏ 
context
ÏÏ 
=
ÏÏ  !

TryResolve
ÏÏ" ,
<
ÏÏ, -
Context
ÏÏ- 4
>
ÏÏ4 5
(
ÏÏ5 6
)
ÏÏ6 7
;
ÏÏ7 8
if
ÓÓ 
(
ÓÓ 
context
ÓÓ 
!=
ÓÓ  "
null
ÓÓ# '
)
ÓÓ' (
{
ÔÔ 
_contextTransform
 )
=
* +
context
, 3
.
3 4
	transform
4 =
;
= >
}
ÒÒ 
}
ÚÚ 
return
ÙÙ 
_contextTransform
ÙÙ (
;
ÙÙ( )
}
ıı 
}
ˆˆ 	
public
¸¸ 
bool
¸¸ $
AssertOnNewGameObjects
¸¸ *
{
˝˝ 	
get
˛˛ 
;
˛˛ 
set
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
public
ÑÑ 
	Transform
ÑÑ $
InheritedDefaultParent
ÑÑ /
{
ÖÖ 	
get
ÜÜ 
{
ÜÜ 
return
ÜÜ %
_inheritedDefaultParent
ÜÜ 0
;
ÜÜ0 1
}
ÜÜ2 3
}
áá 	
public
ââ 
	Transform
ââ 
DefaultParent
ââ &
{
ää 	
get
ãã 
{
ãã 
return
ãã $
_explicitDefaultParent
ãã /
;
ãã/ 0
}
ãã1 2
set
åå 
{
çç $
_explicitDefaultParent
éé &
=
éé' (
value
éé) .
;
éé. /'
_hasExplicitDefaultParent
êê )
=
êê* +
true
êê, 0
;
êê0 1
}
ëë 
}
íí 	
public
ïï 
DiContainer
ïï 
[
ïï 
]
ïï 
ParentContainers
ïï -
{
ññ 	
get
óó 
{
óó 
return
óó 
_containerLookups
óó *
[
óó* +
(
óó+ ,
int
óó, /
)
óó/ 0
InjectSources
óó0 =
.
óó= >
Parent
óó> D
]
óóD E
;
óóE F
}
óóG H
}
òò 	
public
öö 
DiContainer
öö 
[
öö 
]
öö  
AncestorContainers
öö /
{
õõ 	
get
úú 
{
úú 
return
úú 
_containerLookups
úú *
[
úú* +
(
úú+ ,
int
úú, /
)
úú/ 0
InjectSources
úú0 =
.
úú= >
	AnyParent
úú> G
]
úúG H
;
úúH I
}
úúJ K
}
ùù 	
public
üü 
bool
üü +
ChecksForCircularDependencies
üü 1
{
†† 	
get
°° 
{
¢¢ 
return
®® 
true
®® 
;
®® 
}
™™ 
}
´´ 	
public
≠≠ 
bool
≠≠ 
IsValidating
≠≠  
{
ÆÆ 	
get
ØØ 
{
ØØ 
return
ØØ 
_isValidating
ØØ &
;
ØØ& '
}
ØØ( )
}
∞∞ 	
public
∏∏ 
bool
∏∏ 
IsInstalling
∏∏  
{
ππ 	
get
∫∫ 
{
∫∫ 
return
∫∫ 
_isInstalling
∫∫ &
;
∫∫& '
}
∫∫( )
set
ªª 
{
ªª 
_isInstalling
ªª 
=
ªª  !
value
ªª" '
;
ªª' (
}
ªª) *
}
ºº 	
public
ææ 
IEnumerable
ææ 
<
ææ 
	BindingId
ææ $
>
ææ$ %
AllContracts
ææ& 2
{
øø 	
get
¿¿ 
{
¡¡ 
FlushBindings
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬  
return
√√ 

_providers
√√ !
.
√√! "
Keys
√√" &
;
√√& '
}
ƒƒ 
}
≈≈ 	
public
«« 
void
«« 
ResolveRoots
««  
(
««  !
)
««! "
{
»» 	
Assert
…… 
.
…… 
That
…… 
(
…… 
!
…… 
_hasResolvedRoots
…… *
)
……* +
;
……+ ,
FlushBindings
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ $
ResolveDependencyRoots
ÕÕ "
(
ÕÕ" #
)
ÕÕ# $
;
ÕÕ$ %
if
œœ 
(
œœ 
IsValidating
œœ 
&&
œœ 
	_settings
œœ  )
.
œœ) *)
ValidationRootResolveMethod
œœ* E
==
œœF H 
RootResolveMethods
œœI [
.
œœ[ \
All
œœ\ _
)
œœ_ `
{
–– !
ValidateFullResolve
—— #
(
——# $
)
——$ %
;
——% &
}
““ 
_lazyInjector
’’ 
.
’’ 
LazyInjectAll
’’ '
(
’’' (
)
’’( )
;
’’) *
if
◊◊ 
(
◊◊ 
IsValidating
◊◊ 
)
◊◊ 
{
ÿÿ "
FlushValidationQueue
ŸŸ $
(
ŸŸ$ %
)
ŸŸ% &
;
ŸŸ& '
}
⁄⁄ 
Assert
‹‹ 
.
‹‹ 
That
‹‹ 
(
‹‹ 
!
‹‹ 
_hasResolvedRoots
‹‹ *
)
‹‹* +
;
‹‹+ ,
_hasResolvedRoots
›› 
=
›› 
true
››  $
;
››$ %
}
ﬁﬁ 	
void
‡‡ $
ResolveDependencyRoots
‡‡ #
(
‡‡# $
)
‡‡$ %
{
·· 	
var
‚‚ 
rootBindings
‚‚ 
=
‚‚ 
new
‚‚ "
List
‚‚# '
<
‚‚' (
	BindingId
‚‚( 1
>
‚‚1 2
(
‚‚2 3
)
‚‚3 4
;
‚‚4 5
var
„„ 
rootProviders
„„ 
=
„„ 
new
„„  #
List
„„$ (
<
„„( )
ProviderInfo
„„) 5
>
„„5 6
(
„„6 7
)
„„7 8
;
„„8 9
foreach
ÂÂ 
(
ÂÂ 
var
ÂÂ 
bindingPair
ÂÂ $
in
ÂÂ% '

_providers
ÂÂ( 2
)
ÂÂ2 3
{
ÊÊ 
foreach
ÁÁ 
(
ÁÁ 
var
ÁÁ 
provider
ÁÁ %
in
ÁÁ& (
bindingPair
ÁÁ) 4
.
ÁÁ4 5
Value
ÁÁ5 :
)
ÁÁ: ;
{
ËË 
if
ÈÈ 
(
ÈÈ 
provider
ÈÈ  
.
ÈÈ  !
NonLazy
ÈÈ! (
)
ÈÈ( )
{
ÍÍ 
rootBindings
ÓÓ $
.
ÓÓ$ %
Add
ÓÓ% (
(
ÓÓ( )
bindingPair
ÓÓ) 4
.
ÓÓ4 5
Key
ÓÓ5 8
)
ÓÓ8 9
;
ÓÓ9 :
rootProviders
ÔÔ %
.
ÔÔ% &
Add
ÔÔ& )
(
ÔÔ) *
provider
ÔÔ* 2
)
ÔÔ2 3
;
ÔÔ3 4
}
 
}
ÒÒ 
}
ÚÚ 
Assert
ÙÙ 
.
ÙÙ 
IsEqual
ÙÙ 
(
ÙÙ 
rootProviders
ÙÙ (
.
ÙÙ( )
Count
ÙÙ) .
,
ÙÙ. /
rootBindings
ÙÙ0 <
.
ÙÙ< =
Count
ÙÙ= B
)
ÙÙB C
;
ÙÙC D
var
ˆˆ 
	instances
ˆˆ 
=
ˆˆ 
ZenPools
ˆˆ $
.
ˆˆ$ %
	SpawnList
ˆˆ% .
<
ˆˆ. /
object
ˆˆ/ 5
>
ˆˆ5 6
(
ˆˆ6 7
)
ˆˆ7 8
;
ˆˆ8 9
try
¯¯ 
{
˘˘ 
for
˙˙ 
(
˙˙ 
int
˙˙ 
i
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
i
˙˙  !
<
˙˙" #
rootProviders
˙˙$ 1
.
˙˙1 2
Count
˙˙2 7
;
˙˙7 8
i
˙˙9 :
++
˙˙: <
)
˙˙< =
{
˚˚ 
var
¸¸ 
bindId
¸¸ 
=
¸¸  
rootBindings
¸¸! -
[
¸¸- .
i
¸¸. /
]
¸¸/ 0
;
¸¸0 1
var
˝˝ 
providerInfo
˝˝ $
=
˝˝% &
rootProviders
˝˝' 4
[
˝˝4 5
i
˝˝5 6
]
˝˝6 7
;
˝˝7 8
using
ˇˇ 
(
ˇˇ 
var
ˇˇ 
context
ˇˇ &
=
ˇˇ' (
ZenPools
ˇˇ) 1
.
ˇˇ1 2 
SpawnInjectContext
ˇˇ2 D
(
ˇˇD E
this
ˇˇE I
,
ˇˇI J
bindId
ˇˇK Q
.
ˇˇQ R
Type
ˇˇR V
)
ˇˇV W
)
ˇˇW X
{
ÄÄ 
context
ÅÅ 
.
ÅÅ  

Identifier
ÅÅ  *
=
ÅÅ+ ,
bindId
ÅÅ- 3
.
ÅÅ3 4

Identifier
ÅÅ4 >
;
ÅÅ> ?
context
ÇÇ 
.
ÇÇ  

SourceType
ÇÇ  *
=
ÇÇ+ ,
InjectSources
ÇÇ- :
.
ÇÇ: ;
Local
ÇÇ; @
;
ÇÇ@ A
context
áá 
.
áá  
Optional
áá  (
=
áá) *
false
áá+ 0
;
áá0 1
	instances
ââ !
.
ââ! "
Clear
ââ" '
(
ââ' (
)
ââ( )
;
ââ) *
{
éé 
SafeGetInstances
èè ,
(
èè, -
providerInfo
èè- 9
,
èè9 :
context
èè; B
,
èèB C
	instances
èèD M
)
èèM N
;
èèN O
}
êê 
}
îî 
}
ïï 
}
ññ 
finally
óó 
{
òò 
ZenPools
ôô 
.
ôô 
DespawnList
ôô $
(
ôô$ %
	instances
ôô% .
)
ôô. /
;
ôô/ 0
}
öö 
}
õõ 	
void
ùù !
ValidateFullResolve
ùù  
(
ùù  !
)
ùù! "
{
ûû 	
Assert
üü 
.
üü 
That
üü 
(
üü 
!
üü 
_hasResolvedRoots
üü *
)
üü* +
;
üü+ ,
Assert
†† 
.
†† 
That
†† 
(
†† 
IsValidating
†† $
)
††$ %
;
††% &
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
	bindingId
¢¢ "
in
¢¢# %

_providers
¢¢& 0
.
¢¢0 1
Keys
¢¢1 5
.
¢¢5 6
ToList
¢¢6 <
(
¢¢< =
)
¢¢= >
)
¢¢> ?
{
££ 
if
§§ 
(
§§ 
!
§§ 
	bindingId
§§ 
.
§§ 
Type
§§ #
.
§§# $
IsOpenGenericType
§§$ 5
(
§§5 6
)
§§6 7
)
§§7 8
{
•• 
using
¶¶ 
(
¶¶ 
var
¶¶ 
context
¶¶ &
=
¶¶' (
ZenPools
¶¶) 1
.
¶¶1 2 
SpawnInjectContext
¶¶2 D
(
¶¶D E
this
¶¶E I
,
¶¶I J
	bindingId
¶¶K T
.
¶¶T U
Type
¶¶U Y
)
¶¶Y Z
)
¶¶Z [
{
ßß 
context
®® 
.
®®  

Identifier
®®  *
=
®®+ ,
	bindingId
®®- 6
.
®®6 7

Identifier
®®7 A
;
®®A B
context
©© 
.
©©  

SourceType
©©  *
=
©©+ ,
InjectSources
©©- :
.
©©: ;
Local
©©; @
;
©©@ A
context
™™ 
.
™™  
Optional
™™  (
=
™™) *
true
™™+ /
;
™™/ 0

ResolveAll
¨¨ "
(
¨¨" #
context
¨¨# *
)
¨¨* +
;
¨¨+ ,
}
≠≠ 
}
ÆÆ 
}
ØØ 
}
∞∞ 	
void
≤≤ "
FlushValidationQueue
≤≤ !
(
≤≤! "
)
≤≤" #
{
≥≥ 	
Assert
¥¥ 
.
¥¥ 
That
¥¥ 
(
¥¥ 
!
¥¥ 
_hasResolvedRoots
¥¥ *
)
¥¥* +
;
¥¥+ ,
Assert
µµ 
.
µµ 
That
µµ 
(
µµ 
IsValidating
µµ $
)
µµ$ %
;
µµ% &
var
∑∑ 
validatables
∑∑ 
=
∑∑ 
new
∑∑ "
List
∑∑# '
<
∑∑' (
IValidatable
∑∑( 4
>
∑∑4 5
(
∑∑5 6
)
∑∑6 7
;
∑∑7 8
while
ªª 
(
ªª 
_validationQueue
ªª #
.
ªª# $
Any
ªª$ '
(
ªª' (
)
ªª( )
)
ªª) *
{
ºº 
validatables
ΩΩ 
.
ΩΩ 
Clear
ΩΩ "
(
ΩΩ" #
)
ΩΩ# $
;
ΩΩ$ %
validatables
ææ 
.
ææ 
AllocFreeAddRange
ææ .
(
ææ. /
_validationQueue
ææ/ ?
)
ææ? @
;
ææ@ A
_validationQueue
øø  
.
øø  !
Clear
øø! &
(
øø& '
)
øø' (
;
øø( )
for
¡¡ 
(
¡¡ 
int
¡¡ 
i
¡¡ 
=
¡¡ 
$num
¡¡ 
;
¡¡ 
i
¡¡  !
<
¡¡" #
validatables
¡¡$ 0
.
¡¡0 1
Count
¡¡1 6
;
¡¡6 7
i
¡¡8 9
++
¡¡9 ;
)
¡¡; <
{
¬¬ 
validatables
√√  
[
√√  !
i
√√! "
]
√√" #
.
√√# $
Validate
√√$ ,
(
√√, -
)
√√- .
;
√√. /
}
ƒƒ 
}
≈≈ 
}
∆∆ 	
public
»» 
DiContainer
»»  
CreateSubContainer
»» -
(
»»- .
)
»». /
{
…… 	
return
    
CreateSubContainer
   %
(
  % &
_isValidating
  & 3
)
  3 4
;
  4 5
}
ÀÀ 	
public
ÕÕ 
void
ÕÕ 
QueueForInject
ÕÕ "
(
ÕÕ" #
object
ÕÕ# )
instance
ÕÕ* 2
)
ÕÕ2 3
{
ŒŒ 	
_lazyInjector
œœ 
.
œœ 
AddInstance
œœ %
(
œœ% &
instance
œœ& .
)
œœ. /
;
œœ/ 0
}
–– 	
public
ŸŸ 
T
ŸŸ 

LazyInject
ŸŸ 
<
ŸŸ 
T
ŸŸ 
>
ŸŸ 
(
ŸŸ 
T
ŸŸ  
instance
ŸŸ! )
)
ŸŸ) *
{
⁄⁄ 	
_lazyInjector
€€ 
.
€€ 

LazyInject
€€ $
(
€€$ %
instance
€€% -
)
€€- .
;
€€. /
return
‹‹ 
instance
‹‹ 
;
‹‹ 
}
›› 	
DiContainer
ﬂﬂ  
CreateSubContainer
ﬂﬂ &
(
ﬂﬂ& '
bool
ﬂﬂ' +
isValidating
ﬂﬂ, 8
)
ﬂﬂ8 9
{
‡‡ 	
return
·· 
new
·· 
DiContainer
·· "
(
··" #
new
··# &
[
··& '
]
··' (
{
··) *
this
··+ /
}
··0 1
,
··1 2
isValidating
··3 ?
)
··? @
;
··@ A
}
‚‚ 	
public
‰‰ 
void
‰‰ 
RegisterProvider
‰‰ $
(
‰‰$ %
	BindingId
ÂÂ 
	bindingId
ÂÂ 
,
ÂÂ  
BindingCondition
ÂÂ! 1
	condition
ÂÂ2 ;
,
ÂÂ; <
	IProvider
ÂÂ= F
provider
ÂÂG O
,
ÂÂO P
bool
ÂÂQ U
nonLazy
ÂÂV ]
)
ÂÂ] ^
{
ÊÊ 	
var
ÁÁ 
info
ÁÁ 
=
ÁÁ 
new
ÁÁ 
ProviderInfo
ÁÁ '
(
ÁÁ' (
provider
ÁÁ( 0
,
ÁÁ0 1
	condition
ÁÁ2 ;
,
ÁÁ; <
nonLazy
ÁÁ= D
,
ÁÁD E
this
ÁÁF J
)
ÁÁJ K
;
ÁÁK L
List
ÈÈ 
<
ÈÈ 
ProviderInfo
ÈÈ 
>
ÈÈ 
providerInfos
ÈÈ ,
;
ÈÈ, -
if
ÎÎ 
(
ÎÎ 
!
ÎÎ 

_providers
ÎÎ 
.
ÎÎ 
TryGetValue
ÎÎ '
(
ÎÎ' (
	bindingId
ÎÎ( 1
,
ÎÎ1 2
out
ÎÎ3 6
providerInfos
ÎÎ7 D
)
ÎÎD E
)
ÎÎE F
{
ÏÏ 
providerInfos
ÌÌ 
=
ÌÌ 
new
ÌÌ  #
List
ÌÌ$ (
<
ÌÌ( )
ProviderInfo
ÌÌ) 5
>
ÌÌ5 6
(
ÌÌ6 7
)
ÌÌ7 8
;
ÌÌ8 9

_providers
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
	bindingId
ÓÓ (
,
ÓÓ( )
providerInfos
ÓÓ* 7
)
ÓÓ7 8
;
ÓÓ8 9
}
ÔÔ 
providerInfos
ÒÒ 
.
ÒÒ 
Add
ÒÒ 
(
ÒÒ 
info
ÒÒ "
)
ÒÒ" #
;
ÒÒ# $
}
ÚÚ 	
void
ÙÙ  
GetProviderMatches
ÙÙ 
(
ÙÙ  
InjectContext
ıı 
context
ıı !
,
ıı! "
List
ıı# '
<
ıı' (
ProviderInfo
ıı( 4
>
ıı4 5
buffer
ıı6 <
)
ıı< =
{
ˆˆ 	
Assert
˜˜ 
.
˜˜ 
	IsNotNull
˜˜ 
(
˜˜ 
context
˜˜ $
)
˜˜$ %
;
˜˜% &
Assert
¯¯ 
.
¯¯ 
That
¯¯ 
(
¯¯ 
buffer
¯¯ 
.
¯¯ 
Count
¯¯ $
==
¯¯% '
$num
¯¯( )
)
¯¯) *
;
¯¯* +
var
˙˙ 

allMatches
˙˙ 
=
˙˙ 
ZenPools
˙˙ %
.
˙˙% &
	SpawnList
˙˙& /
<
˙˙/ 0
ProviderInfo
˙˙0 <
>
˙˙< =
(
˙˙= >
)
˙˙> ?
;
˙˙? @
try
¸¸ 
{
˝˝ %
GetProvidersForContract
˛˛ '
(
˛˛' (
context
ˇˇ 
.
ˇˇ 
	BindingId
ˇˇ %
,
ˇˇ% &
context
ˇˇ' .
.
ˇˇ. /

SourceType
ˇˇ/ 9
,
ˇˇ9 :

allMatches
ˇˇ; E
)
ˇˇE F
;
ˇˇF G
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
i
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
i
ÅÅ  !
<
ÅÅ" #

allMatches
ÅÅ$ .
.
ÅÅ. /
Count
ÅÅ/ 4
;
ÅÅ4 5
i
ÅÅ6 7
++
ÅÅ7 9
)
ÅÅ9 :
{
ÇÇ 
var
ÉÉ 
match
ÉÉ 
=
ÉÉ 

allMatches
ÉÉ  *
[
ÉÉ* +
i
ÉÉ+ ,
]
ÉÉ, -
;
ÉÉ- .
if
ÖÖ 
(
ÖÖ 
match
ÖÖ 
.
ÖÖ 
	Condition
ÖÖ '
==
ÖÖ( *
null
ÖÖ+ /
||
ÖÖ0 2
match
ÖÖ3 8
.
ÖÖ8 9
	Condition
ÖÖ9 B
(
ÖÖB C
context
ÖÖC J
)
ÖÖJ K
)
ÖÖK L
{
ÜÜ 
buffer
áá 
.
áá 
Add
áá "
(
áá" #
match
áá# (
)
áá( )
;
áá) *
}
àà 
}
ââ 
}
ää 
finally
ãã 
{
åå 
ZenPools
çç 
.
çç 
DespawnList
çç $
(
çç$ %

allMatches
çç% /
)
çç/ 0
;
çç0 1
}
éé 
}
èè 	
ProviderInfo
ëë "
TryGetUniqueProvider
ëë )
(
ëë) *
InjectContext
ëë* 7
context
ëë8 ?
)
ëë? @
{
íí 	
Assert
ìì 
.
ìì 
	IsNotNull
ìì 
(
ìì 
context
ìì $
)
ìì$ %
;
ìì% &
var
ïï 
	bindingId
ïï 
=
ïï 
context
ïï #
.
ïï# $
	BindingId
ïï$ -
;
ïï- .
var
ññ 

sourceType
ññ 
=
ññ 
context
ññ $
.
ññ$ %

SourceType
ññ% /
;
ññ/ 0
var
òò 
containerLookups
òò  
=
òò! "
_containerLookups
òò# 4
[
òò4 5
(
òò5 6
int
òò6 9
)
òò9 :

sourceType
òò: D
]
òòD E
;
òòE F
for
öö 
(
öö 
int
öö 
i
öö 
=
öö 
$num
öö 
;
öö 
i
öö 
<
öö 
containerLookups
öö  0
.
öö0 1
Length
öö1 7
;
öö7 8
i
öö9 :
++
öö: <
)
öö< =
{
õõ 
containerLookups
úú  
[
úú  !
i
úú! "
]
úú" #
.
úú# $
FlushBindings
úú$ 1
(
úú1 2
)
úú2 3
;
úú3 4
}
ùù 
var
üü 
localProviders
üü 
=
üü  
ZenPools
üü! )
.
üü) *
	SpawnList
üü* 3
<
üü3 4
ProviderInfo
üü4 @
>
üü@ A
(
üüA B
)
üüB C
;
üüC D
try
°° 
{
¢¢ 
ProviderInfo
££ 
selected
££ %
=
££& '
null
££( ,
;
££, -
int
§§ 
selectedDistance
§§ $
=
§§% &
Int32
§§' ,
.
§§, -
MaxValue
§§- 5
;
§§5 6
bool
•• "
selectedHasCondition
•• )
=
••* +
false
••, 1
;
••1 2
bool
¶¶  
ambiguousSelection
¶¶ '
=
¶¶( )
false
¶¶* /
;
¶¶/ 0
for
®® 
(
®® 
int
®® 
i
®® 
=
®® 
$num
®® 
;
®® 
i
®®  !
<
®®" #
containerLookups
®®$ 4
.
®®4 5
Length
®®5 ;
;
®®; <
i
®®= >
++
®®> @
)
®®@ A
{
©© 
var
™™ 
	container
™™ !
=
™™" #
containerLookups
™™$ 4
[
™™4 5
i
™™5 6
]
™™6 7
;
™™7 8
int
¨¨ 
curDistance
¨¨ #
=
¨¨$ %+
GetContainerHeirarchyDistance
¨¨& C
(
¨¨C D
	container
¨¨D M
)
¨¨M N
;
¨¨N O
if
ÆÆ 
(
ÆÆ 
curDistance
ÆÆ #
>
ÆÆ$ %
selectedDistance
ÆÆ& 6
)
ÆÆ6 7
{
ØØ 
continue
≤≤  
;
≤≤  !
}
≥≥ 
localProviders
µµ "
.
µµ" #
Clear
µµ# (
(
µµ( )
)
µµ) *
;
µµ* +
	container
∂∂ 
.
∂∂ 
GetLocalProviders
∂∂ /
(
∂∂/ 0
	bindingId
∂∂0 9
,
∂∂9 :
localProviders
∂∂; I
)
∂∂I J
;
∂∂J K
for
∏∏ 
(
∏∏ 
int
∏∏ 
k
∏∏ 
=
∏∏  
$num
∏∏! "
;
∏∏" #
k
∏∏$ %
<
∏∏& '
localProviders
∏∏( 6
.
∏∏6 7
Count
∏∏7 <
;
∏∏< =
k
∏∏> ?
++
∏∏? A
)
∏∏A B
{
ππ 
var
∫∫ 
provider
∫∫ $
=
∫∫% &
localProviders
∫∫' 5
[
∫∫5 6
k
∫∫6 7
]
∫∫7 8
;
∫∫8 9
bool
ºº 
curHasCondition
ºº ,
=
ºº- .
provider
ºº/ 7
.
ºº7 8
	Condition
ºº8 A
!=
ººB D
null
ººE I
;
ººI J
if
ææ 
(
ææ 
curHasCondition
ææ +
&&
ææ, .
!
ææ/ 0
provider
ææ0 8
.
ææ8 9
	Condition
ææ9 B
(
ææB C
context
ææC J
)
ææJ K
)
ææK L
{
øø 
continue
¡¡ $
;
¡¡$ %
}
¬¬ 
Assert
«« 
.
«« 
That
«« #
(
««# $
selected
««$ ,
==
««- /
null
««0 4
||
««5 7
selectedDistance
««8 H
==
««I K
curDistance
««L W
)
««W X
;
««X Y
if
…… 
(
…… 
curHasCondition
…… +
)
……+ ,
{
   
if
ÀÀ 
(
ÀÀ  "
selectedHasCondition
ÀÀ  4
)
ÀÀ4 5
{
ÃÃ  
ambiguousSelection
ŒŒ  2
=
ŒŒ3 4
true
ŒŒ5 9
;
ŒŒ9 :
}
œœ 
else
––  
{
——  
ambiguousSelection
””  2
=
””3 4
false
””5 :
;
””: ;
}
‘‘ 
}
’’ 
else
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ  "
selectedHasCondition
ÿÿ  4
)
ÿÿ4 5
{
ŸŸ 
continue
€€  (
;
€€( )
}
‹‹ 
if
›› 
(
››  
selected
››  (
!=
››) +
null
››, 0
)
››0 1
{
ﬁﬁ  
ambiguousSelection
‡‡  2
=
‡‡3 4
true
‡‡5 9
;
‡‡9 :
}
·· 
}
‚‚ 
if
‰‰ 
(
‰‰  
ambiguousSelection
‰‰ .
)
‰‰. /
{
ÂÂ 
continue
ÊÊ $
;
ÊÊ$ %
}
ÁÁ 
selectedDistance
ÈÈ (
=
ÈÈ) *
curDistance
ÈÈ+ 6
;
ÈÈ6 7"
selectedHasCondition
ÍÍ ,
=
ÍÍ- .
curHasCondition
ÍÍ/ >
;
ÍÍ> ?
selected
ÎÎ  
=
ÎÎ! "
provider
ÎÎ# +
;
ÎÎ+ ,
}
ÏÏ 
}
ÌÌ 
if
ÔÔ 
(
ÔÔ  
ambiguousSelection
ÔÔ &
)
ÔÔ& '
{
 
throw
ÒÒ 
Assert
ÒÒ  
.
ÒÒ  !
CreateException
ÒÒ! 0
(
ÒÒ0 1
$str
ÚÚ r
,
ÚÚr s
context
ÛÛ 
.
ÛÛ  

MemberType
ÛÛ  *
,
ÛÛ* +
(
ÙÙ 
context
ÙÙ  
.
ÙÙ  !

ObjectType
ÙÙ! +
==
ÙÙ, .
null
ÙÙ/ 3
?
ıı 
$str
ıı  
:
ˆˆ 
$str
ˆˆ F
.
ˆˆF G
Fmt
ˆˆG J
(
ˆˆJ K
context
ˆˆK R
.
ˆˆR S

ObjectType
ˆˆS ]
)
ˆˆ] ^
)
ˆˆ^ _
,
ˆˆ_ `
context
˜˜ 
.
˜˜  "
GetObjectGraphString
˜˜  4
(
˜˜4 5
)
˜˜5 6
)
˜˜6 7
;
˜˜7 8
}
¯¯ 
return
˙˙ 
selected
˙˙ 
;
˙˙  
}
˚˚ 
finally
¸¸ 
{
˝˝ 
ZenPools
˛˛ 
.
˛˛ 
DespawnList
˛˛ $
(
˛˛$ %
localProviders
˛˛% 3
)
˛˛3 4
;
˛˛4 5
}
ˇˇ 
}
ÄÄ 	
List
ÑÑ 
<
ÑÑ 
DiContainer
ÑÑ 
>
ÑÑ %
FlattenInheritanceChain
ÑÑ 1
(
ÑÑ1 2
)
ÑÑ2 3
{
ÖÖ 	
var
ÜÜ 
	processed
ÜÜ 
=
ÜÜ 
new
ÜÜ 
List
ÜÜ  $
<
ÜÜ$ %
DiContainer
ÜÜ% 0
>
ÜÜ0 1
(
ÜÜ1 2
)
ÜÜ2 3
;
ÜÜ3 4
var
àà 
containerQueue
àà 
=
àà  
new
àà! $
Queue
àà% *
<
àà* +
DiContainer
àà+ 6
>
àà6 7
(
àà7 8
)
àà8 9
;
àà9 :
containerQueue
ââ 
.
ââ 
Enqueue
ââ "
(
ââ" #
this
ââ# '
)
ââ' (
;
ââ( )
while
ãã 
(
ãã 
containerQueue
ãã !
.
ãã! "
Count
ãã" '
>
ãã( )
$num
ãã* +
)
ãã+ ,
{
åå 
var
çç 
current
çç 
=
çç 
containerQueue
çç ,
.
çç, -
Dequeue
çç- 4
(
çç4 5
)
çç5 6
;
çç6 7
foreach
èè 
(
èè 
var
èè 
parent
èè #
in
èè$ &
current
èè' .
.
èè. /
ParentContainers
èè/ ?
)
èè? @
{
êê 
if
ëë 
(
ëë 
!
ëë 
	processed
ëë "
.
ëë" #
Contains
ëë# +
(
ëë+ ,
parent
ëë, 2
)
ëë2 3
)
ëë3 4
{
íí 
	processed
ìì !
.
ìì! "
Add
ìì" %
(
ìì% &
parent
ìì& ,
)
ìì, -
;
ìì- .
containerQueue
îî &
.
îî& '
Enqueue
îî' .
(
îî. /
parent
îî/ 5
)
îî5 6
;
îî6 7
}
ïï 
}
ññ 
}
óó 
return
ôô 
	processed
ôô 
;
ôô 
}
öö 	
void
úú 
GetLocalProviders
úú 
(
úú 
	BindingId
úú (
	bindingId
úú) 2
,
úú2 3
List
úú4 8
<
úú8 9
ProviderInfo
úú9 E
>
úúE F
buffer
úúG M
)
úúM N
{
ùù 	
List
ûû 
<
ûû 
ProviderInfo
ûû 
>
ûû 
localProviders
ûû -
;
ûû- .
if
†† 
(
†† 

_providers
†† 
.
†† 
TryGetValue
†† &
(
††& '
	bindingId
††' 0
,
††0 1
out
††2 5
localProviders
††6 D
)
††D E
)
††E F
{
°° 
buffer
¢¢ 
.
¢¢ 
AllocFreeAddRange
¢¢ (
(
¢¢( )
localProviders
¢¢) 7
)
¢¢7 8
;
¢¢8 9
return
££ 
;
££ 
}
§§ 
if
®® 
(
®® 
	bindingId
®® 
.
®® 
Type
®® 
.
®® 
IsGenericType
®® ,
(
®®, -
)
®®- .
&&
®®/ 1

_providers
®®2 <
.
®®< =
TryGetValue
®®= H
(
®®H I
new
®®I L
	BindingId
®®M V
(
®®V W
	bindingId
®®W `
.
®®` a
Type
®®a e
.
®®e f&
GetGenericTypeDefinition
®®f ~
(
®®~ 
)®® Ä
,®®Ä Å
	bindingId®®Ç ã
.®®ã å

Identifier®®å ñ
)®®ñ ó
,®®ó ò
out®®ô ú
localProviders®®ù ´
)®®´ ¨
)®®¨ ≠
{
©© 
buffer
™™ 
.
™™ 
AllocFreeAddRange
™™ (
(
™™( )
localProviders
™™) 7
)
™™7 8
;
™™8 9
}
´´ 
}
ÆÆ 	
void
∞∞ %
GetProvidersForContract
∞∞ $
(
∞∞$ %
	BindingId
±± 
	bindingId
±± 
,
±±  
InjectSources
±±! .

sourceType
±±/ 9
,
±±9 :
List
±±; ?
<
±±? @
ProviderInfo
±±@ L
>
±±L M
buffer
±±N T
)
±±T U
{
≤≤ 	
var
≥≥ 
containerLookups
≥≥  
=
≥≥! "
_containerLookups
≥≥# 4
[
≥≥4 5
(
≥≥5 6
int
≥≥6 9
)
≥≥9 :

sourceType
≥≥: D
]
≥≥D E
;
≥≥E F
for
µµ 
(
µµ 
int
µµ 
i
µµ 
=
µµ 
$num
µµ 
;
µµ 
i
µµ 
<
µµ 
containerLookups
µµ  0
.
µµ0 1
Length
µµ1 7
;
µµ7 8
i
µµ9 :
++
µµ: <
)
µµ< =
{
∂∂ 
containerLookups
∑∑  
[
∑∑  !
i
∑∑! "
]
∑∑" #
.
∑∑# $
FlushBindings
∑∑$ 1
(
∑∑1 2
)
∑∑2 3
;
∑∑3 4
}
∏∏ 
for
∫∫ 
(
∫∫ 
int
∫∫ 
i
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
i
∫∫ 
<
∫∫ 
containerLookups
∫∫  0
.
∫∫0 1
Length
∫∫1 7
;
∫∫7 8
i
∫∫9 :
++
∫∫: <
)
∫∫< =
{
ªª 
containerLookups
ºº  
[
ºº  !
i
ºº! "
]
ºº" #
.
ºº# $
GetLocalProviders
ºº$ 5
(
ºº5 6
	bindingId
ºº6 ?
,
ºº? @
buffer
ººA G
)
ººG H
;
ººH I
}
ΩΩ 
}
ææ 	
public
¿¿ 
void
¿¿ 
Install
¿¿ 
<
¿¿ 

TInstaller
¿¿ &
>
¿¿& '
(
¿¿' (
)
¿¿( )
where
¡¡ 

TInstaller
¡¡ 
:
¡¡ 
	Installer
¡¡ (
{
¬¬ 	
Instantiate
√√ 
<
√√ 

TInstaller
√√ "
>
√√" #
(
√√# $
)
√√$ %
.
√√% &
InstallBindings
√√& 5
(
√√5 6
)
√√6 7
;
√√7 8
}
ƒƒ 	
public
»» 
void
»» 
Install
»» 
<
»» 

TInstaller
»» &
>
»»& '
(
»»' (
object
»»( .
[
»». /
]
»»/ 0
	extraArgs
»»1 :
)
»»: ;
where
…… 

TInstaller
…… 
:
…… 
	Installer
…… (
{
   	
Instantiate
ÀÀ 
<
ÀÀ 

TInstaller
ÀÀ "
>
ÀÀ" #
(
ÀÀ# $
	extraArgs
ÀÀ$ -
)
ÀÀ- .
.
ÀÀ. /
InstallBindings
ÀÀ/ >
(
ÀÀ> ?
)
ÀÀ? @
;
ÀÀ@ A
}
ÃÃ 	
public
ŒŒ 
IList
ŒŒ 

ResolveAll
ŒŒ 
(
ŒŒ  
InjectContext
ŒŒ  -
context
ŒŒ. 5
)
ŒŒ5 6
{
œœ 	
var
–– 
buffer
–– 
=
–– 
ZenPools
–– !
.
––! "
	SpawnList
––" +
<
––+ ,
object
––, 2
>
––2 3
(
––3 4
)
––4 5
;
––5 6
try
““ 
{
”” 

ResolveAll
‘‘ 
(
‘‘ 
context
‘‘ "
,
‘‘" #
buffer
‘‘$ *
)
‘‘* +
;
‘‘+ ,
return
’’ 
ReflectionUtil
’’ %
.
’’% &
CreateGenericList
’’& 7
(
’’7 8
context
’’8 ?
.
’’? @

MemberType
’’@ J
,
’’J K
buffer
’’L R
)
’’R S
;
’’S T
}
÷÷ 
finally
◊◊ 
{
ÿÿ 
ZenPools
ŸŸ 
.
ŸŸ 
DespawnList
ŸŸ $
(
ŸŸ$ %
buffer
ŸŸ% +
)
ŸŸ+ ,
;
ŸŸ, -
}
⁄⁄ 
}
€€ 	
public
›› 
void
›› 

ResolveAll
›› 
(
›› 
InjectContext
›› ,
context
››- 4
,
››4 5
List
››6 :
<
››: ;
object
››; A
>
››A B
buffer
››C I
)
››I J
{
ﬁﬁ 	
{
‚‚ 
Assert
„„ 
.
„„ 
	IsNotNull
„„  
(
„„  !
context
„„! (
)
„„( )
;
„„) *
FlushBindings
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ  $
CheckForInstallWarning
ÁÁ &
(
ÁÁ& '
context
ÁÁ' .
)
ÁÁ. /
;
ÁÁ/ 0
var
ÈÈ 
matches
ÈÈ 
=
ÈÈ 
ZenPools
ÈÈ &
.
ÈÈ& '
	SpawnList
ÈÈ' 0
<
ÈÈ0 1
ProviderInfo
ÈÈ1 =
>
ÈÈ= >
(
ÈÈ> ?
)
ÈÈ? @
;
ÈÈ@ A
try
ÎÎ 
{
ÏÏ  
GetProviderMatches
ÌÌ &
(
ÌÌ& '
context
ÌÌ' .
,
ÌÌ. /
matches
ÌÌ0 7
)
ÌÌ7 8
;
ÌÌ8 9
if
ÔÔ 
(
ÔÔ 
matches
ÔÔ 
.
ÔÔ  
Count
ÔÔ  %
==
ÔÔ& (
$num
ÔÔ) *
)
ÔÔ* +
{
 
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
context
ÒÒ $
.
ÒÒ$ %
Optional
ÒÒ% -
)
ÒÒ- .
{
ÚÚ 
throw
ÛÛ !
Assert
ÛÛ" (
.
ÛÛ( )
CreateException
ÛÛ) 8
(
ÛÛ8 9
$str
ÙÙ  h
,
ÙÙh i
context
ÙÙj q
.
ÙÙq r

MemberType
ÙÙr |
,
ÙÙ| }
contextÙÙ~ Ö
.ÙÙÖ Ü$
GetObjectGraphStringÙÙÜ ö
(ÙÙö õ
)ÙÙõ ú
)ÙÙú ù
;ÙÙù û
}
ıı 
return
˜˜ 
;
˜˜ 
}
¯¯ 
var
˙˙ 
	instances
˙˙ !
=
˙˙" #
ZenPools
˙˙$ ,
.
˙˙, -
	SpawnList
˙˙- 6
<
˙˙6 7
object
˙˙7 =
>
˙˙= >
(
˙˙> ?
)
˙˙? @
;
˙˙@ A
var
˚˚ 
allInstances
˚˚ $
=
˚˚% &
ZenPools
˚˚' /
.
˚˚/ 0
	SpawnList
˚˚0 9
<
˚˚9 :
object
˚˚: @
>
˚˚@ A
(
˚˚A B
)
˚˚B C
;
˚˚C D
try
˝˝ 
{
˛˛ 
for
ˇˇ 
(
ˇˇ 
int
ˇˇ  
i
ˇˇ! "
=
ˇˇ# $
$num
ˇˇ% &
;
ˇˇ& '
i
ˇˇ( )
<
ˇˇ* +
matches
ˇˇ, 3
.
ˇˇ3 4
Count
ˇˇ4 9
;
ˇˇ9 :
i
ˇˇ; <
++
ˇˇ< >
)
ˇˇ> ?
{
ÄÄ 
var
ÅÅ 
match
ÅÅ  %
=
ÅÅ& '
matches
ÅÅ( /
[
ÅÅ/ 0
i
ÅÅ0 1
]
ÅÅ1 2
;
ÅÅ2 3
	instances
ÉÉ %
.
ÉÉ% &
Clear
ÉÉ& +
(
ÉÉ+ ,
)
ÉÉ, -
;
ÉÉ- .
SafeGetInstances
ÑÑ ,
(
ÑÑ, -
match
ÑÑ- 2
,
ÑÑ2 3
context
ÑÑ4 ;
,
ÑÑ; <
	instances
ÑÑ= F
)
ÑÑF G
;
ÑÑG H
for
ÜÜ 
(
ÜÜ  !
int
ÜÜ! $
k
ÜÜ% &
=
ÜÜ' (
$num
ÜÜ) *
;
ÜÜ* +
k
ÜÜ, -
<
ÜÜ. /
	instances
ÜÜ0 9
.
ÜÜ9 :
Count
ÜÜ: ?
;
ÜÜ? @
k
ÜÜA B
++
ÜÜB D
)
ÜÜD E
{
áá 
allInstances
àà  ,
.
àà, -
Add
àà- 0
(
àà0 1
	instances
àà1 :
[
àà: ;
k
àà; <
]
àà< =
)
àà= >
;
àà> ?
}
ââ 
}
ää 
if
åå 
(
åå 
allInstances
åå (
.
åå( )
Count
åå) .
==
åå/ 1
$num
åå2 3
&&
åå4 6
!
åå7 8
context
åå8 ?
.
åå? @
Optional
åå@ H
)
ååH I
{
çç 
throw
éé !
Assert
éé" (
.
éé( )
CreateException
éé) 8
(
éé8 9
$strèè  Ü
,èèÜ á
contextèèà è
.èèè ê

MemberTypeèèê ö
)èèö õ
;èèõ ú
}
êê 
if
íí 
(
íí 
IsValidating
íí (
)
íí( )
{
ìì 
for
îî 
(
îî  !
int
îî! $
i
îî% &
=
îî' (
$num
îî) *
;
îî* +
i
îî, -
<
îî. /
allInstances
îî0 <
.
îî< =
Count
îî= B
;
îîB C
i
îîD E
++
îîE G
)
îîG H
{
ïï 
var
ññ  #
instance
ññ$ ,
=
ññ- .
allInstances
ññ/ ;
[
ññ; <
i
ññ< =
]
ññ= >
;
ññ> ?
if
òò  "
(
òò# $
instance
òò$ ,
is
òò- /
ValidationMarker
òò0 @
)
òò@ A
{
ôô  !
allInstances
öö$ 0
[
öö0 1
i
öö1 2
]
öö2 3
=
öö4 5
context
öö6 =
.
öö= >

MemberType
öö> H
.
ööH I
GetDefaultValue
ööI X
(
ööX Y
)
ööY Z
;
ööZ [
}
õõ  !
}
úú 
}
ùù 
buffer
üü 
.
üü 
AllocFreeAddRange
üü 0
(
üü0 1
allInstances
üü1 =
)
üü= >
;
üü> ?
}
†† 
finally
°° 
{
¢¢ 
ZenPools
££  
.
££  !
DespawnList
££! ,
(
££, -
	instances
££- 6
)
££6 7
;
££7 8
ZenPools
§§  
.
§§  !
DespawnList
§§! ,
(
§§, -
allInstances
§§- 9
)
§§9 :
;
§§: ;
}
•• 
}
¶¶ 
finally
ßß 
{
®® 
ZenPools
©© 
.
©© 
DespawnList
©© (
(
©©( )
matches
©©) 0
)
©©0 1
;
©©1 2
}
™™ 
}
´´ 
}
¨¨ 	
void
ÆÆ $
CheckForInstallWarning
ÆÆ #
(
ÆÆ# $
InjectContext
ÆÆ$ 1
context
ÆÆ2 9
)
ÆÆ9 :
{
ØØ 	
if
∞∞ 
(
∞∞ 
!
∞∞ 
	_settings
∞∞ 
.
∞∞ 6
(DisplayWarningWhenResolvingDuringInstall
∞∞ C
)
∞∞C D
{
±± 
return
≤≤ 
;
≤≤ 
}
≥≥ 
Assert
µµ 
.
µµ 
	IsNotNull
µµ 
(
µµ 
context
µµ $
)
µµ$ %
;
µµ% &
if
∏∏ 
(
∏∏ 
!
∏∏ 
_isInstalling
∏∏ 
)
∏∏ 
{
ππ 
return
∫∫ 
;
∫∫ 
}
ªª 
if
ΩΩ 
(
ΩΩ )
_hasDisplayedInstallWarning
ΩΩ +
)
ΩΩ+ ,
{
ææ 
return
øø 
;
øø 
}
¿¿ 
if
¬¬ 
(
¬¬ 
context
¬¬ 
==
¬¬ 
null
¬¬ 
)
¬¬  
{
√√ 
return
≈≈ 
;
≈≈ 
}
∆∆ 
if
…… 
(
…… 
context
…… 
.
…… 

MemberType
…… "
.
……" #
DerivesFrom
……# .
<
……. /
Context
……/ 6
>
……6 7
(
……7 8
)
……8 9
)
……9 :
{
   
return
ÃÃ 
;
ÃÃ 
}
ÕÕ 
if
œœ 
(
œœ 
IsValidating
œœ 
&&
œœ 
TypeAnalyzer
œœ  ,
.
œœ, -)
ShouldAllowDuringValidation
œœ- H
(
œœH I
context
œœI P
.
œœP Q

MemberType
œœQ [
)
œœ[ \
)
œœ\ ]
{
–– 
return
—— 
;
—— 
}
““ 
var
‘‘ 
rootContext
‘‘ 
=
‘‘ 
context
‘‘ %
.
‘‘% &#
ParentContextsAndSelf
‘‘& ;
.
‘‘; <
Last
‘‘< @
(
‘‘@ A
)
‘‘A B
;
‘‘B C
if
÷÷ 
(
÷÷ 
rootContext
÷÷ 
.
÷÷ 

MemberType
÷÷ &
.
÷÷& '
DerivesFrom
÷÷' 2
<
÷÷2 3

IInstaller
÷÷3 =
>
÷÷= >
(
÷÷> ?
)
÷÷? @
)
÷÷@ A
{
◊◊ 
return
ŸŸ 
;
ŸŸ 
}
⁄⁄ )
_hasDisplayedInstallWarning
‹‹ '
=
‹‹( )
true
‹‹* .
;
‹‹. /
Log
ﬂﬂ 
.
ﬂﬂ 
Warn
ﬂﬂ 
(
ﬂﬂ 
$strﬂﬂ ˆ
,ﬂﬂˆ ˜
rootContextﬂﬂ¯ É
.ﬂﬂÉ Ñ

MemberTypeﬂﬂÑ é
)ﬂﬂé è
;ﬂﬂè ê
}
·· 	
public
ÊÊ 
Type
ÊÊ 
ResolveType
ÊÊ 
<
ÊÊ  
T
ÊÊ  !
>
ÊÊ! "
(
ÊÊ" #
)
ÊÊ# $
{
ÁÁ 	
return
ËË 
ResolveType
ËË 
(
ËË 
typeof
ËË %
(
ËË% &
T
ËË& '
)
ËË' (
)
ËË( )
;
ËË) *
}
ÈÈ 	
public
ÓÓ 
Type
ÓÓ 
ResolveType
ÓÓ 
(
ÓÓ  
Type
ÓÓ  $
type
ÓÓ% )
)
ÓÓ) *
{
ÔÔ 	
using
 
(
 
var
 
context
 
=
  
ZenPools
! )
.
) * 
SpawnInjectContext
* <
(
< =
this
= A
,
A B
type
C G
)
G H
)
H I
{
ÒÒ 
return
ÚÚ 
ResolveType
ÚÚ "
(
ÚÚ" #
context
ÚÚ# *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
}
ÙÙ 	
public
˘˘ 
Type
˘˘ 
ResolveType
˘˘ 
(
˘˘  
InjectContext
˘˘  -
context
˘˘. 5
)
˘˘5 6
{
˙˙ 	
Assert
˚˚ 
.
˚˚ 
	IsNotNull
˚˚ 
(
˚˚ 
context
˚˚ $
)
˚˚$ %
;
˚˚% &
FlushBindings
˝˝ 
(
˝˝ 
)
˝˝ 
;
˝˝ 
var
ˇˇ 
providerInfo
ˇˇ 
=
ˇˇ "
TryGetUniqueProvider
ˇˇ 3
(
ˇˇ3 4
context
ˇˇ4 ;
)
ˇˇ; <
;
ˇˇ< =
if
ÅÅ 
(
ÅÅ 
providerInfo
ÅÅ 
==
ÅÅ 
null
ÅÅ  $
)
ÅÅ$ %
{
ÇÇ 
throw
ÉÉ 
Assert
ÉÉ 
.
ÉÉ 
CreateException
ÉÉ ,
(
ÉÉ, -
$str
ÑÑ B
,
ÑÑB C
context
ÑÑD K
.
ÑÑK L
	BindingId
ÑÑL U
,
ÑÑU V
(
ÖÖ 
context
ÖÖ 
.
ÖÖ 

ObjectType
ÖÖ '
==
ÖÖ( *
null
ÖÖ+ /
?
ÖÖ0 1
$str
ÖÖ2 4
:
ÖÖ5 6
$str
ÖÖ7 _
.
ÖÖ_ `
Fmt
ÖÖ` c
(
ÖÖc d
context
ÖÖd k
.
ÖÖk l

ObjectType
ÖÖl v
)
ÖÖv w
)
ÖÖw x
,
ÖÖx y
context
ÜÜ 
.
ÜÜ "
GetObjectGraphString
ÜÜ 0
(
ÜÜ0 1
)
ÜÜ1 2
)
ÜÜ2 3
;
ÜÜ3 4
}
áá 
return
ââ 
providerInfo
ââ 
.
ââ  
Provider
ââ  (
.
ââ( )
GetInstanceType
ââ) 8
(
ââ8 9
context
ââ9 @
)
ââ@ A
;
ââA B
}
ää 	
public
åå 
List
åå 
<
åå 
Type
åå 
>
åå 
ResolveTypeAll
åå (
(
åå( )
Type
åå) -
type
åå. 2
)
åå2 3
{
çç 	
return
éé 
ResolveTypeAll
éé !
(
éé! "
type
éé" &
,
éé& '
null
éé( ,
)
éé, -
;
éé- .
}
èè 	
public
ëë 
List
ëë 
<
ëë 
Type
ëë 
>
ëë 
ResolveTypeAll
ëë (
(
ëë( )
Type
ëë) -
type
ëë. 2
,
ëë2 3
object
ëë4 :

identifier
ëë; E
)
ëëE F
{
íí 	
using
ìì 
(
ìì 
var
ìì 
context
ìì 
=
ìì  
ZenPools
ìì! )
.
ìì) * 
SpawnInjectContext
ìì* <
(
ìì< =
this
ìì= A
,
ììA B
type
ììC G
)
ììG H
)
ììH I
{
îî 
context
ïï 
.
ïï 

Identifier
ïï "
=
ïï# $

identifier
ïï% /
;
ïï/ 0
return
ññ 
ResolveTypeAll
ññ %
(
ññ% &
context
ññ& -
)
ññ- .
;
ññ. /
}
óó 
}
òò 	
public
õõ 
List
õõ 
<
õõ 
Type
õõ 
>
õõ 
ResolveTypeAll
õõ (
(
õõ( )
InjectContext
õõ) 6
context
õõ7 >
)
õõ> ?
{
úú 	
Assert
ùù 
.
ùù 
	IsNotNull
ùù 
(
ùù 
context
ùù $
)
ùù$ %
;
ùù% &
FlushBindings
üü 
(
üü 
)
üü 
;
üü 
var
°° 
matches
°° 
=
°° 
ZenPools
°° "
.
°°" #
	SpawnList
°°# ,
<
°°, -
ProviderInfo
°°- 9
>
°°9 :
(
°°: ;
)
°°; <
;
°°< =
try
££ 
{
§§  
GetProviderMatches
•• "
(
••" #
context
••# *
,
••* +
matches
••, 3
)
••3 4
;
••4 5
if
ßß 
(
ßß 
matches
ßß 
.
ßß 
Count
ßß !
>
ßß" #
$num
ßß$ %
)
ßß& '
{
®® 
return
©© 
matches
©© "
.
©©" #
Select
©©# )
(
©©) *
x
™™ 
=>
™™ 
x
™™ 
.
™™ 
Provider
™™ '
.
™™' (
GetInstanceType
™™( 7
(
™™7 8
context
™™8 ?
)
™™? @
)
™™@ A
.
´´ 
Where
´´ 
(
´´ 
x
´´  
=>
´´! #
x
´´$ %
!=
´´& (
null
´´) -
)
´´- .
.
´´. /
ToList
´´/ 5
(
´´5 6
)
´´6 7
;
´´7 8
}
¨¨ 
return
ÆÆ 
new
ÆÆ 
List
ÆÆ 
<
ÆÆ  
Type
ÆÆ  $
>
ÆÆ$ %
(
ÆÆ% &
)
ÆÆ& '
;
ÆÆ' (
}
ØØ 
finally
∞∞ 
{
±± 
ZenPools
≤≤ 
.
≤≤ 
DespawnList
≤≤ $
(
≤≤$ %
matches
≤≤% ,
)
≤≤, -
;
≤≤- .
}
≥≥ 
}
¥¥ 	
public
∂∂ 
object
∂∂ 
Resolve
∂∂ 
(
∂∂ 
	BindingId
∂∂ '
id
∂∂( *
)
∂∂* +
{
∑∑ 	
using
∏∏ 
(
∏∏ 
var
∏∏ 
context
∏∏ 
=
∏∏  
ZenPools
∏∏! )
.
∏∏) * 
SpawnInjectContext
∏∏* <
(
∏∏< =
this
∏∏= A
,
∏∏A B
id
∏∏C E
.
∏∏E F
Type
∏∏F J
)
∏∏J K
)
∏∏K L
{
ππ 
context
∫∫ 
.
∫∫ 

Identifier
∫∫ "
=
∫∫# $
id
∫∫% '
.
∫∫' (

Identifier
∫∫( 2
;
∫∫2 3
return
ªª 
Resolve
ªª 
(
ªª 
context
ªª &
)
ªª& '
;
ªª' (
}
ºº 
}
ΩΩ 	
public
øø 
object
øø 
Resolve
øø 
(
øø 
InjectContext
øø +
context
øø, 3
)
øø3 4
{
¿¿ 	
{
ƒƒ 
Assert
«« 
.
«« 
	IsNotNull
««  
(
««  !
context
««! (
)
««( )
;
««) *
var
…… 

memberType
…… 
=
……  
context
……! (
.
……( )

MemberType
……) 3
;
……3 4
FlushBindings
ÀÀ 
(
ÀÀ 
)
ÀÀ 
;
ÀÀ  $
CheckForInstallWarning
ÃÃ &
(
ÃÃ& '
context
ÃÃ' .
)
ÃÃ. /
;
ÃÃ/ 0
var
ŒŒ 
lookupContext
ŒŒ !
=
ŒŒ" #
context
ŒŒ$ +
;
ŒŒ+ ,
if
’’ 
(
’’ 

memberType
’’ 
.
’’ 
IsGenericType
’’ ,
(
’’, -
)
’’- .
&&
’’/ 1

memberType
’’2 <
.
’’< =&
GetGenericTypeDefinition
’’= U
(
’’U V
)
’’V W
==
’’X Z
typeof
’’[ a
(
’’a b

LazyInject
’’b l
<
’’l m
>
’’m n
)
’’n o
)
’’o p
{
÷÷ 
lookupContext
◊◊ !
=
◊◊" #
context
◊◊$ +
.
◊◊+ ,
Clone
◊◊, 1
(
◊◊1 2
)
◊◊2 3
;
◊◊3 4
lookupContext
ÿÿ !
.
ÿÿ! "

Identifier
ÿÿ" ,
=
ÿÿ- .
null
ÿÿ/ 3
;
ÿÿ3 4
lookupContext
ŸŸ !
.
ŸŸ! "

SourceType
ŸŸ" ,
=
ŸŸ- .
InjectSources
ŸŸ/ <
.
ŸŸ< =
Local
ŸŸ= B
;
ŸŸB C
lookupContext
⁄⁄ !
.
⁄⁄! "
Optional
⁄⁄" *
=
⁄⁄+ ,
false
⁄⁄- 2
;
⁄⁄2 3
}
€€ 
var
›› 
providerInfo
››  
=
››! ""
TryGetUniqueProvider
››# 7
(
››7 8
lookupContext
››8 E
)
››E F
;
››F G
if
ﬂﬂ 
(
ﬂﬂ 
providerInfo
ﬂﬂ  
==
ﬂﬂ! #
null
ﬂﬂ$ (
)
ﬂﬂ( )
{
‡‡ 
if
‚‚ 
(
‚‚ 

memberType
‚‚ "
.
‚‚" #
IsArray
‚‚# *
&&
‚‚+ -

memberType
‚‚. 8
.
‚‚8 9
GetArrayRank
‚‚9 E
(
‚‚E F
)
‚‚F G
==
‚‚H J
$num
‚‚K L
)
‚‚L M
{
„„ 
var
‰‰ 
subType
‰‰ #
=
‰‰$ %

memberType
‰‰& 0
.
‰‰0 1
GetElementType
‰‰1 ?
(
‰‰? @
)
‰‰@ A
;
‰‰A B
var
ÊÊ 

subContext
ÊÊ &
=
ÊÊ' (
context
ÊÊ) 0
.
ÊÊ0 1
Clone
ÊÊ1 6
(
ÊÊ6 7
)
ÊÊ7 8
;
ÊÊ8 9

subContext
ÁÁ "
.
ÁÁ" #

MemberType
ÁÁ# -
=
ÁÁ. /
subType
ÁÁ0 7
;
ÁÁ7 8

subContext
ÎÎ "
.
ÎÎ" #
Optional
ÎÎ# +
=
ÎÎ, -
true
ÎÎ. 2
;
ÎÎ2 3
var
ÌÌ 
results
ÌÌ #
=
ÌÌ$ %
ZenPools
ÌÌ& .
.
ÌÌ. /
	SpawnList
ÌÌ/ 8
<
ÌÌ8 9
object
ÌÌ9 ?
>
ÌÌ? @
(
ÌÌ@ A
)
ÌÌA B
;
ÌÌB C
try
ÔÔ 
{
 

ResolveAll
ÒÒ &
(
ÒÒ& '

subContext
ÒÒ' 1
,
ÒÒ1 2
results
ÒÒ3 :
)
ÒÒ: ;
;
ÒÒ; <
return
ÚÚ "
ReflectionUtil
ÚÚ# 1
.
ÚÚ1 2
CreateArray
ÚÚ2 =
(
ÚÚ= >

subContext
ÚÚ> H
.
ÚÚH I

MemberType
ÚÚI S
,
ÚÚS T
results
ÚÚU \
)
ÚÚ\ ]
;
ÚÚ] ^
}
ÛÛ 
finally
ÙÙ 
{
ıı 
ZenPools
ˆˆ $
.
ˆˆ$ %
DespawnList
ˆˆ% 0
(
ˆˆ0 1
results
ˆˆ1 8
)
ˆˆ8 9
;
ˆˆ9 :
}
˜˜ 
}
¯¯ 
if
˚˚ 
(
˚˚ 

memberType
˚˚ "
.
˚˚" #
IsGenericType
˚˚# 0
(
˚˚0 1
)
˚˚1 2
&&
¸¸ 
(
¸¸ 

memberType
¸¸ &
.
¸¸& '&
GetGenericTypeDefinition
¸¸' ?
(
¸¸? @
)
¸¸@ A
==
¸¸B D
typeof
¸¸E K
(
¸¸K L
List
¸¸L P
<
¸¸P Q
>
¸¸Q R
)
¸¸R S
||
˝˝ 

memberType
˝˝ )
.
˝˝) *&
GetGenericTypeDefinition
˝˝* B
(
˝˝B C
)
˝˝C D
==
˝˝E G
typeof
˝˝H N
(
˝˝N O
IList
˝˝O T
<
˝˝T U
>
˝˝U V
)
˝˝V W
||
ˇˇ 

memberType
ˇˇ )
.
ˇˇ) *&
GetGenericTypeDefinition
ˇˇ* B
(
ˇˇB C
)
ˇˇC D
==
ˇˇE G
typeof
ˇˇH N
(
ˇˇN O
IReadOnlyList
ˇˇO \
<
ˇˇ\ ]
>
ˇˇ] ^
)
ˇˇ^ _
||
ÅÅ 

memberType
ÅÅ )
.
ÅÅ) *&
GetGenericTypeDefinition
ÅÅ* B
(
ÅÅB C
)
ÅÅC D
==
ÅÅE G
typeof
ÅÅH N
(
ÅÅN O
IEnumerable
ÅÅO Z
<
ÅÅZ [
>
ÅÅ[ \
)
ÅÅ\ ]
)
ÅÅ] ^
)
ÅÅ^ _
{
ÇÇ 
var
ÉÉ 
subType
ÉÉ #
=
ÉÉ$ %

memberType
ÉÉ& 0
.
ÉÉ0 1
GenericArguments
ÉÉ1 A
(
ÉÉA B
)
ÉÉB C
.
ÉÉC D
Single
ÉÉD J
(
ÉÉJ K
)
ÉÉK L
;
ÉÉL M
var
ÖÖ 

subContext
ÖÖ &
=
ÖÖ' (
context
ÖÖ) 0
.
ÖÖ0 1
Clone
ÖÖ1 6
(
ÖÖ6 7
)
ÖÖ7 8
;
ÖÖ8 9

subContext
ÜÜ "
.
ÜÜ" #

MemberType
ÜÜ# -
=
ÜÜ. /
subType
ÜÜ0 7
;
ÜÜ7 8

subContext
ää "
.
ää" #
Optional
ää# +
=
ää, -
true
ää. 2
;
ää2 3
return
åå 

ResolveAll
åå )
(
åå) *

subContext
åå* 4
)
åå4 5
;
åå5 6
}
çç 
if
èè 
(
èè 
context
èè 
.
èè  
Optional
èè  (
)
èè( )
{
êê 
return
ëë 
context
ëë &
.
ëë& '
FallBackValue
ëë' 4
;
ëë4 5
}
íí 
throw
îî 
Assert
îî  
.
îî  !
CreateException
îî! 0
(
îî0 1
$str
îî1 a
,
îîa b
context
îîc j
.
îîj k
	BindingId
îîk t
,
îît u
(
ïï 
context
ïï  
.
ïï  !

ObjectType
ïï! +
==
ïï, .
null
ïï/ 3
?
ïï4 5
$str
ïï6 8
:
ïï9 :
$str
ïï; c
.
ïïc d
Fmt
ïïd g
(
ïïg h
context
ïïh o
.
ïïo p

ObjectType
ïïp z
)
ïïz {
)
ïï{ |
,
ïï| }
context
ññ 
.
ññ  "
GetObjectGraphString
ññ  4
(
ññ4 5
)
ññ5 6
)
ññ6 7
;
ññ7 8
}
óó 
var
ôô 
	instances
ôô 
=
ôô 
ZenPools
ôô  (
.
ôô( )
	SpawnList
ôô) 2
<
ôô2 3
object
ôô3 9
>
ôô9 :
(
ôô: ;
)
ôô; <
;
ôô< =
try
õõ 
{
úú 
SafeGetInstances
ùù $
(
ùù$ %
providerInfo
ùù% 1
,
ùù1 2
context
ùù3 :
,
ùù: ;
	instances
ùù< E
)
ùùE F
;
ùùF G
if
üü 
(
üü 
	instances
üü !
.
üü! "
Count
üü" '
==
üü( *
$num
üü+ ,
)
üü, -
{
†† 
if
°° 
(
°° 
context
°° #
.
°°# $
Optional
°°$ ,
)
°°, -
{
¢¢ 
return
££ "
context
££# *
.
££* +
FallBackValue
££+ 8
;
££8 9
}
§§ 
throw
¶¶ 
Assert
¶¶ $
.
¶¶$ %
CreateException
¶¶% 4
(
¶¶4 5
$str
ßß L
,
ßßL M
context
ßßN U
.
ßßU V
	BindingId
ßßV _
,
ßß_ `
(
®® 
context
®® $
.
®®$ %

ObjectType
®®% /
==
®®0 2
null
®®3 7
?
©© 
$str
©© !
:
™™ 
$str
™™ G
.
™™G H
Fmt
™™H K
(
™™K L
context
™™L S
.
™™S T

ObjectType
™™T ^
)
™™^ _
)
™™_ `
,
™™` a
context
´´ $
.
´´$ %"
GetObjectGraphString
´´% 9
(
´´9 :
)
´´: ;
)
´´; <
;
´´< =
}
¨¨ 
if
ÆÆ 
(
ÆÆ 
	instances
ÆÆ !
.
ÆÆ! "
Count
ÆÆ" '
(
ÆÆ' (
)
ÆÆ( )
>
ÆÆ* +
$num
ÆÆ, -
)
ÆÆ- .
{
ØØ 
throw
∞∞ 
Assert
∞∞ $
.
∞∞$ %
CreateException
∞∞% 4
(
∞∞4 5
$str±± å
,±±å ç
context±±é ï
.±±ï ñ
	BindingId±±ñ ü
,±±ü †
(
≤≤ 
context
≤≤ $
.
≤≤$ %

ObjectType
≤≤% /
==
≤≤0 2
null
≤≤3 7
?
≥≥ 
$str
≥≥ !
:
¥¥ 
$str
¥¥ G
.
¥¥G H
Fmt
¥¥H K
(
¥¥K L
context
¥¥L S
.
¥¥S T

ObjectType
¥¥T ^
)
¥¥^ _
)
¥¥_ `
,
¥¥` a
context
µµ $
.
µµ$ %"
GetObjectGraphString
µµ% 9
(
µµ9 :
)
µµ: ;
)
µµ; <
;
µµ< =
}
∂∂ 
return
∏∏ 
	instances
∏∏ $
.
∏∏$ %
First
∏∏% *
(
∏∏* +
)
∏∏+ ,
;
∏∏, -
}
ππ 
finally
∫∫ 
{
ªª 
ZenPools
ºº 
.
ºº 
DespawnList
ºº (
(
ºº( )
	instances
ºº) 2
)
ºº2 3
;
ºº3 4
}
ΩΩ 
}
ææ 
}
øø 	
void
¡¡ 
SafeGetInstances
¡¡ 
(
¡¡ 
ProviderInfo
¡¡ *
providerInfo
¡¡+ 7
,
¡¡7 8
InjectContext
¡¡9 F
context
¡¡G N
,
¡¡N O
List
¡¡P T
<
¡¡T U
object
¡¡U [
>
¡¡[ \
	instances
¡¡] f
)
¡¡f g
{
¬¬ 	
Assert
√√ 
.
√√ 
	IsNotNull
√√ 
(
√√ 
context
√√ $
)
√√$ %
;
√√% &
var
≈≈ 
provider
≈≈ 
=
≈≈ 
providerInfo
≈≈ '
.
≈≈' (
Provider
≈≈( 0
;
≈≈0 1
if
«« 
(
«« +
ChecksForCircularDependencies
«« -
)
««- .
{
»» 
var
…… 
lookupId
…… 
=
…… 
ZenPools
…… '
.
……' (
SpawnLookupId
……( 5
(
……5 6
provider
……6 >
,
……> ?
context
……@ G
.
……G H
	BindingId
……H Q
)
……Q R
;
……R S
try
ÀÀ 
{
ÃÃ 
var
’’ 
providerContainer
’’ )
=
’’* +
providerInfo
’’, 8
.
’’8 9
	Container
’’9 B
;
’’B C
if
◊◊ 
(
◊◊ 
providerContainer
◊◊ )
.
◊◊) *&
_resolvesTwiceInProgress
◊◊* B
.
◊◊B C
Contains
◊◊C K
(
◊◊K L
lookupId
◊◊L T
)
◊◊T U
)
◊◊U V
{
ÿÿ 
throw
⁄⁄ 
Assert
⁄⁄ $
.
⁄⁄$ %
CreateException
⁄⁄% 4
(
⁄⁄4 5
$str
€€ O
,
€€O P
context
€€Q X
.
€€X Y"
GetObjectGraphString
€€Y m
(
€€m n
)
€€n o
)
€€o p
;
€€p q
}
‹‹ 
bool
ﬁﬁ 
twice
ﬁﬁ 
=
ﬁﬁ  
false
ﬁﬁ! &
;
ﬁﬁ& '
if
ﬂﬂ 
(
ﬂﬂ 
!
ﬂﬂ 
providerContainer
ﬂﬂ *
.
ﬂﬂ* +!
_resolvesInProgress
ﬂﬂ+ >
.
ﬂﬂ> ?
Add
ﬂﬂ? B
(
ﬂﬂB C
lookupId
ﬂﬂC K
)
ﬂﬂK L
)
ﬂﬂL M
{
‡‡ 
bool
·· 
added
·· "
=
··# $
providerContainer
··% 6
.
··6 7&
_resolvesTwiceInProgress
··7 O
.
··O P
Add
··P S
(
··S T
lookupId
··T \
)
··\ ]
;
··] ^
Assert
‚‚ 
.
‚‚ 
That
‚‚ #
(
‚‚# $
added
‚‚$ )
)
‚‚) *
;
‚‚* +
twice
„„ 
=
„„ 
true
„„  $
;
„„$ %
}
‰‰ 
try
ÊÊ 
{
ÁÁ #
GetDecoratedInstances
ËË -
(
ËË- .
provider
ËË. 6
,
ËË6 7
context
ËË8 ?
,
ËË? @
	instances
ËËA J
)
ËËJ K
;
ËËK L
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
twice
ÏÏ !
)
ÏÏ! "
{
ÌÌ 
bool
ÓÓ  
removed
ÓÓ! (
=
ÓÓ) *
providerContainer
ÓÓ+ <
.
ÓÓ< =&
_resolvesTwiceInProgress
ÓÓ= U
.
ÓÓU V
Remove
ÓÓV \
(
ÓÓ\ ]
lookupId
ÓÓ] e
)
ÓÓe f
;
ÓÓf g
Assert
ÔÔ "
.
ÔÔ" #
That
ÔÔ# '
(
ÔÔ' (
removed
ÔÔ( /
)
ÔÔ/ 0
;
ÔÔ0 1
}
 
else
ÒÒ 
{
ÚÚ 
bool
ÛÛ  
removed
ÛÛ! (
=
ÛÛ) *
providerContainer
ÛÛ+ <
.
ÛÛ< =!
_resolvesInProgress
ÛÛ= P
.
ÛÛP Q
Remove
ÛÛQ W
(
ÛÛW X
lookupId
ÛÛX `
)
ÛÛ` a
;
ÛÛa b
Assert
ÙÙ "
.
ÙÙ" #
That
ÙÙ# '
(
ÙÙ' (
removed
ÙÙ( /
)
ÙÙ/ 0
;
ÙÙ0 1
}
ıı 
}
ˆˆ 
}
˜˜ 
finally
¯¯ 
{
˘˘ 
ZenPools
˙˙ 
.
˙˙ 
DespawnLookupId
˙˙ ,
(
˙˙, -
lookupId
˙˙- 5
)
˙˙5 6
;
˙˙6 7
}
˚˚ 
}
¸¸ 
else
˝˝ 
{
˛˛ #
GetDecoratedInstances
ˇˇ %
(
ˇˇ% &
provider
ˇˇ& .
,
ˇˇ. /
context
ˇˇ0 7
,
ˇˇ7 8
	instances
ˇˇ9 B
)
ˇˇB C
;
ˇˇC D
}
Ä	Ä	 
}
Å	Å	 	
public
É	É	 )
DecoratorToChoiceFromBinder
É	É	 *
<
É	É	* +
	TContract
É	É	+ 4
>
É	É	4 5
Decorate
É	É	6 >
<
É	É	> ?
	TContract
É	É	? H
>
É	É	H I
(
É	É	I J
)
É	É	J K
{
Ñ	Ñ	 	
var
Ö	Ö	 
bindStatement
Ö	Ö	 
=
Ö	Ö	 
StartBinding
Ö	Ö	  ,
(
Ö	Ö	, -
)
Ö	Ö	- .
;
Ö	Ö	. /
var
Ü	Ü	 
bindInfo
Ü	Ü	 
=
Ü	Ü	 
bindStatement
Ü	Ü	 (
.
Ü	Ü	( )
SpawnBindInfo
Ü	Ü	) 6
(
Ü	Ü	6 7
)
Ü	Ü	7 8
;
Ü	Ü	8 9
bindInfo
à	à	 
.
à	à	 
ContractTypes
à	à	 "
.
à	à	" #
Add
à	à	# &
(
à	à	& '
typeof
à	à	' -
(
à	à	- .
IFactory
à	à	. 6
<
à	à	6 7
	TContract
à	à	7 @
,
à	à	@ A
	TContract
à	à	B K
>
à	à	K L
)
à	à	L M
)
à	à	M N
;
à	à	N O
var
ä	ä	 
factoryBindInfo
ä	ä	 
=
ä	ä	  !
new
ä	ä	" %
FactoryBindInfo
ä	ä	& 5
(
ä	ä	5 6
typeof
ã	ã	 
(
ã	ã	  
PlaceholderFactory
ã	ã	 )
<
ã	ã	) *
	TContract
ã	ã	* 3
,
ã	ã	3 4
	TContract
ã	ã	5 >
>
ã	ã	> ?
)
ã	ã	? @
)
ã	ã	@ A
;
ã	ã	A B
bindStatement
ç	ç	 
.
ç	ç	 
SetFinalizer
ç	ç	 &
(
ç	ç	& '
new
é	é	 0
"PlaceholderFactoryBindingFinalizer
é	é	 6
<
é	é	6 7
	TContract
é	é	7 @
>
é	é	@ A
(
é	é	A B
bindInfo
è	è	 
,
è	è	 
factoryBindInfo
è	è	 -
)
è	è	- .
)
è	è	. /
;
è	è	/ 0
var
ë	ë	 
bindId
ë	ë	 
=
ë	ë	 
Guid
ë	ë	 
.
ë	ë	 
NewGuid
ë	ë	 %
(
ë	ë	% &
)
ë	ë	& '
;
ë	ë	' (
bindInfo
ì	ì	 
.
ì	ì	 

Identifier
ì	ì	 
=
ì	ì	  !
bindId
ì	ì	" (
;
ì	ì	( ) 
IDecoratorProvider
ï	ï	 
decoratorProvider
ï	ï	 0
;
ï	ï	0 1
if
ó	ó	 
(
ó	ó	 
!
ó	ó	 
_decorators
ó	ó	 
.
ó	ó	 
TryGetValue
ó	ó	 (
(
ó	ó	( )
typeof
ó	ó	) /
(
ó	ó	/ 0
	TContract
ó	ó	0 9
)
ó	ó	9 :
,
ó	ó	: ;
out
ó	ó	< ?
decoratorProvider
ó	ó	@ Q
)
ó	ó	Q R
)
ó	ó	R S
{
ò	ò	 
decoratorProvider
ô	ô	 !
=
ô	ô	" #
new
ô	ô	$ '
DecoratorProvider
ô	ô	( 9
<
ô	ô	9 :
	TContract
ô	ô	: C
>
ô	ô	C D
(
ô	ô	D E
this
ô	ô	E I
)
ô	ô	I J
;
ô	ô	J K
_decorators
ö	ö	 
.
ö	ö	 
Add
ö	ö	 
(
ö	ö	  
typeof
ö	ö	  &
(
ö	ö	& '
	TContract
ö	ö	' 0
)
ö	ö	0 1
,
ö	ö	1 2
decoratorProvider
ö	ö	3 D
)
ö	ö	D E
;
ö	ö	E F
}
õ	õ	 
(
ù	ù	 
(
ù	ù	 
DecoratorProvider
ù	ù	 
<
ù	ù	  
	TContract
ù	ù	  )
>
ù	ù	) *
)
ù	ù	* +
decoratorProvider
ù	ù	+ <
)
ù	ù	< =
.
ù	ù	= >
AddFactoryId
ù	ù	> J
(
ù	ù	J K
bindId
ù	ù	K Q
)
ù	ù	Q R
;
ù	ù	R S
return
ü	ü	 
new
ü	ü	 )
DecoratorToChoiceFromBinder
ü	ü	 2
<
ü	ü	2 3
	TContract
ü	ü	3 <
>
ü	ü	< =
(
ü	ü	= >
this
†	†	 
,
†	†	 
bindInfo
†	†	 
,
†	†	 
factoryBindInfo
†	†	  /
)
†	†	/ 0
;
†	†	0 1
}
°	°	 	
void
£	£	 #
GetDecoratedInstances
£	£	 "
(
£	£	" #
	IProvider
§	§	 
provider
§	§	 
,
§	§	 
InjectContext
§	§	  -
context
§	§	. 5
,
§	§	5 6
List
§	§	7 ;
<
§	§	; <
object
§	§	< B
>
§	§	B C
buffer
§	§	D J
)
§	§	J K
{
•	•	 	
var
ß	ß	 
decoratorProvider
ß	ß	 !
=
ß	ß	" #%
TryGetDecoratorProvider
ß	ß	$ ;
(
ß	ß	; <
context
ß	ß	< C
.
ß	ß	C D
	BindingId
ß	ß	D M
.
ß	ß	M N
Type
ß	ß	N R
)
ß	ß	R S
;
ß	ß	S T
if
©	©	 
(
©	©	 
decoratorProvider
©	©	 !
!=
©	©	" $
null
©	©	% )
)
©	©	) *
{
™	™	 
decoratorProvider
´	´	 !
.
´	´	! "
GetAllInstances
´	´	" 1
(
´	´	1 2
provider
´	´	2 :
,
´	´	: ;
context
´	´	< C
,
´	´	C D
buffer
´	´	E K
)
´	´	K L
;
´	´	L M
return
¨	¨	 
;
¨	¨	 
}
≠	≠	 
provider
Ø	Ø	 
.
Ø	Ø	 
GetAllInstances
Ø	Ø	 $
(
Ø	Ø	$ %
context
Ø	Ø	% ,
,
Ø	Ø	, -
buffer
Ø	Ø	. 4
)
Ø	Ø	4 5
;
Ø	Ø	5 6
}
∞	∞	 	 
IDecoratorProvider
≤	≤	 %
TryGetDecoratorProvider
≤	≤	 2
(
≤	≤	2 3
Type
≤	≤	3 7
contractType
≤	≤	8 D
)
≤	≤	D E
{
≥	≥	 	 
IDecoratorProvider
¥	¥	 
decoratorProvider
¥	¥	 0
;
¥	¥	0 1
if
∂	∂	 
(
∂	∂	 
_decorators
∂	∂	 
.
∂	∂	 
TryGetValue
∂	∂	 '
(
∂	∂	' (
contractType
∂	∂	( 4
,
∂	∂	4 5
out
∂	∂	6 9
decoratorProvider
∂	∂	: K
)
∂	∂	K L
)
∂	∂	L M
{
∑	∑	 
return
∏	∏	 
decoratorProvider
∏	∏	 (
;
∏	∏	( )
}
π	π	 
var
ª	ª	  
ancestorContainers
ª	ª	 "
=
ª	ª	# $ 
AncestorContainers
ª	ª	% 7
;
ª	ª	7 8
for
Ω	Ω	 
(
Ω	Ω	 
int
Ω	Ω	 
i
Ω	Ω	 
=
Ω	Ω	 
$num
Ω	Ω	 
;
Ω	Ω	 
i
Ω	Ω	 
<
Ω	Ω	  
ancestorContainers
Ω	Ω	  2
.
Ω	Ω	2 3
Length
Ω	Ω	3 9
;
Ω	Ω	9 :
i
Ω	Ω	; <
++
Ω	Ω	< >
)
Ω	Ω	> ?
{
æ	æ	 
if
ø	ø	 
(
ø	ø	  
ancestorContainers
ø	ø	 &
[
ø	ø	& '
i
ø	ø	' (
]
ø	ø	( )
.
ø	ø	) *
_decorators
ø	ø	* 5
.
ø	ø	5 6
TryGetValue
ø	ø	6 A
(
ø	ø	A B
contractType
ø	ø	B N
,
ø	ø	N O
out
ø	ø	P S
decoratorProvider
ø	ø	T e
)
ø	ø	e f
)
ø	ø	f g
{
¿	¿	 
return
¡	¡	 
decoratorProvider
¡	¡	 ,
;
¡	¡	, -
}
¬	¬	 
}
√	√	 
return
≈	≈	 
null
≈	≈	 
;
≈	≈	 
}
∆	∆	 	
int
»	»	 +
GetContainerHeirarchyDistance
»	»	 )
(
»	»	) *
DiContainer
»	»	* 5
	container
»	»	6 ?
)
»	»	? @
{
…	…	 	
return
 	 	 +
GetContainerHeirarchyDistance
 	 	 0
(
 	 	0 1
	container
 	 	1 :
,
 	 	: ;
$num
 	 	< =
)
 	 	= >
.
 	 	> ?
Value
 	 	? D
;
 	 	D E
}
À	À	 	
int
Õ	Õ	 
?
Õ	Õ	 +
GetContainerHeirarchyDistance
Õ	Õ	 *
(
Õ	Õ	* +
DiContainer
Õ	Õ	+ 6
	container
Õ	Õ	7 @
,
Õ	Õ	@ A
int
Õ	Õ	B E
depth
Õ	Õ	F K
)
Õ	Õ	K L
{
Œ	Œ	 	
if
œ	œ	 
(
œ	œ	 
	container
œ	œ	 
==
œ	œ	 
this
œ	œ	 !
)
œ	œ	! "
{
–	–	 
return
—	—	 
depth
—	—	 
;
—	—	 
}
“	“	 
int
‘	‘	 
?
‘	‘	 
result
‘	‘	 
=
‘	‘	 
null
‘	‘	 
;
‘	‘	 
var
÷	÷	 
parentContainers
÷	÷	  
=
÷	÷	! "
ParentContainers
÷	÷	# 3
;
÷	÷	3 4
for
ÿ	ÿ	 
(
ÿ	ÿ	 
int
ÿ	ÿ	 
i
ÿ	ÿ	 
=
ÿ	ÿ	 
$num
ÿ	ÿ	 
;
ÿ	ÿ	 
i
ÿ	ÿ	 
<
ÿ	ÿ	 
parentContainers
ÿ	ÿ	  0
.
ÿ	ÿ	0 1
Length
ÿ	ÿ	1 7
;
ÿ	ÿ	7 8
i
ÿ	ÿ	9 :
++
ÿ	ÿ	: <
)
ÿ	ÿ	< =
{
Ÿ	Ÿ	 
var
⁄	⁄	 
parent
⁄	⁄	 
=
⁄	⁄	 
parentContainers
⁄	⁄	 -
[
⁄	⁄	- .
i
⁄	⁄	. /
]
⁄	⁄	/ 0
;
⁄	⁄	0 1
var
‹	‹	 
distance
‹	‹	 
=
‹	‹	 
parent
‹	‹	 %
.
‹	‹	% &+
GetContainerHeirarchyDistance
‹	‹	& C
(
‹	‹	C D
	container
‹	‹	D M
,
‹	‹	M N
depth
‹	‹	O T
+
‹	‹	U V
$num
‹	‹	W X
)
‹	‹	X Y
;
‹	‹	Y Z
if
ﬁ	ﬁ	 
(
ﬁ	ﬁ	 
distance
ﬁ	ﬁ	 
.
ﬁ	ﬁ	 
HasValue
ﬁ	ﬁ	 %
&&
ﬁ	ﬁ	& (
(
ﬁ	ﬁ	) *
!
ﬁ	ﬁ	* +
result
ﬁ	ﬁ	+ 1
.
ﬁ	ﬁ	1 2
HasValue
ﬁ	ﬁ	2 :
||
ﬁ	ﬁ	; =
distance
ﬁ	ﬁ	> F
.
ﬁ	ﬁ	F G
Value
ﬁ	ﬁ	G L
<
ﬁ	ﬁ	M N
result
ﬁ	ﬁ	O U
.
ﬁ	ﬁ	U V
Value
ﬁ	ﬁ	V [
)
ﬁ	ﬁ	[ \
)
ﬁ	ﬁ	\ ]
{
ﬂ	ﬂ	 
result
‡	‡	 
=
‡	‡	 
distance
‡	‡	 %
;
‡	‡	% &
}
·	·	 
}
‚	‚	 
return
‰	‰	 
result
‰	‰	 
;
‰	‰	 
}
Â	Â	 	
public
Á	Á	 
IEnumerable
Á	Á	 
<
Á	Á	 
Type
Á	Á	 
>
Á	Á	  $
GetDependencyContracts
Á	Á	! 7
<
Á	Á	7 8
	TContract
Á	Á	8 A
>
Á	Á	A B
(
Á	Á	B C
)
Á	Á	C D
{
Ë	Ë	 	
return
È	È	 $
GetDependencyContracts
È	È	 )
(
È	È	) *
typeof
È	È	* 0
(
È	È	0 1
	TContract
È	È	1 :
)
È	È	: ;
)
È	È	; <
;
È	È	< =
}
Í	Í	 	
public
Ï	Ï	 
IEnumerable
Ï	Ï	 
<
Ï	Ï	 
Type
Ï	Ï	 
>
Ï	Ï	  $
GetDependencyContracts
Ï	Ï	! 7
(
Ï	Ï	7 8
Type
Ï	Ï	8 <
contract
Ï	Ï	= E
)
Ï	Ï	E F
{
Ì	Ì	 	
FlushBindings
Ó	Ó	 
(
Ó	Ó	 
)
Ó	Ó	 
;
Ó	Ó	 
var
		 
info
		 
=
		 
TypeAnalyzer
		 #
.
		# $

TryGetInfo
		$ .
(
		. /
contract
		/ 7
)
		7 8
;
		8 9
if
Ú	Ú	 
(
Ú	Ú	 
info
Ú	Ú	 
!=
Ú	Ú	 
null
Ú	Ú	 
)
Ú	Ú	 
{
Û	Û	 
foreach
Ù	Ù	 
(
Ù	Ù	 
var
Ù	Ù	 
injectMember
Ù	Ù	 )
in
Ù	Ù	* ,
info
Ù	Ù	- 1
.
Ù	Ù	1 2
AllInjectables
Ù	Ù	2 @
)
Ù	Ù	@ A
{
ı	ı	 
yield
ˆ	ˆ	 
return
ˆ	ˆ	  
injectMember
ˆ	ˆ	! -
.
ˆ	ˆ	- .

MemberType
ˆ	ˆ	. 8
;
ˆ	ˆ	8 9
}
˜	˜	 
}
¯	¯	 
}
˘	˘	 	
object
˚	˚	 !
InstantiateInternal
˚	˚	 "
(
˚	˚	" #
Type
¸	¸	 
concreteType
¸	¸	 
,
¸	¸	 
bool
¸	¸	 #

autoInject
¸	¸	$ .
,
¸	¸	. /
List
¸	¸	0 4
<
¸	¸	4 5
TypeValuePair
¸	¸	5 B
>
¸	¸	B C
	extraArgs
¸	¸	D M
,
¸	¸	M N
InjectContext
¸	¸	O \
context
¸	¸	] d
,
¸	¸	d e
object
¸	¸	f l 
concreteIdentifier
¸	¸	m 
)¸	¸	 Ä
{
˝	˝	 	
Assert
ˇ	ˇ	 
.
ˇ	ˇ	 
That
ˇ	ˇ	 
(
ˇ	ˇ	 
!
ˇ	ˇ	 
concreteType
ˇ	ˇ	 %
.
ˇ	ˇ	% &
DerivesFrom
ˇ	ˇ	& 1
<
ˇ	ˇ	1 2
	Component
ˇ	ˇ	2 ;
>
ˇ	ˇ	; <
(
ˇ	ˇ	< =
)
ˇ	ˇ	= >
,
ˇ	ˇ	> ?
$strÄ
Ä
 ﬁ
,Ä
Ä
ﬁ ﬂ
concreteTypeÄ
Ä
‡ Ï
)Ä
Ä
Ï Ì
;Ä
Ä
Ì Ó
Assert
É
É
 
.
É
É
 
That
É
É
 
(
É
É
 
!
É
É
 
concreteType
É
É
 %
.
É
É
% &

IsAbstract
É
É
& 0
(
É
É
0 1
)
É
É
1 2
,
É
É
2 3
$str
É
É
4 \
,
É
É
\ ]
concreteType
É
É
^ j
)
É
É
j k
;
É
É
k l
FlushBindings
Ö
Ö
 
(
Ö
Ö
 
)
Ö
Ö
 
;
Ö
Ö
 $
CheckForInstallWarning
Ü
Ü
 "
(
Ü
Ü
" #
context
Ü
Ü
# *
)
Ü
Ü
* +
;
Ü
Ü
+ ,
var
à
à
 
typeInfo
à
à
 
=
à
à
 
TypeAnalyzer
à
à
 '
.
à
à
' (

TryGetInfo
à
à
( 2
(
à
à
2 3
concreteType
à
à
3 ?
)
à
à
? @
;
à
à
@ A
Assert
ä
ä
 
.
ä
ä
 
	IsNotNull
ä
ä
 
(
ä
ä
 
typeInfo
ä
ä
 %
,
ä
ä
% &
$str
ä
ä
' g
,
ä
ä
g h
concreteType
ä
ä
i u
)
ä
ä
u v
;
ä
ä
v w
bool
å
å
 #
allowDuringValidation
å
å
 &
=
å
å
' (
IsValidating
å
å
) 5
&&
å
å
6 8
TypeAnalyzer
å
å
9 E
.
å
å
E F)
ShouldAllowDuringValidation
å
å
F a
(
å
å
a b
concreteType
å
å
b n
)
å
å
n o
;
å
å
o p
object
é
é
 
newObj
é
é
 
;
é
é
 
if
ë
ë
 
(
ë
ë
 
concreteType
ë
ë
 
.
ë
ë
 
DerivesFrom
ë
ë
 (
<
ë
ë
( )
ScriptableObject
ë
ë
) 9
>
ë
ë
9 :
(
ë
ë
: ;
)
ë
ë
; <
)
ë
ë
< =
{
í
í
 
Assert
ì
ì
 
.
ì
ì
 
That
ì
ì
 
(
ì
ì
 
typeInfo
ì
ì
 $
.
ì
ì
$ %
InjectConstructor
ì
ì
% 6
.
ì
ì
6 7

Parameters
ì
ì
7 A
.
ì
ì
A B
Length
ì
ì
B H
==
ì
ì
I K
$num
ì
ì
L M
,
ì
ì
M N
$strî
î
 ì
)î
î
ì î
;î
î
î ï
if
ñ
ñ
 
(
ñ
ñ
 
!
ñ
ñ
 
IsValidating
ñ
ñ
 !
||
ñ
ñ
" $#
allowDuringValidation
ñ
ñ
% :
)
ñ
ñ
: ;
{
ó
ó
 
newObj
ò
ò
 
=
ò
ò
 
ScriptableObject
ò
ò
 -
.
ò
ò
- .
CreateInstance
ò
ò
. <
(
ò
ò
< =
concreteType
ò
ò
= I
)
ò
ò
I J
;
ò
ò
J K
}
ô
ô
 
else
ö
ö
 
{
õ
õ
 
newObj
ú
ú
 
=
ú
ú
 
new
ú
ú
  
ValidationMarker
ú
ú
! 1
(
ú
ú
1 2
concreteType
ú
ú
2 >
)
ú
ú
> ?
;
ú
ú
? @
}
ù
ù
 
}
û
û
 
else
ü
ü
 
{
°
°
 
Assert
¢
¢
 
.
¢
¢
 
	IsNotNull
¢
¢
  
(
¢
¢
  !
typeInfo
¢
¢
! )
.
¢
¢
) *
InjectConstructor
¢
¢
* ;
.
¢
¢
; <
Factory
¢
¢
< C
,
¢
¢
C D
$str£
£
 †
,£
£
† °
concreteType£
£
¢ Æ
)£
£
Æ Ø
;£
£
Ø ∞
var
¶
¶
 
paramValues
¶
¶
 
=
¶
¶
  !
ZenPools
¶
¶
" *
.
¶
¶
* +

SpawnArray
¶
¶
+ 5
<
¶
¶
5 6
object
¶
¶
6 <
>
¶
¶
< =
(
¶
¶
= >
typeInfo
¶
¶
> F
.
¶
¶
F G
InjectConstructor
¶
¶
G X
.
¶
¶
X Y

Parameters
¶
¶
Y c
.
¶
¶
c d
Length
¶
¶
d j
)
¶
¶
j k
;
¶
¶
k l
try
®
®
 
{
©
©
 
for
™
™
 
(
™
™
 
int
™
™
 
i
™
™
 
=
™
™
  
$num
™
™
! "
;
™
™
" #
i
™
™
$ %
<
™
™
& '
typeInfo
™
™
( 0
.
™
™
0 1
InjectConstructor
™
™
1 B
.
™
™
B C

Parameters
™
™
C M
.
™
™
M N
Length
™
™
N T
;
™
™
T U
i
™
™
V W
++
™
™
W Y
)
™
™
Y Z
{
´
´
 
var
¨
¨
 

injectInfo
¨
¨
 &
=
¨
¨
' (
typeInfo
¨
¨
) 1
.
¨
¨
1 2
InjectConstructor
¨
¨
2 C
.
¨
¨
C D

Parameters
¨
¨
D N
[
¨
¨
N O
i
¨
¨
O P
]
¨
¨
P Q
;
¨
¨
Q R
object
Æ
Æ
 
value
Æ
Æ
 $
;
Æ
Æ
$ %
if
∞
∞
 
(
∞
∞
 
!
∞
∞
 

InjectUtil
∞
∞
 '
.
∞
∞
' (
PopValueWithType
∞
∞
( 8
(
∞
∞
8 9
	extraArgs
±
±
 %
,
±
±
% &

injectInfo
±
±
' 1
.
±
±
1 2

MemberType
±
±
2 <
,
±
±
< =
out
±
±
> A
value
±
±
B G
)
±
±
G H
)
±
±
H I
{
≤
≤
 
using
≥
≥
 !
(
≥
≥
" #
var
≥
≥
# &

subContext
≥
≥
' 1
=
≥
≥
2 3
ZenPools
≥
≥
4 <
.
≥
≥
< = 
SpawnInjectContext
≥
≥
= O
(
≥
≥
O P
this
¥
¥
  $
,
¥
¥
$ %

injectInfo
¥
¥
& 0
,
¥
¥
0 1
context
¥
¥
2 9
,
¥
¥
9 :
null
¥
¥
; ?
,
¥
¥
? @
concreteType
¥
¥
A M
,
¥
¥
M N 
concreteIdentifier
¥
¥
O a
)
¥
¥
a b
)
¥
¥
b c
{
µ
µ
 
value
∂
∂
  %
=
∂
∂
& '
Resolve
∂
∂
( /
(
∂
∂
/ 0

subContext
∂
∂
0 :
)
∂
∂
: ;
;
∂
∂
; <
}
∑
∑
 
}
∏
∏
 
if
∫
∫
 
(
∫
∫
 
value
∫
∫
 !
==
∫
∫
" $
null
∫
∫
% )
||
∫
∫
* ,
value
∫
∫
- 2
is
∫
∫
3 5
ValidationMarker
∫
∫
6 F
)
∫
∫
F G
{
ª
ª
 
paramValues
º
º
 '
[
º
º
' (
i
º
º
( )
]
º
º
) *
=
º
º
+ ,

injectInfo
º
º
- 7
.
º
º
7 8

MemberType
º
º
8 B
.
º
º
B C
GetDefaultValue
º
º
C R
(
º
º
R S
)
º
º
S T
;
º
º
T U
}
Ω
Ω
 
else
æ
æ
 
{
ø
ø
 
paramValues
¿
¿
 '
[
¿
¿
' (
i
¿
¿
( )
]
¿
¿
) *
=
¿
¿
+ ,
value
¿
¿
- 2
;
¿
¿
2 3
}
¡
¡
 
}
¬
¬
 
if
ƒ
ƒ
 
(
ƒ
ƒ
 
!
ƒ
ƒ
 
IsValidating
ƒ
ƒ
 %
||
ƒ
ƒ
& (#
allowDuringValidation
ƒ
ƒ
) >
)
ƒ
ƒ
> ?
{
≈
≈
 
try
«
«
 
{
»
»
 
using
Õ
Õ
 !
(
Õ
Õ
" #
ProfileBlock
Õ
Õ
# /
.
Õ
Õ
/ 0
Start
Õ
Õ
0 5
(
Õ
Õ
5 6
$str
Õ
Õ
6 A
,
Õ
Õ
A B
concreteType
Õ
Õ
C O
,
Õ
Õ
O P
concreteType
Õ
Õ
Q ]
.
Õ
Õ
] ^
Name
Õ
Õ
^ b
)
Õ
Õ
b c
)
Õ
Õ
c d
{
œ
œ
 
newObj
–
–
  &
=
–
–
' (
typeInfo
–
–
) 1
.
–
–
1 2
InjectConstructor
–
–
2 C
.
–
–
C D
Factory
–
–
D K
(
–
–
K L
paramValues
–
–
L W
)
–
–
W X
;
–
–
X Y
}
—
—
 
}
“
“
 
catch
”
”
 
(
”
”
 
	Exception
”
”
 (
e
”
”
) *
)
”
”
* +
{
‘
‘
 
throw
’
’
 !
Assert
’
’
" (
.
’
’
( )
CreateException
’
’
) 8
(
’
’
8 9
e
÷
÷
  !
,
÷
÷
! "
$str
÷
÷
# ^
,
÷
÷
^ _
concreteType
÷
÷
` l
)
÷
÷
l m
;
÷
÷
m n
}
◊
◊
 
}
ÿ
ÿ
 
else
Ÿ
Ÿ
 
{
⁄
⁄
 
newObj
€
€
 
=
€
€
  
new
€
€
! $
ValidationMarker
€
€
% 5
(
€
€
5 6
concreteType
€
€
6 B
)
€
€
B C
;
€
€
C D
}
‹
‹
 
}
›
›
 
finally
ﬁ
ﬁ
 
{
ﬂ
ﬂ
 
ZenPools
‡
‡
 
.
‡
‡
 
DespawnArray
‡
‡
 )
(
‡
‡
) *
paramValues
‡
‡
* 5
)
‡
‡
5 6
;
‡
‡
6 7
}
·
·
 
}
‚
‚
 
if
‰
‰
 
(
‰
‰
 

autoInject
‰
‰
 
)
‰
‰
 
{
Â
Â
 
InjectExplicit
Ê
Ê
 
(
Ê
Ê
 
newObj
Ê
Ê
 %
,
Ê
Ê
% &
concreteType
Ê
Ê
' 3
,
Ê
Ê
3 4
	extraArgs
Ê
Ê
5 >
,
Ê
Ê
> ?
context
Ê
Ê
@ G
,
Ê
Ê
G H 
concreteIdentifier
Ê
Ê
I [
)
Ê
Ê
[ \
;
Ê
Ê
\ ]
if
Ë
Ë
 
(
Ë
Ë
 
	extraArgs
Ë
Ë
 
.
Ë
Ë
 
Count
Ë
Ë
 #
>
Ë
Ë
$ %
$num
Ë
Ë
& '
&&
Ë
Ë
( *
!
Ë
Ë
+ ,
(
Ë
Ë
, -
newObj
Ë
Ë
- 3
is
Ë
Ë
4 6
ValidationMarker
Ë
Ë
7 G
)
Ë
Ë
G H
)
Ë
Ë
H I
{
È
È
 
throw
Í
Í
 
Assert
Í
Í
  
.
Í
Í
  !
CreateException
Í
Í
! 0
(
Í
Í
0 1
$strÎ
Î
 É
,Î
Î
É Ñ
newObj
Ï
Ï
 
.
Ï
Ï
 
GetType
Ï
Ï
 &
(
Ï
Ï
& '
)
Ï
Ï
' (
,
Ï
Ï
( )
String
Ï
Ï
* 0
.
Ï
Ï
0 1
Join
Ï
Ï
1 5
(
Ï
Ï
5 6
$str
Ï
Ï
6 9
,
Ï
Ï
9 :
	extraArgs
Ï
Ï
; D
.
Ï
Ï
D E
Select
Ï
Ï
E K
(
Ï
Ï
K L
x
Ï
Ï
L M
=>
Ï
Ï
N P
x
Ï
Ï
Q R
.
Ï
Ï
R S
Type
Ï
Ï
S W
.
Ï
Ï
W X

PrettyName
Ï
Ï
X b
(
Ï
Ï
b c
)
Ï
Ï
c d
)
Ï
Ï
d e
.
Ï
Ï
e f
ToArray
Ï
Ï
f m
(
Ï
Ï
m n
)
Ï
Ï
n o
)
Ï
Ï
o p
,
Ï
Ï
p q
context
Ï
Ï
r y
.
Ï
Ï
y z#
GetObjectGraphStringÏ
Ï
z é
(Ï
Ï
é è
)Ï
Ï
è ê
)Ï
Ï
ê ë
;Ï
Ï
ë í
}
Ì
Ì
 
}
Ó
Ó
 
if
Ò
Ò
 
(
Ò
Ò
 
IsValidating
Ò
Ò
 
&&
Ò
Ò
 
newObj
Ò
Ò
  &
is
Ò
Ò
' )
IValidatable
Ò
Ò
* 6
)
Ò
Ò
6 7
{
Ú
Ú
 
QueueForValidate
Û
Û
  
(
Û
Û
  !
(
Û
Û
! "
IValidatable
Û
Û
" .
)
Û
Û
. /
newObj
Û
Û
/ 5
)
Û
Û
5 6
;
Û
Û
6 7
}
Ù
Ù
 
return
˜
˜
 
newObj
˜
˜
 
;
˜
˜
 
}
¯
¯
 	
public
˝
˝
 
void
˝
˝
 
InjectExplicit
˝
˝
 "
(
˝
˝
" #
object
˝
˝
# )

injectable
˝
˝
* 4
,
˝
˝
4 5
List
˝
˝
6 :
<
˝
˝
: ;
TypeValuePair
˝
˝
; H
>
˝
˝
H I
	extraArgs
˝
˝
J S
)
˝
˝
S T
{
˛
˛
 	
Type
ˇ
ˇ
 
injectableType
ˇ
ˇ
 
;
ˇ
ˇ
  
if
ÅÅ 
(
ÅÅ 

injectable
ÅÅ 
is
ÅÅ 
ValidationMarker
ÅÅ .
)
ÅÅ. /
{
ÇÇ 
injectableType
ÉÉ 
=
ÉÉ  
(
ÉÉ! "
(
ÉÉ" #
ValidationMarker
ÉÉ# 3
)
ÉÉ3 4

injectable
ÉÉ4 >
)
ÉÉ> ?
.
ÉÉ? @

MarkedType
ÉÉ@ J
;
ÉÉJ K
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
injectableType
áá 
=
áá  

injectable
áá! +
.
áá+ ,
GetType
áá, 3
(
áá3 4
)
áá4 5
;
áá5 6
}
àà 
InjectExplicit
ää 
(
ää 

injectable
ãã 
,
ãã 
injectableType
åå 
,
åå 
	extraArgs
çç 
,
çç 
new
éé 
InjectContext
éé !
(
éé! "
this
éé" &
,
éé& '
injectableType
éé( 6
,
éé6 7
null
éé8 <
)
éé< =
,
éé= >
null
èè 
)
èè 
;
èè 
}
êê 	
public
íí 
void
íí 
InjectExplicit
íí "
(
íí" #
object
ìì 

injectable
ìì 
,
ìì 
Type
ìì #
injectableType
ìì$ 2
,
ìì2 3
List
îî 
<
îî 
TypeValuePair
îî 
>
îî 
	extraArgs
îî  )
,
îî) *
InjectContext
îî+ 8
context
îî9 @
,
îî@ A
object
îîB H 
concreteIdentifier
îîI [
)
îî[ \
{
ïï 	
{
ôô 
if
öö 
(
öö 
IsValidating
öö  
)
öö  !
{
õõ 
var
úú 
marker
úú 
=
úú  

injectable
úú! +
as
úú, .
ValidationMarker
úú/ ?
;
úú? @
if
ûû 
(
ûû 
marker
ûû 
!=
ûû !
null
ûû" &
&&
ûû' )
marker
ûû* 0
.
ûû0 1
InstantiateFailed
ûû1 B
)
ûûB C
{
üü 
return
¢¢ 
;
¢¢ 
}
££ 
if
•• 
(
•• 
	_settings
•• !
.
••! "%
ValidationErrorResponse
••" 9
==
••: <&
ValidationErrorResponses
••= U
.
••U V
Throw
••V [
)
••[ \
{
¶¶ $
InjectExplicitInternal
ßß .
(
ßß. /

injectable
®® &
,
®®& '
injectableType
®®( 6
,
®®6 7
	extraArgs
®®8 A
,
®®A B
context
®®C J
,
®®J K 
concreteIdentifier
®®L ^
)
®®^ _
;
®®_ `
}
©© 
else
™™ 
{
´´ 
try
ÆÆ 
{
ØØ $
InjectExplicitInternal
∞∞ 2
(
∞∞2 3

injectable
∞∞3 =
,
∞∞= >
injectableType
∞∞? M
,
∞∞M N
	extraArgs
∞∞O X
,
∞∞X Y
context
∞∞Z a
,
∞∞a b 
concreteIdentifier
∞∞c u
)
∞∞u v
;
∞∞v w
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ (
e
≤≤) *
)
≤≤* +
{
≥≥ 
Log
¥¥ 
.
¥¥  
ErrorException
¥¥  .
(
¥¥. /
e
¥¥/ 0
)
¥¥0 1
;
¥¥1 2
}
µµ 
}
∂∂ 
}
∑∑ 
else
∏∏ 
{
ππ $
InjectExplicitInternal
∫∫ *
(
∫∫* +

injectable
∫∫+ 5
,
∫∫5 6
injectableType
∫∫7 E
,
∫∫E F
	extraArgs
∫∫G P
,
∫∫P Q
context
∫∫R Y
,
∫∫Y Z 
concreteIdentifier
∫∫[ m
)
∫∫m n
;
∫∫n o
}
ªª 
}
ºº 
}
ΩΩ 	
void
øø &
CallInjectMethodsTopDown
øø %
(
øø% &
object
¿¿ 

injectable
¿¿ 
,
¿¿ 
Type
¿¿ #
injectableType
¿¿$ 2
,
¿¿2 3
InjectTypeInfo
¡¡ 
typeInfo
¡¡ #
,
¡¡# $
List
¡¡% )
<
¡¡) *
TypeValuePair
¡¡* 7
>
¡¡7 8
	extraArgs
¡¡9 B
,
¡¡B C
InjectContext
¬¬ 
context
¬¬ !
,
¬¬! "
object
¬¬# ) 
concreteIdentifier
¬¬* <
,
¬¬< =
bool
¬¬> B
isDryRun
¬¬C K
)
¬¬K L
{
√√ 	
if
ƒƒ 
(
ƒƒ 
typeInfo
ƒƒ 
.
ƒƒ 
BaseTypeInfo
ƒƒ %
!=
ƒƒ& (
null
ƒƒ) -
)
ƒƒ- .
{
≈≈ &
CallInjectMethodsTopDown
∆∆ (
(
∆∆( )

injectable
«« 
,
«« 
injectableType
««  .
,
««. /
typeInfo
««0 8
.
««8 9
BaseTypeInfo
««9 E
,
««E F
	extraArgs
««G P
,
««P Q
context
»» 
,
»»  
concreteIdentifier
»» /
,
»»/ 0
isDryRun
»»1 9
)
»»9 :
;
»»: ;
}
…… 
for
ÀÀ 
(
ÀÀ 
int
ÀÀ 
i
ÀÀ 
=
ÀÀ 
$num
ÀÀ 
;
ÀÀ 
i
ÀÀ 
<
ÀÀ 
typeInfo
ÀÀ  (
.
ÀÀ( )
InjectMethods
ÀÀ) 6
.
ÀÀ6 7
Length
ÀÀ7 =
;
ÀÀ= >
i
ÀÀ? @
++
ÀÀ@ B
)
ÀÀB C
{
ÃÃ 
var
ÕÕ 
method
ÕÕ 
=
ÕÕ 
typeInfo
ÕÕ %
.
ÕÕ% &
InjectMethods
ÕÕ& 3
[
ÕÕ3 4
i
ÕÕ4 5
]
ÕÕ5 6
;
ÕÕ6 7
var
ŒŒ 
paramValues
ŒŒ 
=
ŒŒ  !
ZenPools
ŒŒ" *
.
ŒŒ* +

SpawnArray
ŒŒ+ 5
<
ŒŒ5 6
object
ŒŒ6 <
>
ŒŒ< =
(
ŒŒ= >
method
ŒŒ> D
.
ŒŒD E

Parameters
ŒŒE O
.
ŒŒO P
Length
ŒŒP V
)
ŒŒV W
;
ŒŒW X
try
–– 
{
—— 
for
““ 
(
““ 
int
““ 
k
““ 
=
““  
$num
““! "
;
““" #
k
““$ %
<
““& '
method
““( .
.
““. /

Parameters
““/ 9
.
““9 :
Length
““: @
;
““@ A
k
““B C
++
““C E
)
““E F
{
”” 
var
‘‘ 

injectInfo
‘‘ &
=
‘‘' (
method
‘‘) /
.
‘‘/ 0

Parameters
‘‘0 :
[
‘‘: ;
k
‘‘; <
]
‘‘< =
;
‘‘= >
object
÷÷ 
value
÷÷ $
;
÷÷$ %
if
ÿÿ 
(
ÿÿ 
!
ÿÿ 

InjectUtil
ÿÿ '
.
ÿÿ' (
PopValueWithType
ÿÿ( 8
(
ÿÿ8 9
	extraArgs
ÿÿ9 B
,
ÿÿB C

injectInfo
ÿÿD N
.
ÿÿN O

MemberType
ÿÿO Y
,
ÿÿY Z
out
ÿÿ[ ^
value
ÿÿ_ d
)
ÿÿd e
)
ÿÿe f
{
ŸŸ 
using
⁄⁄ !
(
⁄⁄" #
var
⁄⁄# &

subContext
⁄⁄' 1
=
⁄⁄2 3
ZenPools
⁄⁄4 <
.
⁄⁄< = 
SpawnInjectContext
⁄⁄= O
(
⁄⁄O P
this
€€  $
,
€€$ %

injectInfo
€€& 0
,
€€0 1
context
€€2 9
,
€€9 :

injectable
€€; E
,
€€E F
injectableType
€€G U
,
€€U V 
concreteIdentifier
€€W i
)
€€i j
)
€€j k
{
‹‹ 
value
››  %
=
››& '
Resolve
››( /
(
››/ 0

subContext
››0 :
)
››: ;
;
››; <
}
ﬁﬁ 
}
ﬂﬂ 
if
·· 
(
·· 
value
·· !
is
··" $
ValidationMarker
··% 5
)
··5 6
{
‚‚ 
Assert
„„ "
.
„„" #
That
„„# '
(
„„' (
IsValidating
„„( 4
)
„„4 5
;
„„5 6
paramValues
ÂÂ '
[
ÂÂ' (
k
ÂÂ( )
]
ÂÂ) *
=
ÂÂ+ ,

injectInfo
ÂÂ- 7
.
ÂÂ7 8

MemberType
ÂÂ8 B
.
ÂÂB C
GetDefaultValue
ÂÂC R
(
ÂÂR S
)
ÂÂS T
;
ÂÂT U
}
ÊÊ 
else
ÁÁ 
{
ËË 
paramValues
ÈÈ '
[
ÈÈ' (
k
ÈÈ( )
]
ÈÈ) *
=
ÈÈ+ ,
value
ÈÈ- 2
;
ÈÈ2 3
}
ÍÍ 
}
ÎÎ 
if
ÌÌ 
(
ÌÌ 
!
ÌÌ 
isDryRun
ÌÌ !
)
ÌÌ! "
{
ÓÓ 
using
ÛÛ 
(
ÛÛ 
ProfileBlock
ÛÛ +
.
ÛÛ+ ,
Start
ÛÛ, 1
(
ÛÛ1 2
$str
ÛÛ2 =
,
ÛÛ= >
typeInfo
ÛÛ? G
.
ÛÛG H
Type
ÛÛH L
,
ÛÛL M
method
ÛÛN T
.
ÛÛT U
Name
ÛÛU Y
)
ÛÛY Z
)
ÛÛZ [
{
ıı 
method
ˆˆ "
.
ˆˆ" #
Action
ˆˆ# )
(
ˆˆ) *

injectable
ˆˆ* 4
,
ˆˆ4 5
paramValues
ˆˆ6 A
)
ˆˆA B
;
ˆˆB C
}
˜˜ 
}
¯¯ 
}
˘˘ 
finally
˙˙ 
{
˚˚ 
ZenPools
¸¸ 
.
¸¸ 
DespawnArray
¸¸ )
(
¸¸) *
paramValues
¸¸* 5
)
¸¸5 6
;
¸¸6 7
}
˝˝ 
}
˛˛ 
}
ˇˇ 	
void
ÅÅ "
InjectMembersTopDown
ÅÅ !
(
ÅÅ! "
object
ÇÇ 

injectable
ÇÇ 
,
ÇÇ 
Type
ÇÇ #
injectableType
ÇÇ$ 2
,
ÇÇ2 3
InjectTypeInfo
ÉÉ 
typeInfo
ÉÉ #
,
ÉÉ# $
List
ÉÉ% )
<
ÉÉ) *
TypeValuePair
ÉÉ* 7
>
ÉÉ7 8
	extraArgs
ÉÉ9 B
,
ÉÉB C
InjectContext
ÑÑ 
context
ÑÑ !
,
ÑÑ! "
object
ÑÑ# ) 
concreteIdentifier
ÑÑ* <
,
ÑÑ< =
bool
ÑÑ> B
isDryRun
ÑÑC K
)
ÑÑK L
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
typeInfo
ÜÜ 
.
ÜÜ 
BaseTypeInfo
ÜÜ %
!=
ÜÜ& (
null
ÜÜ) -
)
ÜÜ- .
{
áá "
InjectMembersTopDown
àà $
(
àà$ %

injectable
ââ 
,
ââ 
injectableType
ââ  .
,
ââ. /
typeInfo
ââ0 8
.
ââ8 9
BaseTypeInfo
ââ9 E
,
ââE F
	extraArgs
ââG P
,
ââP Q
context
ää 
,
ää  
concreteIdentifier
ää /
,
ää/ 0
isDryRun
ää1 9
)
ää9 :
;
ää: ;
}
ãã 
for
çç 
(
çç 
int
çç 
i
çç 
=
çç 
$num
çç 
;
çç 
i
çç 
<
çç 
typeInfo
çç  (
.
çç( )
InjectMembers
çç) 6
.
çç6 7
Length
çç7 =
;
çç= >
i
çç? @
++
çç@ B
)
ççB C
{
éé 
var
èè 

injectInfo
èè 
=
èè  
typeInfo
èè! )
.
èè) *
InjectMembers
èè* 7
[
èè7 8
i
èè8 9
]
èè9 :
.
èè: ;
Info
èè; ?
;
èè? @
var
êê 
setterMethod
êê  
=
êê! "
typeInfo
êê# +
.
êê+ ,
InjectMembers
êê, 9
[
êê9 :
i
êê: ;
]
êê; <
.
êê< =
Setter
êê= C
;
êêC D
object
íí 
value
íí 
;
íí 
if
îî 
(
îî 

InjectUtil
îî 
.
îî 
PopValueWithType
îî /
(
îî/ 0
	extraArgs
îî0 9
,
îî9 :

injectInfo
îî; E
.
îîE F

MemberType
îîF P
,
îîP Q
out
îîR U
value
îîV [
)
îî[ \
)
îî\ ]
{
ïï 
if
ññ 
(
ññ 
!
ññ 
isDryRun
ññ !
)
ññ! "
{
óó 
if
òò 
(
òò 
value
òò !
is
òò" $
ValidationMarker
òò% 5
)
òò5 6
{
ôô 
Assert
öö "
.
öö" #
That
öö# '
(
öö' (
IsValidating
öö( 4
)
öö4 5
;
öö5 6
}
õõ 
else
úú 
{
ùù 
setterMethod
ûû (
(
ûû( )

injectable
ûû) 3
,
ûû3 4
value
ûû5 :
)
ûû: ;
;
ûû; <
}
üü 
}
†† 
}
°° 
else
¢¢ 
{
££ 
using
§§ 
(
§§ 
var
§§ 

subContext
§§ )
=
§§* +
ZenPools
§§, 4
.
§§4 5 
SpawnInjectContext
§§5 G
(
§§G H
this
•• 
,
•• 

injectInfo
•• (
,
••( )
context
••* 1
,
••1 2

injectable
••3 =
,
••= >
injectableType
••? M
,
••M N 
concreteIdentifier
••O a
)
••a b
)
••b c
{
¶¶ 
value
ßß 
=
ßß 
Resolve
ßß  '
(
ßß' (

subContext
ßß( 2
)
ßß2 3
;
ßß3 4
}
®® 
if
™™ 
(
™™ 

injectInfo
™™ "
.
™™" #
Optional
™™# +
&&
™™, .
value
™™/ 4
==
™™5 7
null
™™8 <
)
™™< =
{
´´ 
}
≠≠ 
else
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
!
∞∞ 
isDryRun
∞∞ %
)
∞∞% &
{
±± 
if
≤≤ 
(
≤≤  
value
≤≤  %
is
≤≤& (
ValidationMarker
≤≤) 9
)
≤≤9 :
{
≥≥ 
Assert
¥¥  &
.
¥¥& '
That
¥¥' +
(
¥¥+ ,
IsValidating
¥¥, 8
)
¥¥8 9
;
¥¥9 :
}
µµ 
else
∂∂  
{
∑∑ 
setterMethod
∏∏  ,
(
∏∏, -

injectable
∏∏- 7
,
∏∏7 8
value
∏∏9 >
)
∏∏> ?
;
∏∏? @
}
ππ 
}
∫∫ 
}
ªª 
}
ºº 
}
ΩΩ 
}
ææ 	
void
¿¿ $
InjectExplicitInternal
¿¿ #
(
¿¿# $
object
¡¡ 

injectable
¡¡ 
,
¡¡ 
Type
¡¡ #
injectableType
¡¡$ 2
,
¡¡2 3
List
¡¡4 8
<
¡¡8 9
TypeValuePair
¡¡9 F
>
¡¡F G
	extraArgs
¡¡H Q
,
¡¡Q R
InjectContext
¬¬ 
context
¬¬ !
,
¬¬! "
object
¬¬# ) 
concreteIdentifier
¬¬* <
)
¬¬< =
{
√√ 	
Assert
ƒƒ 
.
ƒƒ 
That
ƒƒ 
(
ƒƒ 

injectable
ƒƒ "
!=
ƒƒ# %
null
ƒƒ& *
)
ƒƒ* +
;
ƒƒ+ ,
var
∆∆ 
typeInfo
∆∆ 
=
∆∆ 
TypeAnalyzer
∆∆ '
.
∆∆' (

TryGetInfo
∆∆( 2
(
∆∆2 3
injectableType
∆∆3 A
)
∆∆A B
;
∆∆B C
if
»» 
(
»» 
typeInfo
»» 
==
»» 
null
»»  
)
»»  !
{
…… 
Assert
   
.
   
That
   
(
   
	extraArgs
   %
.
  % &
IsEmpty
  & -
(
  - .
)
  . /
)
  / 0
;
  0 1
return
ÀÀ 
;
ÀÀ 
}
ÃÃ 
var
ŒŒ #
allowDuringValidation
ŒŒ %
=
ŒŒ& '
IsValidating
ŒŒ( 4
&&
ŒŒ5 7
TypeAnalyzer
ŒŒ8 D
.
ŒŒD E)
ShouldAllowDuringValidation
ŒŒE `
(
ŒŒ` a
injectableType
ŒŒa o
)
ŒŒo p
;
ŒŒp q
var
—— 
isDryRun
—— 
=
—— 
IsValidating
—— '
&&
——( *
!
——+ ,#
allowDuringValidation
——, A
;
——A B
if
”” 
(
”” 
!
”” 
isDryRun
”” 
)
”” 
{
‘‘ 
Assert
’’ 
.
’’ 
IsEqual
’’ 
(
’’ 

injectable
’’ )
.
’’) *
GetType
’’* 1
(
’’1 2
)
’’2 3
,
’’3 4
injectableType
’’5 C
)
’’C D
;
’’D E
}
÷÷ 
if
ŸŸ 
(
ŸŸ 
injectableType
ŸŸ 
==
ŸŸ !
typeof
ŸŸ" (
(
ŸŸ( )

GameObject
ŸŸ) 3
)
ŸŸ3 4
)
ŸŸ4 5
{
⁄⁄ 
Assert
€€ 
.
€€ 
CreateException
€€ &
(
€€& '
$str
‹‹ m
,
‹‹m n
context
‹‹o v
.
‹‹v w#
GetObjectGraphString‹‹w ã
(‹‹ã å
)‹‹å ç
)‹‹ç é
;‹‹é è
}
›› 
FlushBindings
‡‡ 
(
‡‡ 
)
‡‡ 
;
‡‡ $
CheckForInstallWarning
·· "
(
··" #
context
··# *
)
··* +
;
··+ ,"
InjectMembersTopDown
„„  
(
„„  !

injectable
‰‰ 
,
‰‰ 
injectableType
‰‰ *
,
‰‰* +
typeInfo
‰‰, 4
,
‰‰4 5
	extraArgs
‰‰6 ?
,
‰‰? @
context
‰‰A H
,
‰‰H I 
concreteIdentifier
‰‰J \
,
‰‰\ ]
isDryRun
‰‰^ f
)
‰‰f g
;
‰‰g h&
CallInjectMethodsTopDown
ÊÊ $
(
ÊÊ$ %

injectable
ÁÁ 
,
ÁÁ 
injectableType
ÁÁ *
,
ÁÁ* +
typeInfo
ÁÁ, 4
,
ÁÁ4 5
	extraArgs
ÁÁ6 ?
,
ÁÁ? @
context
ÁÁA H
,
ÁÁH I 
concreteIdentifier
ÁÁJ \
,
ÁÁ\ ]
isDryRun
ÁÁ^ f
)
ÁÁf g
;
ÁÁg h
if
ÈÈ 
(
ÈÈ 
	extraArgs
ÈÈ 
.
ÈÈ 
Count
ÈÈ 
>
ÈÈ  !
$num
ÈÈ" #
)
ÈÈ# $
{
ÍÍ 
throw
ÎÎ 
Assert
ÎÎ 
.
ÎÎ 
CreateException
ÎÎ ,
(
ÎÎ, -
$str
ÏÏ 
,ÏÏ Ä
injectableType
ÌÌ "
,
ÌÌ" #
String
ÌÌ$ *
.
ÌÌ* +
Join
ÌÌ+ /
(
ÌÌ/ 0
$str
ÌÌ0 3
,
ÌÌ3 4
	extraArgs
ÌÌ5 >
.
ÌÌ> ?
Select
ÌÌ? E
(
ÌÌE F
x
ÌÌF G
=>
ÌÌH J
x
ÌÌK L
.
ÌÌL M
Type
ÌÌM Q
.
ÌÌQ R

PrettyName
ÌÌR \
(
ÌÌ\ ]
)
ÌÌ] ^
)
ÌÌ^ _
.
ÌÌ_ `
ToArray
ÌÌ` g
(
ÌÌg h
)
ÌÌh i
)
ÌÌi j
,
ÌÌj k
context
ÌÌl s
.
ÌÌs t#
GetObjectGraphStringÌÌt à
(ÌÌà â
)ÌÌâ ä
)ÌÌä ã
;ÌÌã å
}
ÓÓ 
}
ÔÔ 	
internal
˜˜ 

GameObject
˜˜ +
CreateAndParentPrefabResource
˜˜ 9
(
˜˜9 :
string
¯¯ 
resourcePath
¯¯ 
,
¯¯  *
GameObjectCreationParameters
¯¯! = 
gameObjectBindInfo
¯¯> P
,
¯¯P Q
InjectContext
¯¯R _
context
¯¯` g
,
¯¯g h
out
¯¯i l
bool
¯¯m q
shouldMakeActive¯¯r Ç
)¯¯Ç É
{
˘˘ 	
var
˙˙ 
prefab
˙˙ 
=
˙˙ 
(
˙˙ 

GameObject
˙˙ $
)
˙˙$ %
	Resources
˙˙% .
.
˙˙. /
Load
˙˙/ 3
(
˙˙3 4
resourcePath
˙˙4 @
)
˙˙@ A
;
˙˙A B
Assert
¸¸ 
.
¸¸ 
	IsNotNull
¸¸ 
(
¸¸ 
prefab
¸¸ #
,
¸¸# $
$str
˝˝ B
.
˝˝B C
Fmt
˝˝C F
(
˝˝F G
resourcePath
˝˝G S
)
˝˝S T
)
˝˝T U
;
˝˝U V
return
ˇˇ #
CreateAndParentPrefab
ˇˇ (
(
ˇˇ( )
prefab
ˇˇ) /
,
ˇˇ/ 0 
gameObjectBindInfo
ˇˇ1 C
,
ˇˇC D
context
ˇˇE L
,
ˇˇL M
out
ˇˇN Q
shouldMakeActive
ˇˇR b
)
ˇˇb c
;
ˇˇc d
}
ÄÄ 	

GameObject
ÇÇ #
GetPrefabAsGameObject
ÇÇ (
(
ÇÇ( )
UnityEngine
ÇÇ) 4
.
ÇÇ4 5
Object
ÇÇ5 ;
prefab
ÇÇ< B
)
ÇÇB C
{
ÉÉ 	
if
ÑÑ 
(
ÑÑ 
prefab
ÑÑ 
is
ÑÑ 

GameObject
ÑÑ $
)
ÑÑ$ %
{
ÖÖ 
return
ÜÜ 
(
ÜÜ 

GameObject
ÜÜ "
)
ÜÜ" #
prefab
ÜÜ# )
;
ÜÜ) *
}
áá 
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
prefab
ââ 
is
ââ !
	Component
ââ" +
,
ââ+ ,
$str
ââ- f
,
ââf g
prefab
ââh n
.
âân o
name
ââo s
)
ââs t
;
âât u
return
ää 
(
ää 
(
ää 
	Component
ää 
)
ää 
prefab
ää %
)
ää% &
.
ää& '

gameObject
ää' 1
;
ää1 2
}
ãã 	
internal
êê 

GameObject
êê #
CreateAndParentPrefab
êê 1
(
êê1 2
UnityEngine
ëë 
.
ëë 
Object
ëë 
prefab
ëë %
,
ëë% &*
GameObjectCreationParameters
ëë' C 
gameObjectBindInfo
ëëD V
,
ëëV W
InjectContext
íí 
context
íí !
,
íí! "
out
íí# &
bool
íí' +
shouldMakeActive
íí, <
)
íí< =
{
ìì 	
Assert
îî 
.
îî 
That
îî 
(
îî 
prefab
îî 
!=
îî !
null
îî" &
,
îî& '
$str
îî( Z
)
îîZ [
;
îî[ \
Assert
ññ 
.
ññ 
That
ññ 
(
ññ 
!
ññ $
AssertOnNewGameObjects
ññ /
,
ññ/ 0
$str
óó N
)
óóN O
;
óóO P
FlushBindings
ôô 
(
ôô 
)
ôô 
;
ôô 
var
õõ  
prefabAsGameObject
õõ "
=
õõ# $#
GetPrefabAsGameObject
õõ% :
(
õõ: ;
prefab
õõ; A
)
õõA B
;
õõB C
var
ùù 
prefabWasActive
ùù 
=
ùù  ! 
prefabAsGameObject
ùù" 4
.
ùù4 5

activeSelf
ùù5 ?
;
ùù? @
shouldMakeActive
üü 
=
üü 
prefabWasActive
üü .
;
üü. /
var
°° 
parent
°° 
=
°° 
GetTransformGroup
°° *
(
°°* + 
gameObjectBindInfo
°°+ =
,
°°= >
context
°°? F
)
°°F G
;
°°G H
	Transform
££ 
initialParent
££ #
;
££# $
if
™™ 
(
™™ 
prefabWasActive
™™ 
)
™™  
{
´´ 
initialParent
¨¨ 
=
¨¨ 
ZenUtilInternal
¨¨  /
.
¨¨/ 0-
GetOrCreateInactivePrefabParent
¨¨0 O
(
¨¨O P
)
¨¨P Q
;
¨¨Q R
}
≠≠ 
else
ÆÆ 
{
∞∞ 
if
±± 
(
±± 
parent
±± 
!=
±± 
null
±± "
)
±±" #
{
≤≤ 
initialParent
≥≥ !
=
≥≥" #
parent
≥≥$ *
;
≥≥* +
}
¥¥ 
else
µµ 
{
∂∂ 
initialParent
∏∏ !
=
∏∏" #
ContextTransform
∏∏$ 4
;
∏∏4 5
}
ππ 
}
∫∫ 
bool
ºº (
positionAndRotationWereSet
ºº +
;
ºº+ ,

GameObject
ΩΩ 
gameObj
ΩΩ 
;
ΩΩ 
{
¬¬ 
if
√√ 
(
√√  
gameObjectBindInfo
√√ &
.
√√& '
Position
√√' /
.
√√/ 0
HasValue
√√0 8
&&
√√9 ; 
gameObjectBindInfo
√√< N
.
√√N O
Rotation
√√O W
.
√√W X
HasValue
√√X `
)
√√` a
{
ƒƒ 
gameObj
≈≈ 
=
≈≈ 

GameObject
≈≈ (
.
≈≈( )
Instantiate
≈≈) 4
(
≈≈4 5 
prefabAsGameObject
∆∆ *
,
∆∆* + 
gameObjectBindInfo
∆∆, >
.
∆∆> ?
Position
∆∆? G
.
∆∆G H
Value
∆∆H M
,
∆∆M N 
gameObjectBindInfo
∆∆O a
.
∆∆a b
Rotation
∆∆b j
.
∆∆j k
Value
∆∆k p
,
∆∆p q
initialParent
∆∆r 
)∆∆ Ä
;∆∆Ä Å(
positionAndRotationWereSet
«« .
=
««/ 0
true
««1 5
;
««5 6
}
»» 
else
…… 
if
…… 
(
……  
gameObjectBindInfo
…… +
.
……+ ,
Position
……, 4
.
……4 5
HasValue
……5 =
)
……= >
{
   
gameObj
ÀÀ 
=
ÀÀ 

GameObject
ÀÀ (
.
ÀÀ( )
Instantiate
ÀÀ) 4
(
ÀÀ4 5 
prefabAsGameObject
ÃÃ *
,
ÃÃ* + 
gameObjectBindInfo
ÃÃ, >
.
ÃÃ> ?
Position
ÃÃ? G
.
ÃÃG H
Value
ÃÃH M
,
ÃÃM N 
prefabAsGameObject
ÃÃO a
.
ÃÃa b
	transform
ÃÃb k
.
ÃÃk l
rotation
ÃÃl t
,
ÃÃt u
initialParentÃÃv É
)ÃÃÉ Ñ
;ÃÃÑ Ö(
positionAndRotationWereSet
ÕÕ .
=
ÕÕ/ 0
true
ÕÕ1 5
;
ÕÕ5 6
}
ŒŒ 
else
œœ 
if
œœ 
(
œœ  
gameObjectBindInfo
œœ +
.
œœ+ ,
Rotation
œœ, 4
.
œœ4 5
HasValue
œœ5 =
)
œœ= >
{
–– 
gameObj
—— 
=
—— 

GameObject
—— (
.
——( )
Instantiate
——) 4
(
——4 5 
prefabAsGameObject
““ *
,
““* + 
prefabAsGameObject
““, >
.
““> ?
	transform
““? H
.
““H I
position
““I Q
,
““Q R 
gameObjectBindInfo
““S e
.
““e f
Rotation
““f n
.
““n o
Value
““o t
,
““t u
initialParent““v É
)““É Ñ
;““Ñ Ö(
positionAndRotationWereSet
”” .
=
””/ 0
true
””1 5
;
””5 6
}
‘‘ 
else
’’ 
{
÷÷ 
gameObj
◊◊ 
=
◊◊ 

GameObject
◊◊ (
.
◊◊( )
Instantiate
◊◊) 4
(
◊◊4 5 
prefabAsGameObject
◊◊5 G
,
◊◊G H
initialParent
◊◊I V
)
◊◊V W
;
◊◊W X(
positionAndRotationWereSet
ÿÿ .
=
ÿÿ/ 0
false
ÿÿ1 6
;
ÿÿ6 7
}
ŸŸ 
}
⁄⁄ 
if
‚‚ 
(
‚‚ 
prefabWasActive
‚‚ 
)
‚‚  
{
„„ 
gameObj
‰‰ 
.
‰‰ 
	SetActive
‰‰ !
(
‰‰! "
false
‰‰" '
)
‰‰' (
;
‰‰( )
if
ÊÊ 
(
ÊÊ 
parent
ÊÊ 
==
ÊÊ 
null
ÊÊ "
)
ÊÊ" #
{
ÁÁ 
gameObj
ËË 
.
ËË 
	transform
ËË %
.
ËË% &
	SetParent
ËË& /
(
ËË/ 0
ContextTransform
ËË0 @
,
ËË@ A(
positionAndRotationWereSet
ËËB \
)
ËË\ ]
;
ËË] ^
}
ÈÈ 
}
ÍÍ 
if
ÌÌ 
(
ÌÌ 
gameObj
ÌÌ 
.
ÌÌ 
	transform
ÌÌ !
.
ÌÌ! "
parent
ÌÌ" (
!=
ÌÌ) +
parent
ÌÌ, 2
)
ÌÌ2 3
{
ÓÓ 
gameObj
ÔÔ 
.
ÔÔ 
	transform
ÔÔ !
.
ÔÔ! "
	SetParent
ÔÔ" +
(
ÔÔ+ ,
parent
ÔÔ, 2
,
ÔÔ2 3(
positionAndRotationWereSet
ÔÔ4 N
)
ÔÔN O
;
ÔÔO P
}
 
if
ÚÚ 
(
ÚÚ  
gameObjectBindInfo
ÚÚ "
.
ÚÚ" #
Name
ÚÚ# '
!=
ÚÚ( *
null
ÚÚ+ /
)
ÚÚ/ 0
{
ÛÛ 
gameObj
ÙÙ 
.
ÙÙ 
name
ÙÙ 
=
ÙÙ  
gameObjectBindInfo
ÙÙ 1
.
ÙÙ1 2
Name
ÙÙ2 6
;
ÙÙ6 7
}
ıı 
return
˜˜ 
gameObj
˜˜ 
;
˜˜ 
}
¯¯ 	
public
˙˙ 

GameObject
˙˙ #
CreateEmptyGameObject
˙˙ /
(
˙˙/ 0
string
˙˙0 6
name
˙˙7 ;
)
˙˙; <
{
˚˚ 	
return
¸¸ #
CreateEmptyGameObject
¸¸ (
(
¸¸( )
new
¸¸) ,*
GameObjectCreationParameters
¸¸- I
{
¸¸J K
Name
¸¸L P
=
¸¸Q R
name
¸¸S W
}
¸¸X Y
,
¸¸Y Z
null
¸¸[ _
)
¸¸_ `
;
¸¸` a
}
˝˝ 	
public
ˇˇ 

GameObject
ˇˇ #
CreateEmptyGameObject
ˇˇ /
(
ˇˇ/ 0*
GameObjectCreationParameters
ÄÄ ( 
gameObjectBindInfo
ÄÄ) ;
,
ÄÄ; <
InjectContext
ÄÄ= J
context
ÄÄK R
)
ÄÄR S
{
ÅÅ 	
Assert
ÇÇ 
.
ÇÇ 
That
ÇÇ 
(
ÇÇ 
!
ÇÇ $
AssertOnNewGameObjects
ÇÇ /
,
ÇÇ/ 0
$str
ÉÉ N
)
ÉÉN O
;
ÉÉO P
FlushBindings
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
var
áá 
gameObj
áá 
=
áá 
new
áá 

GameObject
áá (
(
áá( ) 
gameObjectBindInfo
áá) ;
.
áá; <
Name
áá< @
??
ááA C
$str
ááD P
)
ááP Q
;
ááQ R
var
àà 
parent
àà 
=
àà 
GetTransformGroup
àà *
(
àà* + 
gameObjectBindInfo
àà+ =
,
àà= >
context
àà? F
)
ààF G
;
ààG H
if
ää 
(
ää 
parent
ää 
==
ää 
null
ää 
)
ää 
{
ãã 
gameObj
çç 
.
çç 
	transform
çç !
.
çç! "
	SetParent
çç" +
(
çç+ ,
ContextTransform
çç, <
,
çç< =
false
çç> C
)
ççC D
;
ççD E
gameObj
éé 
.
éé 
	transform
éé !
.
éé! "
	SetParent
éé" +
(
éé+ ,
null
éé, 0
,
éé0 1
false
éé2 7
)
éé7 8
;
éé8 9
}
èè 
else
êê 
{
ëë 
gameObj
íí 
.
íí 
	transform
íí !
.
íí! "
	SetParent
íí" +
(
íí+ ,
parent
íí, 2
,
íí2 3
false
íí4 9
)
íí9 :
;
íí: ;
}
ìì 
return
ïï 
gameObj
ïï 
;
ïï 
}
ññ 	
	Transform
òò 
GetTransformGroup
òò #
(
òò# $*
GameObjectCreationParameters
ôô ( 
gameObjectBindInfo
ôô) ;
,
ôô; <
InjectContext
ôô= J
context
ôôK R
)
ôôR S
{
öö 	
Assert
õõ 
.
õõ 
That
õõ 
(
õõ 
!
õõ $
AssertOnNewGameObjects
õõ /
,
õõ/ 0
$str
úú N
)
úúN O
;
úúO P
if
ûû 
(
ûû  
gameObjectBindInfo
ûû "
.
ûû" #
ParentTransform
ûû# 2
!=
ûû3 5
null
ûû6 :
)
ûû: ;
{
üü 
Assert
†† 
.
†† 
IsNull
†† 
(
††  
gameObjectBindInfo
†† 0
.
††0 1
	GroupName
††1 :
)
††: ;
;
††; <
Assert
°° 
.
°° 
IsNull
°° 
(
°°  
gameObjectBindInfo
°° 0
.
°°0 1#
ParentTransformGetter
°°1 F
)
°°F G
;
°°G H
return
££  
gameObjectBindInfo
££ )
.
££) *
ParentTransform
££* 9
;
££9 :
}
§§ 
if
®® 
(
®®  
gameObjectBindInfo
®® "
.
®®" ##
ParentTransformGetter
®®# 8
!=
®®9 ;
null
®®< @
&&
®®A C
!
®®D E
IsValidating
®®E Q
)
®®Q R
{
©© 
Assert
™™ 
.
™™ 
IsNull
™™ 
(
™™  
gameObjectBindInfo
™™ 0
.
™™0 1
	GroupName
™™1 :
)
™™: ;
;
™™; <
if
¨¨ 
(
¨¨ 
context
¨¨ 
==
¨¨ 
null
¨¨ #
)
¨¨# $
{
≠≠ 
context
ÆÆ 
=
ÆÆ 
new
ÆÆ !
InjectContext
ÆÆ" /
{
ØØ 
	Container
±± !
=
±±" #
this
±±$ (
}
≤≤ 
;
≤≤ 
}
≥≥ 
return
∂∂  
gameObjectBindInfo
∂∂ )
.
∂∂) *#
ParentTransformGetter
∂∂* ?
(
∂∂? @
context
∂∂@ G
)
∂∂G H
;
∂∂H I
}
∑∑ 
var
ππ 
	groupName
ππ 
=
ππ  
gameObjectBindInfo
ππ .
.
ππ. /
	GroupName
ππ/ 8
;
ππ8 9
var
ºº 
defaultParent
ºº 
=
ºº '
_hasExplicitDefaultParent
ºº  9
?
ºº: ;$
_explicitDefaultParent
ºº< R
:
ººS T%
_inheritedDefaultParent
ººU l
;
ººl m
if
ææ 
(
ææ 
defaultParent
ææ 
==
ææ  
null
ææ! %
)
ææ% &
{
øø 
if
¿¿ 
(
¿¿ 
	groupName
¿¿ 
==
¿¿  
null
¿¿! %
)
¿¿% &
{
¡¡ 
return
¬¬ 
null
¬¬ 
;
¬¬  
}
√√ 
return
≈≈ 
(
≈≈ 

GameObject
≈≈ "
.
≈≈" #
Find
≈≈# '
(
≈≈' (
$str
≈≈( +
+
≈≈, -
	groupName
≈≈. 7
)
≈≈7 8
??
≈≈9 ;"
CreateTransformGroup
≈≈< P
(
≈≈P Q
	groupName
≈≈Q Z
)
≈≈Z [
)
≈≈[ \
.
≈≈\ ]
	transform
≈≈] f
;
≈≈f g
}
∆∆ 
if
»» 
(
»» 
	groupName
»» 
==
»» 
null
»» !
)
»»! "
{
…… 
return
   
defaultParent
   $
;
  $ %
}
ÀÀ 
foreach
ÕÕ 
(
ÕÕ 
	Transform
ÕÕ 
child
ÕÕ $
in
ÕÕ% '
defaultParent
ÕÕ( 5
)
ÕÕ5 6
{
ŒŒ 
if
œœ 
(
œœ 
child
œœ 
.
œœ 
name
œœ 
==
œœ !
	groupName
œœ" +
)
œœ+ ,
{
–– 
return
—— 
child
——  
;
——  !
}
““ 
}
”” 
var
’’ 
group
’’ 
=
’’ 
new
’’ 

GameObject
’’ &
(
’’& '
	groupName
’’' 0
)
’’0 1
.
’’1 2
	transform
’’2 ;
;
’’; <
group
÷÷ 
.
÷÷ 
	SetParent
÷÷ 
(
÷÷ 
defaultParent
÷÷ )
,
÷÷) *
false
÷÷+ 0
)
÷÷0 1
;
÷÷1 2
return
◊◊ 
group
◊◊ 
;
◊◊ 
}
ÿÿ 	

GameObject
⁄⁄ "
CreateTransformGroup
⁄⁄ '
(
⁄⁄' (
string
⁄⁄( .
	groupName
⁄⁄/ 8
)
⁄⁄8 9
{
€€ 	
var
‹‹ 
gameObj
‹‹ 
=
‹‹ 
new
‹‹ 

GameObject
‹‹ (
(
‹‹( )
	groupName
‹‹) 2
)
‹‹2 3
;
‹‹3 4
gameObj
›› 
.
›› 
	transform
›› 
.
›› 
	SetParent
›› '
(
››' (
ContextTransform
››( 8
,
››8 9
false
››: ?
)
››? @
;
››@ A
gameObj
ﬁﬁ 
.
ﬁﬁ 
	transform
ﬁﬁ 
.
ﬁﬁ 
	SetParent
ﬁﬁ '
(
ﬁﬁ' (
null
ﬁﬁ( ,
,
ﬁﬁ, -
false
ﬁﬁ. 3
)
ﬁﬁ3 4
;
ﬁﬁ4 5
return
ﬂﬂ 
gameObj
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
public
ËË 
T
ËË 
Instantiate
ËË 
<
ËË 
T
ËË 
>
ËË 
(
ËË  
)
ËË  !
{
ÈÈ 	
return
ÍÍ 
Instantiate
ÍÍ 
<
ÍÍ 
T
ÍÍ  
>
ÍÍ  !
(
ÍÍ! "
new
ÍÍ" %
object
ÍÍ& ,
[
ÍÍ, -
$num
ÍÍ- .
]
ÍÍ. /
)
ÍÍ/ 0
;
ÍÍ0 1
}
ÎÎ 	
public
ÔÔ 
T
ÔÔ 
Instantiate
ÔÔ 
<
ÔÔ 
T
ÔÔ 
>
ÔÔ 
(
ÔÔ  
IEnumerable
ÔÔ  +
<
ÔÔ+ ,
object
ÔÔ, 2
>
ÔÔ2 3
	extraArgs
ÔÔ4 =
)
ÔÔ= >
{
 	
var
ÒÒ 
result
ÒÒ 
=
ÒÒ 
Instantiate
ÒÒ $
(
ÒÒ$ %
typeof
ÒÒ% +
(
ÒÒ+ ,
T
ÒÒ, -
)
ÒÒ- .
,
ÒÒ. /
	extraArgs
ÒÒ0 9
)
ÒÒ9 :
;
ÒÒ: ;
if
ÛÛ 
(
ÛÛ 
IsValidating
ÛÛ 
&&
ÛÛ 
!
ÛÛ  !
(
ÛÛ! "
result
ÛÛ" (
is
ÛÛ) +
T
ÛÛ, -
)
ÛÛ- .
)
ÛÛ. /
{
ÙÙ 
Assert
ıı 
.
ıı 
That
ıı 
(
ıı 
result
ıı "
is
ıı# %
ValidationMarker
ıı& 6
)
ıı6 7
;
ıı7 8
return
ˆˆ 
default
ˆˆ 
(
ˆˆ 
T
ˆˆ  
)
ˆˆ  !
;
ˆˆ! "
}
˜˜ 
return
˘˘ 
(
˘˘ 
T
˘˘ 
)
˘˘ 
result
˘˘ 
;
˘˘ 
}
˙˙ 	
public
¸¸ 
object
¸¸ 
Instantiate
¸¸ !
(
¸¸! "
Type
¸¸" &
concreteType
¸¸' 3
)
¸¸3 4
{
˝˝ 	
return
˛˛ 
Instantiate
˛˛ 
(
˛˛ 
concreteType
˛˛ +
,
˛˛+ ,
new
˛˛- 0
object
˛˛1 7
[
˛˛7 8
$num
˛˛8 9
]
˛˛9 :
)
˛˛: ;
;
˛˛; <
}
ˇˇ 	
public
ÉÉ 
object
ÉÉ 
Instantiate
ÉÉ !
(
ÉÉ! "
Type
ÑÑ 
concreteType
ÑÑ 
,
ÑÑ 
IEnumerable
ÑÑ *
<
ÑÑ* +
object
ÑÑ+ 1
>
ÑÑ1 2
	extraArgs
ÑÑ3 <
)
ÑÑ< =
{
ÖÖ 	
Assert
ÜÜ 
.
ÜÜ 
That
ÜÜ 
(
ÜÜ 
!
ÜÜ 
	extraArgs
ÜÜ "
.
ÜÜ" #
ContainsItem
ÜÜ# /
(
ÜÜ/ 0
null
ÜÜ0 4
)
ÜÜ4 5
,
ÜÜ5 6
$stráá õ
,ááõ ú
concreteTypeááù ©
)áá© ™
;áá™ ´
return
ââ !
InstantiateExplicit
ââ &
(
ââ& '
concreteType
ää 
,
ää 

InjectUtil
ää (
.
ää( )
CreateArgList
ää) 6
(
ää6 7
	extraArgs
ää7 @
)
ää@ A
)
ääA B
;
ääB C
}
ãã 	
public
ëë 
	TContract
ëë "
InstantiateComponent
ëë -
<
ëë- .
	TContract
ëë. 7
>
ëë7 8
(
ëë8 9

GameObject
ëë9 C

gameObject
ëëD N
)
ëëN O
where
íí 
	TContract
íí 
:
íí 
	Component
íí '
{
ìì 	
return
îî "
InstantiateComponent
îî '
<
îî' (
	TContract
îî( 1
>
îî1 2
(
îî2 3

gameObject
îî3 =
,
îî= >
new
îî? B
object
îîC I
[
îîI J
$num
îîJ K
]
îîK L
)
îîL M
;
îîM N
}
ïï 	
public
úú 
	TContract
úú "
InstantiateComponent
úú -
<
úú- .
	TContract
úú. 7
>
úú7 8
(
úú8 9

GameObject
ùù 

gameObject
ùù !
,
ùù! "
IEnumerable
ùù# .
<
ùù. /
object
ùù/ 5
>
ùù5 6
	extraArgs
ùù7 @
)
ùù@ A
where
ûû 
	TContract
ûû 
:
ûû 
	Component
ûû '
{
üü 	
return
†† 
(
†† 
	TContract
†† 
)
†† "
InstantiateComponent
†† 2
(
††2 3
typeof
††3 9
(
††9 :
	TContract
††: C
)
††C D
,
††D E

gameObject
††F P
,
††P Q
	extraArgs
††R [
)
††[ \
;
††\ ]
}
°° 	
public
¶¶ 
	Component
¶¶ "
InstantiateComponent
¶¶ -
(
¶¶- .
Type
ßß 
componentType
ßß 
,
ßß 

GameObject
ßß  *

gameObject
ßß+ 5
)
ßß5 6
{
®® 	
return
©© "
InstantiateComponent
©© '
(
©©' (
componentType
©©( 5
,
©©5 6

gameObject
©©7 A
,
©©A B
new
©©C F
object
©©G M
[
©©M N
$num
©©N O
]
©©O P
)
©©P Q
;
©©Q R
}
™™ 	
public
±± 
	Component
±± "
InstantiateComponent
±± -
(
±±- .
Type
≤≤ 
componentType
≤≤ 
,
≤≤ 

GameObject
≤≤  *

gameObject
≤≤+ 5
,
≤≤5 6
IEnumerable
≤≤7 B
<
≤≤B C
object
≤≤C I
>
≤≤I J
	extraArgs
≤≤K T
)
≤≤T U
{
≥≥ 	
return
¥¥ *
InstantiateComponentExplicit
¥¥ /
(
¥¥/ 0
componentType
µµ 
,
µµ 

gameObject
µµ )
,
µµ) *

InjectUtil
µµ+ 5
.
µµ5 6
CreateArgList
µµ6 C
(
µµC D
	extraArgs
µµD M
)
µµM N
)
µµN O
;
µµO P
}
∂∂ 	
public
∏∏ 
T
∏∏ 1
#InstantiateComponentOnNewGameObject
∏∏ 4
<
∏∏4 5
T
∏∏5 6
>
∏∏6 7
(
∏∏7 8
)
∏∏8 9
where
ππ 
T
ππ 
:
ππ 
	Component
ππ 
{
∫∫ 	
return
ªª 1
#InstantiateComponentOnNewGameObject
ªª 6
<
ªª6 7
T
ªª7 8
>
ªª8 9
(
ªª9 :
typeof
ªª: @
(
ªª@ A
T
ªªA B
)
ªªB C
.
ªªC D
Name
ªªD H
)
ªªH I
;
ªªI J
}
ºº 	
public
¿¿ 
T
¿¿ 1
#InstantiateComponentOnNewGameObject
¿¿ 4
<
¿¿4 5
T
¿¿5 6
>
¿¿6 7
(
¿¿7 8
IEnumerable
¿¿8 C
<
¿¿C D
object
¿¿D J
>
¿¿J K
	extraArgs
¿¿L U
)
¿¿U V
where
¡¡ 
T
¡¡ 
:
¡¡ 
	Component
¡¡ 
{
¬¬ 	
return
√√ 1
#InstantiateComponentOnNewGameObject
√√ 6
<
√√6 7
T
√√7 8
>
√√8 9
(
√√9 :
typeof
√√: @
(
√√@ A
T
√√A B
)
√√B C
.
√√C D
Name
√√D H
,
√√H I
	extraArgs
√√J S
)
√√S T
;
√√T U
}
ƒƒ 	
public
∆∆ 
T
∆∆ 1
#InstantiateComponentOnNewGameObject
∆∆ 4
<
∆∆4 5
T
∆∆5 6
>
∆∆6 7
(
∆∆7 8
string
∆∆8 >
gameObjectName
∆∆? M
)
∆∆M N
where
«« 
T
«« 
:
«« 
	Component
«« 
{
»» 	
return
…… 1
#InstantiateComponentOnNewGameObject
…… 6
<
……6 7
T
……7 8
>
……8 9
(
……9 :
gameObjectName
……: H
,
……H I
new
……J M
object
……N T
[
……T U
$num
……U V
]
……V W
)
……W X
;
……X Y
}
   	
public
ŒŒ 
T
ŒŒ 1
#InstantiateComponentOnNewGameObject
ŒŒ 4
<
ŒŒ4 5
T
ŒŒ5 6
>
ŒŒ6 7
(
ŒŒ7 8
string
œœ 
gameObjectName
œœ !
,
œœ! "
IEnumerable
œœ# .
<
œœ. /
object
œœ/ 5
>
œœ5 6
	extraArgs
œœ7 @
)
œœ@ A
where
–– 
T
–– 
:
–– 
	Component
–– 
{
—— 	
return
““ "
InstantiateComponent
““ '
<
““' (
T
““( )
>
““) *
(
““* +#
CreateEmptyGameObject
”” %
(
””% &
gameObjectName
””& 4
)
””4 5
,
””5 6
	extraArgs
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 	
public
ÿÿ 

GameObject
ÿÿ 
InstantiatePrefab
ÿÿ +
(
ÿÿ+ ,
UnityEngine
ÿÿ, 7
.
ÿÿ7 8
Object
ÿÿ8 >
prefab
ÿÿ? E
)
ÿÿE F
{
ŸŸ 	
return
⁄⁄ 
InstantiatePrefab
⁄⁄ $
(
⁄⁄$ %
prefab
€€ 
,
€€ *
GameObjectCreationParameters
€€ 4
.
€€4 5
Default
€€5 <
)
€€< =
;
€€= >
}
‹‹ 	
public
ﬂﬂ 

GameObject
ﬂﬂ 
InstantiatePrefab
ﬂﬂ +
(
ﬂﬂ+ ,
UnityEngine
ﬂﬂ, 7
.
ﬂﬂ7 8
Object
ﬂﬂ8 >
prefab
ﬂﬂ? E
,
ﬂﬂE F
	Transform
ﬂﬂG P
parentTransform
ﬂﬂQ `
)
ﬂﬂ` a
{
‡‡ 	
return
·· 
InstantiatePrefab
·· $
(
··$ %
prefab
‚‚ 
,
‚‚ 
new
‚‚ *
GameObjectCreationParameters
‚‚ 8
{
‚‚9 :
ParentTransform
‚‚; J
=
‚‚K L
parentTransform
‚‚M \
}
‚‚] ^
)
‚‚^ _
;
‚‚_ `
}
„„ 	
public
ÊÊ 

GameObject
ÊÊ 
InstantiatePrefab
ÊÊ +
(
ÊÊ+ ,
UnityEngine
ÁÁ 
.
ÁÁ 
Object
ÁÁ 
prefab
ÁÁ %
,
ÁÁ% &
Vector3
ÁÁ' .
position
ÁÁ/ 7
,
ÁÁ7 8

Quaternion
ÁÁ9 C
rotation
ÁÁD L
,
ÁÁL M
	Transform
ÁÁN W
parentTransform
ÁÁX g
)
ÁÁg h
{
ËË 	
return
ÈÈ 
InstantiatePrefab
ÈÈ $
(
ÈÈ$ %
prefab
ÍÍ 
,
ÍÍ 
new
ÍÍ *
GameObjectCreationParameters
ÍÍ 8
{
ÎÎ 
ParentTransform
ÏÏ #
=
ÏÏ$ %
parentTransform
ÏÏ& 5
,
ÏÏ5 6
Position
ÌÌ 
=
ÌÌ 
position
ÌÌ '
,
ÌÌ' (
Rotation
ÓÓ 
=
ÓÓ 
rotation
ÓÓ '
}
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
 	
public
ÛÛ 

GameObject
ÛÛ 
InstantiatePrefab
ÛÛ +
(
ÛÛ+ ,
UnityEngine
ÙÙ 
.
ÙÙ 
Object
ÙÙ 
prefab
ÙÙ %
,
ÙÙ% &*
GameObjectCreationParameters
ÙÙ' C 
gameObjectBindInfo
ÙÙD V
)
ÙÙV W
{
ıı 	
FlushBindings
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
bool
¯¯ 
shouldMakeActive
¯¯ !
;
¯¯! "
var
˘˘ 
gameObj
˘˘ 
=
˘˘ #
CreateAndParentPrefab
˘˘ /
(
˘˘/ 0
prefab
˙˙ 
,
˙˙  
gameObjectBindInfo
˙˙ *
,
˙˙* +
null
˙˙, 0
,
˙˙0 1
out
˙˙2 5
shouldMakeActive
˙˙6 F
)
˙˙F G
;
˙˙G H
InjectGameObject
¸¸ 
(
¸¸ 
gameObj
¸¸ $
)
¸¸$ %
;
¸¸% &
if
˛˛ 
(
˛˛ 
shouldMakeActive
˛˛  
&&
˛˛! #
!
˛˛$ %
IsValidating
˛˛% 1
)
˛˛1 2
{
ˇˇ 
{
ÉÉ 
gameObj
ÑÑ 
.
ÑÑ 
	SetActive
ÑÑ %
(
ÑÑ% &
true
ÑÑ& *
)
ÑÑ* +
;
ÑÑ+ ,
}
ÖÖ 
}
ÜÜ 
return
àà 
gameObj
àà 
;
àà 
}
ââ 	
public
åå 

GameObject
åå '
InstantiatePrefabResource
åå 3
(
åå3 4
string
åå4 :
resourcePath
åå; G
)
ååG H
{
çç 	
return
éé '
InstantiatePrefabResource
éé ,
(
éé, -
resourcePath
éé- 9
,
éé9 :*
GameObjectCreationParameters
éé; W
.
ééW X
Default
ééX _
)
éé_ `
;
éé` a
}
èè 	
public
íí 

GameObject
íí '
InstantiatePrefabResource
íí 3
(
íí3 4
string
íí4 :
resourcePath
íí; G
,
ííG H
	Transform
ííI R
parentTransform
ííS b
)
ííb c
{
ìì 	
return
îî '
InstantiatePrefabResource
îî ,
(
îî, -
resourcePath
îî- 9
,
îî9 :
new
îî; >*
GameObjectCreationParameters
îî? [
{
îî\ ]
ParentTransform
îî^ m
=
îîn o
parentTransform
îîp 
}îîÄ Å
)îîÅ Ç
;îîÇ É
}
ïï 	
public
óó 

GameObject
óó '
InstantiatePrefabResource
óó 3
(
óó3 4
string
òò 
resourcePath
òò 
,
òò  
Vector3
òò! (
position
òò) 1
,
òò1 2

Quaternion
òò3 =
rotation
òò> F
,
òòF G
	Transform
òòH Q
parentTransform
òòR a
)
òòa b
{
ôô 	
return
öö '
InstantiatePrefabResource
öö ,
(
öö, -
resourcePath
õõ 
,
õõ 
new
õõ !*
GameObjectCreationParameters
õõ" >
{
úú 
ParentTransform
ùù #
=
ùù$ %
parentTransform
ùù& 5
,
ùù5 6
Position
ûû 
=
ûû 
position
ûû '
,
ûû' (
Rotation
üü 
=
üü 
rotation
üü '
}
†† 
)
†† 
;
†† 
}
°° 	
public
§§ 

GameObject
§§ '
InstantiatePrefabResource
§§ 3
(
§§3 4
string
•• 
resourcePath
•• 
,
••  *
GameObjectCreationParameters
••! =
creationInfo
••> J
)
••J K
{
¶¶ 	
var
ßß 
prefab
ßß 
=
ßß 
(
ßß 

GameObject
ßß $
)
ßß$ %
	Resources
ßß% .
.
ßß. /
Load
ßß/ 3
(
ßß3 4
resourcePath
ßß4 @
)
ßß@ A
;
ßßA B
Assert
©© 
.
©© 
	IsNotNull
©© 
(
©© 
prefab
©© #
,
©©# $
$str
™™ B
.
™™B C
Fmt
™™C F
(
™™F G
resourcePath
™™G S
)
™™S T
)
™™T U
;
™™U V
return
¨¨ 
InstantiatePrefab
¨¨ $
(
¨¨$ %
prefab
¨¨% +
,
¨¨+ ,
creationInfo
¨¨- 9
)
¨¨9 :
;
¨¨: ;
}
≠≠ 	
public
±± 
T
±± +
InstantiatePrefabForComponent
±± .
<
±±. /
T
±±/ 0
>
±±0 1
(
±±1 2
UnityEngine
±±2 =
.
±±= >
Object
±±> D
prefab
±±E K
)
±±K L
{
≤≤ 	
return
≥≥ 
(
≥≥ 
T
≥≥ 
)
≥≥ +
InstantiatePrefabForComponent
≥≥ 3
(
≥≥3 4
typeof
¥¥ 
(
¥¥ 
T
¥¥ 
)
¥¥ 
,
¥¥ 
prefab
¥¥ !
,
¥¥! "
null
¥¥# '
,
¥¥' (
new
¥¥) ,
object
¥¥- 3
[
¥¥3 4
$num
¥¥4 5
]
¥¥5 6
)
¥¥6 7
;
¥¥7 8
}
µµ 	
public
ªª 
T
ªª +
InstantiatePrefabForComponent
ªª .
<
ªª. /
T
ªª/ 0
>
ªª0 1
(
ªª1 2
UnityEngine
ºº 
.
ºº 
Object
ºº 
prefab
ºº %
,
ºº% &
IEnumerable
ºº' 2
<
ºº2 3
object
ºº3 9
>
ºº9 :
	extraArgs
ºº; D
)
ººD E
{
ΩΩ 	
return
ææ 
(
ææ 
T
ææ 
)
ææ +
InstantiatePrefabForComponent
ææ 3
(
ææ3 4
typeof
øø 
(
øø 
T
øø 
)
øø 
,
øø 
prefab
øø !
,
øø! "
null
øø# '
,
øø' (
	extraArgs
øø) 2
)
øø2 3
;
øø3 4
}
¿¿ 	
public
¬¬ 
T
¬¬ +
InstantiatePrefabForComponent
¬¬ .
<
¬¬. /
T
¬¬/ 0
>
¬¬0 1
(
¬¬1 2
UnityEngine
√√ 
.
√√ 
Object
√√ 
prefab
√√ %
,
√√% &
	Transform
√√' 0
parentTransform
√√1 @
)
√√@ A
{
ƒƒ 	
return
≈≈ 
(
≈≈ 
T
≈≈ 
)
≈≈ +
InstantiatePrefabForComponent
≈≈ 3
(
≈≈3 4
typeof
∆∆ 
(
∆∆ 
T
∆∆ 
)
∆∆ 
,
∆∆ 
prefab
∆∆ !
,
∆∆! "
parentTransform
∆∆# 2
,
∆∆2 3
new
∆∆4 7
object
∆∆8 >
[
∆∆> ?
$num
∆∆? @
]
∆∆@ A
)
∆∆A B
;
∆∆B C
}
«« 	
public
ÀÀ 
T
ÀÀ +
InstantiatePrefabForComponent
ÀÀ .
<
ÀÀ. /
T
ÀÀ/ 0
>
ÀÀ0 1
(
ÀÀ1 2
UnityEngine
ÃÃ 
.
ÃÃ 
Object
ÃÃ 
prefab
ÃÃ %
,
ÃÃ% &
	Transform
ÃÃ' 0
parentTransform
ÃÃ1 @
,
ÃÃ@ A
IEnumerable
ÃÃB M
<
ÃÃM N
object
ÃÃN T
>
ÃÃT U
	extraArgs
ÃÃV _
)
ÃÃ_ `
{
ÕÕ 	
return
ŒŒ 
(
ŒŒ 
T
ŒŒ 
)
ŒŒ +
InstantiatePrefabForComponent
ŒŒ 3
(
ŒŒ3 4
typeof
œœ 
(
œœ 
T
œœ 
)
œœ 
,
œœ 
prefab
œœ !
,
œœ! "
parentTransform
œœ# 2
,
œœ2 3
	extraArgs
œœ4 =
)
œœ= >
;
œœ> ?
}
–– 	
public
““ 
T
““ +
InstantiatePrefabForComponent
““ .
<
““. /
T
““/ 0
>
““0 1
(
““1 2
UnityEngine
”” 
.
”” 
Object
”” 
prefab
”” %
,
””% &
Vector3
””' .
position
””/ 7
,
””7 8

Quaternion
””9 C
rotation
””D L
,
””L M
	Transform
””N W
parentTransform
””X g
)
””g h
{
‘‘ 	
return
’’ 
(
’’ 
T
’’ 
)
’’ +
InstantiatePrefabForComponent
’’ 3
(
’’3 4
typeof
÷÷ 
(
÷÷ 
T
÷÷ 
)
÷÷ 
,
÷÷ 
prefab
÷÷ !
,
÷÷! "
new
÷÷# &
object
÷÷' -
[
÷÷- .
$num
÷÷. /
]
÷÷/ 0
,
÷÷0 1
new
÷÷2 5*
GameObjectCreationParameters
÷÷6 R
{
◊◊ 
ParentTransform
ÿÿ #
=
ÿÿ$ %
parentTransform
ÿÿ& 5
,
ÿÿ5 6
Position
ŸŸ 
=
ŸŸ 
position
ŸŸ '
,
ŸŸ' (
Rotation
⁄⁄ 
=
⁄⁄ 
rotation
⁄⁄ '
}
€€ 
)
€€ 
;
€€ 
}
‹‹ 	
public
ﬁﬁ 
T
ﬁﬁ +
InstantiatePrefabForComponent
ﬁﬁ .
<
ﬁﬁ. /
T
ﬁﬁ/ 0
>
ﬁﬁ0 1
(
ﬁﬁ1 2
UnityEngine
ﬂﬂ 
.
ﬂﬂ 
Object
ﬂﬂ 
prefab
ﬂﬂ %
,
ﬂﬂ% &
Vector3
ﬂﬂ' .
position
ﬂﬂ/ 7
,
ﬂﬂ7 8

Quaternion
ﬂﬂ9 C
rotation
ﬂﬂD L
,
ﬂﬂL M
	Transform
ﬂﬂN W
parentTransform
ﬂﬂX g
,
ﬂﬂg h
IEnumerable
ﬂﬂi t
<
ﬂﬂt u
object
ﬂﬂu {
>
ﬂﬂ{ |
	extraArgsﬂﬂ} Ü
)ﬂﬂÜ á
{
‡‡ 	
return
·· 
(
·· 
T
·· 
)
·· +
InstantiatePrefabForComponent
·· 3
(
··3 4
typeof
‚‚ 
(
‚‚ 
T
‚‚ 
)
‚‚ 
,
‚‚ 
prefab
‚‚ !
,
‚‚! "
	extraArgs
‚‚# ,
,
‚‚, -
new
‚‚. 1*
GameObjectCreationParameters
‚‚2 N
{
„„ 
ParentTransform
‰‰ #
=
‰‰$ %
parentTransform
‰‰& 5
,
‰‰5 6
Position
ÂÂ 
=
ÂÂ 
position
ÂÂ '
,
ÂÂ' (
Rotation
ÊÊ 
=
ÊÊ 
rotation
ÊÊ '
}
ÁÁ 
)
ÁÁ 
;
ÁÁ 
}
ËË 	
public
ÓÓ 
object
ÓÓ +
InstantiatePrefabForComponent
ÓÓ 3
(
ÓÓ3 4
Type
ÔÔ 
concreteType
ÔÔ 
,
ÔÔ 
UnityEngine
ÔÔ *
.
ÔÔ* +
Object
ÔÔ+ 1
prefab
ÔÔ2 8
,
ÔÔ8 9
	Transform
 
parentTransform
 %
,
% &
IEnumerable
' 2
<
2 3
object
3 9
>
9 :
	extraArgs
; D
)
D E
{
ÒÒ 	
return
ÚÚ +
InstantiatePrefabForComponent
ÚÚ 0
(
ÚÚ0 1
concreteType
ÛÛ 
,
ÛÛ 
prefab
ÛÛ $
,
ÛÛ$ %
	extraArgs
ÛÛ& /
,
ÛÛ/ 0
new
ÙÙ *
GameObjectCreationParameters
ÙÙ 0
{
ÙÙ1 2
ParentTransform
ÙÙ3 B
=
ÙÙC D
parentTransform
ÙÙE T
}
ÙÙU V
)
ÙÙV W
;
ÙÙW X
}
ıı 	
public
˘˘ 
object
˘˘ +
InstantiatePrefabForComponent
˘˘ 3
(
˘˘3 4
Type
˙˙ 
concreteType
˙˙ 
,
˙˙ 
UnityEngine
˙˙ *
.
˙˙* +
Object
˙˙+ 1
prefab
˙˙2 8
,
˙˙8 9
IEnumerable
˚˚ 
<
˚˚ 
object
˚˚ 
>
˚˚ 
	extraArgs
˚˚  )
,
˚˚) **
GameObjectCreationParameters
˚˚+ G
creationInfo
˚˚H T
)
˚˚T U
{
¸¸ 	
return
˝˝ 3
%InstantiatePrefabForComponentExplicit
˝˝ 8
(
˝˝8 9
concreteType
˛˛ 
,
˛˛ 
prefab
˛˛ $
,
˛˛$ %

InjectUtil
ˇˇ 
.
ˇˇ 
CreateArgList
ˇˇ (
(
ˇˇ( )
	extraArgs
ˇˇ) 2
)
ˇˇ2 3
,
ˇˇ3 4
creationInfo
ˇˇ5 A
)
ˇˇA B
;
ˇˇB C
}
ÄÄ 	
public
ÑÑ 
T
ÑÑ 3
%InstantiatePrefabResourceForComponent
ÑÑ 6
<
ÑÑ6 7
T
ÑÑ7 8
>
ÑÑ8 9
(
ÑÑ9 :
string
ÑÑ: @
resourcePath
ÑÑA M
)
ÑÑM N
{
ÖÖ 	
return
ÜÜ 
(
ÜÜ 
T
ÜÜ 
)
ÜÜ 3
%InstantiatePrefabResourceForComponent
ÜÜ ;
(
ÜÜ; <
typeof
áá 
(
áá 
T
áá 
)
áá 
,
áá 
resourcePath
áá '
,
áá' (
null
áá) -
,
áá- .
new
áá/ 2
object
áá3 9
[
áá9 :
$num
áá: ;
]
áá; <
)
áá< =
;
áá= >
}
àà 	
public
éé 
T
éé 3
%InstantiatePrefabResourceForComponent
éé 6
<
éé6 7
T
éé7 8
>
éé8 9
(
éé9 :
string
èè 
resourcePath
èè 
,
èè  
IEnumerable
èè! ,
<
èè, -
object
èè- 3
>
èè3 4
	extraArgs
èè5 >
)
èè> ?
{
êê 	
return
ëë 
(
ëë 
T
ëë 
)
ëë 3
%InstantiatePrefabResourceForComponent
ëë ;
(
ëë; <
typeof
íí 
(
íí 
T
íí 
)
íí 
,
íí 
resourcePath
íí '
,
íí' (
null
íí) -
,
íí- .
	extraArgs
íí/ 8
)
íí8 9
;
íí9 :
}
ìì 	
public
ïï 
T
ïï 3
%InstantiatePrefabResourceForComponent
ïï 6
<
ïï6 7
T
ïï7 8
>
ïï8 9
(
ïï9 :
string
ññ 
resourcePath
ññ 
,
ññ  
	Transform
ññ! *
parentTransform
ññ+ :
)
ññ: ;
{
óó 	
return
òò 
(
òò 
T
òò 
)
òò 3
%InstantiatePrefabResourceForComponent
òò ;
(
òò; <
typeof
ôô 
(
ôô 
T
ôô 
)
ôô 
,
ôô 
resourcePath
ôô '
,
ôô' (
parentTransform
ôô) 8
,
ôô8 9
new
ôô: =
object
ôô> D
[
ôôD E
$num
ôôE F
]
ôôF G
)
ôôG H
;
ôôH I
}
öö 	
public
ûû 
T
ûû 3
%InstantiatePrefabResourceForComponent
ûû 6
<
ûû6 7
T
ûû7 8
>
ûû8 9
(
ûû9 :
string
üü 
resourcePath
üü 
,
üü  
	Transform
üü! *
parentTransform
üü+ :
,
üü: ;
IEnumerable
üü< G
<
üüG H
object
üüH N
>
üüN O
	extraArgs
üüP Y
)
üüY Z
{
†† 	
return
°° 
(
°° 
T
°° 
)
°° 3
%InstantiatePrefabResourceForComponent
°° ;
(
°°; <
typeof
¢¢ 
(
¢¢ 
T
¢¢ 
)
¢¢ 
,
¢¢ 
resourcePath
¢¢ '
,
¢¢' (
parentTransform
¢¢) 8
,
¢¢8 9
	extraArgs
¢¢: C
)
¢¢C D
;
¢¢D E
}
££ 	
public
•• 
T
•• 3
%InstantiatePrefabResourceForComponent
•• 6
<
••6 7
T
••7 8
>
••8 9
(
••9 :
string
¶¶ 
resourcePath
¶¶ 
,
¶¶  
Vector3
¶¶! (
position
¶¶) 1
,
¶¶1 2

Quaternion
¶¶3 =
rotation
¶¶> F
,
¶¶F G
	Transform
¶¶H Q
parentTransform
¶¶R a
)
¶¶a b
{
ßß 	
return
®® 3
%InstantiatePrefabResourceForComponent
®® 8
<
®®8 9
T
®®9 :
>
®®: ;
(
®®; <
resourcePath
®®< H
,
®®H I
position
®®J R
,
®®R S
rotation
®®T \
,
®®\ ]
parentTransform
®®^ m
,
®®m n
new
®®o r
object
®®s y
[
®®y z
$num
®®z {
]
®®{ |
)
®®| }
;
®®} ~
}
©© 	
public
´´ 
T
´´ 3
%InstantiatePrefabResourceForComponent
´´ 6
<
´´6 7
T
´´7 8
>
´´8 9
(
´´9 :
string
¨¨ 
resourcePath
¨¨ 
,
¨¨  
Vector3
¨¨! (
position
¨¨) 1
,
¨¨1 2

Quaternion
¨¨3 =
rotation
¨¨> F
,
¨¨F G
	Transform
¨¨H Q
parentTransform
¨¨R a
,
¨¨a b
IEnumerable
¨¨c n
<
¨¨n o
object
¨¨o u
>
¨¨u v
	extraArgs¨¨w Ä
)¨¨Ä Å
{
≠≠ 	
var
ÆÆ 
argsList
ÆÆ 
=
ÆÆ 

InjectUtil
ÆÆ %
.
ÆÆ% &
CreateArgList
ÆÆ& 3
(
ÆÆ3 4
	extraArgs
ÆÆ4 =
)
ÆÆ= >
;
ÆÆ> ?
var
ØØ  
creationParameters
ØØ "
=
ØØ# $
new
ØØ% (*
GameObjectCreationParameters
ØØ) E
{
∞∞ 
ParentTransform
±± 
=
±±  !
parentTransform
±±" 1
,
±±1 2
Position
≤≤ 
=
≤≤ 
position
≤≤ #
,
≤≤# $
Rotation
≥≥ 
=
≥≥ 
rotation
≥≥ #
}
¥¥ 
;
¥¥ 
return
µµ 
(
µµ 
T
µµ 
)
µµ ;
-InstantiatePrefabResourceForComponentExplicit
µµ C
(
µµC D
typeof
∂∂ 
(
∂∂ 
T
∂∂ 
)
∂∂ 
,
∂∂ 
resourcePath
∂∂ '
,
∂∂' (
argsList
∂∂) 1
,
∂∂1 2 
creationParameters
∂∂3 E
)
∂∂E F
;
∂∂F G
}
∑∑ 	
public
ΩΩ 
object
ΩΩ 3
%InstantiatePrefabResourceForComponent
ΩΩ ;
(
ΩΩ; <
Type
ææ 
concreteType
ææ 
,
ææ 
string
ææ %
resourcePath
ææ& 2
,
ææ2 3
	Transform
ææ4 =
parentTransform
ææ> M
,
ææM N
IEnumerable
øø 
<
øø 
object
øø 
>
øø 
	extraArgs
øø  )
)
øø) *
{
¿¿ 	
Assert
¡¡ 
.
¡¡ 
That
¡¡ 
(
¡¡ 
!
¡¡ 
	extraArgs
¡¡ "
.
¡¡" #
ContainsItem
¡¡# /
(
¡¡/ 0
null
¡¡0 4
)
¡¡4 5
,
¡¡5 6
$str¬¬ ≠
,¬¬≠ Æ
concreteType¬¬Ø ª
)¬¬ª º
;¬¬º Ω
return
ƒƒ ;
-InstantiatePrefabResourceForComponentExplicit
ƒƒ @
(
ƒƒ@ A
concreteType
≈≈ 
,
≈≈ 
resourcePath
≈≈ *
,
≈≈* +

InjectUtil
∆∆ 
.
∆∆ 
CreateArgList
∆∆ (
(
∆∆( )
	extraArgs
∆∆) 2
)
∆∆2 3
,
∆∆3 4
new
«« *
GameObjectCreationParameters
«« 0
{
««1 2
ParentTransform
««3 B
=
««C D
parentTransform
««E T
}
««U V
)
««V W
;
««W X
}
»» 	
public
   
T
   1
#InstantiateScriptableObjectResource
   4
<
  4 5
T
  5 6
>
  6 7
(
  7 8
string
  8 >
resourcePath
  ? K
)
  K L
where
ÀÀ 
T
ÀÀ 
:
ÀÀ 
ScriptableObject
ÀÀ &
{
ÃÃ 	
return
ÕÕ 1
#InstantiateScriptableObjectResource
ÕÕ 6
<
ÕÕ6 7
T
ÕÕ7 8
>
ÕÕ8 9
(
ÕÕ9 :
resourcePath
ÕÕ: F
,
ÕÕF G
new
ÕÕH K
object
ÕÕL R
[
ÕÕR S
$num
ÕÕS T
]
ÕÕT U
)
ÕÕU V
;
ÕÕV W
}
ŒŒ 	
public
““ 
T
““ 1
#InstantiateScriptableObjectResource
““ 4
<
““4 5
T
““5 6
>
““6 7
(
““7 8
string
”” 
resourcePath
”” 
,
””  
IEnumerable
””! ,
<
””, -
object
””- 3
>
””3 4
	extraArgs
””5 >
)
””> ?
where
‘‘ 
T
‘‘ 
:
‘‘ 
ScriptableObject
‘‘ &
{
’’ 	
return
÷÷ 
(
÷÷ 
T
÷÷ 
)
÷÷ 1
#InstantiateScriptableObjectResource
÷÷ 9
(
÷÷9 :
typeof
◊◊ 
(
◊◊ 
T
◊◊ 
)
◊◊ 
,
◊◊ 
resourcePath
◊◊ '
,
◊◊' (
	extraArgs
◊◊) 2
)
◊◊2 3
;
◊◊3 4
}
ÿÿ 	
public
⁄⁄ 
object
⁄⁄ 1
#InstantiateScriptableObjectResource
⁄⁄ 9
(
⁄⁄9 :
Type
€€ "
scriptableObjectType
€€ %
,
€€% &
string
€€' -
resourcePath
€€. :
)
€€: ;
{
‹‹ 	
return
›› 1
#InstantiateScriptableObjectResource
›› 6
(
››6 7"
scriptableObjectType
ﬁﬁ $
,
ﬁﬁ$ %
resourcePath
ﬁﬁ& 2
,
ﬁﬁ2 3
new
ﬁﬁ4 7
object
ﬁﬁ8 >
[
ﬁﬁ> ?
$num
ﬁﬁ? @
]
ﬁﬁ@ A
)
ﬁﬁA B
;
ﬁﬁB C
}
ﬂﬂ 	
public
„„ 
object
„„ 1
#InstantiateScriptableObjectResource
„„ 9
(
„„9 :
Type
‰‰ "
scriptableObjectType
‰‰ %
,
‰‰% &
string
‰‰' -
resourcePath
‰‰. :
,
‰‰: ;
IEnumerable
‰‰< G
<
‰‰G H
object
‰‰H N
>
‰‰N O
	extraArgs
‰‰P Y
)
‰‰Y Z
{
ÂÂ 	
Assert
ÊÊ 
.
ÊÊ  
DerivesFromOrEqual
ÊÊ %
<
ÊÊ% &
ScriptableObject
ÊÊ& 6
>
ÊÊ6 7
(
ÊÊ7 8"
scriptableObjectType
ÊÊ8 L
)
ÊÊL M
;
ÊÊM N
return
ÁÁ 9
+InstantiateScriptableObjectResourceExplicit
ÁÁ >
(
ÁÁ> ?"
scriptableObjectType
ËË $
,
ËË$ %
resourcePath
ËË& 2
,
ËË2 3

InjectUtil
ËË4 >
.
ËË> ?
CreateArgList
ËË? L
(
ËËL M
	extraArgs
ËËM V
)
ËËV W
)
ËËW X
;
ËËX Y
}
ÈÈ 	
public
ÏÏ 
void
ÏÏ 
InjectGameObject
ÏÏ $
(
ÏÏ$ %

GameObject
ÏÏ% /

gameObject
ÏÏ0 :
)
ÏÏ: ;
{
ÌÌ 	
FlushBindings
ÓÓ 
(
ÓÓ 
)
ÓÓ 
;
ÓÓ 
ZenUtilInternal
 
.
 B
4AddStateMachineBehaviourAutoInjectersUnderGameObject
 P
(
P Q

gameObject
Q [
)
[ \
;
\ ]
var
ÚÚ 
monoBehaviours
ÚÚ 
=
ÚÚ  
ZenPools
ÚÚ! )
.
ÚÚ) *
	SpawnList
ÚÚ* 3
<
ÚÚ3 4
MonoBehaviour
ÚÚ4 A
>
ÚÚA B
(
ÚÚB C
)
ÚÚC D
;
ÚÚD E
try
ÛÛ 
{
ÙÙ 
ZenUtilInternal
ıı 
.
ıı  8
*GetInjectableMonoBehavioursUnderGameObject
ıı  J
(
ııJ K

gameObject
ııK U
,
ııU V
monoBehaviours
ııW e
)
ııe f
;
ııf g
for
˜˜ 
(
˜˜ 
int
˜˜ 
i
˜˜ 
=
˜˜ 
$num
˜˜ 
;
˜˜ 
i
˜˜  !
<
˜˜" #
monoBehaviours
˜˜$ 2
.
˜˜2 3
Count
˜˜3 8
;
˜˜8 9
i
˜˜: ;
++
˜˜; =
)
˜˜= >
{
¯¯ 
Inject
˘˘ 
(
˘˘ 
monoBehaviours
˘˘ )
[
˘˘) *
i
˘˘* +
]
˘˘+ ,
)
˘˘, -
;
˘˘- .
}
˙˙ 
}
˚˚ 
finally
¸¸ 
{
˝˝ 
ZenPools
˛˛ 
.
˛˛ 
DespawnList
˛˛ $
(
˛˛$ %
monoBehaviours
˛˛% 3
)
˛˛3 4
;
˛˛4 5
}
ˇˇ 
}
ÄÄ 	
public
ÖÖ 
T
ÖÖ *
InjectGameObjectForComponent
ÖÖ -
<
ÖÖ- .
T
ÖÖ. /
>
ÖÖ/ 0
(
ÖÖ0 1

GameObject
ÖÖ1 ;

gameObject
ÖÖ< F
)
ÖÖF G
where
ÜÜ 
T
ÜÜ 
:
ÜÜ 
	Component
ÜÜ 
{
áá 	
return
àà *
InjectGameObjectForComponent
àà /
<
àà/ 0
T
àà0 1
>
àà1 2
(
àà2 3

gameObject
àà3 =
,
àà= >
new
àà? B
object
ààC I
[
ààI J
$num
ààJ K
]
ààK L
)
ààL M
;
ààM N
}
ââ 	
public
êê 
T
êê *
InjectGameObjectForComponent
êê -
<
êê- .
T
êê. /
>
êê/ 0
(
êê0 1

GameObject
ëë 

gameObject
ëë !
,
ëë! "
IEnumerable
ëë# .
<
ëë. /
object
ëë/ 5
>
ëë5 6
	extraArgs
ëë7 @
)
ëë@ A
where
íí 
T
íí 
:
íí 
	Component
íí 
{
ìì 	
return
îî 
(
îî 
T
îî 
)
îî *
InjectGameObjectForComponent
îî 2
(
îî2 3

gameObject
îî3 =
,
îî= >
typeof
îî? E
(
îîE F
T
îîF G
)
îîG H
,
îîH I
	extraArgs
îîJ S
)
îîS T
;
îîT U
}
ïï 	
public
úú 
object
úú *
InjectGameObjectForComponent
úú 2
(
úú2 3

GameObject
ùù 

gameObject
ùù !
,
ùù! "
Type
ùù# '
componentType
ùù( 5
,
ùù5 6
IEnumerable
ùù7 B
<
ùùB C
object
ùùC I
>
ùùI J
	extraArgs
ùùK T
)
ùùT U
{
ûû 	
return
üü 2
$InjectGameObjectForComponentExplicit
üü 7
(
üü7 8

gameObject
†† 
,
†† 
componentType
†† )
,
††) *

InjectUtil
††+ 5
.
††5 6
CreateArgList
††6 C
(
††C D
	extraArgs
††D M
)
††M N
,
††N O
new
††P S
InjectContext
††T a
(
††a b
this
††b f
,
††f g
componentType
††h u
,
††u v
null
††w {
)
††{ |
,
††| }
null††~ Ç
)††Ç É
;††É Ñ
}
°° 	
public
•• 
	Component
•• 2
$InjectGameObjectForComponentExplicit
•• =
(
••= >

GameObject
¶¶ 

gameObject
¶¶ !
,
¶¶! "
Type
¶¶# '
componentType
¶¶( 5
,
¶¶5 6
List
¶¶7 ;
<
¶¶; <
TypeValuePair
¶¶< I
>
¶¶I J
	extraArgs
¶¶K T
,
¶¶T U
InjectContext
¶¶V c
context
¶¶d k
,
¶¶k l
object
¶¶m s!
concreteIdentifier¶¶t Ü
)¶¶Ü á
{
ßß 	
if
®® 
(
®® 
!
®® 
componentType
®® 
.
®® 
DerivesFrom
®® *
<
®®* +
MonoBehaviour
®®+ 8
>
®®8 9
(
®®9 :
)
®®: ;
&&
®®< >
	extraArgs
®®? H
.
®®H I
Count
®®I N
>
®®O P
$num
®®Q R
)
®®R S
{
©© 
throw
™™ 
Assert
™™ 
.
™™ 
CreateException
™™ ,
(
™™, -
$str
´´ _
)
´´_ `
;
´´` a
}
¨¨ 
ZenUtilInternal
ÆÆ 
.
ÆÆ B
4AddStateMachineBehaviourAutoInjectersUnderGameObject
ÆÆ P
(
ÆÆP Q

gameObject
ÆÆQ [
)
ÆÆ[ \
;
ÆÆ\ ]
var
∞∞ &
injectableMonoBehaviours
∞∞ (
=
∞∞) *
ZenPools
∞∞+ 3
.
∞∞3 4
	SpawnList
∞∞4 =
<
∞∞= >
MonoBehaviour
∞∞> K
>
∞∞K L
(
∞∞L M
)
∞∞M N
;
∞∞N O
try
±± 
{
≤≤ 
ZenUtilInternal
¥¥ 
.
¥¥  8
*GetInjectableMonoBehavioursUnderGameObject
¥¥  J
(
¥¥J K

gameObject
¥¥K U
,
¥¥U V&
injectableMonoBehaviours
¥¥W o
)
¥¥o p
;
¥¥p q
for
∂∂ 
(
∂∂ 
int
∂∂ 
i
∂∂ 
=
∂∂ 
$num
∂∂ 
;
∂∂ 
i
∂∂  !
<
∂∂" #&
injectableMonoBehaviours
∂∂$ <
.
∂∂< =
Count
∂∂= B
;
∂∂B C
i
∂∂D E
++
∂∂E G
)
∂∂G H
{
∑∑ 
var
∏∏ 
monoBehaviour
∏∏ %
=
∏∏& '&
injectableMonoBehaviours
∏∏( @
[
∏∏@ A
i
∏∏A B
]
∏∏B C
;
∏∏C D
if
ππ 
(
ππ 
monoBehaviour
ππ %
.
ππ% &
GetType
ππ& -
(
ππ- .
)
ππ. /
.
ππ/ 0 
DerivesFromOrEqual
ππ0 B
(
ππB C
componentType
ππC P
)
ππP Q
)
ππQ R
{
∫∫ 
InjectExplicit
ªª &
(
ªª& '
monoBehaviour
ªª' 4
,
ªª4 5
monoBehaviour
ªª6 C
.
ªªC D
GetType
ªªD K
(
ªªK L
)
ªªL M
,
ªªM N
	extraArgs
ªªO X
,
ªªX Y
context
ªªZ a
,
ªªa b 
concreteIdentifier
ªªc u
)
ªªu v
;
ªªv w
}
ºº 
else
ΩΩ 
{
ææ 
Inject
øø 
(
øø 
monoBehaviour
øø ,
)
øø, -
;
øø- .
}
¿¿ 
}
¡¡ 
}
¬¬ 
finally
√√ 
{
ƒƒ 
ZenPools
≈≈ 
.
≈≈ 
DespawnList
≈≈ $
(
≈≈$ %&
injectableMonoBehaviours
≈≈% =
)
≈≈= >
;
≈≈> ?
}
∆∆ 
var
»» 
matches
»» 
=
»» 

gameObject
»» $
.
»»$ %%
GetComponentsInChildren
»»% <
(
»»< =
componentType
»»= J
,
»»J K
true
»»L P
)
»»P Q
;
»»Q R
Assert
   
.
   
That
   
(
   
matches
   
.
    
Length
    &
>
  ' (
$num
  ) *
,
  * +
$str
ÀÀ b
,
ÀÀb c
componentType
ÀÀd q
,
ÀÀq r

gameObject
ÀÀs }
.
ÀÀ} ~
nameÀÀ~ Ç
)ÀÀÇ É
;ÀÀÉ Ñ
Assert
ÕÕ 
.
ÕÕ 
That
ÕÕ 
(
ÕÕ 
matches
ÕÕ 
.
ÕÕ  
Length
ÕÕ  &
==
ÕÕ' )
$num
ÕÕ* +
,
ÕÕ+ ,
$str
ŒŒ `
,
ŒŒ` a
componentType
ŒŒb o
,
ŒŒo p

gameObject
ŒŒq {
.
ŒŒ{ |
nameŒŒ| Ä
)ŒŒÄ Å
;ŒŒÅ Ç
return
–– 
matches
–– 
[
–– 
$num
–– 
]
–– 
;
–– 
}
—— 	
public
ÿÿ 
void
ÿÿ 
Inject
ÿÿ 
(
ÿÿ 
object
ÿÿ !

injectable
ÿÿ" ,
)
ÿÿ, -
{
ŸŸ 	
Inject
⁄⁄ 
(
⁄⁄ 

injectable
⁄⁄ 
,
⁄⁄ 
new
⁄⁄ "
object
⁄⁄# )
[
⁄⁄) *
$num
⁄⁄* +
]
⁄⁄+ ,
)
⁄⁄, -
;
⁄⁄- .
}
€€ 	
public
‡‡ 
void
‡‡ 
Inject
‡‡ 
(
‡‡ 
object
‡‡ !

injectable
‡‡" ,
,
‡‡, -
IEnumerable
‡‡. 9
<
‡‡9 :
object
‡‡: @
>
‡‡@ A
	extraArgs
‡‡B K
)
‡‡K L
{
·· 	
InjectExplicit
‚‚ 
(
‚‚ 

injectable
„„ 
,
„„ 

InjectUtil
„„ &
.
„„& '
CreateArgList
„„' 4
(
„„4 5
	extraArgs
„„5 >
)
„„> ?
)
„„? @
;
„„@ A
}
‰‰ 	
public
ÌÌ 
	TContract
ÌÌ 
Resolve
ÌÌ  
<
ÌÌ  !
	TContract
ÌÌ! *
>
ÌÌ* +
(
ÌÌ+ ,
)
ÌÌ, -
{
ÓÓ 	
return
ÔÔ 
(
ÔÔ 
	TContract
ÔÔ 
)
ÔÔ 
Resolve
ÔÔ %
(
ÔÔ% &
typeof
ÔÔ& ,
(
ÔÔ, -
	TContract
ÔÔ- 6
)
ÔÔ6 7
)
ÔÔ7 8
;
ÔÔ8 9
}
 	
public
ÚÚ 
object
ÚÚ 
Resolve
ÚÚ 
(
ÚÚ 
Type
ÚÚ "
contractType
ÚÚ# /
)
ÚÚ/ 0
{
ÛÛ 	
return
ÙÙ 
	ResolveId
ÙÙ 
(
ÙÙ 
contractType
ÙÙ )
,
ÙÙ) *
null
ÙÙ+ /
)
ÙÙ/ 0
;
ÙÙ0 1
}
ıı 	
public
˜˜ 
	TContract
˜˜ 
	ResolveId
˜˜ "
<
˜˜" #
	TContract
˜˜# ,
>
˜˜, -
(
˜˜- .
object
˜˜. 4

identifier
˜˜5 ?
)
˜˜? @
{
¯¯ 	
return
˘˘ 
(
˘˘ 
	TContract
˘˘ 
)
˘˘ 
	ResolveId
˘˘ '
(
˘˘' (
typeof
˘˘( .
(
˘˘. /
	TContract
˘˘/ 8
)
˘˘8 9
,
˘˘9 :

identifier
˘˘; E
)
˘˘E F
;
˘˘F G
}
˙˙ 	
public
¸¸ 
object
¸¸ 
	ResolveId
¸¸ 
(
¸¸  
Type
¸¸  $
contractType
¸¸% 1
,
¸¸1 2
object
¸¸3 9

identifier
¸¸: D
)
¸¸D E
{
˝˝ 	
using
˛˛ 
(
˛˛ 
var
˛˛ 
context
˛˛ 
=
˛˛  
ZenPools
˛˛! )
.
˛˛) * 
SpawnInjectContext
˛˛* <
(
˛˛< =
this
˛˛= A
,
˛˛A B
contractType
˛˛C O
)
˛˛O P
)
˛˛P Q
{
ˇˇ 
context
ÄÄ 
.
ÄÄ 

Identifier
ÄÄ "
=
ÄÄ# $

identifier
ÄÄ% /
;
ÄÄ/ 0
return
ÅÅ 
Resolve
ÅÅ 
(
ÅÅ 
context
ÅÅ &
)
ÅÅ& '
;
ÅÅ' (
}
ÇÇ 
}
ÉÉ 	
public
áá 
	TContract
áá 

TryResolve
áá #
<
áá# $
	TContract
áá$ -
>
áá- .
(
áá. /
)
áá/ 0
where
àà 
	TContract
àà 
:
àà 
class
àà #
{
ââ 	
return
ää 
(
ää 
	TContract
ää 
)
ää 

TryResolve
ää (
(
ää( )
typeof
ää) /
(
ää/ 0
	TContract
ää0 9
)
ää9 :
)
ää: ;
;
ää; <
}
ãã 	
public
çç 
object
çç 

TryResolve
çç  
(
çç  !
Type
çç! %
contractType
çç& 2
)
çç2 3
{
éé 	
return
èè 
TryResolveId
èè 
(
èè  
contractType
èè  ,
,
èè, -
null
èè. 2
)
èè2 3
;
èè3 4
}
êê 	
public
íí 
	TContract
íí 
TryResolveId
íí %
<
íí% &
	TContract
íí& /
>
íí/ 0
(
íí0 1
object
íí1 7

identifier
íí8 B
)
ííB C
where
ìì 
	TContract
ìì 
:
ìì 
class
ìì #
{
îî 	
return
ïï 
(
ïï 
	TContract
ïï 
)
ïï 
TryResolveId
ïï *
(
ïï* +
typeof
ññ 
(
ññ 
	TContract
ññ  
)
ññ  !
,
ññ! "

identifier
ññ# -
)
ññ- .
;
ññ. /
}
óó 	
public
ôô 
object
ôô 
TryResolveId
ôô "
(
ôô" #
Type
ôô# '
contractType
ôô( 4
,
ôô4 5
object
ôô6 <

identifier
ôô= G
)
ôôG H
{
öö 	
using
õõ 
(
õõ 
var
õõ 
context
õõ 
=
õõ  
ZenPools
õõ! )
.
õõ) * 
SpawnInjectContext
õõ* <
(
õõ< =
this
õõ= A
,
õõA B
contractType
õõC O
)
õõO P
)
õõP Q
{
úú 
context
ùù 
.
ùù 

Identifier
ùù "
=
ùù# $

identifier
ùù% /
;
ùù/ 0
context
ûû 
.
ûû 
Optional
ûû  
=
ûû! "
true
ûû# '
;
ûû' (
return
üü 
Resolve
üü 
(
üü 
context
üü &
)
üü& '
;
üü' (
}
†† 
}
°° 	
public
§§ 
List
§§ 
<
§§ 
	TContract
§§ 
>
§§ 

ResolveAll
§§ )
<
§§) *
	TContract
§§* 3
>
§§3 4
(
§§4 5
)
§§5 6
{
•• 	
return
¶¶ 
(
¶¶ 
List
¶¶ 
<
¶¶ 
	TContract
¶¶ "
>
¶¶" #
)
¶¶# $

ResolveAll
¶¶$ .
(
¶¶. /
typeof
¶¶/ 5
(
¶¶5 6
	TContract
¶¶6 ?
)
¶¶? @
)
¶¶@ A
;
¶¶A B
}
ßß 	
public
©© 
IList
©© 

ResolveAll
©© 
(
©©  
Type
©©  $
contractType
©©% 1
)
©©1 2
{
™™ 	
return
´´ 
ResolveIdAll
´´ 
(
´´  
contractType
´´  ,
,
´´, -
null
´´. 2
)
´´2 3
;
´´3 4
}
¨¨ 	
public
ÆÆ 
List
ÆÆ 
<
ÆÆ 
	TContract
ÆÆ 
>
ÆÆ 
ResolveIdAll
ÆÆ +
<
ÆÆ+ ,
	TContract
ÆÆ, 5
>
ÆÆ5 6
(
ÆÆ6 7
object
ÆÆ7 =

identifier
ÆÆ> H
)
ÆÆH I
{
ØØ 	
return
∞∞ 
(
∞∞ 
List
∞∞ 
<
∞∞ 
	TContract
∞∞ "
>
∞∞" #
)
∞∞# $
ResolveIdAll
∞∞$ 0
(
∞∞0 1
typeof
∞∞1 7
(
∞∞7 8
	TContract
∞∞8 A
)
∞∞A B
,
∞∞B C

identifier
∞∞D N
)
∞∞N O
;
∞∞O P
}
±± 	
public
≥≥ 
IList
≥≥ 
ResolveIdAll
≥≥ !
(
≥≥! "
Type
≥≥" &
contractType
≥≥' 3
,
≥≥3 4
object
≥≥5 ;

identifier
≥≥< F
)
≥≥F G
{
¥¥ 	
using
µµ 
(
µµ 
var
µµ 
context
µµ 
=
µµ  
ZenPools
µµ! )
.
µµ) * 
SpawnInjectContext
µµ* <
(
µµ< =
this
µµ= A
,
µµA B
contractType
µµC O
)
µµO P
)
µµP Q
{
∂∂ 
context
∑∑ 
.
∑∑ 

Identifier
∑∑ "
=
∑∑# $

identifier
∑∑% /
;
∑∑/ 0
context
∏∏ 
.
∏∏ 
Optional
∏∏  
=
∏∏! "
true
∏∏# '
;
∏∏' (
return
ππ 

ResolveAll
ππ !
(
ππ! "
context
ππ" )
)
ππ) *
;
ππ* +
}
∫∫ 
}
ªª 	
public
ææ 
void
ææ 
	UnbindAll
ææ 
(
ææ 
)
ææ 
{
øø 	
FlushBindings
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 

_providers
¡¡ 
.
¡¡ 
Clear
¡¡ 
(
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 	
public
≈≈ 
bool
≈≈ 
Unbind
≈≈ 
<
≈≈ 
	TContract
≈≈ $
>
≈≈$ %
(
≈≈% &
)
≈≈& '
{
∆∆ 	
return
«« 
Unbind
«« 
(
«« 
typeof
««  
(
««  !
	TContract
««! *
)
««* +
)
««+ ,
;
««, -
}
»» 	
public
   
bool
   
Unbind
   
(
   
Type
   
contractType
    ,
)
  , -
{
ÀÀ 	
return
ÃÃ 
UnbindId
ÃÃ 
(
ÃÃ 
contractType
ÃÃ (
,
ÃÃ( )
null
ÃÃ* .
)
ÃÃ. /
;
ÃÃ/ 0
}
ÕÕ 	
public
œœ 
bool
œœ 
UnbindId
œœ 
<
œœ 
	TContract
œœ &
>
œœ& '
(
œœ' (
object
œœ( .

identifier
œœ/ 9
)
œœ9 :
{
–– 	
return
—— 
UnbindId
—— 
(
—— 
typeof
—— "
(
——" #
	TContract
——# ,
)
——, -
,
——- .

identifier
——/ 9
)
——9 :
;
——: ;
}
““ 	
public
‘‘ 
bool
‘‘ 
UnbindId
‘‘ 
(
‘‘ 
Type
‘‘ !
contractType
‘‘" .
,
‘‘. /
object
‘‘0 6

identifier
‘‘7 A
)
‘‘A B
{
’’ 	
FlushBindings
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
var
ÿÿ 
	bindingId
ÿÿ 
=
ÿÿ 
new
ÿÿ 
	BindingId
ÿÿ  )
(
ÿÿ) *
contractType
ÿÿ* 6
,
ÿÿ6 7

identifier
ÿÿ8 B
)
ÿÿB C
;
ÿÿC D
return
⁄⁄ 

_providers
⁄⁄ 
.
⁄⁄ 
Remove
⁄⁄ $
(
⁄⁄$ %
	bindingId
⁄⁄% .
)
⁄⁄. /
;
⁄⁄/ 0
}
€€ 	
public
›› 
void
››  
UnbindInterfacesTo
›› &
<
››& '
	TConcrete
››' 0
>
››0 1
(
››1 2
)
››2 3
{
ﬁﬁ 	 
UnbindInterfacesTo
ﬂﬂ 
(
ﬂﬂ 
typeof
ﬂﬂ %
(
ﬂﬂ% &
	TConcrete
ﬂﬂ& /
)
ﬂﬂ/ 0
)
ﬂﬂ0 1
;
ﬂﬂ1 2
}
‡‡ 	
public
‚‚ 
void
‚‚  
UnbindInterfacesTo
‚‚ &
(
‚‚& '
Type
‚‚' +
concreteType
‚‚, 8
)
‚‚8 9
{
„„ 	
foreach
‰‰ 
(
‰‰ 
var
‰‰ 
i
‰‰ 
in
‰‰ 
concreteType
‰‰ *
.
‰‰* +

Interfaces
‰‰+ 5
(
‰‰5 6
)
‰‰6 7
)
‰‰7 8
{
ÂÂ 
Unbind
ÊÊ 
(
ÊÊ 
i
ÊÊ 
,
ÊÊ 
concreteType
ÊÊ &
)
ÊÊ& '
;
ÊÊ' (
}
ÁÁ 
}
ËË 	
public
ÍÍ 
bool
ÍÍ 
Unbind
ÍÍ 
<
ÍÍ 
	TContract
ÍÍ $
,
ÍÍ$ %
	TConcrete
ÍÍ& /
>
ÍÍ/ 0
(
ÍÍ0 1
)
ÍÍ1 2
{
ÎÎ 	
return
ÏÏ 
Unbind
ÏÏ 
(
ÏÏ 
typeof
ÏÏ  
(
ÏÏ  !
	TContract
ÏÏ! *
)
ÏÏ* +
,
ÏÏ+ ,
typeof
ÏÏ- 3
(
ÏÏ3 4
	TConcrete
ÏÏ4 =
)
ÏÏ= >
)
ÏÏ> ?
;
ÏÏ? @
}
ÌÌ 	
public
ÔÔ 
bool
ÔÔ 
Unbind
ÔÔ 
(
ÔÔ 
Type
ÔÔ 
contractType
ÔÔ  ,
,
ÔÔ, -
Type
ÔÔ. 2
concreteType
ÔÔ3 ?
)
ÔÔ? @
{
 	
return
ÒÒ 
UnbindId
ÒÒ 
(
ÒÒ 
contractType
ÒÒ (
,
ÒÒ( )
concreteType
ÒÒ* 6
,
ÒÒ6 7
null
ÒÒ8 <
)
ÒÒ< =
;
ÒÒ= >
}
ÚÚ 	
public
ÙÙ 
bool
ÙÙ 
UnbindId
ÙÙ 
<
ÙÙ 
	TContract
ÙÙ &
,
ÙÙ& '
	TConcrete
ÙÙ( 1
>
ÙÙ1 2
(
ÙÙ2 3
object
ÙÙ3 9

identifier
ÙÙ: D
)
ÙÙD E
{
ıı 	
return
ˆˆ 
UnbindId
ˆˆ 
(
ˆˆ 
typeof
ˆˆ "
(
ˆˆ" #
	TContract
ˆˆ# ,
)
ˆˆ, -
,
ˆˆ- .
typeof
ˆˆ/ 5
(
ˆˆ5 6
	TConcrete
ˆˆ6 ?
)
ˆˆ? @
,
ˆˆ@ A

identifier
ˆˆB L
)
ˆˆL M
;
ˆˆM N
}
˜˜ 	
public
˘˘ 
bool
˘˘ 
UnbindId
˘˘ 
(
˘˘ 
Type
˘˘ !
contractType
˘˘" .
,
˘˘. /
Type
˘˘0 4
concreteType
˘˘5 A
,
˘˘A B
object
˘˘C I

identifier
˘˘J T
)
˘˘T U
{
˙˙ 	
FlushBindings
˚˚ 
(
˚˚ 
)
˚˚ 
;
˚˚ 
var
˝˝ 
	bindingId
˝˝ 
=
˝˝ 
new
˝˝ 
	BindingId
˝˝  )
(
˝˝) *
contractType
˝˝* 6
,
˝˝6 7

identifier
˝˝8 B
)
˝˝B C
;
˝˝C D
List
ˇˇ 
<
ˇˇ 
ProviderInfo
ˇˇ 
>
ˇˇ 
	providers
ˇˇ (
;
ˇˇ( )
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 

_providers
ÅÅ 
.
ÅÅ 
TryGetValue
ÅÅ '
(
ÅÅ' (
	bindingId
ÅÅ( 1
,
ÅÅ1 2
out
ÅÅ3 6
	providers
ÅÅ7 @
)
ÅÅ@ A
)
ÅÅA B
{
ÇÇ 
return
ÉÉ 
false
ÉÉ 
;
ÉÉ 
}
ÑÑ 
var
ÜÜ 
matches
ÜÜ 
=
ÜÜ 
	providers
ÜÜ #
.
ÜÜ# $
Where
ÜÜ$ )
(
ÜÜ) *
x
ÜÜ* +
=>
ÜÜ, .
x
ÜÜ/ 0
.
ÜÜ0 1
Provider
ÜÜ1 9
.
ÜÜ9 :
GetInstanceType
ÜÜ: I
(
ÜÜI J
new
ÜÜJ M
InjectContext
ÜÜN [
(
ÜÜ[ \
this
ÜÜ\ `
,
ÜÜ` a
contractType
ÜÜb n
,
ÜÜn o

identifier
ÜÜp z
)
ÜÜz {
)
ÜÜ{ |
.
ÜÜ| }!
DerivesFromOrEqualÜÜ} è
(ÜÜè ê
concreteTypeÜÜê ú
)ÜÜú ù
)ÜÜù û
.ÜÜû ü
ToListÜÜü •
(ÜÜ• ¶
)ÜÜ¶ ß
;ÜÜß ®
if
àà 
(
àà 
matches
àà 
.
àà 
Count
àà 
==
àà  
$num
àà! "
)
àà" #
{
ââ 
return
ää 
false
ää 
;
ää 
}
ãã 
foreach
çç 
(
çç 
var
çç 
info
çç 
in
çç  
matches
çç! (
)
çç( )
{
éé 
bool
èè 
success
èè 
=
èè 
	providers
èè (
.
èè( )
Remove
èè) /
(
èè/ 0
info
èè0 4
)
èè4 5
;
èè5 6
Assert
êê 
.
êê 
That
êê 
(
êê 
success
êê #
)
êê# $
;
êê$ %
}
ëë 
return
ìì 
true
ìì 
;
ìì 
}
îî 	
public
óó 
bool
óó 

HasBinding
óó 
<
óó 
	TContract
óó (
>
óó( )
(
óó) *
)
óó* +
{
òò 	
return
ôô 

HasBinding
ôô 
(
ôô 
typeof
ôô $
(
ôô$ %
	TContract
ôô% .
)
ôô. /
)
ôô/ 0
;
ôô0 1
}
öö 	
public
úú 
bool
úú 

HasBinding
úú 
(
úú 
Type
úú #
contractType
úú$ 0
)
úú0 1
{
ùù 	
return
ûû 
HasBindingId
ûû 
(
ûû  
contractType
ûû  ,
,
ûû, -
null
ûû. 2
)
ûû2 3
;
ûû3 4
}
üü 	
public
°° 
bool
°° 
HasBindingId
°°  
<
°°  !
	TContract
°°! *
>
°°* +
(
°°+ ,
object
°°, 2

identifier
°°3 =
)
°°= >
{
¢¢ 	
return
££ 
HasBindingId
££ 
(
££  
typeof
££  &
(
££& '
	TContract
££' 0
)
££0 1
,
££1 2

identifier
££3 =
)
££= >
;
££> ?
}
§§ 	
public
¶¶ 
bool
¶¶ 
HasBindingId
¶¶  
(
¶¶  !
Type
¶¶! %
contractType
¶¶& 2
,
¶¶2 3
object
¶¶4 :

identifier
¶¶; E
)
¶¶E F
{
ßß 	
return
®® 
HasBindingId
®® 
(
®®  
contractType
®®  ,
,
®®, -

identifier
®®. 8
,
®®8 9
InjectSources
®®: G
.
®®G H
Any
®®H K
)
®®K L
;
®®L M
}
©© 	
public
´´ 
bool
´´ 
HasBindingId
´´  
(
´´  !
Type
´´! %
contractType
´´& 2
,
´´2 3
object
´´4 :

identifier
´´; E
,
´´E F
InjectSources
´´G T

sourceType
´´U _
)
´´_ `
{
¨¨ 	
using
≠≠ 
(
≠≠ 
var
≠≠ 
ctx
≠≠ 
=
≠≠ 
ZenPools
≠≠ %
.
≠≠% & 
SpawnInjectContext
≠≠& 8
(
≠≠8 9
this
≠≠9 =
,
≠≠= >
contractType
≠≠? K
)
≠≠K L
)
≠≠L M
{
ÆÆ 
ctx
ØØ 
.
ØØ 

Identifier
ØØ 
=
ØØ  

identifier
ØØ! +
;
ØØ+ ,
ctx
∞∞ 
.
∞∞ 

SourceType
∞∞ 
=
∞∞  

sourceType
∞∞! +
;
∞∞+ ,
return
±± 

HasBinding
±± !
(
±±! "
ctx
±±" %
)
±±% &
;
±±& '
}
≤≤ 
}
≥≥ 	
public
∂∂ 
bool
∂∂ 

HasBinding
∂∂ 
(
∂∂ 
InjectContext
∂∂ ,
context
∂∂- 4
)
∂∂4 5
{
∑∑ 	
Assert
∏∏ 
.
∏∏ 
	IsNotNull
∏∏ 
(
∏∏ 
context
∏∏ $
)
∏∏$ %
;
∏∏% &
FlushBindings
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
var
ºº 
matches
ºº 
=
ºº 
ZenPools
ºº "
.
ºº" #
	SpawnList
ºº# ,
<
ºº, -
ProviderInfo
ºº- 9
>
ºº9 :
(
ºº: ;
)
ºº; <
;
ºº< =
try
ææ 
{
øø  
GetProviderMatches
¿¿ "
(
¿¿" #
context
¿¿# *
,
¿¿* +
matches
¿¿, 3
)
¿¿3 4
;
¿¿4 5
return
¡¡ 
matches
¡¡ 
.
¡¡ 
Count
¡¡ $
>
¡¡% &
$num
¡¡' (
;
¡¡( )
}
¬¬ 
finally
√√ 
{
ƒƒ 
ZenPools
≈≈ 
.
≈≈ 
DespawnList
≈≈ $
(
≈≈$ %
matches
≈≈% ,
)
≈≈, -
;
≈≈- .
}
∆∆ 
}
«« 	
public
   
void
   
FlushBindings
   !
(
  ! "
)
  " #
{
ÀÀ 	
while
ÃÃ 
(
ÃÃ 
_currentBindings
ÃÃ #
.
ÃÃ# $
Count
ÃÃ$ )
>
ÃÃ* +
$num
ÃÃ, -
)
ÃÃ- .
{
ÕÕ 
var
ŒŒ 
binding
ŒŒ 
=
ŒŒ 
_currentBindings
ŒŒ .
.
ŒŒ. /
Dequeue
ŒŒ/ 6
(
ŒŒ6 7
)
ŒŒ7 8
;
ŒŒ8 9
if
–– 
(
–– 
binding
–– 
.
–– &
BindingInheritanceMethod
–– 4
!=
––5 7'
BindingInheritanceMethods
––8 Q
.
––Q R
MoveDirectOnly
––R `
&&
—— 
binding
—— 
.
—— &
BindingInheritanceMethod
—— 7
!=
——8 :'
BindingInheritanceMethods
——; T
.
——T U
MoveIntoAll
——U `
)
——` a
{
““ 
FinalizeBinding
”” #
(
””# $
binding
””$ +
)
””+ ,
;
””, -
}
‘‘ 
if
÷÷ 
(
÷÷ 
binding
÷÷ 
.
÷÷ &
BindingInheritanceMethod
÷÷ 4
!=
÷÷5 7'
BindingInheritanceMethods
÷÷8 Q
.
÷÷Q R
None
÷÷R V
)
÷÷V W
{
◊◊ 
_childBindings
ÿÿ "
.
ÿÿ" #
Add
ÿÿ# &
(
ÿÿ& '
binding
ÿÿ' .
)
ÿÿ. /
;
ÿÿ/ 0
}
ŸŸ 
else
⁄⁄ 
{
€€ 
binding
‹‹ 
.
‹‹ 
Dispose
‹‹ #
(
‹‹# $
)
‹‹$ %
;
‹‹% &
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 	
void
·· 
FinalizeBinding
·· 
(
·· 
BindStatement
·· *
binding
··+ 2
)
··2 3
{
‚‚ 	"
_isFinalizingBinding
„„  
=
„„! "
true
„„# '
;
„„' (
try
ÂÂ 
{
ÊÊ 
binding
ÁÁ 
.
ÁÁ 
FinalizeBinding
ÁÁ '
(
ÁÁ' (
this
ÁÁ( ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ "
_isFinalizingBinding
ÎÎ $
=
ÎÎ% &
false
ÎÎ' ,
;
ÎÎ, -
}
ÏÏ 
}
ÌÌ 	
public
 
BindStatement
 
StartBinding
 )
(
) *
bool
* .
flush
/ 4
=
5 6
true
7 ;
)
; <
{
ÒÒ 	
Assert
ÚÚ 
.
ÚÚ 
That
ÚÚ 
(
ÚÚ 
!
ÚÚ "
_isFinalizingBinding
ÚÚ -
,
ÚÚ- .
$strÛÛ ‰
)ÛÛ‰ Â
;ÛÛÂ Ê
if
ıı 
(
ıı 
flush
ıı 
)
ıı 
{
ˆˆ 
FlushBindings
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜  
}
¯¯ 
var
˙˙ 
bindStatement
˙˙ 
=
˙˙ 
ZenPools
˙˙  (
.
˙˙( )
SpawnStatement
˙˙) 7
(
˙˙7 8
)
˙˙8 9
;
˙˙9 :
_currentBindings
˚˚ 
.
˚˚ 
Enqueue
˚˚ $
(
˚˚$ %
bindStatement
˚˚% 2
)
˚˚2 3
;
˚˚3 4
return
¸¸ 
bindStatement
¸¸  
;
¸¸  !
}
˝˝ 	
public
ˇˇ #
ConcreteBinderGeneric
ˇˇ $
<
ˇˇ$ %
	TContract
ˇˇ% .
>
ˇˇ. /
Rebind
ˇˇ0 6
<
ˇˇ6 7
	TContract
ˇˇ7 @
>
ˇˇ@ A
(
ˇˇA B
)
ˇˇB C
{
ÄÄ 	
return
ÅÅ 
RebindId
ÅÅ 
<
ÅÅ 
	TContract
ÅÅ %
>
ÅÅ% &
(
ÅÅ& '
null
ÅÅ' +
)
ÅÅ+ ,
;
ÅÅ, -
}
ÇÇ 	
public
ÑÑ #
ConcreteBinderGeneric
ÑÑ $
<
ÑÑ$ %
	TContract
ÑÑ% .
>
ÑÑ. /
RebindId
ÑÑ0 8
<
ÑÑ8 9
	TContract
ÑÑ9 B
>
ÑÑB C
(
ÑÑC D
object
ÑÑD J

identifier
ÑÑK U
)
ÑÑU V
{
ÖÖ 	
UnbindId
ÜÜ 
<
ÜÜ 
	TContract
ÜÜ 
>
ÜÜ 
(
ÜÜ  

identifier
ÜÜ  *
)
ÜÜ* +
;
ÜÜ+ ,
return
áá 
Bind
áá 
<
áá 
	TContract
áá !
>
áá! "
(
áá" #
)
áá# $
.
áá$ %
WithId
áá% +
(
áá+ ,

identifier
áá, 6
)
áá6 7
;
áá7 8
}
àà 	
public
ää &
ConcreteBinderNonGeneric
ää '
Rebind
ää( .
(
ää. /
Type
ää/ 3
contractType
ää4 @
)
ää@ A
{
ãã 	
return
åå 
RebindId
åå 
(
åå 
contractType
åå (
,
åå( )
null
åå* .
)
åå. /
;
åå/ 0
}
çç 	
public
èè &
ConcreteBinderNonGeneric
èè '
RebindId
èè( 0
(
èè0 1
Type
èè1 5
contractType
èè6 B
,
èèB C
object
èèD J

identifier
èèK U
)
èèU V
{
êê 	
UnbindId
ëë 
(
ëë 
contractType
ëë !
,
ëë! "

identifier
ëë# -
)
ëë- .
;
ëë. /
return
íí 
Bind
íí 
(
íí 
contractType
íí $
)
íí$ %
.
íí% &
WithId
íí& ,
(
íí, -

identifier
íí- 7
)
íí7 8
;
íí8 9
}
ìì 	
public
óó %
ConcreteIdBinderGeneric
óó &
<
óó& '
	TContract
óó' 0
>
óó0 1
Bind
óó2 6
<
óó6 7
	TContract
óó7 @
>
óó@ A
(
óóA B
)
óóB C
{
òò 	
return
ôô 
Bind
ôô 
<
ôô 
	TContract
ôô !
>
ôô! "
(
ôô" #
StartBinding
ôô# /
(
ôô/ 0
)
ôô0 1
)
ôô1 2
;
ôô2 3
}
öö 	
public
ûû %
ConcreteIdBinderGeneric
ûû &
<
ûû& '
	TContract
ûû' 0
>
ûû0 1
BindNoFlush
ûû2 =
<
ûû= >
	TContract
ûû> G
>
ûûG H
(
ûûH I
)
ûûI J
{
üü 	
return
†† 
Bind
†† 
<
†† 
	TContract
†† !
>
††! "
(
††" #
StartBinding
††# /
(
††/ 0
false
††0 5
)
††5 6
)
††6 7
;
††7 8
}
°° 	%
ConcreteIdBinderGeneric
££ 
<
££  
	TContract
££  )
>
££) *
Bind
££+ /
<
££/ 0
	TContract
££0 9
>
££9 :
(
££: ;
BindStatement
§§ 
bindStatement
§§ '
)
§§' (
{
•• 	
var
¶¶ 
bindInfo
¶¶ 
=
¶¶ 
bindStatement
¶¶ (
.
¶¶( )
SpawnBindInfo
¶¶) 6
(
¶¶6 7
)
¶¶7 8
;
¶¶8 9
Assert
®® 
.
®® 
That
®® 
(
®® 
!
®® 
typeof
®® 
(
®®  
	TContract
®®  )
)
®®) *
.
®®* +
DerivesFrom
®®+ 6
<
®®6 7!
IPlaceholderFactory
®®7 J
>
®®J K
(
®®K L
)
®®L M
,
®®M N
$str
©© l
)
©©l m
;
©©m n
Assert
´´ 
.
´´ 
That
´´ 
(
´´ 
!
´´ 
bindInfo
´´ !
.
´´! "
ContractTypes
´´" /
.
´´/ 0
Contains
´´0 8
(
´´8 9
typeof
´´9 ?
(
´´? @
	TContract
´´@ I
)
´´I J
)
´´J K
)
´´K L
;
´´L M
bindInfo
¨¨ 
.
¨¨ 
ContractTypes
¨¨ "
.
¨¨" #
Add
¨¨# &
(
¨¨& '
typeof
¨¨' -
(
¨¨- .
	TContract
¨¨. 7
)
¨¨7 8
)
¨¨8 9
;
¨¨9 :
return
ÆÆ 
new
ÆÆ %
ConcreteIdBinderGeneric
ÆÆ .
<
ÆÆ. /
	TContract
ÆÆ/ 8
>
ÆÆ8 9
(
ÆÆ9 :
this
ØØ 
,
ØØ 
bindInfo
ØØ 
,
ØØ 
bindStatement
ØØ  -
)
ØØ- .
;
ØØ. /
}
∞∞ 	
public
¥¥ (
ConcreteIdBinderNonGeneric
¥¥ )
Bind
¥¥* .
(
¥¥. /
params
¥¥/ 5
Type
¥¥6 :
[
¥¥: ;
]
¥¥; <
contractTypes
¥¥= J
)
¥¥J K
{
µµ 	
var
∂∂ 
	statement
∂∂ 
=
∂∂ 
StartBinding
∂∂ (
(
∂∂( )
)
∂∂) *
;
∂∂* +
var
∑∑ 
bindInfo
∑∑ 
=
∑∑ 
	statement
∑∑ $
.
∑∑$ %
SpawnBindInfo
∑∑% 2
(
∑∑2 3
)
∑∑3 4
;
∑∑4 5
bindInfo
∏∏ 
.
∏∏ 
ContractTypes
∏∏ "
.
∏∏" #
AllocFreeAddRange
∏∏# 4
(
∏∏4 5
contractTypes
∏∏5 B
)
∏∏B C
;
∏∏C D
return
ππ 
BindInternal
ππ 
(
ππ  
bindInfo
ππ  (
,
ππ( )
	statement
ππ* 3
)
ππ3 4
;
ππ4 5
}
∫∫ 	
public
ºº (
ConcreteIdBinderNonGeneric
ºº )
Bind
ºº* .
(
ºº. /
IEnumerable
ºº/ :
<
ºº: ;
Type
ºº; ?
>
ºº? @
contractTypes
ººA N
)
ººN O
{
ΩΩ 	
var
ææ 
	statement
ææ 
=
ææ 
StartBinding
ææ (
(
ææ( )
)
ææ) *
;
ææ* +
var
øø 
bindInfo
øø 
=
øø 
	statement
øø $
.
øø$ %
SpawnBindInfo
øø% 2
(
øø2 3
)
øø3 4
;
øø4 5
bindInfo
¿¿ 
.
¿¿ 
ContractTypes
¿¿ "
.
¿¿" #
AddRange
¿¿# +
(
¿¿+ ,
contractTypes
¿¿, 9
)
¿¿9 :
;
¿¿: ;
return
¡¡ 
BindInternal
¡¡ 
(
¡¡  
bindInfo
¡¡  (
,
¡¡( )
	statement
¡¡* 3
)
¡¡3 4
;
¡¡4 5
}
¬¬ 	(
ConcreteIdBinderNonGeneric
ƒƒ "
BindInternal
ƒƒ# /
(
ƒƒ/ 0
BindInfo
≈≈ 
bindInfo
≈≈ 
,
≈≈ 
BindStatement
≈≈ ,
bindingFinalizer
≈≈- =
)
≈≈= >
{
∆∆ 	
{
   
Assert
ÀÀ 
.
ÀÀ 
That
ÀÀ 
(
ÀÀ 
bindInfo
ÀÀ $
.
ÀÀ$ %
ContractTypes
ÀÀ% 2
.
ÀÀ2 3
All
ÀÀ3 6
(
ÀÀ6 7
x
ÀÀ7 8
=>
ÀÀ9 ;
!
ÀÀ< =
x
ÀÀ= >
.
ÀÀ> ?
DerivesFrom
ÀÀ? J
<
ÀÀJ K!
IPlaceholderFactory
ÀÀK ^
>
ÀÀ^ _
(
ÀÀ_ `
)
ÀÀ` a
)
ÀÀa b
,
ÀÀb c
$str
ÃÃ p
)
ÃÃp q
;
ÃÃq r
return
ŒŒ 
new
ŒŒ (
ConcreteIdBinderNonGeneric
ŒŒ 5
(
ŒŒ5 6
this
ŒŒ6 :
,
ŒŒ: ;
bindInfo
ŒŒ< D
,
ŒŒD E
bindingFinalizer
ŒŒF V
)
ŒŒV W
;
ŒŒW X
}
œœ 
}
–– 	
public
”” (
ConcreteIdBinderNonGeneric
”” )
Bind
””* .
(
””. /
Action
‘‘ 
<
‘‘ )
ConventionSelectTypesBinder
‘‘ .
>
‘‘. /
	generator
‘‘0 9
)
‘‘9 :
{
’’ 	
var
÷÷  
conventionBindInfo
÷÷ "
=
÷÷# $
new
÷÷% ( 
ConventionBindInfo
÷÷) ;
(
÷÷; <
)
÷÷< =
;
÷÷= >
	generator
◊◊ 
(
◊◊ 
new
◊◊ )
ConventionSelectTypesBinder
◊◊ 5
(
◊◊5 6 
conventionBindInfo
◊◊6 H
)
◊◊H I
)
◊◊I J
;
◊◊J K
var
ŸŸ 
contractTypesList
ŸŸ !
=
ŸŸ" # 
conventionBindInfo
ŸŸ$ 6
.
ŸŸ6 7
ResolveTypes
ŸŸ7 C
(
ŸŸC D
)
ŸŸD E
;
ŸŸE F
Assert
€€ 
.
€€ 
That
€€ 
(
€€ 
contractTypesList
€€ )
.
€€) *
All
€€* -
(
€€- .
x
€€. /
=>
€€0 2
!
€€3 4
x
€€4 5
.
€€5 6
DerivesFrom
€€6 A
<
€€A B!
IPlaceholderFactory
€€B U
>
€€U V
(
€€V W
)
€€W X
)
€€X Y
,
€€Y Z
$str
‹‹ l
)
‹‹l m
;
‹‹m n
var
ﬁﬁ 
	statement
ﬁﬁ 
=
ﬁﬁ 
StartBinding
ﬁﬁ (
(
ﬁﬁ( )
)
ﬁﬁ) *
;
ﬁﬁ* +
var
ﬂﬂ 
bindInfo
ﬂﬂ 
=
ﬂﬂ 
	statement
ﬂﬂ $
.
ﬂﬂ$ %
SpawnBindInfo
ﬂﬂ% 2
(
ﬂﬂ2 3
)
ﬂﬂ3 4
;
ﬂﬂ4 5
bindInfo
‡‡ 
.
‡‡ 
ContractTypes
‡‡ "
.
‡‡" #
AllocFreeAddRange
‡‡# 4
(
‡‡4 5
contractTypesList
‡‡5 F
)
‡‡F G
;
‡‡G H
bindInfo
‰‰ 
.
‰‰ !
InvalidBindResponse
‰‰ (
=
‰‰) *"
InvalidBindResponses
‰‰+ ?
.
‰‰? @
Skip
‰‰@ D
;
‰‰D E
return
ÊÊ 
new
ÊÊ (
ConcreteIdBinderNonGeneric
ÊÊ 1
(
ÊÊ1 2
this
ÊÊ2 6
,
ÊÊ6 7
bindInfo
ÊÊ8 @
,
ÊÊ@ A
	statement
ÊÊB K
)
ÊÊK L
;
ÊÊL M
}
ÁÁ 	
public
˙˙ "
FromBinderNonGeneric
˙˙ #
BindInterfacesTo
˙˙$ 4
<
˙˙4 5
T
˙˙5 6
>
˙˙6 7
(
˙˙7 8
)
˙˙8 9
{
˚˚ 	
return
¸¸ 
BindInterfacesTo
¸¸ #
(
¸¸# $
typeof
¸¸$ *
(
¸¸* +
T
¸¸+ ,
)
¸¸, -
)
¸¸- .
;
¸¸. /
}
˝˝ 	
public
ˇˇ "
FromBinderNonGeneric
ˇˇ #
BindInterfacesTo
ˇˇ$ 4
(
ˇˇ4 5
Type
ˇˇ5 9
type
ˇˇ: >
)
ˇˇ> ?
{
ÄÄ 	
var
ÅÅ 
	statement
ÅÅ 
=
ÅÅ 
StartBinding
ÅÅ (
(
ÅÅ( )
)
ÅÅ) *
;
ÅÅ* +
var
ÇÇ 
bindInfo
ÇÇ 
=
ÇÇ 
	statement
ÇÇ $
.
ÇÇ$ %
SpawnBindInfo
ÇÇ% 2
(
ÇÇ2 3
)
ÇÇ3 4
;
ÇÇ4 5
var
ÑÑ 

interfaces
ÑÑ 
=
ÑÑ 
type
ÑÑ !
.
ÑÑ! "

Interfaces
ÑÑ" ,
(
ÑÑ, -
)
ÑÑ- .
;
ÑÑ. /
if
ÜÜ 
(
ÜÜ 

interfaces
ÜÜ 
.
ÜÜ 
Length
ÜÜ !
==
ÜÜ" $
$num
ÜÜ% &
)
ÜÜ& '
{
áá 
Log
àà 
.
àà 
Warn
àà 
(
àà 
$str
àà \
,
àà\ ]
type
àà^ b
)
ààb c
;
ààc d
}
ââ 
bindInfo
ãã 
.
ãã 
ContractTypes
ãã "
.
ãã" #
AllocFreeAddRange
ãã# 4
(
ãã4 5

interfaces
ãã5 ?
)
ãã? @
;
ãã@ A
bindInfo
åå 
.
åå 
SetContextInfo
åå #
(
åå# $
$str
åå$ ;
.
åå; <
Fmt
åå< ?
(
åå? @
type
åå@ D
)
ååD E
)
ååE F
;
ååF G
bindInfo
èè 
.
èè "
RequireExplicitScope
èè )
=
èè* +
true
èè, 0
;
èè0 1
return
êê 
BindInternal
êê 
(
êê  
bindInfo
êê  (
,
êê( )
	statement
êê* 3
)
êê3 4
.
êê4 5
To
êê5 7
(
êê7 8
type
êê8 <
)
êê< =
;
êê= >
}
ëë 	
public
îî "
FromBinderNonGeneric
îî #%
BindInterfacesAndSelfTo
îî$ ;
<
îî; <
T
îî< =
>
îî= >
(
îî> ?
)
îî? @
{
ïï 	
return
ññ %
BindInterfacesAndSelfTo
ññ *
(
ññ* +
typeof
ññ+ 1
(
ññ1 2
T
ññ2 3
)
ññ3 4
)
ññ4 5
;
ññ5 6
}
óó 	
public
ôô "
FromBinderNonGeneric
ôô #%
BindInterfacesAndSelfTo
ôô$ ;
(
ôô; <
Type
ôô< @
type
ôôA E
)
ôôE F
{
öö 	
var
õõ 
	statement
õõ 
=
õõ 
StartBinding
õõ (
(
õõ( )
)
õõ) *
;
õõ* +
var
úú 
bindInfo
úú 
=
úú 
	statement
úú $
.
úú$ %
SpawnBindInfo
úú% 2
(
úú2 3
)
úú3 4
;
úú4 5
bindInfo
ûû 
.
ûû 
ContractTypes
ûû "
.
ûû" #
AllocFreeAddRange
ûû# 4
(
ûû4 5
type
ûû5 9
.
ûû9 :

Interfaces
ûû: D
(
ûûD E
)
ûûE F
)
ûûF G
;
ûûG H
bindInfo
üü 
.
üü 
ContractTypes
üü "
.
üü" #
Add
üü# &
(
üü& '
type
üü' +
)
üü+ ,
;
üü, -
bindInfo
°° 
.
°° 
SetContextInfo
°° #
(
°°# $
$str
°°$ B
.
°°B C
Fmt
°°C F
(
°°F G
type
°°G K
)
°°K L
)
°°L M
;
°°M N
bindInfo
§§ 
.
§§ "
RequireExplicitScope
§§ )
=
§§* +
true
§§, 0
;
§§0 1
return
•• 
BindInternal
•• 
(
••  
bindInfo
••  (
,
••( )
	statement
••* 3
)
••3 4
.
••4 5
To
••5 7
(
••7 8
type
••8 <
)
••< =
;
••= >
}
¶¶ 	
public
±± <
.IdScopeConcreteIdArgConditionCopyNonLazyBinder
±± =
BindInstance
±±> J
<
±±J K
	TContract
±±K T
>
±±T U
(
±±U V
	TContract
±±V _
instance
±±` h
)
±±h i
{
≤≤ 	
var
≥≥ 
	statement
≥≥ 
=
≥≥ 
StartBinding
≥≥ (
(
≥≥( )
)
≥≥) *
;
≥≥* +
var
¥¥ 
bindInfo
¥¥ 
=
¥¥ 
	statement
¥¥ $
.
¥¥$ %
SpawnBindInfo
¥¥% 2
(
¥¥2 3
)
¥¥3 4
;
¥¥4 5
bindInfo
µµ 
.
µµ 
ContractTypes
µµ "
.
µµ" #
Add
µµ# &
(
µµ& '
typeof
µµ' -
(
µµ- .
	TContract
µµ. 7
)
µµ7 8
)
µµ8 9
;
µµ9 :
	statement
∑∑ 
.
∑∑ 
SetFinalizer
∑∑ "
(
∑∑" #
new
∏∏ &
ScopableBindingFinalizer
∏∏ ,
(
∏∏, -
bindInfo
ππ 
,
ππ 
(
∫∫ 
	container
∫∫ 
,
∫∫ 
type
∫∫  $
)
∫∫$ %
=>
∫∫& (
new
∫∫) ,
InstanceProvider
∫∫- =
(
∫∫= >
type
∫∫> B
,
∫∫B C
instance
∫∫D L
,
∫∫L M
	container
∫∫N W
)
∫∫W X
)
∫∫X Y
)
∫∫Y Z
;
∫∫Z [
return
ºº 
new
ºº <
.IdScopeConcreteIdArgConditionCopyNonLazyBinder
ºº E
(
ººE F
bindInfo
ººF N
)
ººN O
;
ººO P
}
ΩΩ 	
public
¡¡ 
void
¡¡ 
BindInstances
¡¡ !
(
¡¡! "
params
¡¡" (
object
¡¡) /
[
¡¡/ 0
]
¡¡0 1
	instances
¡¡2 ;
)
¡¡; <
{
¬¬ 	
for
√√ 
(
√√ 
int
√√ 
i
√√ 
=
√√ 
$num
√√ 
;
√√ 
i
√√ 
<
√√ 
	instances
√√  )
.
√√) *
Length
√√* 0
;
√√0 1
i
√√2 3
++
√√3 5
)
√√5 6
{
ƒƒ 
var
≈≈ 
instance
≈≈ 
=
≈≈ 
	instances
≈≈ (
[
≈≈( )
i
≈≈) *
]
≈≈* +
;
≈≈+ ,
Assert
«« 
.
«« 
That
«« 
(
«« 
!
«« 
ZenUtilInternal
«« ,
.
««, -
IsNull
««- 3
(
««3 4
instance
««4 <
)
««< =
,
««= >
$str
»» J
)
»»J K
;
»»K L
Bind
   
(
   
instance
   
.
   
GetType
   %
(
  % &
)
  & '
)
  ' (
.
  ( )
FromInstance
  ) 5
(
  5 6
instance
  6 >
)
  > ?
;
  ? @
}
ÀÀ 
}
ÃÃ 	%
FactoryToChoiceIdBinder
ŒŒ 
<
ŒŒ  
	TContract
ŒŒ  )
>
ŒŒ) *!
BindFactoryInternal
ŒŒ+ >
<
ŒŒ> ?
	TContract
ŒŒ? H
,
ŒŒH I
TFactoryContract
ŒŒJ Z
,
ŒŒZ [
TFactoryConcrete
ŒŒ\ l
>
ŒŒl m
(
ŒŒm n
)
ŒŒn o
where
œœ 
TFactoryConcrete
œœ "
:
œœ# $
TFactoryContract
œœ% 5
,
œœ5 6
IFactory
œœ7 ?
where
–– 
TFactoryContract
–– "
:
––# $
IFactory
––% -
{
—— 	
var
““ 
	statement
““ 
=
““ 
StartBinding
““ (
(
““( )
)
““) *
;
““* +
var
”” 
bindInfo
”” 
=
”” 
	statement
”” $
.
””$ %
SpawnBindInfo
””% 2
(
””2 3
)
””3 4
;
””4 5
bindInfo
‘‘ 
.
‘‘ 
ContractTypes
‘‘ "
.
‘‘" #
Add
‘‘# &
(
‘‘& '
typeof
‘‘' -
(
‘‘- .
TFactoryContract
‘‘. >
)
‘‘> ?
)
‘‘? @
;
‘‘@ A
var
÷÷ 
factoryBindInfo
÷÷ 
=
÷÷  !
new
÷÷" %
FactoryBindInfo
÷÷& 5
(
÷÷5 6
typeof
÷÷6 <
(
÷÷< =
TFactoryConcrete
÷÷= M
)
÷÷M N
)
÷÷N O
;
÷÷O P
	statement
ÿÿ 
.
ÿÿ 
SetFinalizer
ÿÿ "
(
ÿÿ" #
new
ŸŸ 0
"PlaceholderFactoryBindingFinalizer
ŸŸ 6
<
ŸŸ6 7
	TContract
ŸŸ7 @
>
ŸŸ@ A
(
ŸŸA B
bindInfo
⁄⁄ 
,
⁄⁄ 
factoryBindInfo
⁄⁄ -
)
⁄⁄- .
)
⁄⁄. /
;
⁄⁄/ 0
return
‹‹ 
new
‹‹ %
FactoryToChoiceIdBinder
‹‹ .
<
‹‹. /
	TContract
‹‹/ 8
>
‹‹8 9
(
‹‹9 :
this
›› 
,
›› 
bindInfo
›› 
,
›› 
factoryBindInfo
››  /
)
››/ 0
;
››0 1
}
ﬁﬁ 	
public
‡‡ %
FactoryToChoiceIdBinder
‡‡ &
<
‡‡& '
	TContract
‡‡' 0
>
‡‡0 1
BindIFactory
‡‡2 >
<
‡‡> ?
	TContract
‡‡? H
>
‡‡H I
(
‡‡I J
)
‡‡J K
{
·· 	
return
‚‚ !
BindFactoryInternal
‚‚ &
<
‚‚& '
	TContract
‚‚' 0
,
‚‚0 1
IFactory
‚‚2 :
<
‚‚: ;
	TContract
‚‚; D
>
‚‚D E
,
‚‚E F 
PlaceholderFactory
‚‚G Y
<
‚‚Y Z
	TContract
‚‚Z c
>
‚‚c d
>
‚‚d e
(
‚‚e f
)
‚‚f g
;
‚‚g h
}
„„ 	
public
ÂÂ %
FactoryToChoiceIdBinder
ÂÂ &
<
ÂÂ& '
	TContract
ÂÂ' 0
>
ÂÂ0 1
BindFactory
ÂÂ2 =
<
ÂÂ= >
	TContract
ÂÂ> G
,
ÂÂG H
TFactory
ÂÂI Q
>
ÂÂQ R
(
ÂÂR S
)
ÂÂS T
where
ÊÊ 
TFactory
ÊÊ 
:
ÊÊ  
PlaceholderFactory
ÊÊ /
<
ÊÊ/ 0
	TContract
ÊÊ0 9
>
ÊÊ9 :
{
ÁÁ 	
return
ËË !
BindFactoryInternal
ËË &
<
ËË& '
	TContract
ËË' 0
,
ËË0 1
TFactory
ËË2 :
,
ËË: ;
TFactory
ËË< D
>
ËËD E
(
ËËE F
)
ËËF G
;
ËËG H
}
ÈÈ 	
public
ÎÎ %
FactoryToChoiceIdBinder
ÎÎ &
<
ÎÎ& '
	TContract
ÎÎ' 0
>
ÎÎ0 1(
BindFactoryCustomInterface
ÎÎ2 L
<
ÎÎL M
	TContract
ÎÎM V
,
ÎÎV W
TFactoryConcrete
ÎÎX h
,
ÎÎh i
TFactoryContract
ÎÎj z
>
ÎÎz {
(
ÎÎ{ |
)
ÎÎ| }
where
ÏÏ 
TFactoryConcrete
ÏÏ "
:
ÏÏ# $ 
PlaceholderFactory
ÏÏ% 7
<
ÏÏ7 8
	TContract
ÏÏ8 A
>
ÏÏA B
,
ÏÏB C
TFactoryContract
ÏÏD T
where
ÌÌ 
TFactoryContract
ÌÌ "
:
ÌÌ# $
IFactory
ÌÌ% -
{
ÓÓ 	
return
ÔÔ !
BindFactoryInternal
ÔÔ &
<
ÔÔ& '
	TContract
ÔÔ' 0
,
ÔÔ0 1
TFactoryContract
ÔÔ2 B
,
ÔÔB C
TFactoryConcrete
ÔÔD T
>
ÔÔT U
(
ÔÔU V
)
ÔÔV W
;
ÔÔW X
}
 	
public
ÚÚ 2
$MemoryPoolIdInitialSizeMaxSizeBinder
ÚÚ 3
<
ÚÚ3 4
TItemContract
ÚÚ4 A
>
ÚÚA B
BindMemoryPool
ÚÚC Q
<
ÚÚQ R
TItemContract
ÚÚR _
>
ÚÚ_ `
(
ÚÚ` a
)
ÚÚa b
{
ÛÛ 	
return
ÙÙ 
BindMemoryPool
ÙÙ !
<
ÙÙ! "
TItemContract
ÙÙ" /
,
ÙÙ/ 0

MemoryPool
ÙÙ1 ;
<
ÙÙ; <
TItemContract
ÙÙ< I
>
ÙÙI J
>
ÙÙJ K
(
ÙÙK L
)
ÙÙL M
;
ÙÙM N
}
ıı 	
public
˜˜ 2
$MemoryPoolIdInitialSizeMaxSizeBinder
˜˜ 3
<
˜˜3 4
TItemContract
˜˜4 A
>
˜˜A B
BindMemoryPool
˜˜C Q
<
˜˜Q R
TItemContract
˜˜R _
,
˜˜_ `
TPool
˜˜a f
>
˜˜f g
(
˜˜g h
)
˜˜h i
where
¯¯ 
TPool
¯¯ 
:
¯¯ 
IMemoryPool
¯¯ %
{
˘˘ 	
return
˙˙ +
BindMemoryPoolCustomInterface
˙˙ 0
<
˙˙0 1
TItemContract
˙˙1 >
,
˙˙> ?
TPool
˙˙@ E
,
˙˙E F
TPool
˙˙G L
>
˙˙L M
(
˙˙M N
)
˙˙N O
;
˙˙O P
}
˚˚ 	
public
˝˝ 2
$MemoryPoolIdInitialSizeMaxSizeBinder
˝˝ 3
<
˝˝3 4
TItemContract
˝˝4 A
>
˝˝A B+
BindMemoryPoolCustomInterface
˝˝C `
<
˝˝` a
TItemContract
˝˝a n
,
˝˝n o
TPoolConcrete
˝˝p }
,
˝˝} ~
TPoolContract˝˝ å
>˝˝å ç
(˝˝ç é
bool˝˝é í#
includeConcreteType˝˝ì ¶
=˝˝ß ®
false˝˝© Æ
)˝˝Æ Ø
where
˛˛ 
TPoolConcrete
˛˛ 
:
˛˛  !
TPoolContract
˛˛" /
,
˛˛/ 0
IMemoryPool
˛˛1 <
where
ˇˇ 
TPoolContract
ˇˇ 
:
ˇˇ  !
IMemoryPool
ˇˇ" -
{
ÄÄ 	
return
ÅÅ 3
%BindMemoryPoolCustomInterfaceInternal
ÅÅ 8
<
ÅÅ8 9
TItemContract
ÅÅ9 F
,
ÅÅF G
TPoolConcrete
ÅÅH U
,
ÅÅU V
TPoolContract
ÅÅW d
>
ÅÅd e
(
ÅÅe f!
includeConcreteType
ÅÅf y
,
ÅÅy z
StartBindingÅÅ{ á
(ÅÅá à
)ÅÅà â
)ÅÅâ ä
;ÅÅä ã
}
ÇÇ 	
internal
ÑÑ 2
$MemoryPoolIdInitialSizeMaxSizeBinder
ÑÑ 5
<
ÑÑ5 6
TItemContract
ÑÑ6 C
>
ÑÑC D2
$BindMemoryPoolCustomInterfaceNoFlush
ÑÑE i
<
ÑÑi j
TItemContract
ÑÑj w
,
ÑÑw x
TPoolConcreteÑÑy Ü
,ÑÑÜ á
TPoolContractÑÑà ï
>ÑÑï ñ
(ÑÑñ ó
boolÑÑó õ#
includeConcreteTypeÑÑú Ø
=ÑÑ∞ ±
falseÑÑ≤ ∑
)ÑÑ∑ ∏
where
ÖÖ 
TPoolConcrete
ÖÖ 
:
ÖÖ  !
TPoolContract
ÖÖ" /
,
ÖÖ/ 0
IMemoryPool
ÖÖ1 <
where
ÜÜ 
TPoolContract
ÜÜ 
:
ÜÜ  !
IMemoryPool
ÜÜ" -
{
áá 	
return
àà 3
%BindMemoryPoolCustomInterfaceInternal
àà 8
<
àà8 9
TItemContract
àà9 F
,
ààF G
TPoolConcrete
ààH U
,
ààU V
TPoolContract
ààW d
>
ààd e
(
ààe f!
includeConcreteType
ààf y
,
àày z
StartBindingàà{ á
(ààá à
falseààà ç
)ààç é
)ààé è
;ààè ê
}
ââ 	2
$MemoryPoolIdInitialSizeMaxSizeBinder
ãã ,
<
ãã, -
TItemContract
ãã- :
>
ãã: ;3
%BindMemoryPoolCustomInterfaceInternal
ãã< a
<
ããa b
TItemContract
ããb o
,
ãão p
TPoolConcrete
ããq ~
,
ãã~ 
TPoolContractããÄ ç
>ããç é
(ããé è
bool
åå !
includeConcreteType
åå $
,
åå$ %
BindStatement
åå& 3
	statement
åå4 =
)
åå= >
where
çç 
TPoolConcrete
çç 
:
çç  !
TPoolContract
çç" /
,
çç/ 0
IMemoryPool
çç1 <
where
éé 
TPoolContract
éé 
:
éé  !
IMemoryPool
éé" -
{
èè 	
var
êê 
contractTypes
êê 
=
êê 
new
êê  #
List
êê$ (
<
êê( )
Type
êê) -
>
êê- .
{
êê/ 0
typeof
êê1 7
(
êê7 8
IDisposable
êê8 C
)
êêC D
,
êêD E
typeof
êêF L
(
êêL M
TPoolContract
êêM Z
)
êêZ [
}
êê\ ]
;
êê] ^
if
íí 
(
íí !
includeConcreteType
íí #
)
íí# $
{
ìì 
contractTypes
îî 
.
îî 
Add
îî !
(
îî! "
typeof
îî" (
(
îî( )
TPoolConcrete
îî) 6
)
îî6 7
)
îî7 8
;
îî8 9
}
ïï 
var
óó 
bindInfo
óó 
=
óó 
	statement
óó $
.
óó$ %
SpawnBindInfo
óó% 2
(
óó2 3
)
óó3 4
;
óó4 5
bindInfo
ôô 
.
ôô 
ContractTypes
ôô "
.
ôô" #
AllocFreeAddRange
ôô# 4
(
ôô4 5
contractTypes
ôô5 B
)
ôôB C
;
ôôC D
bindInfo
ûû 
.
ûû 
ContractTypes
ûû "
.
ûû" #
Add
ûû# &
(
ûû& '
typeof
ûû' -
(
ûû- .
IMemoryPool
ûû. 9
)
ûû9 :
)
ûû: ;
;
ûû; <
var
†† 
factoryBindInfo
†† 
=
††  !
new
††" %
FactoryBindInfo
††& 5
(
††5 6
typeof
††6 <
(
††< =
TPoolConcrete
††= J
)
††J K
)
††K L
;
††L M
var
°° 
poolBindInfo
°° 
=
°° 
new
°° " 
MemoryPoolBindInfo
°°# 5
(
°°5 6
)
°°6 7
;
°°7 8
	statement
££ 
.
££ 
SetFinalizer
££ "
(
££" #
new
§§ (
MemoryPoolBindingFinalizer
§§ .
<
§§. /
TItemContract
§§/ <
>
§§< =
(
§§= >
bindInfo
•• 
,
•• 
factoryBindInfo
•• -
,
••- .
poolBindInfo
••/ ;
)
••; <
)
••< =
;
••= >
return
ßß 
new
ßß 2
$MemoryPoolIdInitialSizeMaxSizeBinder
ßß ;
<
ßß; <
TItemContract
ßß< I
>
ßßI J
(
ßßJ K
this
®® 
,
®® 
bindInfo
®® 
,
®® 
factoryBindInfo
®®  /
,
®®/ 0
poolBindInfo
®®1 =
)
®®= >
;
®®> ?
}
©© 	%
FactoryToChoiceIdBinder
´´ 
<
´´  
TParam1
´´  '
,
´´' (
	TContract
´´) 2
>
´´2 3!
BindFactoryInternal
´´4 G
<
´´G H
TParam1
´´H O
,
´´O P
	TContract
´´Q Z
,
´´Z [
TFactoryContract
´´\ l
,
´´l m
TFactoryConcrete
´´n ~
>
´´~ 
(´´ Ä
)´´Ä Å
where
¨¨ 
TFactoryConcrete
¨¨ "
:
¨¨# $
TFactoryContract
¨¨% 5
,
¨¨5 6
IFactory
¨¨7 ?
where
≠≠ 
TFactoryContract
≠≠ "
:
≠≠# $
IFactory
≠≠% -
{
ÆÆ 	
var
ØØ 
	statement
ØØ 
=
ØØ 
StartBinding
ØØ (
(
ØØ( )
)
ØØ) *
;
ØØ* +
var
∞∞ 
bindInfo
∞∞ 
=
∞∞ 
	statement
∞∞ $
.
∞∞$ %
SpawnBindInfo
∞∞% 2
(
∞∞2 3
)
∞∞3 4
;
∞∞4 5
bindInfo
≤≤ 
.
≤≤ 
ContractTypes
≤≤ "
.
≤≤" #
Add
≤≤# &
(
≤≤& '
typeof
≤≤' -
(
≤≤- .
TFactoryContract
≤≤. >
)
≤≤> ?
)
≤≤? @
;
≤≤@ A
var
¥¥ 
factoryBindInfo
¥¥ 
=
¥¥  !
new
¥¥" %
FactoryBindInfo
¥¥& 5
(
¥¥5 6
typeof
¥¥6 <
(
¥¥< =
TFactoryConcrete
¥¥= M
)
¥¥M N
)
¥¥N O
;
¥¥O P
	statement
∂∂ 
.
∂∂ 
SetFinalizer
∂∂ "
(
∂∂" #
new
∑∑ 0
"PlaceholderFactoryBindingFinalizer
∑∑ 6
<
∑∑6 7
	TContract
∑∑7 @
>
∑∑@ A
(
∑∑A B
bindInfo
∏∏ 
,
∏∏ 
factoryBindInfo
∏∏ -
)
∏∏- .
)
∏∏. /
;
∏∏/ 0
return
∫∫ 
new
∫∫ %
FactoryToChoiceIdBinder
∫∫ .
<
∫∫. /
TParam1
∫∫/ 6
,
∫∫6 7
	TContract
∫∫8 A
>
∫∫A B
(
∫∫B C
this
ªª 
,
ªª 
bindInfo
ªª 
,
ªª 
factoryBindInfo
ªª  /
)
ªª/ 0
;
ªª0 1
}
ºº 	
public
ææ %
FactoryToChoiceIdBinder
ææ &
<
ææ& '
TParam1
ææ' .
,
ææ. /
	TContract
ææ0 9
>
ææ9 :
BindIFactory
ææ; G
<
ææG H
TParam1
ææH O
,
ææO P
	TContract
ææQ Z
>
ææZ [
(
ææ[ \
)
ææ\ ]
{
øø 	
return
¿¿ !
BindFactoryInternal
¿¿ &
<
¿¿& '
TParam1
¡¡ 
,
¡¡ 
	TContract
¡¡ "
,
¡¡" #
IFactory
¡¡$ ,
<
¡¡, -
TParam1
¡¡- 4
,
¡¡4 5
	TContract
¡¡6 ?
>
¡¡? @
,
¡¡@ A 
PlaceholderFactory
¡¡B T
<
¡¡T U
TParam1
¡¡U \
,
¡¡\ ]
	TContract
¡¡^ g
>
¡¡g h
>
¡¡h i
(
¡¡i j
)
¡¡j k
;
¡¡k l
}
¬¬ 	
public
ƒƒ %
FactoryToChoiceIdBinder
ƒƒ &
<
ƒƒ& '
TParam1
ƒƒ' .
,
ƒƒ. /
	TContract
ƒƒ0 9
>
ƒƒ9 :
BindFactory
ƒƒ; F
<
ƒƒF G
TParam1
ƒƒG N
,
ƒƒN O
	TContract
ƒƒP Y
,
ƒƒY Z
TFactory
ƒƒ[ c
>
ƒƒc d
(
ƒƒd e
)
ƒƒe f
where
≈≈ 
TFactory
≈≈ 
:
≈≈  
PlaceholderFactory
≈≈ /
<
≈≈/ 0
TParam1
≈≈0 7
,
≈≈7 8
	TContract
≈≈9 B
>
≈≈B C
{
∆∆ 	
return
«« !
BindFactoryInternal
«« &
<
««& '
TParam1
»» 
,
»» 
	TContract
»» "
,
»»" #
TFactory
»»$ ,
,
»», -
TFactory
»». 6
>
»»6 7
(
»»7 8
)
»»8 9
;
»»9 :
}
…… 	
public
ÀÀ %
FactoryToChoiceIdBinder
ÀÀ &
<
ÀÀ& '
TParam1
ÀÀ' .
,
ÀÀ. /
	TContract
ÀÀ0 9
>
ÀÀ9 :(
BindFactoryCustomInterface
ÀÀ; U
<
ÀÀU V
TParam1
ÀÀV ]
,
ÀÀ] ^
	TContract
ÀÀ_ h
,
ÀÀh i
TFactoryConcrete
ÀÀj z
,
ÀÀz {
TFactoryContractÀÀ| å
>ÀÀå ç
(ÀÀç é
)ÀÀé è
where
ÃÃ 
TFactoryConcrete
ÃÃ "
:
ÃÃ# $ 
PlaceholderFactory
ÃÃ% 7
<
ÃÃ7 8
TParam1
ÃÃ8 ?
,
ÃÃ? @
	TContract
ÃÃA J
>
ÃÃJ K
,
ÃÃK L
TFactoryContract
ÃÃM ]
where
ÕÕ 
TFactoryContract
ÕÕ "
:
ÕÕ# $
IFactory
ÕÕ% -
{
ŒŒ 	
return
œœ !
BindFactoryInternal
œœ &
<
œœ& '
TParam1
œœ' .
,
œœ. /
	TContract
œœ0 9
,
œœ9 :
TFactoryContract
œœ; K
,
œœK L
TFactoryConcrete
œœM ]
>
œœ] ^
(
œœ^ _
)
œœ_ `
;
œœ` a
}
–– 	%
FactoryToChoiceIdBinder
““ 
<
““  
TParam1
““  '
,
““' (
TParam2
““) 0
,
““0 1
	TContract
““2 ;
>
““; <!
BindFactoryInternal
““= P
<
““P Q
TParam1
““Q X
,
““X Y
TParam2
““Z a
,
““a b
	TContract
““c l
,
““l m
TFactoryContract
““n ~
,
““~  
TFactoryConcrete““Ä ê
>““ê ë
(““ë í
)““í ì
where
”” 
TFactoryConcrete
”” "
:
””# $
TFactoryContract
””% 5
,
””5 6
IFactory
””7 ?
where
‘‘ 
TFactoryContract
‘‘ "
:
‘‘# $
IFactory
‘‘% -
{
’’ 	
var
÷÷ 
	statement
÷÷ 
=
÷÷ 
StartBinding
÷÷ (
(
÷÷( )
)
÷÷) *
;
÷÷* +
var
◊◊ 
bindInfo
◊◊ 
=
◊◊ 
	statement
◊◊ $
.
◊◊$ %
SpawnBindInfo
◊◊% 2
(
◊◊2 3
)
◊◊3 4
;
◊◊4 5
bindInfo
ŸŸ 
.
ŸŸ 
ContractTypes
ŸŸ "
.
ŸŸ" #
Add
ŸŸ# &
(
ŸŸ& '
typeof
ŸŸ' -
(
ŸŸ- .
TFactoryContract
ŸŸ. >
)
ŸŸ> ?
)
ŸŸ? @
;
ŸŸ@ A
var
€€ 
factoryBindInfo
€€ 
=
€€  !
new
€€" %
FactoryBindInfo
€€& 5
(
€€5 6
typeof
€€6 <
(
€€< =
TFactoryConcrete
€€= M
)
€€M N
)
€€N O
;
€€O P
	statement
›› 
.
›› 
SetFinalizer
›› "
(
››" #
new
ﬁﬁ 0
"PlaceholderFactoryBindingFinalizer
ﬁﬁ 6
<
ﬁﬁ6 7
	TContract
ﬁﬁ7 @
>
ﬁﬁ@ A
(
ﬁﬁA B
bindInfo
ﬂﬂ 
,
ﬂﬂ 
factoryBindInfo
ﬂﬂ -
)
ﬂﬂ- .
)
ﬂﬂ. /
;
ﬂﬂ/ 0
return
·· 
new
·· %
FactoryToChoiceIdBinder
·· .
<
··. /
TParam1
··/ 6
,
··6 7
TParam2
··8 ?
,
··? @
	TContract
··A J
>
··J K
(
··K L
this
‚‚ 
,
‚‚ 
bindInfo
‚‚ 
,
‚‚ 
factoryBindInfo
‚‚  /
)
‚‚/ 0
;
‚‚0 1
}
„„ 	
public
ÂÂ %
FactoryToChoiceIdBinder
ÂÂ &
<
ÂÂ& '
TParam1
ÂÂ' .
,
ÂÂ. /
TParam2
ÂÂ0 7
,
ÂÂ7 8
	TContract
ÂÂ9 B
>
ÂÂB C
BindIFactory
ÂÂD P
<
ÂÂP Q
TParam1
ÂÂQ X
,
ÂÂX Y
TParam2
ÂÂZ a
,
ÂÂa b
	TContract
ÂÂc l
>
ÂÂl m
(
ÂÂm n
)
ÂÂn o
{
ÊÊ 	
return
ÁÁ !
BindFactoryInternal
ÁÁ &
<
ÁÁ& '
TParam1
ËË 
,
ËË 
TParam2
ËË  
,
ËË  !
	TContract
ËË" +
,
ËË+ ,
IFactory
ËË- 5
<
ËË5 6
TParam1
ËË6 =
,
ËË= >
TParam2
ËË? F
,
ËËF G
	TContract
ËËH Q
>
ËËQ R
,
ËËR S 
PlaceholderFactory
ËËT f
<
ËËf g
TParam1
ËËg n
,
ËËn o
TParam2
ËËp w
,
ËËw x
	TContractËËy Ç
>ËËÇ É
>ËËÉ Ñ
(ËËÑ Ö
)ËËÖ Ü
;ËËÜ á
}
ÈÈ 	
public
ÎÎ %
FactoryToChoiceIdBinder
ÎÎ &
<
ÎÎ& '
TParam1
ÎÎ' .
,
ÎÎ. /
TParam2
ÎÎ0 7
,
ÎÎ7 8
	TContract
ÎÎ9 B
>
ÎÎB C
BindFactory
ÎÎD O
<
ÎÎO P
TParam1
ÎÎP W
,
ÎÎW X
TParam2
ÎÎY `
,
ÎÎ` a
	TContract
ÎÎb k
,
ÎÎk l
TFactory
ÎÎm u
>
ÎÎu v
(
ÎÎv w
)
ÎÎw x
where
ÏÏ 
TFactory
ÏÏ 
:
ÏÏ  
PlaceholderFactory
ÏÏ /
<
ÏÏ/ 0
TParam1
ÏÏ0 7
,
ÏÏ7 8
TParam2
ÏÏ9 @
,
ÏÏ@ A
	TContract
ÏÏB K
>
ÏÏK L
{
ÌÌ 	
return
ÓÓ !
BindFactoryInternal
ÓÓ &
<
ÓÓ& '
TParam1
ÔÔ 
,
ÔÔ 
TParam2
ÔÔ  
,
ÔÔ  !
	TContract
ÔÔ" +
,
ÔÔ+ ,
TFactory
ÔÔ- 5
,
ÔÔ5 6
TFactory
ÔÔ7 ?
>
ÔÔ? @
(
ÔÔ@ A
)
ÔÔA B
;
ÔÔB C
}
 	
public
ÚÚ %
FactoryToChoiceIdBinder
ÚÚ &
<
ÚÚ& '
TParam1
ÚÚ' .
,
ÚÚ. /
TParam2
ÚÚ0 7
,
ÚÚ7 8
	TContract
ÚÚ9 B
>
ÚÚB C(
BindFactoryCustomInterface
ÚÚD ^
<
ÚÚ^ _
TParam1
ÚÚ_ f
,
ÚÚf g
TParam2
ÚÚh o
,
ÚÚo p
	TContract
ÚÚq z
,
ÚÚz {
TFactoryConcreteÚÚ| å
,ÚÚå ç 
TFactoryContractÚÚé û
>ÚÚû ü
(ÚÚü †
)ÚÚ† °
where
ÛÛ 
TFactoryConcrete
ÛÛ "
:
ÛÛ# $ 
PlaceholderFactory
ÛÛ% 7
<
ÛÛ7 8
TParam1
ÛÛ8 ?
,
ÛÛ? @
TParam2
ÛÛA H
,
ÛÛH I
	TContract
ÛÛJ S
>
ÛÛS T
,
ÛÛT U
TFactoryContract
ÛÛV f
where
ÙÙ 
TFactoryContract
ÙÙ "
:
ÙÙ# $
IFactory
ÙÙ% -
{
ıı 	
return
ˆˆ !
BindFactoryInternal
ˆˆ &
<
ˆˆ& '
TParam1
ˆˆ' .
,
ˆˆ. /
TParam2
ˆˆ0 7
,
ˆˆ7 8
	TContract
ˆˆ9 B
,
ˆˆB C
TFactoryContract
ˆˆD T
,
ˆˆT U
TFactoryConcrete
ˆˆV f
>
ˆˆf g
(
ˆˆg h
)
ˆˆh i
;
ˆˆi j
}
˜˜ 	%
FactoryToChoiceIdBinder
˘˘ 
<
˘˘  
TParam1
˘˘  '
,
˘˘' (
TParam2
˘˘) 0
,
˘˘0 1
TParam3
˘˘2 9
,
˘˘9 :
	TContract
˘˘; D
>
˘˘D E!
BindFactoryInternal
˘˘F Y
<
˘˘Y Z
TParam1
˘˘Z a
,
˘˘a b
TParam2
˘˘c j
,
˘˘j k
TParam3
˘˘l s
,
˘˘s t
	TContract
˘˘u ~
,
˘˘~  
TFactoryContract˘˘Ä ê
,˘˘ê ë 
TFactoryConcrete˘˘í ¢
>˘˘¢ £
(˘˘£ §
)˘˘§ •
where
˙˙ 
TFactoryConcrete
˙˙ "
:
˙˙# $
TFactoryContract
˙˙% 5
,
˙˙5 6
IFactory
˙˙7 ?
where
˚˚ 
TFactoryContract
˚˚ "
:
˚˚# $
IFactory
˚˚% -
{
¸¸ 	
var
˝˝ 
	statement
˝˝ 
=
˝˝ 
StartBinding
˝˝ (
(
˝˝( )
)
˝˝) *
;
˝˝* +
var
˛˛ 
bindInfo
˛˛ 
=
˛˛ 
	statement
˛˛ $
.
˛˛$ %
SpawnBindInfo
˛˛% 2
(
˛˛2 3
)
˛˛3 4
;
˛˛4 5
bindInfo
ÄÄ 
.
ÄÄ 
ContractTypes
ÄÄ "
.
ÄÄ" #
Add
ÄÄ# &
(
ÄÄ& '
typeof
ÄÄ' -
(
ÄÄ- .
TFactoryContract
ÄÄ. >
)
ÄÄ> ?
)
ÄÄ? @
;
ÄÄ@ A
var
ÇÇ 
factoryBindInfo
ÇÇ 
=
ÇÇ  !
new
ÇÇ" %
FactoryBindInfo
ÇÇ& 5
(
ÇÇ5 6
typeof
ÇÇ6 <
(
ÇÇ< =
TFactoryConcrete
ÇÇ= M
)
ÇÇM N
)
ÇÇN O
;
ÇÇO P
	statement
ÑÑ 
.
ÑÑ 
SetFinalizer
ÑÑ "
(
ÑÑ" #
new
ÖÖ 0
"PlaceholderFactoryBindingFinalizer
ÖÖ 6
<
ÖÖ6 7
	TContract
ÖÖ7 @
>
ÖÖ@ A
(
ÖÖA B
bindInfo
ÜÜ 
,
ÜÜ 
factoryBindInfo
ÜÜ -
)
ÜÜ- .
)
ÜÜ. /
;
ÜÜ/ 0
return
àà 
new
àà %
FactoryToChoiceIdBinder
àà .
<
àà. /
TParam1
àà/ 6
,
àà6 7
TParam2
àà8 ?
,
àà? @
TParam3
ààA H
,
ààH I
	TContract
ààJ S
>
ààS T
(
ààT U
this
ââ 
,
ââ 
bindInfo
ââ 
,
ââ 
factoryBindInfo
ââ  /
)
ââ/ 0
;
ââ0 1
}
ää 	
public
åå %
FactoryToChoiceIdBinder
åå &
<
åå& '
TParam1
åå' .
,
åå. /
TParam2
åå0 7
,
åå7 8
TParam3
åå9 @
,
åå@ A
	TContract
ååB K
>
ååK L
BindIFactory
ååM Y
<
ååY Z
TParam1
ååZ a
,
ååa b
TParam2
ååc j
,
ååj k
TParam3
åål s
,
åås t
	TContract
ååu ~
>
åå~ 
(åå Ä
)ååÄ Å
{
çç 	
return
éé !
BindFactoryInternal
éé &
<
éé& '
TParam1
èè 
,
èè 
TParam2
èè  
,
èè  !
TParam3
èè" )
,
èè) *
	TContract
èè+ 4
,
èè4 5
IFactory
èè6 >
<
èè> ?
TParam1
èè? F
,
èèF G
TParam2
èèH O
,
èèO P
TParam3
èèQ X
,
èèX Y
	TContract
èèZ c
>
èèc d
,
èèd e 
PlaceholderFactory
èèf x
<
èèx y
TParam1èèy Ä
,èèÄ Å
TParam2èèÇ â
,èèâ ä
TParam3èèã í
,èèí ì
	TContractèèî ù
>èèù û
>èèû ü
(èèü †
)èè† °
;èè° ¢
}
êê 	
public
íí %
FactoryToChoiceIdBinder
íí &
<
íí& '
TParam1
íí' .
,
íí. /
TParam2
íí0 7
,
íí7 8
TParam3
íí9 @
,
íí@ A
	TContract
ííB K
>
ííK L
BindFactory
ííM X
<
ííX Y
TParam1
ííY `
,
íí` a
TParam2
ííb i
,
ííi j
TParam3
íík r
,
íír s
	TContract
íít }
,
íí} ~
TFactoryíí á
>ííá à
(ííà â
)ííâ ä
where
ìì 
TFactory
ìì 
:
ìì  
PlaceholderFactory
ìì /
<
ìì/ 0
TParam1
ìì0 7
,
ìì7 8
TParam2
ìì9 @
,
ìì@ A
TParam3
ììB I
,
ììI J
	TContract
ììK T
>
ììT U
{
îî 	
return
ïï !
BindFactoryInternal
ïï &
<
ïï& '
TParam1
ññ 
,
ññ 
TParam2
ññ  
,
ññ  !
TParam3
ññ" )
,
ññ) *
	TContract
ññ+ 4
,
ññ4 5
TFactory
ññ6 >
,
ññ> ?
TFactory
ññ@ H
>
ññH I
(
ññI J
)
ññJ K
;
ññK L
}
óó 	
public
ôô %
FactoryToChoiceIdBinder
ôô &
<
ôô& '
TParam1
ôô' .
,
ôô. /
TParam2
ôô0 7
,
ôô7 8
TParam3
ôô9 @
,
ôô@ A
	TContract
ôôB K
>
ôôK L(
BindFactoryCustomInterface
ôôM g
<
ôôg h
TParam1
ôôh o
,
ôôo p
TParam2
ôôq x
,
ôôx y
TParam3ôôz Å
,ôôÅ Ç
	TContractôôÉ å
,ôôå ç 
TFactoryConcreteôôé û
,ôôû ü 
TFactoryContractôô† ∞
>ôô∞ ±
(ôô± ≤
)ôô≤ ≥
where
öö 
TFactoryConcrete
öö "
:
öö# $ 
PlaceholderFactory
öö% 7
<
öö7 8
TParam1
öö8 ?
,
öö? @
TParam2
ööA H
,
ööH I
TParam3
ööJ Q
,
ööQ R
	TContract
ööS \
>
öö\ ]
,
öö] ^
TFactoryContract
öö_ o
where
õõ 
TFactoryContract
õõ "
:
õõ# $
IFactory
õõ% -
{
úú 	
return
ùù !
BindFactoryInternal
ùù &
<
ùù& '
TParam1
ùù' .
,
ùù. /
TParam2
ùù0 7
,
ùù7 8
TParam3
ùù9 @
,
ùù@ A
	TContract
ùùB K
,
ùùK L
TFactoryContract
ùùM ]
,
ùù] ^
TFactoryConcrete
ùù_ o
>
ùùo p
(
ùùp q
)
ùùq r
;
ùùr s
}
ûû 	%
FactoryToChoiceIdBinder
†† 
<
††  
TParam1
††  '
,
††' (
TParam2
††) 0
,
††0 1
TParam3
††2 9
,
††9 :
TParam4
††; B
,
††B C
	TContract
††D M
>
††M N!
BindFactoryInternal
††O b
<
††b c
TParam1
††c j
,
††j k
TParam2
††l s
,
††s t
TParam3
††u |
,
††| }
TParam4††~ Ö
,††Ö Ü
	TContract††á ê
,††ê ë 
TFactoryContract††í ¢
,††¢ £ 
TFactoryConcrete††§ ¥
>††¥ µ
(††µ ∂
)††∂ ∑
where
°° 
TFactoryConcrete
°° "
:
°°# $
TFactoryContract
°°% 5
,
°°5 6
IFactory
°°7 ?
where
¢¢ 
TFactoryContract
¢¢ "
:
¢¢# $
IFactory
¢¢% -
{
££ 	
var
§§ 
	statement
§§ 
=
§§ 
StartBinding
§§ (
(
§§( )
)
§§) *
;
§§* +
var
•• 
bindInfo
•• 
=
•• 
	statement
•• $
.
••$ %
SpawnBindInfo
••% 2
(
••2 3
)
••3 4
;
••4 5
bindInfo
ßß 
.
ßß 
ContractTypes
ßß "
.
ßß" #
Add
ßß# &
(
ßß& '
typeof
ßß' -
(
ßß- .
TFactoryContract
ßß. >
)
ßß> ?
)
ßß? @
;
ßß@ A
var
©© 
factoryBindInfo
©© 
=
©©  !
new
©©" %
FactoryBindInfo
©©& 5
(
©©5 6
typeof
©©6 <
(
©©< =
TFactoryConcrete
©©= M
)
©©M N
)
©©N O
;
©©O P
	statement
´´ 
.
´´ 
SetFinalizer
´´ "
(
´´" #
new
¨¨ 0
"PlaceholderFactoryBindingFinalizer
¨¨ 6
<
¨¨6 7
	TContract
¨¨7 @
>
¨¨@ A
(
¨¨A B
bindInfo
≠≠ 
,
≠≠ 
factoryBindInfo
≠≠ -
)
≠≠- .
)
≠≠. /
;
≠≠/ 0
return
ØØ 
new
ØØ %
FactoryToChoiceIdBinder
ØØ .
<
ØØ. /
TParam1
ØØ/ 6
,
ØØ6 7
TParam2
ØØ8 ?
,
ØØ? @
TParam3
ØØA H
,
ØØH I
TParam4
ØØJ Q
,
ØØQ R
	TContract
ØØS \
>
ØØ\ ]
(
ØØ] ^
this
∞∞ 
,
∞∞ 
bindInfo
∞∞ 
,
∞∞ 
factoryBindInfo
∞∞  /
)
∞∞/ 0
;
∞∞0 1
}
±± 	
public
≥≥ %
FactoryToChoiceIdBinder
≥≥ &
<
≥≥& '
TParam1
≥≥' .
,
≥≥. /
TParam2
≥≥0 7
,
≥≥7 8
TParam3
≥≥9 @
,
≥≥@ A
TParam4
≥≥B I
,
≥≥I J
	TContract
≥≥K T
>
≥≥T U
BindIFactory
≥≥V b
<
≥≥b c
TParam1
≥≥c j
,
≥≥j k
TParam2
≥≥l s
,
≥≥s t
TParam3
≥≥u |
,
≥≥| }
TParam4≥≥~ Ö
,≥≥Ö Ü
	TContract≥≥á ê
>≥≥ê ë
(≥≥ë í
)≥≥í ì
{
¥¥ 	
return
µµ !
BindFactoryInternal
µµ &
<
µµ& '
TParam1
∂∂ 
,
∂∂ 
TParam2
∂∂  
,
∂∂  !
TParam3
∂∂" )
,
∂∂) *
TParam4
∂∂+ 2
,
∂∂2 3
	TContract
∂∂4 =
,
∂∂= >
IFactory
∂∂? G
<
∂∂G H
TParam1
∂∂H O
,
∂∂O P
TParam2
∂∂Q X
,
∂∂X Y
TParam3
∂∂Z a
,
∂∂a b
TParam4
∂∂c j
,
∂∂j k
	TContract
∂∂l u
>
∂∂u v
,
∂∂v w!
PlaceholderFactory∂∂x ä
<∂∂ä ã
TParam1∂∂ã í
,∂∂í ì
TParam2∂∂î õ
,∂∂õ ú
TParam3∂∂ù §
,∂∂§ •
TParam4∂∂¶ ≠
,∂∂≠ Æ
	TContract∂∂Ø ∏
>∂∂∏ π
>∂∂π ∫
(∂∂∫ ª
)∂∂ª º
;∂∂º Ω
}
∑∑ 	
public
ππ %
FactoryToChoiceIdBinder
ππ &
<
ππ& '
TParam1
ππ' .
,
ππ. /
TParam2
ππ0 7
,
ππ7 8
TParam3
ππ9 @
,
ππ@ A
TParam4
ππB I
,
ππI J
	TContract
ππK T
>
ππT U
BindFactory
ππV a
<
ππa b
TParam1
ππb i
,
ππi j
TParam2
ππk r
,
ππr s
TParam3
ππt {
,
ππ{ |
TParam4ππ} Ñ
,ππÑ Ö
	TContractππÜ è
,ππè ê
TFactoryππë ô
>ππô ö
(ππö õ
)ππõ ú
where
∫∫ 
TFactory
∫∫ 
:
∫∫  
PlaceholderFactory
∫∫ /
<
∫∫/ 0
TParam1
∫∫0 7
,
∫∫7 8
TParam2
∫∫9 @
,
∫∫@ A
TParam3
∫∫B I
,
∫∫I J
TParam4
∫∫K R
,
∫∫R S
	TContract
∫∫T ]
>
∫∫] ^
{
ªª 	
return
ºº !
BindFactoryInternal
ºº &
<
ºº& '
TParam1
ΩΩ 
,
ΩΩ 
TParam2
ΩΩ  
,
ΩΩ  !
TParam3
ΩΩ" )
,
ΩΩ) *
TParam4
ΩΩ+ 2
,
ΩΩ2 3
	TContract
ΩΩ4 =
,
ΩΩ= >
TFactory
ΩΩ? G
,
ΩΩG H
TFactory
ΩΩI Q
>
ΩΩQ R
(
ΩΩR S
)
ΩΩS T
;
ΩΩT U
}
ææ 	
public
¿¿ %
FactoryToChoiceIdBinder
¿¿ &
<
¿¿& '
TParam1
¿¿' .
,
¿¿. /
TParam2
¿¿0 7
,
¿¿7 8
TParam3
¿¿9 @
,
¿¿@ A
TParam4
¿¿B I
,
¿¿I J
	TContract
¿¿K T
>
¿¿T U(
BindFactoryCustomInterface
¿¿V p
<
¿¿p q
TParam1
¿¿q x
,
¿¿x y
TParam2¿¿z Å
,¿¿Å Ç
TParam3¿¿É ä
,¿¿ä ã
TParam4¿¿å ì
,¿¿ì î
	TContract¿¿ï û
,¿¿û ü 
TFactoryConcrete¿¿† ∞
,¿¿∞ ± 
TFactoryContract¿¿≤ ¬
>¿¿¬ √
(¿¿√ ƒ
)¿¿ƒ ≈
where
¡¡ 
TFactoryConcrete
¡¡ "
:
¡¡# $ 
PlaceholderFactory
¡¡% 7
<
¡¡7 8
TParam1
¡¡8 ?
,
¡¡? @
TParam2
¡¡A H
,
¡¡H I
TParam3
¡¡J Q
,
¡¡Q R
TParam4
¡¡S Z
,
¡¡Z [
	TContract
¡¡\ e
>
¡¡e f
,
¡¡f g
TFactoryContract
¡¡h x
where
¬¬ 
TFactoryContract
¬¬ "
:
¬¬# $
IFactory
¬¬% -
{
√√ 	
return
ƒƒ !
BindFactoryInternal
ƒƒ &
<
ƒƒ& '
TParam1
ƒƒ' .
,
ƒƒ. /
TParam2
ƒƒ0 7
,
ƒƒ7 8
TParam3
ƒƒ9 @
,
ƒƒ@ A
TParam4
ƒƒB I
,
ƒƒI J
	TContract
ƒƒK T
,
ƒƒT U
TFactoryContract
ƒƒV f
,
ƒƒf g
TFactoryConcrete
ƒƒh x
>
ƒƒx y
(
ƒƒy z
)
ƒƒz {
;
ƒƒ{ |
}
≈≈ 	%
FactoryToChoiceIdBinder
«« 
<
««  
TParam1
««  '
,
««' (
TParam2
««) 0
,
««0 1
TParam3
««2 9
,
««9 :
TParam4
««; B
,
««B C
TParam5
««D K
,
««K L
	TContract
««M V
>
««V W!
BindFactoryInternal
««X k
<
««k l
TParam1
««l s
,
««s t
TParam2
««u |
,
««| }
TParam3««~ Ö
,««Ö Ü
TParam4««á é
,««é è
TParam5««ê ó
,««ó ò
	TContract««ô ¢
,««¢ £ 
TFactoryContract««§ ¥
,««¥ µ 
TFactoryConcrete««∂ ∆
>««∆ «
(««« »
)««» …
where
»» 
TFactoryConcrete
»» "
:
»»# $
TFactoryContract
»»% 5
,
»»5 6
IFactory
»»7 ?
where
…… 
TFactoryContract
…… "
:
……# $
IFactory
……% -
{
   	
var
ÀÀ 
	statement
ÀÀ 
=
ÀÀ 
StartBinding
ÀÀ (
(
ÀÀ( )
)
ÀÀ) *
;
ÀÀ* +
var
ÃÃ 
bindInfo
ÃÃ 
=
ÃÃ 
	statement
ÃÃ $
.
ÃÃ$ %
SpawnBindInfo
ÃÃ% 2
(
ÃÃ2 3
)
ÃÃ3 4
;
ÃÃ4 5
bindInfo
ŒŒ 
.
ŒŒ 
ContractTypes
ŒŒ "
.
ŒŒ" #
Add
ŒŒ# &
(
ŒŒ& '
typeof
ŒŒ' -
(
ŒŒ- .
TFactoryContract
ŒŒ. >
)
ŒŒ> ?
)
ŒŒ? @
;
ŒŒ@ A
var
–– 
factoryBindInfo
–– 
=
––  !
new
––" %
FactoryBindInfo
––& 5
(
––5 6
typeof
––6 <
(
––< =
TFactoryConcrete
––= M
)
––M N
)
––N O
;
––O P
	statement
““ 
.
““ 
SetFinalizer
““ "
(
““" #
new
”” 0
"PlaceholderFactoryBindingFinalizer
”” 6
<
””6 7
	TContract
””7 @
>
””@ A
(
””A B
bindInfo
‘‘ 
,
‘‘ 
factoryBindInfo
‘‘ -
)
‘‘- .
)
‘‘. /
;
‘‘/ 0
return
÷÷ 
new
÷÷ %
FactoryToChoiceIdBinder
÷÷ .
<
÷÷. /
TParam1
÷÷/ 6
,
÷÷6 7
TParam2
÷÷8 ?
,
÷÷? @
TParam3
÷÷A H
,
÷÷H I
TParam4
÷÷J Q
,
÷÷Q R
TParam5
÷÷S Z
,
÷÷Z [
	TContract
÷÷\ e
>
÷÷e f
(
÷÷f g
this
◊◊ 
,
◊◊ 
bindInfo
◊◊ 
,
◊◊ 
factoryBindInfo
◊◊  /
)
◊◊/ 0
;
◊◊0 1
}
ÿÿ 	
public
⁄⁄ %
FactoryToChoiceIdBinder
⁄⁄ &
<
⁄⁄& '
TParam1
⁄⁄' .
,
⁄⁄. /
TParam2
⁄⁄0 7
,
⁄⁄7 8
TParam3
⁄⁄9 @
,
⁄⁄@ A
TParam4
⁄⁄B I
,
⁄⁄I J
TParam5
⁄⁄K R
,
⁄⁄R S
	TContract
⁄⁄T ]
>
⁄⁄] ^
BindIFactory
⁄⁄_ k
<
⁄⁄k l
TParam1
⁄⁄l s
,
⁄⁄s t
TParam2
⁄⁄u |
,
⁄⁄| }
TParam3⁄⁄~ Ö
,⁄⁄Ö Ü
TParam4⁄⁄á é
,⁄⁄é è
TParam5⁄⁄ê ó
,⁄⁄ó ò
	TContract⁄⁄ô ¢
>⁄⁄¢ £
(⁄⁄£ §
)⁄⁄§ •
{
€€ 	
return
‹‹ !
BindFactoryInternal
‹‹ &
<
‹‹& '
TParam1
›› 
,
›› 
TParam2
››  
,
››  !
TParam3
››" )
,
››) *
TParam4
››+ 2
,
››2 3
TParam5
››4 ;
,
››; <
	TContract
››= F
,
››F G
IFactory
››H P
<
››P Q
TParam1
››Q X
,
››X Y
TParam2
››Z a
,
››a b
TParam3
››c j
,
››j k
TParam4
››l s
,
››s t
TParam5
››u |
,
››| }
	TContract››~ á
>››á à
,››à â"
PlaceholderFactory››ä ú
<››ú ù
TParam1››ù §
,››§ •
TParam2››¶ ≠
,››≠ Æ
TParam3››Ø ∂
,››∂ ∑
TParam4››∏ ø
,››ø ¿
TParam5››¡ »
,››» …
	TContract››  ”
>››” ‘
>››‘ ’
(››’ ÷
)››÷ ◊
;››◊ ÿ
}
ﬁﬁ 	
public
‡‡ %
FactoryToChoiceIdBinder
‡‡ &
<
‡‡& '
TParam1
‡‡' .
,
‡‡. /
TParam2
‡‡0 7
,
‡‡7 8
TParam3
‡‡9 @
,
‡‡@ A
TParam4
‡‡B I
,
‡‡I J
TParam5
‡‡K R
,
‡‡R S
	TContract
‡‡T ]
>
‡‡] ^
BindFactory
‡‡_ j
<
‡‡j k
TParam1
‡‡k r
,
‡‡r s
TParam2
‡‡t {
,
‡‡{ |
TParam3‡‡} Ñ
,‡‡Ñ Ö
TParam4‡‡Ü ç
,‡‡ç é
TParam5‡‡è ñ
,‡‡ñ ó
	TContract‡‡ò °
,‡‡° ¢
TFactory‡‡£ ´
>‡‡´ ¨
(‡‡¨ ≠
)‡‡≠ Æ
where
·· 
TFactory
·· 
:
··  
PlaceholderFactory
·· /
<
··/ 0
TParam1
··0 7
,
··7 8
TParam2
··9 @
,
··@ A
TParam3
··B I
,
··I J
TParam4
··K R
,
··R S
TParam5
··T [
,
··[ \
	TContract
··] f
>
··f g
{
‚‚ 	
return
„„ !
BindFactoryInternal
„„ &
<
„„& '
TParam1
‰‰ 
,
‰‰ 
TParam2
‰‰  
,
‰‰  !
TParam3
‰‰" )
,
‰‰) *
TParam4
‰‰+ 2
,
‰‰2 3
TParam5
‰‰4 ;
,
‰‰; <
	TContract
‰‰= F
,
‰‰F G
TFactory
‰‰H P
,
‰‰P Q
TFactory
‰‰R Z
>
‰‰Z [
(
‰‰[ \
)
‰‰\ ]
;
‰‰] ^
}
ÂÂ 	
public
ÁÁ %
FactoryToChoiceIdBinder
ÁÁ &
<
ÁÁ& '
TParam1
ÁÁ' .
,
ÁÁ. /
TParam2
ÁÁ0 7
,
ÁÁ7 8
TParam3
ÁÁ9 @
,
ÁÁ@ A
TParam4
ÁÁB I
,
ÁÁI J
TParam5
ÁÁK R
,
ÁÁR S
	TContract
ÁÁT ]
>
ÁÁ] ^(
BindFactoryCustomInterface
ÁÁ_ y
<
ÁÁy z
TParam1ÁÁz Å
,ÁÁÅ Ç
TParam2ÁÁÉ ä
,ÁÁä ã
TParam3ÁÁå ì
,ÁÁì î
TParam4ÁÁï ú
,ÁÁú ù
TParam5ÁÁû •
,ÁÁ• ¶
	TContractÁÁß ∞
,ÁÁ∞ ± 
TFactoryConcreteÁÁ≤ ¬
,ÁÁ¬ √ 
TFactoryContractÁÁƒ ‘
>ÁÁ‘ ’
(ÁÁ’ ÷
)ÁÁ÷ ◊
where
ËË 
TFactoryConcrete
ËË "
:
ËË# $ 
PlaceholderFactory
ËË% 7
<
ËË7 8
TParam1
ËË8 ?
,
ËË? @
TParam2
ËËA H
,
ËËH I
TParam3
ËËJ Q
,
ËËQ R
TParam4
ËËS Z
,
ËËZ [
TParam5
ËË\ c
,
ËËc d
	TContract
ËËe n
>
ËËn o
,
ËËo p
TFactoryContractËËq Å
where
ÈÈ 
TFactoryContract
ÈÈ "
:
ÈÈ# $
IFactory
ÈÈ% -
{
ÍÍ 	
return
ÎÎ !
BindFactoryInternal
ÎÎ &
<
ÎÎ& '
TParam1
ÎÎ' .
,
ÎÎ. /
TParam2
ÎÎ0 7
,
ÎÎ7 8
TParam3
ÎÎ9 @
,
ÎÎ@ A
TParam4
ÎÎB I
,
ÎÎI J
TParam5
ÎÎK R
,
ÎÎR S
	TContract
ÎÎT ]
,
ÎÎ] ^
TFactoryContract
ÎÎ_ o
,
ÎÎo p
TFactoryConcreteÎÎq Å
>ÎÎÅ Ç
(ÎÎÇ É
)ÎÎÉ Ñ
;ÎÎÑ Ö
}
ÏÏ 	%
FactoryToChoiceIdBinder
ÓÓ 
<
ÓÓ  
TParam1
ÓÓ  '
,
ÓÓ' (
TParam2
ÓÓ) 0
,
ÓÓ0 1
TParam3
ÓÓ2 9
,
ÓÓ9 :
TParam4
ÓÓ; B
,
ÓÓB C
TParam5
ÓÓD K
,
ÓÓK L
TParam6
ÓÓM T
,
ÓÓT U
	TContract
ÓÓV _
>
ÓÓ_ `!
BindFactoryInternal
ÓÓa t
<
ÓÓt u
TParam1
ÓÓu |
,
ÓÓ| }
TParam2ÓÓ~ Ö
,ÓÓÖ Ü
TParam3ÓÓá é
,ÓÓé è
TParam4ÓÓê ó
,ÓÓó ò
TParam5ÓÓô †
,ÓÓ† °
TParam6ÓÓ¢ ©
,ÓÓ© ™
	TContractÓÓ´ ¥
,ÓÓ¥ µ 
TFactoryContractÓÓ∂ ∆
,ÓÓ∆ « 
TFactoryConcreteÓÓ» ÿ
>ÓÓÿ Ÿ
(ÓÓŸ ⁄
)ÓÓ⁄ €
where
ÔÔ 
TFactoryConcrete
ÔÔ "
:
ÔÔ# $
TFactoryContract
ÔÔ% 5
,
ÔÔ5 6
IFactory
ÔÔ7 ?
where
 
TFactoryContract
 "
:
# $
IFactory
% -
{
ÒÒ 	
var
ÚÚ 
	statement
ÚÚ 
=
ÚÚ 
StartBinding
ÚÚ (
(
ÚÚ( )
)
ÚÚ) *
;
ÚÚ* +
var
ÛÛ 
bindInfo
ÛÛ 
=
ÛÛ 
	statement
ÛÛ $
.
ÛÛ$ %
SpawnBindInfo
ÛÛ% 2
(
ÛÛ2 3
)
ÛÛ3 4
;
ÛÛ4 5
bindInfo
ıı 
.
ıı 
ContractTypes
ıı "
.
ıı" #
Add
ıı# &
(
ıı& '
typeof
ıı' -
(
ıı- .
TFactoryContract
ıı. >
)
ıı> ?
)
ıı? @
;
ıı@ A
var
˜˜ 
factoryBindInfo
˜˜ 
=
˜˜  !
new
˜˜" %
FactoryBindInfo
˜˜& 5
(
˜˜5 6
typeof
˜˜6 <
(
˜˜< =
TFactoryConcrete
˜˜= M
)
˜˜M N
)
˜˜N O
;
˜˜O P
	statement
˘˘ 
.
˘˘ 
SetFinalizer
˘˘ "
(
˘˘" #
new
˙˙ 0
"PlaceholderFactoryBindingFinalizer
˙˙ 6
<
˙˙6 7
	TContract
˙˙7 @
>
˙˙@ A
(
˙˙A B
bindInfo
˚˚ 
,
˚˚ 
factoryBindInfo
˚˚ -
)
˚˚- .
)
˚˚. /
;
˚˚/ 0
return
˝˝ 
new
˝˝ %
FactoryToChoiceIdBinder
˝˝ .
<
˝˝. /
TParam1
˝˝/ 6
,
˝˝6 7
TParam2
˝˝8 ?
,
˝˝? @
TParam3
˝˝A H
,
˝˝H I
TParam4
˝˝J Q
,
˝˝Q R
TParam5
˝˝S Z
,
˝˝Z [
TParam6
˝˝\ c
,
˝˝c d
	TContract
˝˝e n
>
˝˝n o
(
˝˝o p
this
˛˛ 
,
˛˛ 
bindInfo
˛˛ 
,
˛˛ 
factoryBindInfo
˛˛  /
)
˛˛/ 0
;
˛˛0 1
}
ˇˇ 	
public
ÅÅ %
FactoryToChoiceIdBinder
ÅÅ &
<
ÅÅ& '
TParam1
ÅÅ' .
,
ÅÅ. /
TParam2
ÅÅ0 7
,
ÅÅ7 8
TParam3
ÅÅ9 @
,
ÅÅ@ A
TParam4
ÅÅB I
,
ÅÅI J
TParam5
ÅÅK R
,
ÅÅR S
TParam6
ÅÅT [
,
ÅÅ[ \
	TContract
ÅÅ] f
>
ÅÅf g
BindIFactory
ÅÅh t
<
ÅÅt u
TParam1
ÅÅu |
,
ÅÅ| }
TParam2ÅÅ~ Ö
,ÅÅÖ Ü
TParam3ÅÅá é
,ÅÅé è
TParam4ÅÅê ó
,ÅÅó ò
TParam5ÅÅô †
,ÅÅ† °
TParam6ÅÅ¢ ©
,ÅÅ© ™
	TContractÅÅ´ ¥
>ÅÅ¥ µ
(ÅÅµ ∂
)ÅÅ∂ ∑
{
ÇÇ 	
return
ÉÉ !
BindFactoryInternal
ÉÉ &
<
ÉÉ& '
TParam1
ÑÑ 
,
ÑÑ 
TParam2
ÑÑ  
,
ÑÑ  !
TParam3
ÑÑ" )
,
ÑÑ) *
TParam4
ÑÑ+ 2
,
ÑÑ2 3
TParam5
ÑÑ4 ;
,
ÑÑ; <
TParam6
ÑÑ= D
,
ÑÑD E
	TContract
ÑÑF O
,
ÑÑO P
IFactory
ÑÑQ Y
<
ÑÑY Z
TParam1
ÑÑZ a
,
ÑÑa b
TParam2
ÑÑc j
,
ÑÑj k
TParam3
ÑÑl s
,
ÑÑs t
TParam4
ÑÑu |
,
ÑÑ| }
TParam5ÑÑ~ Ö
,ÑÑÖ Ü
TParam6ÑÑá é
,ÑÑé è
	TContractÑÑê ô
>ÑÑô ö
,ÑÑö õ"
PlaceholderFactoryÑÑú Æ
<ÑÑÆ Ø
TParam1ÑÑØ ∂
,ÑÑ∂ ∑
TParam2ÑÑ∏ ø
,ÑÑø ¿
TParam3ÑÑ¡ »
,ÑÑ» …
TParam4ÑÑ  —
,ÑÑ— “
TParam5ÑÑ” ⁄
,ÑÑ⁄ €
TParam6ÑÑ‹ „
,ÑÑ„ ‰
	TContractÑÑÂ Ó
>ÑÑÓ Ô
>ÑÑÔ 
(ÑÑ Ò
)ÑÑÒ Ú
;ÑÑÚ Û
}
ÖÖ 	
public
áá %
FactoryToChoiceIdBinder
áá &
<
áá& '
TParam1
áá' .
,
áá. /
TParam2
áá0 7
,
áá7 8
TParam3
áá9 @
,
áá@ A
TParam4
ááB I
,
ááI J
TParam5
ááK R
,
ááR S
TParam6
ááT [
,
áá[ \
	TContract
áá] f
>
ááf g
BindFactory
ááh s
<
áás t
TParam1
áát {
,
áá{ |
TParam2áá} Ñ
,ááÑ Ö
TParam3ááÜ ç
,ááç é
TParam4ááè ñ
,ááñ ó
TParam5ááò ü
,ááü †
TParam6áá° ®
,áá® ©
	TContractáá™ ≥
,áá≥ ¥
TFactoryááµ Ω
>ááΩ æ
(ááæ ø
)ááø ¿
where
àà 
TFactory
àà 
:
àà  
PlaceholderFactory
àà /
<
àà/ 0
TParam1
àà0 7
,
àà7 8
TParam2
àà9 @
,
àà@ A
TParam3
ààB I
,
ààI J
TParam4
ààK R
,
ààR S
TParam5
ààT [
,
àà[ \
TParam6
àà] d
,
ààd e
	TContract
ààf o
>
àào p
{
ââ 	
return
ää !
BindFactoryInternal
ää &
<
ää& '
TParam1
ãã 
,
ãã 
TParam2
ãã  
,
ãã  !
TParam3
ãã" )
,
ãã) *
TParam4
ãã+ 2
,
ãã2 3
TParam5
ãã4 ;
,
ãã; <
TParam6
ãã= D
,
ããD E
	TContract
ããF O
,
ããO P
TFactory
ããQ Y
,
ããY Z
TFactory
ãã[ c
>
ããc d
(
ããd e
)
ããe f
;
ããf g
}
åå 	
public
éé %
FactoryToChoiceIdBinder
éé &
<
éé& '
TParam1
éé' .
,
éé. /
TParam2
éé0 7
,
éé7 8
TParam3
éé9 @
,
éé@ A
TParam4
ééB I
,
ééI J
TParam5
ééK R
,
ééR S
TParam6
ééT [
,
éé[ \
	TContract
éé] f
>
ééf g)
BindFactoryCustomInterfaceééh Ç
<ééÇ É
TParam1ééÉ ä
,ééä ã
TParam2ééå ì
,ééì î
TParam3ééï ú
,ééú ù
TParam4ééû •
,éé• ¶
TParam5ééß Æ
,ééÆ Ø
TParam6éé∞ ∑
,éé∑ ∏
	TContractééπ ¬
,éé¬ √ 
TFactoryConcreteééƒ ‘
,éé‘ ’ 
TFactoryContractéé÷ Ê
>ééÊ Á
(ééÁ Ë
)ééË È
where
èè 
TFactoryConcrete
èè "
:
èè# $ 
PlaceholderFactory
èè% 7
<
èè7 8
TParam1
èè8 ?
,
èè? @
TParam2
èèA H
,
èèH I
TParam3
èèJ Q
,
èèQ R
TParam4
èèS Z
,
èèZ [
TParam5
èè\ c
,
èèc d
TParam6
èèe l
,
èèl m
	TContract
èèn w
>
èèw x
,
èèx y
TFactoryContractèèz ä
where
êê 
TFactoryContract
êê "
:
êê# $
IFactory
êê% -
{
ëë 	
return
íí !
BindFactoryInternal
íí &
<
íí& '
TParam1
íí' .
,
íí. /
TParam2
íí0 7
,
íí7 8
TParam3
íí9 @
,
íí@ A
TParam4
ííB I
,
ííI J
TParam5
ííK R
,
ííR S
TParam6
ííT [
,
íí[ \
	TContract
íí] f
,
ííf g
TFactoryContract
ííh x
,
ííx y
TFactoryConcreteííz ä
>ííä ã
(ííã å
)ííå ç
;ííç é
}
ìì 	%
FactoryToChoiceIdBinder
ïï 
<
ïï  
TParam1
ïï  '
,
ïï' (
TParam2
ïï) 0
,
ïï0 1
TParam3
ïï2 9
,
ïï9 :
TParam4
ïï; B
,
ïïB C
TParam5
ïïD K
,
ïïK L
TParam6
ïïM T
,
ïïT U
TParam7
ïïV ]
,
ïï] ^
TParam8
ïï_ f
,
ïïf g
TParam9
ïïh o
,
ïïo p
TParam10
ïïq y
,
ïïy z
	TContractïï{ Ñ
>ïïÑ Ö#
BindFactoryInternalïïÜ ô
<ïïô ö
TParam1ïïö °
,ïï° ¢
TParam2ïï£ ™
,ïï™ ´
TParam3ïï¨ ≥
,ïï≥ ¥
TParam4ïïµ º
,ïïº Ω
TParam5ïïæ ≈
,ïï≈ ∆
TParam6ïï« Œ
,ïïŒ œ
TParam7ïï– ◊
,ïï◊ ÿ
TParam8ïïŸ ‡
,ïï‡ ·
TParam9ïï‚ È
,ïïÈ Í
TParam10ïïÎ Û
,ïïÛ Ù
	TContractïïı ˛
,ïï˛ ˇ 
TFactoryContractïïÄ ê
,ïïê ë 
TFactoryConcreteïïí ¢
>ïï¢ £
(ïï£ §
)ïï§ •
where
ññ 
TFactoryConcrete
ññ "
:
ññ# $
TFactoryContract
ññ% 5
,
ññ5 6
IFactory
ññ7 ?
where
óó 
TFactoryContract
óó "
:
óó# $
IFactory
óó% -
{
òò 	
var
ôô 
	statement
ôô 
=
ôô 
StartBinding
ôô (
(
ôô( )
)
ôô) *
;
ôô* +
var
öö 
bindInfo
öö 
=
öö 
	statement
öö $
.
öö$ %
SpawnBindInfo
öö% 2
(
öö2 3
)
öö3 4
;
öö4 5
bindInfo
úú 
.
úú 
ContractTypes
úú "
.
úú" #
Add
úú# &
(
úú& '
typeof
úú' -
(
úú- .
TFactoryContract
úú. >
)
úú> ?
)
úú? @
;
úú@ A
var
ûû 
factoryBindInfo
ûû 
=
ûû  !
new
ûû" %
FactoryBindInfo
ûû& 5
(
ûû5 6
typeof
ûû6 <
(
ûû< =
TFactoryConcrete
ûû= M
)
ûûM N
)
ûûN O
;
ûûO P
	statement
†† 
.
†† 
SetFinalizer
†† "
(
††" #
new
°° 0
"PlaceholderFactoryBindingFinalizer
°° 6
<
°°6 7
	TContract
°°7 @
>
°°@ A
(
°°A B
bindInfo
¢¢ 
,
¢¢ 
factoryBindInfo
¢¢ -
)
¢¢- .
)
¢¢. /
;
¢¢/ 0
return
§§ 
new
§§ %
FactoryToChoiceIdBinder
§§ .
<
§§. /
TParam1
§§/ 6
,
§§6 7
TParam2
§§8 ?
,
§§? @
TParam3
§§A H
,
§§H I
TParam4
§§J Q
,
§§Q R
TParam5
§§S Z
,
§§Z [
TParam6
§§\ c
,
§§c d
TParam7
§§e l
,
§§l m
TParam8
§§n u
,
§§u v
TParam9
§§w ~
,
§§~ 
TParam10§§Ä à
,§§à â
	TContract§§ä ì
>§§ì î
(§§î ï
this
•• 
,
•• 
bindInfo
•• 
,
•• 
factoryBindInfo
••  /
)
••/ 0
;
••0 1
}
¶¶ 	
public
®® %
FactoryToChoiceIdBinder
®® &
<
®®& '
TParam1
®®' .
,
®®. /
TParam2
®®0 7
,
®®7 8
TParam3
®®9 @
,
®®@ A
TParam4
®®B I
,
®®I J
TParam5
®®K R
,
®®R S
TParam6
®®T [
,
®®[ \
TParam7
®®] d
,
®®d e
TParam8
®®f m
,
®®m n
TParam9
®®o v
,
®®v w
TParam10®®x Ä
,®®Ä Å
	TContract®®Ç ã
>®®ã å
BindIFactory®®ç ô
<®®ô ö
TParam1®®ö °
,®®° ¢
TParam2®®£ ™
,®®™ ´
TParam3®®¨ ≥
,®®≥ ¥
TParam4®®µ º
,®®º Ω
TParam5®®æ ≈
,®®≈ ∆
TParam6®®« Œ
,®®Œ œ
TParam7®®– ◊
,®®◊ ÿ
TParam8®®Ÿ ‡
,®®‡ ·
TParam9®®‚ È
,®®È Í
TParam10®®Î Û
,®®Û Ù
	TContract®®ı ˛
>®®˛ ˇ
(®®ˇ Ä
)®®Ä Å
{
©© 	
return
™™ !
BindFactoryInternal
™™ &
<
™™& '
TParam1
´´ 
,
´´ 
TParam2
´´  
,
´´  !
TParam3
´´" )
,
´´) *
TParam4
´´+ 2
,
´´2 3
TParam5
´´4 ;
,
´´; <
TParam6
´´= D
,
´´D E
TParam7
´´F M
,
´´M N
TParam8
´´O V
,
´´V W
TParam9
´´X _
,
´´_ `
TParam10
´´a i
,
´´i j
	TContract
´´k t
,
´´t u
IFactory
´´v ~
<
´´~ 
TParam1´´ Ü
,´´Ü á
TParam2´´à è
,´´è ê
TParam3´´ë ò
,´´ò ô
TParam4´´ö °
,´´° ¢
TParam5´´£ ™
,´´™ ´
TParam6´´¨ ≥
,´´≥ ¥
TParam7´´µ º
,´´º Ω
TParam8´´æ ≈
,´´≈ ∆
TParam9´´« Œ
,´´Œ œ
TParam10´´– ÿ
,´´ÿ Ÿ
	TContract´´⁄ „
>´´„ ‰
,´´‰ Â"
PlaceholderFactory´´Ê ¯
<´´¯ ˘
TParam1´´˘ Ä
,´´Ä Å
TParam2´´Ç â
,´´â ä
TParam3´´ã í
,´´í ì
TParam4´´î õ
,´´õ ú
TParam5´´ù §
,´´§ •
TParam6´´¶ ≠
,´´≠ Æ
TParam7´´Ø ∂
,´´∂ ∑
TParam8´´∏ ø
,´´ø ¿
TParam9´´¡ »
,´´» …
TParam10´´  “
,´´“ ”
	TContract´´‘ ›
>´´› ﬁ
>´´ﬁ ﬂ
(´´ﬂ ‡
)´´‡ ·
;´´· ‚
}
¨¨ 	
public
ÆÆ %
FactoryToChoiceIdBinder
ÆÆ &
<
ÆÆ& '
TParam1
ÆÆ' .
,
ÆÆ. /
TParam2
ÆÆ0 7
,
ÆÆ7 8
TParam3
ÆÆ9 @
,
ÆÆ@ A
TParam4
ÆÆB I
,
ÆÆI J
TParam5
ÆÆK R
,
ÆÆR S
TParam6
ÆÆT [
,
ÆÆ[ \
TParam7
ÆÆ] d
,
ÆÆd e
TParam8
ÆÆf m
,
ÆÆm n
TParam9
ÆÆo v
,
ÆÆv w
TParam10ÆÆx Ä
,ÆÆÄ Å
	TContractÆÆÇ ã
>ÆÆã å
BindFactoryÆÆç ò
<ÆÆò ô
TParam1ÆÆô †
,ÆÆ† °
TParam2ÆÆ¢ ©
,ÆÆ© ™
TParam3ÆÆ´ ≤
,ÆÆ≤ ≥
TParam4ÆÆ¥ ª
,ÆÆª º
TParam5ÆÆΩ ƒ
,ÆÆƒ ≈
TParam6ÆÆ∆ Õ
,ÆÆÕ Œ
TParam7ÆÆœ ÷
,ÆÆ÷ ◊
TParam8ÆÆÿ ﬂ
,ÆÆﬂ ‡
TParam9ÆÆ· Ë
,ÆÆË È
TParam10ÆÆÍ Ú
,ÆÆÚ Û
	TContractÆÆÙ ˝
,ÆÆ˝ ˛
TFactoryÆÆˇ á
>ÆÆá à
(ÆÆà â
)ÆÆâ ä
where
ØØ 
TFactory
ØØ 
:
ØØ  
PlaceholderFactory
ØØ /
<
ØØ/ 0
TParam1
ØØ0 7
,
ØØ7 8
TParam2
ØØ9 @
,
ØØ@ A
TParam3
ØØB I
,
ØØI J
TParam4
ØØK R
,
ØØR S
TParam5
ØØT [
,
ØØ[ \
TParam6
ØØ] d
,
ØØd e
TParam7
ØØf m
,
ØØm n
TParam8
ØØo v
,
ØØv w
TParam9
ØØx 
,ØØ Ä
TParam10ØØÅ â
,ØØâ ä
	TContractØØã î
>ØØî ï
{
∞∞ 	
return
±± !
BindFactoryInternal
±± &
<
±±& '
TParam1
≤≤ 
,
≤≤ 
TParam2
≤≤  
,
≤≤  !
TParam3
≤≤" )
,
≤≤) *
TParam4
≤≤+ 2
,
≤≤2 3
TParam5
≤≤4 ;
,
≤≤; <
TParam6
≤≤= D
,
≤≤D E
TParam7
≤≤F M
,
≤≤M N
TParam8
≤≤O V
,
≤≤V W
TParam9
≤≤X _
,
≤≤_ `
TParam10
≤≤a i
,
≤≤i j
	TContract
≤≤k t
,
≤≤t u
TFactory
≤≤v ~
,
≤≤~ 
TFactory≤≤Ä à
>≤≤à â
(≤≤â ä
)≤≤ä ã
;≤≤ã å
}
≥≥ 	
public
µµ %
FactoryToChoiceIdBinder
µµ &
<
µµ& '
TParam1
µµ' .
,
µµ. /
TParam2
µµ0 7
,
µµ7 8
TParam3
µµ9 @
,
µµ@ A
TParam4
µµB I
,
µµI J
TParam5
µµK R
,
µµR S
TParam6
µµT [
,
µµ[ \
TParam7
µµ] d
,
µµd e
TParam8
µµf m
,
µµm n
TParam9
µµo v
,
µµv w
TParam10µµx Ä
,µµÄ Å
	TContractµµÇ ã
>µµã å*
BindFactoryCustomInterfaceµµç ß
<µµß ®
TParam1µµ® Ø
,µµØ ∞
TParam2µµ± ∏
,µµ∏ π
TParam3µµ∫ ¡
,µµ¡ ¬
TParam4µµ√  
,µµ  À
TParam5µµÃ ”
,µµ” ‘
TParam6µµ’ ‹
,µµ‹ ›
TParam7µµﬁ Â
,µµÂ Ê
TParam8µµÁ Ó
,µµÓ Ô
TParam9µµ ˜
,µµ˜ ¯
TParam10µµ˘ Å
,µµÅ Ç
	TContractµµÉ å
,µµå ç 
TFactoryConcreteµµé û
,µµû ü 
TFactoryContractµµ† ∞
>µµ∞ ±
(µµ± ≤
)µµ≤ ≥
where
∂∂ 
TFactoryConcrete
∂∂ "
:
∂∂# $ 
PlaceholderFactory
∂∂% 7
<
∂∂7 8
TParam1
∂∂8 ?
,
∂∂? @
TParam2
∂∂A H
,
∂∂H I
TParam3
∂∂J Q
,
∂∂Q R
TParam4
∂∂S Z
,
∂∂Z [
TParam5
∂∂\ c
,
∂∂c d
TParam6
∂∂e l
,
∂∂l m
TParam7
∂∂n u
,
∂∂u v
TParam8
∂∂w ~
,
∂∂~ 
TParam9∂∂Ä á
,∂∂á à
TParam10∂∂â ë
,∂∂ë í
	TContract∂∂ì ú
>∂∂ú ù
,∂∂ù û 
TFactoryContract∂∂ü Ø
where
∑∑ 
TFactoryContract
∑∑ "
:
∑∑# $
IFactory
∑∑% -
{
∏∏ 	
return
ππ !
BindFactoryInternal
ππ &
<
ππ& '
TParam1
ππ' .
,
ππ. /
TParam2
ππ0 7
,
ππ7 8
TParam3
ππ9 @
,
ππ@ A
TParam4
ππB I
,
ππI J
TParam5
ππK R
,
ππR S
TParam6
ππT [
,
ππ[ \
TParam7
ππ] d
,
ππd e
TParam8
ππf m
,
ππm n
TParam9
ππo v
,
ππv w
TParam10ππx Ä
,ππÄ Å
	TContractππÇ ã
,ππã å 
TFactoryContractππç ù
,ππù û 
TFactoryConcreteππü Ø
>ππØ ∞
(ππ∞ ±
)ππ± ≤
;ππ≤ ≥
}
∫∫ 	
public
ºº 
T
ºº !
InstantiateExplicit
ºº $
<
ºº$ %
T
ºº% &
>
ºº& '
(
ºº' (
List
ºº( ,
<
ºº, -
TypeValuePair
ºº- :
>
ºº: ;
	extraArgs
ºº< E
)
ººE F
{
ΩΩ 	
return
ææ 
(
ææ 
T
ææ 
)
ææ !
InstantiateExplicit
ææ )
(
ææ) *
typeof
ææ* 0
(
ææ0 1
T
ææ1 2
)
ææ2 3
,
ææ3 4
	extraArgs
ææ5 >
)
ææ> ?
;
ææ? @
}
øø 	
public
¡¡ 
object
¡¡ !
InstantiateExplicit
¡¡ )
(
¡¡) *
Type
¡¡* .
concreteType
¡¡/ ;
,
¡¡; <
List
¡¡= A
<
¡¡A B
TypeValuePair
¡¡B O
>
¡¡O P
	extraArgs
¡¡Q Z
)
¡¡Z [
{
¬¬ 	
bool
√√ 

autoInject
√√ 
=
√√ 
true
√√ "
;
√√" #
return
≈≈ !
InstantiateExplicit
≈≈ &
(
≈≈& '
concreteType
∆∆ 
,
∆∆ 

autoInject
«« 
,
«« 
	extraArgs
»» 
,
»» 
new
…… 
InjectContext
…… !
(
……! "
this
……" &
,
……& '
concreteType
……( 4
,
……4 5
null
……6 :
)
……: ;
,
……; <
null
   
)
   
;
   
}
ÀÀ 	
public
ÕÕ 
object
ÕÕ !
InstantiateExplicit
ÕÕ )
(
ÕÕ) *
Type
ÕÕ* .
concreteType
ÕÕ/ ;
,
ÕÕ; <
bool
ÕÕ= A

autoInject
ÕÕB L
,
ÕÕL M
List
ÕÕN R
<
ÕÕR S
TypeValuePair
ÕÕS `
>
ÕÕ` a
	extraArgs
ÕÕb k
,
ÕÕk l
InjectContext
ÕÕm z
contextÕÕ{ Ç
,ÕÕÇ É
objectÕÕÑ ä"
concreteIdentifierÕÕã ù
)ÕÕù û
{
ŒŒ 	
{
““ 
if
”” 
(
”” 
IsValidating
””  
)
””  !
{
‘‘ 
if
’’ 
(
’’ 
	_settings
’’ !
.
’’! "%
ValidationErrorResponse
’’" 9
==
’’: <&
ValidationErrorResponses
’’= U
.
’’U V
Throw
’’V [
)
’’[ \
{
÷÷ 
return
◊◊ !
InstantiateInternal
◊◊ 2
(
◊◊2 3
concreteType
◊◊3 ?
,
◊◊? @

autoInject
◊◊A K
,
◊◊K L
	extraArgs
◊◊M V
,
◊◊V W
context
◊◊X _
,
◊◊_ ` 
concreteIdentifier
◊◊a s
)
◊◊s t
;
◊◊t u
}
ÿÿ 
try
‹‹ 
{
›› 
return
ﬁﬁ !
InstantiateInternal
ﬁﬁ 2
(
ﬁﬁ2 3
concreteType
ﬁﬁ3 ?
,
ﬁﬁ? @

autoInject
ﬁﬁA K
,
ﬁﬁK L
	extraArgs
ﬁﬁM V
,
ﬁﬁV W
context
ﬁﬁX _
,
ﬁﬁ_ ` 
concreteIdentifier
ﬁﬁa s
)
ﬁﬁs t
;
ﬁﬁt u
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ $
e
‡‡% &
)
‡‡& '
{
·· 
Log
‚‚ 
.
‚‚ 
ErrorException
‚‚ *
(
‚‚* +
e
‚‚+ ,
)
‚‚, -
;
‚‚- .
return
„„ 
new
„„ "
ValidationMarker
„„# 3
(
„„3 4
concreteType
„„4 @
,
„„@ A
true
„„B F
)
„„F G
;
„„G H
}
‰‰ 
}
ÂÂ 
return
ÁÁ !
InstantiateInternal
ÁÁ *
(
ÁÁ* +
concreteType
ÁÁ+ 7
,
ÁÁ7 8

autoInject
ÁÁ9 C
,
ÁÁC D
	extraArgs
ÁÁE N
,
ÁÁN O
context
ÁÁP W
,
ÁÁW X 
concreteIdentifier
ÁÁY k
)
ÁÁk l
;
ÁÁl m
}
ËË 
}
ÈÈ 	
public
ÏÏ 
	Component
ÏÏ *
InstantiateComponentExplicit
ÏÏ 5
(
ÏÏ5 6
Type
ÌÌ 
componentType
ÌÌ 
,
ÌÌ 

GameObject
ÌÌ  *

gameObject
ÌÌ+ 5
,
ÌÌ5 6
List
ÌÌ7 ;
<
ÌÌ; <
TypeValuePair
ÌÌ< I
>
ÌÌI J
	extraArgs
ÌÌK T
)
ÌÌT U
{
ÓÓ 	
Assert
ÔÔ 
.
ÔÔ 
That
ÔÔ 
(
ÔÔ 
componentType
ÔÔ %
.
ÔÔ% &
DerivesFrom
ÔÔ& 1
<
ÔÔ1 2
	Component
ÔÔ2 ;
>
ÔÔ; <
(
ÔÔ< =
)
ÔÔ= >
)
ÔÔ> ?
;
ÔÔ? @
FlushBindings
ÒÒ 
(
ÒÒ 
)
ÒÒ 
;
ÒÒ 
var
ÛÛ 
monoBehaviour
ÛÛ 
=
ÛÛ 

gameObject
ÛÛ  *
.
ÛÛ* +
AddComponent
ÛÛ+ 7
(
ÛÛ7 8
componentType
ÛÛ8 E
)
ÛÛE F
;
ÛÛF G
InjectExplicit
ÙÙ 
(
ÙÙ 
monoBehaviour
ÙÙ (
,
ÙÙ( )
	extraArgs
ÙÙ* 3
)
ÙÙ3 4
;
ÙÙ4 5
return
ıı 
monoBehaviour
ıı  
;
ıı  !
}
ˆˆ 	
public
¯¯ 
object
¯¯ 9
+InstantiateScriptableObjectResourceExplicit
¯¯ A
(
¯¯A B
Type
˘˘ "
scriptableObjectType
˘˘ %
,
˘˘% &
string
˘˘' -
resourcePath
˘˘. :
,
˘˘: ;
List
˘˘< @
<
˘˘@ A
TypeValuePair
˘˘A N
>
˘˘N O
	extraArgs
˘˘P Y
)
˘˘Y Z
{
˙˙ 	
var
˚˚ 
objects
˚˚ 
=
˚˚ 
	Resources
˚˚ #
.
˚˚# $
LoadAll
˚˚$ +
(
˚˚+ ,
resourcePath
˚˚, 8
,
˚˚8 9"
scriptableObjectType
˚˚: N
)
˚˚N O
;
˚˚O P
Assert
˝˝ 
.
˝˝ 
That
˝˝ 
(
˝˝ 
objects
˝˝ 
.
˝˝  
Length
˝˝  &
>
˝˝' (
$num
˝˝) *
,
˝˝* +
$str
˛˛ G
,
˛˛G H
resourcePath
˛˛I U
,
˛˛U V"
scriptableObjectType
˛˛W k
)
˛˛k l
;
˛˛l m
Assert
ÄÄ 
.
ÄÄ 
That
ÄÄ 
(
ÄÄ 
objects
ÄÄ 
.
ÄÄ  
Length
ÄÄ  &
==
ÄÄ' )
$num
ÄÄ* +
,
ÄÄ+ ,
$str
ÅÅ j
,
ÅÅj k
resourcePath
ÅÅl x
,
ÅÅx y#
scriptableObjectTypeÅÅz é
)ÅÅé è
;ÅÅè ê
var
ÉÉ 
newObj
ÉÉ 
=
ÉÉ 
ScriptableObject
ÉÉ )
.
ÉÉ) *
Instantiate
ÉÉ* 5
(
ÉÉ5 6
objects
ÉÉ6 =
.
ÉÉ= >
Single
ÉÉ> D
(
ÉÉD E
)
ÉÉE F
)
ÉÉF G
;
ÉÉG H
InjectExplicit
ÖÖ 
(
ÖÖ 
newObj
ÖÖ !
,
ÖÖ! "
	extraArgs
ÖÖ# ,
)
ÖÖ, -
;
ÖÖ- .
return
áá 
newObj
áá 
;
áá 
}
àà 	
public
åå 
object
åå ;
-InstantiatePrefabResourceForComponentExplicit
åå C
(
ååC D
Type
çç 
componentType
çç 
,
çç 
string
çç  &
resourcePath
çç' 3
,
çç3 4
List
çç5 9
<
çç9 :
TypeValuePair
çç: G
>
ççG H
	extraArgs
ççI R
,
ççR S*
GameObjectCreationParameters
éé (
creationInfo
éé) 5
)
éé5 6
{
èè 	
return
êê ;
-InstantiatePrefabResourceForComponentExplicit
êê @
(
êê@ A
componentType
ëë 
,
ëë 
resourcePath
ëë +
,
ëë+ ,
	extraArgs
ëë- 6
,
ëë6 7
new
ëë8 ;
InjectContext
ëë< I
(
ëëI J
this
ëëJ N
,
ëëN O
componentType
ëëP ]
,
ëë] ^
null
ëë_ c
)
ëëc d
,
ëëd e
null
ëëf j
,
ëëj k
creationInfo
ëël x
)
ëëx y
;
ëëy z
}
íí 	
public
îî 
object
îî ;
-InstantiatePrefabResourceForComponentExplicit
îî C
(
îîC D
Type
ïï 
componentType
ïï 
,
ïï 
string
ïï  &
resourcePath
ïï' 3
,
ïï3 4
List
ïï5 9
<
ïï9 :
TypeValuePair
ïï: G
>
ïïG H
	extraArgs
ïïI R
,
ïïR S
InjectContext
ïïT a
context
ïïb i
,
ïïi j
object
ïïk q!
concreteIdentifierïïr Ñ
,ïïÑ Ö*
GameObjectCreationParameters
ññ (
creationInfo
ññ) 5
)
ññ5 6
{
óó 	
var
òò 
prefab
òò 
=
òò 
(
òò 

GameObject
òò $
)
òò$ %
	Resources
òò% .
.
òò. /
Load
òò/ 3
(
òò3 4
resourcePath
òò4 @
)
òò@ A
;
òòA B
Assert
ôô 
.
ôô 
	IsNotNull
ôô 
(
ôô 
prefab
ôô #
,
ôô# $
$str
öö B
.
ööB C
Fmt
ööC F
(
ööF G
resourcePath
ööG S
)
ööS T
)
ööT U
;
ööU V
return
õõ 3
%InstantiatePrefabForComponentExplicit
õõ 8
(
õõ8 9
componentType
úú 
,
úú 
prefab
úú %
,
úú% &
	extraArgs
úú' 0
,
úú0 1
context
úú2 9
,
úú9 : 
concreteIdentifier
úú; M
,
úúM N
creationInfo
úúO [
)
úú[ \
;
úú\ ]
}
ùù 	
public
üü 
object
üü 3
%InstantiatePrefabForComponentExplicit
üü ;
(
üü; <
Type
†† 
componentType
†† 
,
†† 
UnityEngine
††  +
.
††+ ,
Object
††, 2
prefab
††3 9
,
††9 :
List
°° 
<
°° 
TypeValuePair
°° 
>
°° 
	extraArgs
°°  )
)
°°) *
{
¢¢ 	
return
££ 3
%InstantiatePrefabForComponentExplicit
££ 8
(
££8 9
componentType
§§ 
,
§§ 
prefab
§§ %
,
§§% &
	extraArgs
§§' 0
,
§§0 1*
GameObjectCreationParameters
§§2 N
.
§§N O
Default
§§O V
)
§§V W
;
§§W X
}
•• 	
public
ßß 
object
ßß 3
%InstantiatePrefabForComponentExplicit
ßß ;
(
ßß; <
Type
®® 
componentType
®® 
,
®® 
UnityEngine
®®  +
.
®®+ ,
Object
®®, 2
prefab
®®3 9
,
®®9 :
List
©© 
<
©© 
TypeValuePair
©© 
>
©© 
	extraArgs
©©  )
,
©©) **
GameObjectCreationParameters
©©+ G 
gameObjectBindInfo
©©H Z
)
©©Z [
{
™™ 	
return
´´ 3
%InstantiatePrefabForComponentExplicit
´´ 8
(
´´8 9
componentType
¨¨ 
,
¨¨ 
prefab
¨¨ %
,
¨¨% &
	extraArgs
¨¨' 0
,
¨¨0 1
new
¨¨2 5
InjectContext
¨¨6 C
(
¨¨C D
this
¨¨D H
,
¨¨H I
componentType
¨¨J W
,
¨¨W X
null
¨¨Y ]
)
¨¨] ^
,
¨¨^ _
null
¨¨` d
,
¨¨d e 
gameObjectBindInfo
¨¨f x
)
¨¨x y
;
¨¨y z
}
≠≠ 	
public
±± 
object
±± 3
%InstantiatePrefabForComponentExplicit
±± ;
(
±±; <
Type
≤≤ 
componentType
≤≤ 
,
≤≤ 
UnityEngine
≤≤  +
.
≤≤+ ,
Object
≤≤, 2
prefab
≤≤3 9
,
≤≤9 :
List
≥≥ 
<
≥≥ 
TypeValuePair
≥≥ 
>
≥≥ 
	extraArgs
≥≥  )
,
≥≥) *
InjectContext
≥≥+ 8
context
≥≥9 @
,
≥≥@ A
object
≥≥B H 
concreteIdentifier
≥≥I [
,
≥≥[ \*
GameObjectCreationParameters
≥≥] y!
gameObjectBindInfo≥≥z å
)≥≥å ç
{
¥¥ 	
Assert
µµ 
.
µµ 
That
µµ 
(
µµ 
!
µµ $
AssertOnNewGameObjects
µµ /
,
µµ/ 0
$str
∂∂ N
)
∂∂N O
;
∂∂O P
FlushBindings
∏∏ 
(
∏∏ 
)
∏∏ 
;
∏∏ 
Assert
∫∫ 
.
∫∫ 
That
∫∫ 
(
∫∫ 
componentType
∫∫ %
.
∫∫% &
IsInterface
∫∫& 1
(
∫∫1 2
)
∫∫2 3
||
∫∫4 6
componentType
∫∫7 D
.
∫∫D E
DerivesFrom
∫∫E P
<
∫∫P Q
	Component
∫∫Q Z
>
∫∫Z [
(
∫∫[ \
)
∫∫\ ]
,
∫∫] ^
$str
ªª J
,
ªªJ K
componentType
ªªL Y
)
ªªY Z
;
ªªZ [
bool
ΩΩ 
shouldMakeActive
ΩΩ !
;
ΩΩ! "
var
ææ 
gameObj
ææ 
=
ææ #
CreateAndParentPrefab
ææ /
(
ææ/ 0
prefab
ææ0 6
,
ææ6 7 
gameObjectBindInfo
ææ8 J
,
ææJ K
context
ææL S
,
ææS T
out
ææU X
shouldMakeActive
ææY i
)
ææi j
;
ææj k
var
¿¿ 
	component
¿¿ 
=
¿¿ 2
$InjectGameObjectForComponentExplicit
¿¿ @
(
¿¿@ A
gameObj
¡¡ 
,
¡¡ 
componentType
¡¡ &
,
¡¡& '
	extraArgs
¡¡( 1
,
¡¡1 2
context
¡¡3 :
,
¡¡: ; 
concreteIdentifier
¡¡< N
)
¡¡N O
;
¡¡O P
if
√√ 
(
√√ 
shouldMakeActive
√√  
&&
√√! #
!
√√$ %
IsValidating
√√% 1
)
√√1 2
{
ƒƒ 
{
»» 
gameObj
…… 
.
…… 
	SetActive
…… %
(
……% &
true
……& *
)
……* +
;
……+ ,
}
   
}
ÀÀ 
return
ÕÕ 
	component
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
”” 
void
””  
BindExecutionOrder
”” &
<
””& '
T
””' (
>
””( )
(
””) *
int
””* -
order
””. 3
)
””3 4
{
‘‘ 	 
BindExecutionOrder
’’ 
(
’’ 
typeof
’’ %
(
’’% &
T
’’& '
)
’’' (
,
’’( )
order
’’* /
)
’’/ 0
;
’’0 1
}
÷÷ 	
public
ÿÿ 
void
ÿÿ  
BindExecutionOrder
ÿÿ &
(
ÿÿ& '
Type
ÿÿ' +
type
ÿÿ, 0
,
ÿÿ0 1
int
ÿÿ2 5
order
ÿÿ6 ;
)
ÿÿ; <
{
ŸŸ 	
Assert
⁄⁄ 
.
⁄⁄ 
That
⁄⁄ 
(
⁄⁄ 
type
⁄⁄ 
.
⁄⁄ 
DerivesFrom
⁄⁄ (
<
⁄⁄( )
	ITickable
⁄⁄) 2
>
⁄⁄2 3
(
⁄⁄3 4
)
⁄⁄4 5
||
⁄⁄6 8
type
⁄⁄9 =
.
⁄⁄= >
DerivesFrom
⁄⁄> I
<
⁄⁄I J
IInitializable
⁄⁄J X
>
⁄⁄X Y
(
⁄⁄Y Z
)
⁄⁄Z [
||
⁄⁄\ ^
type
⁄⁄_ c
.
⁄⁄c d
DerivesFrom
⁄⁄d o
<
⁄⁄o p
IDisposable
⁄⁄p {
>
⁄⁄{ |
(
⁄⁄| }
)
⁄⁄} ~
||⁄⁄ Å
type⁄⁄Ç Ü
.⁄⁄Ü á
DerivesFrom⁄⁄á í
<⁄⁄í ì
ILateDisposable⁄⁄ì ¢
>⁄⁄¢ £
(⁄⁄£ §
)⁄⁄§ •
||⁄⁄¶ ®
type⁄⁄© ≠
.⁄⁄≠ Æ
DerivesFrom⁄⁄Æ π
<⁄⁄π ∫
IFixedTickable⁄⁄∫ »
>⁄⁄» …
(⁄⁄…  
)⁄⁄  À
||⁄⁄Ã Œ
type⁄⁄œ ”
.⁄⁄” ‘
DerivesFrom⁄⁄‘ ﬂ
<⁄⁄ﬂ ‡
ILateTickable⁄⁄‡ Ì
>⁄⁄Ì Ó
(⁄⁄Ó Ô
)⁄⁄Ô 
||⁄⁄Ò Û
type⁄⁄Ù ¯
.⁄⁄¯ ˘
DerivesFrom⁄⁄˘ Ñ
<⁄⁄Ñ Ö
	IPoolable⁄⁄Ö é
>⁄⁄é è
(⁄⁄è ê
)⁄⁄ê ë
,⁄⁄ë í
$str€€ ¥
,€€¥ µ
type€€∂ ∫
)€€∫ ª
;€€ª º
if
›› 
(
›› 
type
›› 
.
›› 
DerivesFrom
››  
<
››  !
	ITickable
››! *
>
››* +
(
››+ ,
)
››, -
)
››- .
{
ﬁﬁ (
BindTickableExecutionOrder
ﬂﬂ *
(
ﬂﬂ* +
type
ﬂﬂ+ /
,
ﬂﬂ/ 0
order
ﬂﬂ1 6
)
ﬂﬂ6 7
;
ﬂﬂ7 8
}
‡‡ 
if
‚‚ 
(
‚‚ 
type
‚‚ 
.
‚‚ 
DerivesFrom
‚‚  
<
‚‚  !
IInitializable
‚‚! /
>
‚‚/ 0
(
‚‚0 1
)
‚‚1 2
)
‚‚2 3
{
„„ -
BindInitializableExecutionOrder
‰‰ /
(
‰‰/ 0
type
‰‰0 4
,
‰‰4 5
order
‰‰6 ;
)
‰‰; <
;
‰‰< =
}
ÂÂ 
if
ÁÁ 
(
ÁÁ 
type
ÁÁ 
.
ÁÁ 
DerivesFrom
ÁÁ  
<
ÁÁ  !
IDisposable
ÁÁ! ,
>
ÁÁ, -
(
ÁÁ- .
)
ÁÁ. /
)
ÁÁ/ 0
{
ËË *
BindDisposableExecutionOrder
ÈÈ ,
(
ÈÈ, -
type
ÈÈ- 1
,
ÈÈ1 2
order
ÈÈ3 8
)
ÈÈ8 9
;
ÈÈ9 :
}
ÍÍ 
if
ÏÏ 
(
ÏÏ 
type
ÏÏ 
.
ÏÏ 
DerivesFrom
ÏÏ  
<
ÏÏ  !
ILateDisposable
ÏÏ! 0
>
ÏÏ0 1
(
ÏÏ1 2
)
ÏÏ2 3
)
ÏÏ3 4
{
ÌÌ .
 BindLateDisposableExecutionOrder
ÓÓ 0
(
ÓÓ0 1
type
ÓÓ1 5
,
ÓÓ5 6
order
ÓÓ7 <
)
ÓÓ< =
;
ÓÓ= >
}
ÔÔ 
if
ÒÒ 
(
ÒÒ 
type
ÒÒ 
.
ÒÒ 
DerivesFrom
ÒÒ  
<
ÒÒ  !
IFixedTickable
ÒÒ! /
>
ÒÒ/ 0
(
ÒÒ0 1
)
ÒÒ1 2
)
ÒÒ2 3
{
ÚÚ -
BindFixedTickableExecutionOrder
ÛÛ /
(
ÛÛ/ 0
type
ÛÛ0 4
,
ÛÛ4 5
order
ÛÛ6 ;
)
ÛÛ; <
;
ÛÛ< =
}
ÙÙ 
if
ˆˆ 
(
ˆˆ 
type
ˆˆ 
.
ˆˆ 
DerivesFrom
ˆˆ  
<
ˆˆ  !
ILateTickable
ˆˆ! .
>
ˆˆ. /
(
ˆˆ/ 0
)
ˆˆ0 1
)
ˆˆ1 2
{
˜˜ ,
BindLateTickableExecutionOrder
¯¯ .
(
¯¯. /
type
¯¯/ 3
,
¯¯3 4
order
¯¯5 :
)
¯¯: ;
;
¯¯; <
}
˘˘ 
if
˚˚ 
(
˚˚ 
type
˚˚ 
.
˚˚ 
DerivesFrom
˚˚  
<
˚˚  !
	IPoolable
˚˚! *
>
˚˚* +
(
˚˚+ ,
)
˚˚, -
)
˚˚- .
{
¸¸ (
BindPoolableExecutionOrder
˝˝ *
(
˝˝* +
type
˝˝+ /
,
˝˝/ 0
order
˝˝1 6
)
˝˝6 7
;
˝˝7 8
}
˛˛ 
}
ˇˇ 	
public
ÅÅ 
CopyNonLazyBinder
ÅÅ  (
BindTickableExecutionOrder
ÅÅ! ;
<
ÅÅ; <
T
ÅÅ< =
>
ÅÅ= >
(
ÅÅ> ?
int
ÅÅ? B
order
ÅÅC H
)
ÅÅH I
where
ÇÇ 
T
ÇÇ 
:
ÇÇ 
	ITickable
ÇÇ 
{
ÉÉ 	
return
ÑÑ (
BindTickableExecutionOrder
ÑÑ -
(
ÑÑ- .
typeof
ÑÑ. 4
(
ÑÑ4 5
T
ÑÑ5 6
)
ÑÑ6 7
,
ÑÑ7 8
order
ÑÑ9 >
)
ÑÑ> ?
;
ÑÑ? @
}
ÖÖ 	
public
áá 
CopyNonLazyBinder
áá  (
BindTickableExecutionOrder
áá! ;
(
áá; <
Type
áá< @
type
ááA E
,
ááE F
int
ááG J
order
ááK P
)
ááP Q
{
àà 	
Assert
ââ 
.
ââ 
That
ââ 
(
ââ 
type
ââ 
.
ââ 
DerivesFrom
ââ (
<
ââ( )
	ITickable
ââ) 2
>
ââ2 3
(
ââ3 4
)
ââ4 5
,
ââ5 6
$str
ää >
,
ää> ?
type
ää@ D
)
ääD E
;
ääE F
return
åå 
BindInstance
åå 
(
åå  
	ValuePair
çç 
.
çç 
New
çç 
(
çç 
type
çç "
,
çç" #
order
çç$ )
)
çç) *
)
çç* +
.
çç+ ,
WhenInjectedInto
çç, <
<
çç< =
TickableManager
çç= L
>
ççL M
(
ççM N
)
ççN O
;
ççO P
}
éé 	
public
êê 
CopyNonLazyBinder
êê  -
BindInitializableExecutionOrder
êê! @
<
êê@ A
T
êêA B
>
êêB C
(
êêC D
int
êêD G
order
êêH M
)
êêM N
where
ëë 
T
ëë 
:
ëë 
IInitializable
ëë $
{
íí 	
return
ìì -
BindInitializableExecutionOrder
ìì 2
(
ìì2 3
typeof
ìì3 9
(
ìì9 :
T
ìì: ;
)
ìì; <
,
ìì< =
order
ìì> C
)
ììC D
;
ììD E
}
îî 	
public
ññ 
CopyNonLazyBinder
ññ  -
BindInitializableExecutionOrder
ññ! @
(
ññ@ A
Type
ññA E
type
ññF J
,
ññJ K
int
ññL O
order
ññP U
)
ññU V
{
óó 	
Assert
òò 
.
òò 
That
òò 
(
òò 
type
òò 
.
òò 
DerivesFrom
òò (
<
òò( )
IInitializable
òò) 7
>
òò7 8
(
òò8 9
)
òò9 :
,
òò: ;
$str
ôô C
,
ôôC D
type
ôôE I
)
ôôI J
;
ôôJ K
return
õõ 
BindInstance
õõ 
(
õõ  
	ValuePair
úú 
.
úú 
New
úú 
(
úú 
type
úú "
,
úú" #
order
úú$ )
)
úú) *
)
úú* +
.
úú+ ,
WhenInjectedInto
úú, <
<
úú< ="
InitializableManager
úú= Q
>
úúQ R
(
úúR S
)
úúS T
;
úúT U
}
ùù 	
public
üü 
CopyNonLazyBinder
üü  *
BindDisposableExecutionOrder
üü! =
<
üü= >
T
üü> ?
>
üü? @
(
üü@ A
int
üüA D
order
üüE J
)
üüJ K
where
†† 
T
†† 
:
†† 
IDisposable
†† !
{
°° 	
return
¢¢ *
BindDisposableExecutionOrder
¢¢ /
(
¢¢/ 0
typeof
¢¢0 6
(
¢¢6 7
T
¢¢7 8
)
¢¢8 9
,
¢¢9 :
order
¢¢; @
)
¢¢@ A
;
¢¢A B
}
££ 	
public
•• 
CopyNonLazyBinder
••  .
 BindLateDisposableExecutionOrder
••! A
<
••A B
T
••B C
>
••C D
(
••D E
int
••E H
order
••I N
)
••N O
where
¶¶ 
T
¶¶ 
:
¶¶ 
ILateDisposable
¶¶ %
{
ßß 	
return
®® .
 BindLateDisposableExecutionOrder
®® 3
(
®®3 4
typeof
®®4 :
(
®®: ;
T
®®; <
)
®®< =
,
®®= >
order
®®? D
)
®®D E
;
®®E F
}
©© 	
public
´´ 
CopyNonLazyBinder
´´  *
BindDisposableExecutionOrder
´´! =
(
´´= >
Type
´´> B
type
´´C G
,
´´G H
int
´´I L
order
´´M R
)
´´R S
{
¨¨ 	
Assert
≠≠ 
.
≠≠ 
That
≠≠ 
(
≠≠ 
type
≠≠ 
.
≠≠ 
DerivesFrom
≠≠ (
<
≠≠( )
IDisposable
≠≠) 4
>
≠≠4 5
(
≠≠5 6
)
≠≠6 7
,
≠≠7 8
$str
ÆÆ @
,
ÆÆ@ A
type
ÆÆB F
)
ÆÆF G
;
ÆÆG H
return
∞∞ 
BindInstance
∞∞ 
(
∞∞  
	ValuePair
±± 
.
±± 
New
±± 
(
±± 
type
±± "
,
±±" #
order
±±$ )
)
±±) *
)
±±* +
.
±±+ ,
WhenInjectedInto
±±, <
<
±±< =
DisposableManager
±±= N
>
±±N O
(
±±O P
)
±±P Q
;
±±Q R
}
≤≤ 	
public
¥¥ 
CopyNonLazyBinder
¥¥  .
 BindLateDisposableExecutionOrder
¥¥! A
(
¥¥A B
Type
¥¥B F
type
¥¥G K
,
¥¥K L
int
¥¥M P
order
¥¥Q V
)
¥¥V W
{
µµ 	
Assert
∂∂ 
.
∂∂ 
That
∂∂ 
(
∂∂ 
type
∂∂ 
.
∂∂ 
DerivesFrom
∂∂ (
<
∂∂( )
ILateDisposable
∂∂) 8
>
∂∂8 9
(
∂∂9 :
)
∂∂: ;
,
∂∂; <
$str
∑∑ @
,
∑∑@ A
type
∑∑B F
)
∑∑F G
;
∑∑G H
return
ππ 
BindInstance
ππ 
(
ππ  
	ValuePair
∫∫ 
.
∫∫ 
New
∫∫ 
(
∫∫ 
type
∫∫ "
,
∫∫" #
order
∫∫$ )
)
∫∫) *
)
∫∫* +
.
∫∫+ ,
WithId
∫∫, 2
(
∫∫2 3
$str
∫∫3 9
)
∫∫9 :
.
∫∫: ;
WhenInjectedInto
∫∫; K
<
∫∫K L
DisposableManager
∫∫L ]
>
∫∫] ^
(
∫∫^ _
)
∫∫_ `
;
∫∫` a
}
ªª 	
public
ΩΩ 
CopyNonLazyBinder
ΩΩ  -
BindFixedTickableExecutionOrder
ΩΩ! @
<
ΩΩ@ A
T
ΩΩA B
>
ΩΩB C
(
ΩΩC D
int
ΩΩD G
order
ΩΩH M
)
ΩΩM N
where
ææ 
T
ææ 
:
ææ 
IFixedTickable
ææ $
{
øø 	
return
¿¿ -
BindFixedTickableExecutionOrder
¿¿ 2
(
¿¿2 3
typeof
¿¿3 9
(
¿¿9 :
T
¿¿: ;
)
¿¿; <
,
¿¿< =
order
¿¿> C
)
¿¿C D
;
¿¿D E
}
¡¡ 	
public
√√ 
CopyNonLazyBinder
√√  -
BindFixedTickableExecutionOrder
√√! @
(
√√@ A
Type
√√A E
type
√√F J
,
√√J K
int
√√L O
order
√√P U
)
√√U V
{
ƒƒ 	
Assert
≈≈ 
.
≈≈ 
That
≈≈ 
(
≈≈ 
type
≈≈ 
.
≈≈ 
DerivesFrom
≈≈ (
<
≈≈( )
IFixedTickable
≈≈) 7
>
≈≈7 8
(
≈≈8 9
)
≈≈9 :
,
≈≈: ;
$str
∆∆ C
,
∆∆C D
type
∆∆E I
)
∆∆I J
;
∆∆J K
return
»» 
Bind
»» 
<
»» 
	ValuePair
»» !
<
»»! "
Type
»»" &
,
»»& '
int
»»( +
>
»»+ ,
>
»», -
(
»»- .
)
»». /
.
»»/ 0
WithId
»»0 6
(
»»6 7
$str
»»7 >
)
»»> ?
.
…… 
FromInstance
…… 
(
…… 
	ValuePair
…… '
.
……' (
New
……( +
(
……+ ,
type
……, 0
,
……0 1
order
……2 7
)
……7 8
)
……8 9
.
……9 :
WhenInjectedInto
……: J
<
……J K
TickableManager
……K Z
>
……Z [
(
……[ \
)
……\ ]
;
……] ^
}
   	
public
ÃÃ 
CopyNonLazyBinder
ÃÃ  ,
BindLateTickableExecutionOrder
ÃÃ! ?
<
ÃÃ? @
T
ÃÃ@ A
>
ÃÃA B
(
ÃÃB C
int
ÃÃC F
order
ÃÃG L
)
ÃÃL M
where
ÕÕ 
T
ÕÕ 
:
ÕÕ 
ILateTickable
ÕÕ #
{
ŒŒ 	
return
œœ ,
BindLateTickableExecutionOrder
œœ 1
(
œœ1 2
typeof
œœ2 8
(
œœ8 9
T
œœ9 :
)
œœ: ;
,
œœ; <
order
œœ= B
)
œœB C
;
œœC D
}
–– 	
public
““ 
CopyNonLazyBinder
““  ,
BindLateTickableExecutionOrder
““! ?
(
““? @
Type
““@ D
type
““E I
,
““I J
int
““K N
order
““O T
)
““T U
{
”” 	
Assert
‘‘ 
.
‘‘ 
That
‘‘ 
(
‘‘ 
type
‘‘ 
.
‘‘ 
DerivesFrom
‘‘ (
<
‘‘( )
ILateTickable
‘‘) 6
>
‘‘6 7
(
‘‘7 8
)
‘‘8 9
,
‘‘9 :
$str
’’ B
,
’’B C
type
’’D H
)
’’H I
;
’’I J
return
◊◊ 
Bind
◊◊ 
<
◊◊ 
	ValuePair
◊◊ !
<
◊◊! "
Type
◊◊" &
,
◊◊& '
int
◊◊( +
>
◊◊+ ,
>
◊◊, -
(
◊◊- .
)
◊◊. /
.
◊◊/ 0
WithId
◊◊0 6
(
◊◊6 7
$str
◊◊7 =
)
◊◊= >
.
ÿÿ 
FromInstance
ÿÿ 
(
ÿÿ 
	ValuePair
ÿÿ '
.
ÿÿ' (
New
ÿÿ( +
(
ÿÿ+ ,
type
ÿÿ, 0
,
ÿÿ0 1
order
ÿÿ2 7
)
ÿÿ7 8
)
ÿÿ8 9
.
ÿÿ9 :
WhenInjectedInto
ÿÿ: J
<
ÿÿJ K
TickableManager
ÿÿK Z
>
ÿÿZ [
(
ÿÿ[ \
)
ÿÿ\ ]
;
ÿÿ] ^
}
ŸŸ 	
public
€€ 
CopyNonLazyBinder
€€  (
BindPoolableExecutionOrder
€€! ;
<
€€; <
T
€€< =
>
€€= >
(
€€> ?
int
€€? B
order
€€C H
)
€€H I
where
‹‹ 
T
‹‹ 
:
‹‹ 
	IPoolable
‹‹ 
{
›› 	
return
ﬁﬁ (
BindPoolableExecutionOrder
ﬁﬁ -
(
ﬁﬁ- .
typeof
ﬁﬁ. 4
(
ﬁﬁ4 5
T
ﬁﬁ5 6
)
ﬁﬁ6 7
,
ﬁﬁ7 8
order
ﬁﬁ9 >
)
ﬁﬁ> ?
;
ﬁﬁ? @
}
ﬂﬂ 	
public
·· 
CopyNonLazyBinder
··  (
BindPoolableExecutionOrder
··! ;
(
··; <
Type
··< @
type
··A E
,
··E F
int
··G J
order
··K P
)
··P Q
{
‚‚ 	
Assert
„„ 
.
„„ 
That
„„ 
(
„„ 
type
„„ 
.
„„ 
DerivesFrom
„„ (
<
„„( )
	IPoolable
„„) 2
>
„„2 3
(
„„3 4
)
„„4 5
,
„„5 6
$str
‰‰ >
,
‰‰> ?
type
‰‰@ D
)
‰‰D E
;
‰‰E F
return
ÊÊ 
Bind
ÊÊ 
<
ÊÊ 
	ValuePair
ÊÊ !
<
ÊÊ! "
Type
ÊÊ" &
,
ÊÊ& '
int
ÊÊ( +
>
ÊÊ+ ,
>
ÊÊ, -
(
ÊÊ- .
)
ÊÊ. /
.
ÁÁ 
FromInstance
ÁÁ 
(
ÁÁ 
	ValuePair
ÁÁ '
.
ÁÁ' (
New
ÁÁ( +
(
ÁÁ+ ,
type
ÁÁ, 0
,
ÁÁ0 1
order
ÁÁ2 7
)
ÁÁ7 8
)
ÁÁ8 9
.
ÁÁ9 :
WhenInjectedInto
ÁÁ: J
<
ÁÁJ K
PoolableManager
ÁÁK Z
>
ÁÁZ [
(
ÁÁ[ \
)
ÁÁ\ ]
;
ÁÁ] ^
}
ËË 	
class
ÍÍ 
ProviderInfo
ÍÍ 
{
ÎÎ 	
public
ÏÏ 
ProviderInfo
ÏÏ 
(
ÏÏ  
	IProvider
ÌÌ 
provider
ÌÌ "
,
ÌÌ" #
BindingCondition
ÌÌ$ 4
	condition
ÌÌ5 >
,
ÌÌ> ?
bool
ÌÌ@ D
nonLazy
ÌÌE L
,
ÌÌL M
DiContainer
ÌÌN Y
	container
ÌÌZ c
)
ÌÌc d
{
ÓÓ 
Provider
ÔÔ 
=
ÔÔ 
provider
ÔÔ #
;
ÔÔ# $
	Condition
 
=
 
	condition
 %
;
% &
NonLazy
ÒÒ 
=
ÒÒ 
nonLazy
ÒÒ !
;
ÒÒ! "
	Container
ÚÚ 
=
ÚÚ 
	container
ÚÚ %
;
ÚÚ% &
}
ÛÛ 
public
ıı 
readonly
ıı 
DiContainer
ıı '
	Container
ıı( 1
;
ıı1 2
public
ˆˆ 
readonly
ˆˆ 
bool
ˆˆ  
NonLazy
ˆˆ! (
;
ˆˆ( )
public
˜˜ 
readonly
˜˜ 
	IProvider
˜˜ %
Provider
˜˜& .
;
˜˜. /
public
¯¯ 
readonly
¯¯ 
BindingCondition
¯¯ ,
	Condition
¯¯- 6
;
¯¯6 7
}
˘˘ 	
}
˙˙ 
}˚˚ ™%
\C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ResolveProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
ResolveProvider  
:! "
	IProvider# ,
{		 
readonly

 
object

 
_identifier

 #
;

# $
readonly 
DiContainer 

_container '
;' (
readonly 
Type 
_contractType #
;# $
readonly 
bool 
_isOptional !
;! "
readonly 
InjectSources 
_source &
;& '
readonly 
bool 
	_matchAll 
;  
public 
ResolveProvider 
( 
Type 
contractType 
, 
DiContainer *
	container+ 4
,4 5
object6 <

identifier= G
,G H
bool 

isOptional 
, 
InjectSources *
source+ 1
,1 2
bool3 7
matchAll8 @
)@ A
{ 	
_contractType 
= 
contractType (
;( )
_identifier 
= 

identifier $
;$ %

_container 
= 
	container "
;" #
_isOptional 
= 

isOptional $
;$ %
_source 
= 
source 
; 
	_matchAll 
= 
matchAll  
;  !
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
}   	
public"" 
bool"" '
TypeVariesBasedOnMemberType"" /
{## 	
get$$ 
{$$ 
return$$ 
false$$ 
;$$ 
}$$  !
}%% 	
public'' 
Type'' 
GetInstanceType'' #
(''# $
InjectContext''$ 1
context''2 9
)''9 :
{(( 	
return)) 
_contractType))  
;))  !
}** 	
public,, 
void,, *
GetAllInstancesWithInjectSplit,, 2
(,,2 3
InjectContext-- 
context-- !
,--! "
List--# '
<--' (
TypeValuePair--( 5
>--5 6
args--7 ;
,--; <
out--= @
Action--A G
injectAction--H T
,--T U
List--V Z
<--Z [
object--[ a
>--a b
buffer--c i
)--i j
{.. 	
Assert// 
.// 
IsEmpty// 
(// 
args// 
)//  
;//  !
Assert00 
.00 
	IsNotNull00 
(00 
context00 $
)00$ %
;00% &
Assert22 
.22 
That22 
(22 
_contractType22 %
.22% &
DerivesFromOrEqual22& 8
(228 9
context229 @
.22@ A

MemberType22A K
)22K L
)22L M
;22M N
injectAction44 
=44 
null44 
;44  
if55 
(55 
	_matchAll55 
)55 
{66 

_container77 
.77 

ResolveAll77 %
(77% &
GetSubContext77& 3
(773 4
context774 ;
)77; <
,77< =
buffer77> D
)77D E
;77E F
}88 
else99 
{:: 
buffer;; 
.;; 
Add;; 
(;; 

_container;; %
.;;% &
Resolve;;& -
(;;- .
GetSubContext;;. ;
(;;; <
context;;< C
);;C D
);;D E
);;E F
;;;F G
}<< 
}== 	
InjectContext?? 
GetSubContext?? #
(??# $
InjectContext??$ 1
parent??2 8
)??8 9
{@@ 	
varAA 

subContextAA 
=AA 
parentAA #
.AA# $
CreateSubContextAA$ 4
(AA4 5
_contractTypeAA5 B
,AAB C
_identifierAAD O
)AAO P
;AAP Q

subContextCC 
.CC 

SourceTypeCC !
=CC" #
_sourceCC$ +
;CC+ ,

subContextDD 
.DD 
OptionalDD 
=DD  !
_isOptionalDD" -
;DD- .
returnFF 

subContextFF 
;FF 
}GG 	
}HH 
}II ‰i
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder1.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
	TContract, 5
>5 6
:7 8!
FactoryFromBinderBase9 N
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func5 9
<9 :
DiContainer: E
,E F
TParam1G N
,N O
	TContractP Y
>Y Z
method[ a
)a b
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
	TContractH Q
>Q R
(R S
methodS Y
)Y Z
;Z [
return 
this 
; 
} 	
public &
ConditionCopyNonLazyBinder )
FromFactory* 5
<5 6
TSubFactory6 A
>A B
(B C
)C D
where 
TSubFactory 
: 
IFactory  (
<( )
TParam1) 0
,0 1
	TContract2 ;
>; <
{ 	
return 
this 
. 
FromIFactory $
($ %
x% &
=>' )
x* +
.+ ,
To, .
<. /
TSubFactory/ :
>: ;
(; <
)< =
.= >
AsCached> F
(F G
)G H
)H I
;I J
}   	
public"" %
FactorySubContainerBinder"" (
<""( )
TParam1"") 0
,""0 1
	TContract""2 ;
>""; <#
FromSubContainerResolve""= T
(""T U
)""U V
{## 	
return$$ #
FromSubContainerResolve$$ *
($$* +
null$$+ /
)$$/ 0
;$$0 1
}%% 	
public'' %
FactorySubContainerBinder'' (
<''( )
TParam1'') 0
,''0 1
	TContract''2 ;
>''; <#
FromSubContainerResolve''= T
(''T U
object''U [
subIdentifier''\ i
)''i j
{(( 	
return)) 
new)) %
FactorySubContainerBinder)) 0
<))0 1
TParam1))1 8
,))8 9
	TContract)): C
>))C D
())D E
BindContainer** 
,** 
BindInfo** '
,**' (
FactoryBindInfo**) 8
,**8 9
subIdentifier**: G
)**G H
;**H I
}++ 	
},, 
public00 

static00 
class00 (
FactoryFromBinder1Extensions00 4
{11 
public22 
static22 )
ArgConditionCopyNonLazyBinder22 3
FromIFactory224 @
<22@ A
TParam122A H
,22H I
	TContract22J S
>22S T
(22T U
this33 
FactoryFromBinder33 "
<33" #
TParam133# *
,33* +
	TContract33, 5
>335 6

fromBinder337 A
,33A B
Action44 
<44 !
ConcreteBinderGeneric44 (
<44( )
IFactory44) 1
<441 2
TParam1442 9
,449 :
	TContract44; D
>44D E
>44E F
>44F G 
factoryBindGenerator44H \
)44\ ]
{55 	
Guid66 
	factoryId66 
;66  
factoryBindGenerator77  
(77  !

fromBinder88 
.88  
CreateIFactoryBinder88 /
<88/ 0
IFactory880 8
<888 9
TParam1889 @
,88@ A
	TContract88B K
>88K L
>88L M
(88M N
out88N Q
	factoryId88R [
)88[ \
)88\ ]
;88] ^

fromBinder:: 
.:: 
ProviderFunc:: #
=::$ %
(;; 
	container;; 
);; 
=>;; 
{;;  
return;;! '
new;;( +
IFactoryProvider;;, <
<;;< =
TParam1;;= D
,;;D E
	TContract;;F O
>;;O P
(;;P Q
	container;;Q Z
,;;Z [
	factoryId;;\ e
);;e f
;;;f g
};;h i
;;;i j
return== 
new== )
ArgConditionCopyNonLazyBinder== 4
(==4 5

fromBinder==5 ?
.==? @
BindInfo==@ H
)==H I
;==I J
}>> 	
public@@ 
static@@ )
ArgConditionCopyNonLazyBinder@@ 3"
FromPoolableMemoryPool@@4 J
<@@J K
TParam1@@K R
,@@R S
	TContract@@T ]
>@@] ^
(@@^ _
thisAA 
FactoryFromBinderAA "
<AA" #
TParam1AA# *
,AA* +
	TContractAA, 5
>AA5 6

fromBinderAA7 A
)AAA B
whereDD 
	TContractDD 
:DD 
	IPoolableDD '
<DD' (
TParam1DD( /
,DD/ 0
IMemoryPoolDD1 <
>DD< =
{EE 	
returnFF 

fromBinderFF 
.FF "
FromPoolableMemoryPoolFF 4
<FF4 5
TParam1FF5 <
,FF< =
	TContractFF> G
>FFG H
(FFH I
xFFI J
=>FFK M
{FFN O
}FFO P
)FFP Q
;FFQ R
}GG 	
publicII 
staticII )
ArgConditionCopyNonLazyBinderII 3"
FromPoolableMemoryPoolII4 J
<IIJ K
TParam1IIK R
,IIR S
	TContractIIT ]
>II] ^
(II^ _
thisJJ 
FactoryFromBinderJJ "
<JJ" #
TParam1JJ# *
,JJ* +
	TContractJJ, 5
>JJ5 6

fromBinderJJ7 A
,JJA B
ActionKK 
<KK .
"MemoryPoolInitialSizeMaxSizeBinderKK 5
<KK5 6
	TContractKK6 ?
>KK? @
>KK@ A
poolBindGeneratorKKB S
)KKS T
whereNN 
	TContractNN 
:NN 
	IPoolableNN '
<NN' (
TParam1NN( /
,NN/ 0
IMemoryPoolNN1 <
>NN< =
{OO 	
returnPP 

fromBinderPP 
.PP "
FromPoolableMemoryPoolPP 4
<PP4 5
TParam1PP5 <
,PP< =
	TContractPP> G
,PPG H
PoolableMemoryPoolPPI [
<PP[ \
TParam1PP\ c
,PPc d
IMemoryPoolPPe p
,PPp q
	TContractPPr {
>PP{ |
>PP| }
(PP} ~
poolBindGenerator	PP~ è
)
PPè ê
;
PPê ë
}QQ 	
publicTT 
staticTT )
ArgConditionCopyNonLazyBinderTT 3&
FromMonoPoolableMemoryPoolTT4 N
<TTN O
TParam1TTO V
,TTV W
	TContractTTX a
>TTa b
(TTb c
thisUU 
FactoryFromBinderUU "
<UU" #
TParam1UU# *
,UU* +
	TContractUU, 5
>UU5 6

fromBinderUU7 A
)UUA B
whereXX 
	TContractXX 
:XX 
	ComponentXX '
,XX' (
	IPoolableXX) 2
<XX2 3
TParam1XX3 :
,XX: ;
IMemoryPoolXX< G
>XXG H
{YY 	
returnZZ 

fromBinderZZ 
.ZZ &
FromMonoPoolableMemoryPoolZZ 8
<ZZ8 9
TParam1ZZ9 @
,ZZ@ A
	TContractZZB K
>ZZK L
(ZZL M
xZZM N
=>ZZO Q
{ZZR S
}ZZS T
)ZZT U
;ZZU V
}[[ 	
public]] 
static]] )
ArgConditionCopyNonLazyBinder]] 3&
FromMonoPoolableMemoryPool]]4 N
<]]N O
TParam1]]O V
,]]V W
	TContract]]X a
>]]a b
(]]b c
this^^ 
FactoryFromBinder^^ "
<^^" #
TParam1^^# *
,^^* +
	TContract^^, 5
>^^5 6

fromBinder^^7 A
,^^A B
Action__ 
<__ .
"MemoryPoolInitialSizeMaxSizeBinder__ 5
<__5 6
	TContract__6 ?
>__? @
>__@ A
poolBindGenerator__B S
)__S T
wherebb 
	TContractbb 
:bb 
	Componentbb '
,bb' (
	IPoolablebb) 2
<bb2 3
TParam1bb3 :
,bb: ;
IMemoryPoolbb< G
>bbG H
{cc 	
returndd 

fromBinderdd 
.dd "
FromPoolableMemoryPooldd 4
<dd4 5
TParam1dd5 <
,dd< =
	TContractdd> G
,ddG H"
MonoPoolableMemoryPoolddI _
<dd_ `
TParam1dd` g
,ddg h
IMemoryPoolddi t
,ddt u
	TContractddv 
>	dd Ä
>
ddÄ Å
(
ddÅ Ç
poolBindGenerator
ddÇ ì
)
ddì î
;
ddî ï
}ee 	
publichh 
statichh )
ArgConditionCopyNonLazyBinderhh 3"
FromPoolableMemoryPoolhh4 J
<hhJ K
TParam1hhK R
,hhR S
	TContracthhT ]
,hh] ^
TMemoryPoolhh_ j
>hhj k
(hhk l
thisii 
FactoryFromBinderii "
<ii" #
TParam1ii# *
,ii* +
	TContractii, 5
>ii5 6

fromBinderii7 A
)iiA B
wherell 
	TContractll 
:ll 
	IPoolablell '
<ll' (
TParam1ll( /
,ll/ 0
IMemoryPoolll1 <
>ll< =
wheremm 
TMemoryPoolmm 
:mm 

MemoryPoolmm  *
<mm* +
TParam1mm+ 2
,mm2 3
IMemoryPoolmm4 ?
,mm? @
	TContractmmA J
>mmJ K
{nn 	
returnoo 

fromBinderoo 
.oo "
FromPoolableMemoryPooloo 4
<oo4 5
TParam1oo5 <
,oo< =
	TContractoo> G
,ooG H
TMemoryPoolooI T
>ooT U
(ooU V
xooV W
=>ooX Z
{oo[ \
}oo\ ]
)oo] ^
;oo^ _
}pp 	
publicrr 
staticrr )
ArgConditionCopyNonLazyBinderrr 3"
FromPoolableMemoryPoolrr4 J
<rrJ K
TParam1rrK R
,rrR S
	TContractrrT ]
,rr] ^
TMemoryPoolrr_ j
>rrj k
(rrk l
thisss 
FactoryFromBinderss "
<ss" #
TParam1ss# *
,ss* +
	TContractss, 5
>ss5 6

fromBinderss7 A
,ssA B
Actiontt 
<tt .
"MemoryPoolInitialSizeMaxSizeBindertt 5
<tt5 6
	TContracttt6 ?
>tt? @
>tt@ A
poolBindGeneratorttB S
)ttS T
whereww 
	TContractww 
:ww 
	IPoolableww '
<ww' (
TParam1ww( /
,ww/ 0
IMemoryPoolww1 <
>ww< =
wherexx 
TMemoryPoolxx 
:xx 

MemoryPoolxx  *
<xx* +
TParam1xx+ 2
,xx2 3
IMemoryPoolxx4 ?
,xx? @
	TContractxxA J
>xxJ K
{yy 	
var|| 
poolId|| 
=|| 
Guid|| 
.|| 
NewGuid|| %
(||% &
)||& '
;||' (
var 
binder 
= 

fromBinder #
.# $
BindContainer$ 1
.1 20
$BindMemoryPoolCustomInterfaceNoFlush2 V
<V W
	TContractW `
,` a
TMemoryPoolb m
,m n
TMemoryPoolo z
>z {
({ |
)| }
.} ~
WithId	~ Ñ
(
Ñ Ö
poolId
Ö ã
)
ã å
;
å ç
binder
ÇÇ 
.
ÇÇ 
NonLazy
ÇÇ 
(
ÇÇ 
)
ÇÇ 
;
ÇÇ 
poolBindGenerator
ÑÑ 
(
ÑÑ 
binder
ÑÑ $
)
ÑÑ$ %
;
ÑÑ% &

fromBinder
ÜÜ 
.
ÜÜ 
ProviderFunc
ÜÜ #
=
ÜÜ$ %
(
áá 
	container
áá 
)
áá 
=>
áá 
{
áá  
return
áá! '
new
áá( +(
PoolableMemoryPoolProvider
áá, F
<
ááF G
TParam1
ááG N
,
ááN O
	TContract
ááP Y
,
ááY Z
TMemoryPool
áá[ f
>
ááf g
(
áág h
	container
ááh q
,
ááq r
poolId
áás y
)
ááy z
;
ááz {
}
áá| }
;
áá} ~
return
ââ 
new
ââ +
ArgConditionCopyNonLazyBinder
ââ 4
(
ââ4 5

fromBinder
ââ5 ?
.
ââ? @
BindInfo
ââ@ H
)
ââH I
;
ââI J
}
ää 	
}
ãã 
}åå ß8
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\TypeStringFormatter.cs
	namespace 	

ModestTree
 
{ 
public		 

static		 
class		 
TypeStringFormatter		 +
{

 
static 
readonly 

Dictionary "
<" #
Type# '
,' (
string) /
>/ 0
_prettyNameCache1 A
=B C
newD G

DictionaryH R
<R S
TypeS W
,W X
stringY _
>_ `
(` a
)a b
;b c
public 
static 
string 

PrettyName '
(' (
this( ,
Type- 1
type2 6
)6 7
{ 	
string 

prettyName 
; 
if 
( 
! 
_prettyNameCache !
.! "
TryGetValue" -
(- .
type. 2
,2 3
out4 7

prettyName8 B
)B C
)C D
{ 

prettyName 
= 
PrettyNameInternal /
(/ 0
type0 4
)4 5
;5 6
_prettyNameCache  
.  !
Add! $
($ %
type% )
,) *

prettyName+ 5
)5 6
;6 7
} 
return 

prettyName 
; 
} 	
static 
string 
PrettyNameInternal (
(( )
Type) -
type. 2
)2 3
{ 	
var 
sb 
= 
new 
StringBuilder &
(& '
)' (
;( )
if 
( 
type 
. 
IsNested 
) 
{ 
sb   
.   
Append   
(   
type   
.   
DeclaringType   ,
.  , -

PrettyName  - 7
(  7 8
)  8 9
)  9 :
;  : ;
sb!! 
.!! 
Append!! 
(!! 
$str!! 
)!! 
;!! 
}"" 
if$$ 
($$ 
type$$ 
.$$ 
IsArray$$ 
)$$ 
{%% 
sb&& 
.&& 
Append&& 
(&& 
type&& 
.&& 
GetElementType&& -
(&&- .
)&&. /
.&&/ 0

PrettyName&&0 :
(&&: ;
)&&; <
)&&< =
;&&= >
sb'' 
.'' 
Append'' 
('' 
$str'' 
)'' 
;''  
}(( 
else)) 
{** 
var++ 
name++ 
=++ 
GetCSharpTypeName++ ,
(++, -
type++- 1
.++1 2
Name++2 6
)++6 7
;++7 8
if-- 
(-- 
type-- 
.-- 
IsGenericType-- &
(--& '
)--' (
)--( )
{.. 
var// 

quoteIndex// "
=//# $
name//% )
.//) *
IndexOf//* 1
(//1 2
$char//2 5
)//5 6
;//6 7
if11 
(11 

quoteIndex11 "
!=11# %
-11& '
$num11' (
)11( )
{22 
sb33 
.33 
Append33 !
(33! "
name33" &
.33& '
	Substring33' 0
(330 1
$num331 2
,332 3
name334 8
.338 9
IndexOf339 @
(33@ A
$char33A D
)33D E
)33E F
)33F G
;33G H
}44 
else55 
{66 
sb77 
.77 
Append77 !
(77! "
name77" &
)77& '
;77' (
}88 
sb:: 
.:: 
Append:: 
(:: 
$str:: !
)::! "
;::" #
if<< 
(<< 
type<< 
.<< #
IsGenericTypeDefinition<< 4
(<<4 5
)<<5 6
)<<6 7
{== 
var>> 
numArgs>> #
=>>$ %
type>>& *
.>>* +
GenericArguments>>+ ;
(>>; <
)>>< =
.>>= >
Count>>> C
(>>C D
)>>D E
;>>E F
if@@ 
(@@ 
numArgs@@ #
>@@$ %
$num@@& '
)@@' (
{AA 
sbBB 
.BB 
AppendBB %
(BB% &
newBB& )
StringBB* 0
(BB0 1
$charBB1 4
,BB4 5
numArgsBB6 =
-BB> ?
$numBB@ A
)BBA B
)BBB C
;BBC D
}CC 
}DD 
elseEE 
{FF 
sbGG 
.GG 
AppendGG !
(GG! "
stringGG" (
.GG( )
JoinGG) -
(GG- .
$strGG. 2
,GG2 3
typeGG4 8
.GG8 9
GenericArgumentsGG9 I
(GGI J
)GGJ K
.GGK L
SelectGGL R
(GGR S
tGGS T
=>GGU W
tGGX Y
.GGY Z

PrettyNameGGZ d
(GGd e
)GGe f
)GGf g
.GGg h
ToArrayGGh o
(GGo p
)GGp q
)GGq r
)GGr s
;GGs t
}HH 
sbJJ 
.JJ 
AppendJJ 
(JJ 
$strJJ !
)JJ! "
;JJ" #
}KK 
elseLL 
{MM 
sbNN 
.NN 
AppendNN 
(NN 
nameNN "
)NN" #
;NN# $
}OO 
}PP 
returnRR 
sbRR 
.RR 
ToStringRR 
(RR 
)RR  
;RR  !
}SS 	
staticUU 
stringUU 
GetCSharpTypeNameUU '
(UU' (
stringUU( .
typeNameUU/ 7
)UU7 8
{VV 	
switchWW 
(WW 
typeNameWW 
)WW 
{XX 
caseYY 
$strYY 
:YY 
caseZZ 
$strZZ 
:ZZ 
case[[ 
$str[[ 
:[[ 
case\\ 
$str\\ 
:\\ 
case]] 
$str]] 
:]] 
case^^ 
$str^^ 
:^^ 
return__ 
typeName__ #
.__# $
ToLower__$ +
(__+ ,
)__, -
;__- .
case`` 
$str`` 
:`` 
returnaa 
$straa "
;aa" #
casebb 
$strbb 
:bb 
returncc 
$strcc  
;cc  !
casedd 
$strdd 
:dd 
returnee 
$stree !
;ee! "
caseff 
$strff 
:ff 
returngg 
$strgg "
;gg" #
casehh 
$strhh 
:hh 
returnii 
$strii !
;ii! "
defaultjj 
:jj 
returnkk 
typeNamekk #
;kk# $
}ll 
}mm 	
}nn 
}oo ÿ

vC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\AnimatorInterfaces\AnimatorIkHandlerManager.cs
	namespace 	
Zenject
 
{ 
public 

class $
AnimatorIkHandlerManager )
:* +
MonoBehaviour, 9
{ 
List 
< 
IAnimatorIkHandler 
>  
	_handlers! *
;* +
[

 	
Inject

	 
]

 
public 
void 
	Construct 
( 
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Local+ 0
)0 1
]1 2
List 
< 
IAnimatorIkHandler #
># $
handlers% -
)- .
{ 	
	_handlers 
= 
handlers  
;  !
} 	
public 
void 
OnAnimatorIk  
(  !
)! "
{ 	
foreach 
( 
var 
handler  
in! #
	_handlers$ -
)- .
{ 
handler 
. 
OnAnimatorIk $
($ %
)% &
;& '
} 
} 	
} 
} œ
hC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\DefaultGameObjectParentInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class ,
 DefaultGameObjectParentInstaller 1
:2 3
	Installer4 =
<= >
string> D
,D E,
 DefaultGameObjectParentInstallerF f
>f g
{		 
readonly

 
string

 
_name

 
;

 
public ,
 DefaultGameObjectParentInstaller /
(/ 0
string0 6
name7 ;
); <
{ 	
_name 
= 
name 
; 
} 	
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
var 
defaultParent 
= 
new  #

GameObject$ .
(. /
_name/ 4
)4 5
;5 6
defaultParent 
. 
	transform #
.# $
	SetParent$ -
(- .
	Container 
. "
InheritedDefaultParent 0
,0 1
false2 7
)7 8
;8 9
	Container 
. 
DefaultParent #
=$ %
defaultParent& 3
.3 4
	transform4 =
;= >
	Container 
. 
Bind 
< 
IDisposable &
>& '
(' (
)( )
. 
To 
< (
DefaultParentObjectDestroyer 0
>0 1
(1 2
)2 3
.3 4
AsCached4 <
(< =
)= >
.> ?
WithArguments? L
(L M
defaultParentM Z
)Z [
;[ \
	Container   
.   (
BindDisposableExecutionOrder   2
<  2 3(
DefaultParentObjectDestroyer  3 O
>  O P
(  P Q
int  Q T
.  T U
MinValue  U ]
)  ] ^
;  ^ _
}"" 	
class$$ (
DefaultParentObjectDestroyer$$ *
:$$+ ,
IDisposable$$- 8
{%% 	
readonly&& 

GameObject&& 
_gameObject&&  +
;&&+ ,
public(( (
DefaultParentObjectDestroyer(( /
(((/ 0

GameObject((0 :

gameObject((; E
)((E F
{)) 
_gameObject** 
=** 

gameObject** (
;**( )
}++ 
public-- 
void-- 
Dispose-- 
(--  
)--  !
{.. 

GameObject// 
.// 
Destroy// "
(//" #
_gameObject//# .
)//. /
;/// 0
}00 
}11 	
}22 
}33 ¶
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\IProvider.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
	IProvider 
{ 
bool		 '
TypeVariesBasedOnMemberType		 (
{

 	
get 
; 
} 	
bool 
IsCached 
{ 	
get 
; 
} 	
Type 
GetInstanceType 
( 
InjectContext *
context+ 2
)2 3
;3 4
void *
GetAllInstancesWithInjectSplit +
(+ ,
InjectContext 
context !
,! "
List# '
<' (
TypeValuePair( 5
>5 6
args7 ;
,; <
out= @
ActionA G
injectActionH T
,T U
ListV Z
<Z [
object[ a
>a b
	instancesc l
)l m
;m n
} 
} Íì
nC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\ProviderBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

abstract

 
class

 $
ProviderBindingFinalizer

 2
:

3 4
IBindingFinalizer

5 F
{ 
public $
ProviderBindingFinalizer '
(' (
BindInfo( 0
bindInfo1 9
)9 :
{ 	
BindInfo 
= 
bindInfo 
;  
} 	
public %
BindingInheritanceMethods ($
BindingInheritanceMethod) A
{ 	
get 
{ 
return 
BindInfo !
.! "$
BindingInheritanceMethod" :
;: ;
}< =
} 	
	protected 
BindInfo 
BindInfo #
{ 	
get 
; 
private 
set 
; 
} 	
	protected 

ScopeTypes 
GetScope %
(% &
)& '
{ 	
if 
( 
BindInfo 
. 
Scope 
== !

ScopeTypes" ,
., -
Unset- 2
)2 3
{ 
Assert!! 
.!! 
That!! 
(!! 
!!! 
BindInfo!! %
.!!% & 
RequireExplicitScope!!& :
||!!; =
BindInfo!!> F
.!!F G
	Condition!!G P
!=!!Q S
null!!T X
,!!X Y
$str	"" ≠
,
""≠ Æ
BindInfo## 
.## 
ContractTypes## *
.##* +
Select##+ 1
(##1 2
x##2 3
=>##4 6
x##7 8
.##8 9

PrettyName##9 C
(##C D
)##D E
)##E F
.##F G
Join##G K
(##K L
$str##L P
)##P Q
,##Q R
BindInfo##S [
.##[ \

Identifier##\ f
,##f g
BindInfo$$ 
.$$ 
ContextInfo$$ (
!=$$) +
null$$, 0
?$$1 2
$str$$3 C
.$$C D
Fmt$$D G
($$G H
BindInfo$$H P
.$$P Q
ContextInfo$$Q \
)$$\ ]
:$$^ _
$str$$` b
)$$b c
;$$c d
return%% 

ScopeTypes%% !
.%%! "
	Transient%%" +
;%%+ ,
}&& 
return(( 
BindInfo(( 
.(( 
Scope(( !
;((! "
})) 	
public++ 
void++ 
FinalizeBinding++ #
(++# $
DiContainer++$ /
	container++0 9
)++9 :
{,, 	
if-- 
(-- 
BindInfo-- 
.-- 
ContractTypes-- &
.--& '
Count--' ,
==--- /
$num--0 1
)--1 2
{.. 
return22 
;22 
}33 
try55 
{66 
OnFinalizeBinding77 !
(77! "
	container77" +
)77+ ,
;77, -
}88 
catch99 
(99 
	Exception99 
e99 
)99 
{:: 
throw;; 
Assert;; 
.;; 
CreateException;; ,
(;;, -
e<< 
,<< 
$str<< d
,<<d e
BindInfo== 
.== 
ContractTypes== *
.==* +
Select==+ 1
(==1 2
x==2 3
=>==4 6
x==7 8
.==8 9

PrettyName==9 C
(==C D
)==D E
)==E F
.==F G
Join==G K
(==K L
$str==L P
)==P Q
,==Q R
BindInfo==S [
.==[ \

Identifier==\ f
,==f g
BindInfo>> 
.>> 
ContextInfo>> (
!=>>) +
null>>, 0
?>>1 2
$str>>3 C
.>>C D
Fmt>>D G
(>>G H
BindInfo>>H P
.>>P Q
ContextInfo>>Q \
)>>\ ]
:>>^ _
$str>>` b
)>>b c
;>>c d
}?? 
}@@ 	
	protectedBB 
abstractBB 
voidBB 
OnFinalizeBindingBB  1
(BB1 2
DiContainerBB2 =
	containerBB> G
)BBG H
;BBH I
	protectedDD 
voidDD 
RegisterProviderDD '
<DD' (
	TContractDD( 1
>DD1 2
(DD2 3
DiContainerEE 
	containerEE !
,EE! "
	IProviderEE# ,
providerEE- 5
)EE5 6
{FF 	
RegisterProviderGG 
(GG 
	containerGG &
,GG& '
typeofGG( .
(GG. /
	TContractGG/ 8
)GG8 9
,GG9 :
providerGG; C
)GGC D
;GGD E
}HH 	
	protectedJJ 
voidJJ 
RegisterProviderJJ '
(JJ' (
DiContainerKK 
	containerKK !
,KK! "
TypeKK# '
contractTypeKK( 4
,KK4 5
	IProviderKK6 ?
providerKK@ H
)KKH I
{LL 	
ifMM 
(MM 
BindInfoMM 
.MM 
OnlyBindIfNotBoundMM +
&&MM, .
	containerMM/ 8
.MM8 9
HasBindingIdMM9 E
(MME F
contractTypeMMF R
,MMR S
BindInfoMMT \
.MM\ ]

IdentifierMM] g
)MMg h
)MMh i
{NN 
returnOO 
;OO 
}PP 
	containerRR 
.RR 
RegisterProviderRR &
(RR& '
newSS 
	BindingIdSS 
(SS 
contractTypeSS *
,SS* +
BindInfoSS, 4
.SS4 5

IdentifierSS5 ?
)SS? @
,SS@ A
BindInfoTT 
.TT 
	ConditionTT "
,TT" #
providerUU 
,UU 
BindInfoUU "
.UU" #
NonLazyUU# *
)UU* +
;UU+ ,
ifWW 
(WW 
contractTypeWW 
.WW 
IsValueTypeWW (
(WW( )
)WW) *
&&WW+ -
!WW. /
(WW/ 0
contractTypeWW0 <
.WW< =
IsGenericTypeWW= J
(WWJ K
)WWK L
&&WWM O
contractTypeWWP \
.WW\ ]$
GetGenericTypeDefinitionWW] u
(WWu v
)WWv w
==WWx z
typeof	WW{ Å
(
WWÅ Ç
Nullable
WWÇ ä
<
WWä ã
>
WWã å
)
WWå ç
)
WWç é
)
WWé è
{XX 
varYY 
nullableTypeYY  
=YY! "
typeofYY# )
(YY) *
NullableYY* 2
<YY2 3
>YY3 4
)YY4 5
.YY5 6
MakeGenericTypeYY6 E
(YYE F
contractTypeYYF R
)YYR S
;YYS T
	container]] 
.]] 
RegisterProvider]] *
(]]* +
new^^ 
	BindingId^^ !
(^^! "
nullableType^^" .
,^^. /
BindInfo^^0 8
.^^8 9

Identifier^^9 C
)^^C D
,^^D E
BindInfo__ 
.__ 
	Condition__ &
,__& '
provider`` 
,`` 
BindInfo`` &
.``& '
NonLazy``' .
)``. /
;``/ 0
}aa 
}bb 	
	protecteddd 
voiddd '
RegisterProviderPerContractdd 2
(dd2 3
DiContaineree 
	containeree !
,ee! "
Funcee# '
<ee' (
DiContaineree( 3
,ee3 4
Typeee5 9
,ee9 :
	IProvideree; D
>eeD E
providerFunceeF R
)eeR S
{ff 	
foreachgg 
(gg 
vargg 
contractTypegg %
ingg& (
BindInfogg) 1
.gg1 2
ContractTypesgg2 ?
)gg? @
{hh 
varii 
providerii 
=ii 
providerFuncii +
(ii+ ,
	containerii, 5
,ii5 6
contractTypeii7 C
)iiC D
;iiD E
ifkk 
(kk 
BindInfokk 
.kk !
MarkAsUniqueSingletonkk 2
)kk2 3
{ll 
	containermm 
.mm !
SingletonMarkRegistrymm 3
.mm3 4
MarkSingletonmm4 A
(mmA B
contractTypemmB N
)mmN O
;mmO P
}nn 
elseoo 
ifoo 
(oo 
BindInfooo !
.oo! "!
MarkAsCreationBindingoo" 7
)oo7 8
{pp 
	containerqq 
.qq !
SingletonMarkRegistryqq 3
.qq3 4
MarkNonSingletonqq4 D
(qqD E
contractTypeqqE Q
)qqQ R
;qqR S
}rr 
RegisterProvidertt  
(tt  !
	containertt! *
,tt* +
contractTypett, 8
,tt8 9
providertt: B
)ttB C
;ttC D
}uu 
}vv 	
	protectedxx 
voidxx +
RegisterProviderForAllContractsxx 6
(xx6 7
DiContaineryy 
	containeryy !
,yy! "
	IProvideryy# ,
provideryy- 5
)yy5 6
{zz 	
foreach{{ 
({{ 
var{{ 
contractType{{ %
in{{& (
BindInfo{{) 1
.{{1 2
ContractTypes{{2 ?
){{? @
{|| 
if}} 
(}} 
BindInfo}} 
.}} !
MarkAsUniqueSingleton}} 2
)}}2 3
{~~ 
	container 
. !
SingletonMarkRegistry 3
.3 4
MarkSingleton4 A
(A B
contractTypeB N
)N O
;O P
}
ÄÄ 
else
ÅÅ 
if
ÅÅ 
(
ÅÅ 
BindInfo
ÅÅ !
.
ÅÅ! "#
MarkAsCreationBinding
ÅÅ" 7
)
ÅÅ7 8
{
ÇÇ 
	container
ÉÉ 
.
ÉÉ #
SingletonMarkRegistry
ÉÉ 3
.
ÉÉ3 4
MarkNonSingleton
ÉÉ4 D
(
ÉÉD E
contractType
ÉÉE Q
)
ÉÉQ R
;
ÉÉR S
}
ÑÑ 
RegisterProvider
ÜÜ  
(
ÜÜ  !
	container
ÜÜ! *
,
ÜÜ* +
contractType
ÜÜ, 8
,
ÜÜ8 9
provider
ÜÜ: B
)
ÜÜB C
;
ÜÜC D
}
áá 
}
àà 	
	protected
ää 
void
ää 9
+RegisterProvidersPerContractAndConcreteType
ää B
(
ääB C
DiContainer
ãã 
	container
ãã !
,
ãã! "
List
åå 
<
åå 
Type
åå 
>
åå 
concreteTypes
åå $
,
åå$ %
Func
çç 
<
çç 
Type
çç 
,
çç 
Type
çç 
,
çç 
	IProvider
çç &
>
çç& '
providerFunc
çç( 4
)
çç4 5
{
éé 	
Assert
èè 
.
èè 
That
èè 
(
èè 
!
èè 
BindInfo
èè !
.
èè! "
ContractTypes
èè" /
.
èè/ 0
IsEmpty
èè0 7
(
èè7 8
)
èè8 9
)
èè9 :
;
èè: ;
Assert
êê 
.
êê 
That
êê 
(
êê 
!
êê 
concreteTypes
êê &
.
êê& '
IsEmpty
êê' .
(
êê. /
)
êê/ 0
)
êê0 1
;
êê1 2
foreach
íí 
(
íí 
var
íí 
contractType
íí %
in
íí& (
BindInfo
íí) 1
.
íí1 2
ContractTypes
íí2 ?
)
íí? @
{
ìì 
foreach
îî 
(
îî 
var
îî 
concreteType
îî )
in
îî* ,
concreteTypes
îî- :
)
îî: ;
{
ïï 
if
ññ 
(
ññ 
ValidateBindTypes
ññ )
(
ññ) *
concreteType
ññ* 6
,
ññ6 7
contractType
ññ8 D
)
ññD E
)
ññE F
{
óó 
RegisterProvider
òò (
(
òò( )
	container
òò) 2
,
òò2 3
contractType
òò4 @
,
òò@ A
providerFunc
òòB N
(
òòN O
contractType
òòO [
,
òò[ \
concreteType
òò] i
)
òòi j
)
òòj k
;
òòk l
}
ôô 
}
öö 
}
õõ 
}
úú 	
bool
üü 
ValidateBindTypes
üü 
(
üü 
Type
üü #
concreteType
üü$ 0
,
üü0 1
Type
üü2 6
contractType
üü7 C
)
üüC D
{
†† 	
bool
°° '
isConcreteOpenGenericType
°° *
=
°°+ ,
concreteType
°°- 9
.
°°9 :
IsOpenGenericType
°°: K
(
°°K L
)
°°L M
;
°°M N
bool
¢¢ '
isContractOpenGenericType
¢¢ *
=
¢¢+ ,
contractType
¢¢- 9
.
¢¢9 :
IsOpenGenericType
¢¢: K
(
¢¢K L
)
¢¢L M
;
¢¢M N
if
££ 
(
££ '
isConcreteOpenGenericType
££ )
!=
££* ,'
isContractOpenGenericType
££- F
)
££F G
{
§§ 
return
•• 
false
•• 
;
•• 
}
¶¶ 
if
´´ 
(
´´ '
isContractOpenGenericType
´´ )
)
´´) *
{
¨¨ 
Assert
≠≠ 
.
≠≠ 
That
≠≠ 
(
≠≠ '
isConcreteOpenGenericType
≠≠ 5
)
≠≠5 6
;
≠≠6 7
if
ØØ 
(
ØØ 
TypeExtensions
ØØ "
.
ØØ" #'
IsAssignableToGenericType
ØØ# <
(
ØØ< =
concreteType
ØØ= I
,
ØØI J
contractType
ØØK W
)
ØØW X
)
ØØX Y
{
∞∞ 
return
±± 
true
±± 
;
±±  
}
≤≤ 
}
≥≥ 
else
¥¥ 
if
¥¥ 
(
¥¥ 
concreteType
¥¥ !
.
¥¥! " 
DerivesFromOrEqual
¥¥" 4
(
¥¥4 5
contractType
¥¥5 A
)
¥¥A B
)
¥¥B C
{
µµ 
return
∂∂ 
true
∂∂ 
;
∂∂ 
}
∑∑ 
if
øø 
(
øø 
BindInfo
øø 
.
øø !
InvalidBindResponse
øø ,
==
øø- /"
InvalidBindResponses
øø0 D
.
øøD E
Assert
øøE K
)
øøK L
{
¿¿ 
throw
¡¡ 
Assert
¡¡ 
.
¡¡ 
CreateException
¡¡ ,
(
¡¡, -
$str
¬¬ M
,
¬¬M N
concreteType
¬¬O [
,
¬¬[ \
contractType
¬¬] i
)
¬¬i j
;
¬¬j k
}
√√ 
Assert
≈≈ 
.
≈≈ 
IsEqual
≈≈ 
(
≈≈ 
BindInfo
≈≈ #
.
≈≈# $!
InvalidBindResponse
≈≈$ 7
,
≈≈7 8"
InvalidBindResponses
≈≈9 M
.
≈≈M N
Skip
≈≈N R
)
≈≈R S
;
≈≈S T
return
∆∆ 
false
∆∆ 
;
∆∆ 
}
«« 	
	protected
ÃÃ 
void
ÃÃ =
/RegisterProvidersForAllContractsPerConcreteType
ÃÃ F
(
ÃÃF G
DiContainer
ÕÕ 
	container
ÕÕ !
,
ÕÕ! "
List
ŒŒ 
<
ŒŒ 
Type
ŒŒ 
>
ŒŒ 
concreteTypes
ŒŒ $
,
ŒŒ$ %
Func
œœ 
<
œœ 
DiContainer
œœ 
,
œœ 
Type
œœ "
,
œœ" #
	IProvider
œœ$ -
>
œœ- .
providerFunc
œœ/ ;
)
œœ; <
{
–– 	
Assert
—— 
.
—— 
That
—— 
(
—— 
!
—— 
BindInfo
—— !
.
——! "
ContractTypes
——" /
.
——/ 0
IsEmpty
——0 7
(
——7 8
)
——8 9
)
——9 :
;
——: ;
Assert
““ 
.
““ 
That
““ 
(
““ 
!
““ 
concreteTypes
““ &
.
““& '
IsEmpty
““' .
(
““. /
)
““/ 0
)
““0 1
;
““1 2
var
‘‘ 
providerMap
‘‘ 
=
‘‘ 
ZenPools
‘‘ &
.
‘‘& '
SpawnDictionary
‘‘' 6
<
‘‘6 7
Type
‘‘7 ;
,
‘‘; <
	IProvider
‘‘= F
>
‘‘F G
(
‘‘G H
)
‘‘H I
;
‘‘I J
try
’’ 
{
÷÷ 
foreach
◊◊ 
(
◊◊ 
var
◊◊ 
concreteType
◊◊ )
in
◊◊* ,
concreteTypes
◊◊- :
)
◊◊: ;
{
ÿÿ 
var
ŸŸ 
provider
ŸŸ  
=
ŸŸ! "
providerFunc
ŸŸ# /
(
ŸŸ/ 0
	container
ŸŸ0 9
,
ŸŸ9 :
concreteType
ŸŸ; G
)
ŸŸG H
;
ŸŸH I
providerMap
€€ 
[
€€  
concreteType
€€  ,
]
€€, -
=
€€. /
provider
€€0 8
;
€€8 9
if
›› 
(
›› 
BindInfo
››  
.
››  !#
MarkAsUniqueSingleton
››! 6
)
››6 7
{
ﬁﬁ 
	container
ﬂﬂ !
.
ﬂﬂ! "#
SingletonMarkRegistry
ﬂﬂ" 7
.
ﬂﬂ7 8
MarkSingleton
ﬂﬂ8 E
(
ﬂﬂE F
concreteType
ﬂﬂF R
)
ﬂﬂR S
;
ﬂﬂS T
}
‡‡ 
else
·· 
if
·· 
(
·· 
BindInfo
·· %
.
··% &#
MarkAsCreationBinding
··& ;
)
··; <
{
‚‚ 
	container
„„ !
.
„„! "#
SingletonMarkRegistry
„„" 7
.
„„7 8
MarkNonSingleton
„„8 H
(
„„H I
concreteType
„„I U
)
„„U V
;
„„V W
}
‰‰ 
}
ÂÂ 
foreach
ÁÁ 
(
ÁÁ 
var
ÁÁ 
contractType
ÁÁ )
in
ÁÁ* ,
BindInfo
ÁÁ- 5
.
ÁÁ5 6
ContractTypes
ÁÁ6 C
)
ÁÁC D
{
ËË 
foreach
ÈÈ 
(
ÈÈ 
var
ÈÈ  
concreteType
ÈÈ! -
in
ÈÈ. 0
concreteTypes
ÈÈ1 >
)
ÈÈ> ?
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
ValidateBindTypes
ÎÎ -
(
ÎÎ- .
concreteType
ÎÎ. :
,
ÎÎ: ;
contractType
ÎÎ< H
)
ÎÎH I
)
ÎÎI J
{
ÏÏ 
RegisterProvider
ÌÌ ,
(
ÌÌ, -
	container
ÌÌ- 6
,
ÌÌ6 7
contractType
ÌÌ8 D
,
ÌÌD E
providerMap
ÌÌF Q
[
ÌÌQ R
concreteType
ÌÌR ^
]
ÌÌ^ _
)
ÌÌ_ `
;
ÌÌ` a
}
ÓÓ 
}
ÔÔ 
}
 
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
ZenPools
ÙÙ 
.
ÙÙ 
DespawnDictionary
ÙÙ *
(
ÙÙ* +
providerMap
ÙÙ+ 6
)
ÙÙ6 7
;
ÙÙ7 8
}
ıı 
}
ˆˆ 	
}
˜˜ 
}¯¯ ßy
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Static\PoolableStaticMemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

class $
PoolableStaticMemoryPool )
<) *
TValue* 0
>0 1
:2 3
StaticMemoryPool4 D
<D E
TValueE K
>K L
where 
TValue 
: 
class 
, 
	IPoolable '
,' (
new) ,
(, -
)- .
{ 
public $
PoolableStaticMemoryPool '
(' (
)( )
: 
base 
( 
	OnSpawned 
, 
OnDespawned )
)) *
{ 	
}		 	
static 
void 
	OnSpawned 
( 
TValue $
value% *
)* +
{ 	
value 
. 
	OnSpawned 
( 
) 
; 
} 	
static 
void 
OnDespawned 
(  
TValue  &
value' ,
), -
{ 	
value 
. 
OnDespawned 
( 
) 
;  
} 	
} 
public 

class $
PoolableStaticMemoryPool )
<) *
TParam1* 1
,1 2
TValue3 9
>9 :
:; <
StaticMemoryPool= M
<M N
TParam1N U
,U V
TValueW ]
>] ^
where 
TValue 
: 
class 
, 
	IPoolable '
<' (
TParam1( /
>/ 0
,0 1
new2 5
(5 6
)6 7
{ 
public $
PoolableStaticMemoryPool '
(' (
)( )
: 
base 
( 
	OnSpawned 
, 
OnDespawned )
)) *
{ 	
} 	
static 
void 
	OnSpawned 
( 
TParam1 %
p1& (
,( )
TValue* 0
value1 6
)6 7
{ 	
value   
.   
	OnSpawned   
(   
p1   
)   
;    
}!! 	
static## 
void## 
OnDespawned## 
(##  
TValue##  &
value##' ,
)##, -
{$$ 	
value%% 
.%% 
OnDespawned%% 
(%% 
)%% 
;%%  
}&& 	
}'' 
public)) 

class)) $
PoolableStaticMemoryPool)) )
<))) *
TParam1))* 1
,))1 2
TParam2))3 :
,)): ;
TValue))< B
>))B C
:))D E
StaticMemoryPool))F V
<))V W
TParam1))W ^
,))^ _
TParam2))` g
,))g h
TValue))i o
>))o p
where** 
TValue** 
:** 
class** 
,** 
	IPoolable** '
<**' (
TParam1**( /
,**/ 0
TParam2**1 8
>**8 9
,**9 :
new**; >
(**> ?
)**? @
{++ 
public,, $
PoolableStaticMemoryPool,, '
(,,' (
),,( )
:-- 
base-- 
(-- 
	OnSpawned-- 
,-- 
OnDespawned-- )
)--) *
{.. 	
}// 	
static11 
void11 
	OnSpawned11 
(11 
TParam111 %
p111& (
,11( )
TParam211* 1
p2112 4
,114 5
TValue116 <
value11= B
)11B C
{22 	
value33 
.33 
	OnSpawned33 
(33 
p133 
,33 
p233  "
)33" #
;33# $
}44 	
static66 
void66 
OnDespawned66 
(66  
TValue66  &
value66' ,
)66, -
{77 	
value88 
.88 
OnDespawned88 
(88 
)88 
;88  
}99 	
}:: 
public<< 

class<< $
PoolableStaticMemoryPool<< )
<<<) *
TParam1<<* 1
,<<1 2
TParam2<<3 :
,<<: ;
TParam3<<< C
,<<C D
TValue<<E K
><<K L
:<<M N
StaticMemoryPool<<O _
<<<_ `
TParam1<<` g
,<<g h
TParam2<<i p
,<<p q
TParam3<<r y
,<<y z
TValue	<<{ Å
>
<<Å Ç
where== 
TValue== 
:== 
class== 
,== 
	IPoolable== '
<==' (
TParam1==( /
,==/ 0
TParam2==1 8
,==8 9
TParam3==: A
>==A B
,==B C
new==D G
(==G H
)==H I
{>> 
public?? $
PoolableStaticMemoryPool?? '
(??' (
)??( )
:@@ 
base@@ 
(@@ 
	OnSpawned@@ 
,@@ 
OnDespawned@@ )
)@@) *
{AA 	
}BB 	
staticDD 
voidDD 
	OnSpawnedDD 
(DD 
TParam1DD %
p1DD& (
,DD( )
TParam2DD* 1
p2DD2 4
,DD4 5
TParam3DD6 =
p3DD> @
,DD@ A
TValueDDB H
valueDDI N
)DDN O
{EE 	
valueFF 
.FF 
	OnSpawnedFF 
(FF 
p1FF 
,FF 
p2FF  "
,FF" #
p3FF$ &
)FF& '
;FF' (
}GG 	
staticII 
voidII 
OnDespawnedII 
(II  
TValueII  &
valueII' ,
)II, -
{JJ 	
valueKK 
.KK 
OnDespawnedKK 
(KK 
)KK 
;KK  
}LL 	
}MM 
publicOO 

classOO $
PoolableStaticMemoryPoolOO )
<OO) *
TParam1OO* 1
,OO1 2
TParam2OO3 :
,OO: ;
TParam3OO< C
,OOC D
TParam4OOE L
,OOL M
TValueOON T
>OOT U
:OOV W
StaticMemoryPoolOOX h
<OOh i
TParam1OOi p
,OOp q
TParam2OOr y
,OOy z
TParam3	OO{ Ç
,
OOÇ É
TParam4
OOÑ ã
,
OOã å
TValue
OOç ì
>
OOì î
wherePP 
TValuePP 
:PP 
classPP 
,PP 
	IPoolablePP '
<PP' (
TParam1PP( /
,PP/ 0
TParam2PP1 8
,PP8 9
TParam3PP: A
,PPA B
TParam4PPC J
>PPJ K
,PPK L
newPPM P
(PPP Q
)PPQ R
{QQ 
publicRR $
PoolableStaticMemoryPoolRR '
(RR' (
)RR( )
:SS 
baseSS 
(SS 
	OnSpawnedSS 
,SS 
OnDespawnedSS )
)SS) *
{TT 	
}UU 	
staticWW 
voidWW 
	OnSpawnedWW 
(WW 
TParam1WW %
p1WW& (
,WW( )
TParam2WW* 1
p2WW2 4
,WW4 5
TParam3WW6 =
p3WW> @
,WW@ A
TParam4WWB I
p4WWJ L
,WWL M
TValueWWN T
valueWWU Z
)WWZ [
{XX 	
valueYY 
.YY 
	OnSpawnedYY 
(YY 
p1YY 
,YY 
p2YY  "
,YY" #
p3YY$ &
,YY& '
p4YY( *
)YY* +
;YY+ ,
}ZZ 	
static\\ 
void\\ 
OnDespawned\\ 
(\\  
TValue\\  &
value\\' ,
)\\, -
{]] 	
value^^ 
.^^ 
OnDespawned^^ 
(^^ 
)^^ 
;^^  
}__ 	
}`` 
publicbb 

classbb $
PoolableStaticMemoryPoolbb )
<bb) *
TParam1bb* 1
,bb1 2
TParam2bb3 :
,bb: ;
TParam3bb< C
,bbC D
TParam4bbE L
,bbL M
TParam5bbN U
,bbU V
TValuebbW ]
>bb] ^
:bb_ `
StaticMemoryPoolbba q
<bbq r
TParam1bbr y
,bby z
TParam2	bb{ Ç
,
bbÇ É
TParam3
bbÑ ã
,
bbã å
TParam4
bbç î
,
bbî ï
TParam5
bbñ ù
,
bbù û
TValue
bbü •
>
bb• ¶
wherecc 
TValuecc 
:cc 
classcc 
,cc 
	IPoolablecc '
<cc' (
TParam1cc( /
,cc/ 0
TParam2cc1 8
,cc8 9
TParam3cc: A
,ccA B
TParam4ccC J
,ccJ K
TParam5ccL S
>ccS T
,ccT U
newccV Y
(ccY Z
)ccZ [
{dd 
publicee $
PoolableStaticMemoryPoolee '
(ee' (
)ee( )
:ff 
baseff 
(ff 
	OnSpawnedff 
,ff 
OnDespawnedff )
)ff) *
{gg 	
}hh 	
staticjj 
voidjj 
	OnSpawnedjj 
(jj 
TParam1jj %
p1jj& (
,jj( )
TParam2jj* 1
p2jj2 4
,jj4 5
TParam3jj6 =
p3jj> @
,jj@ A
TParam4jjB I
p4jjJ L
,jjL M
TParam5jjN U
p5jjV X
,jjX Y
TValuejjZ `
valuejja f
)jjf g
{kk 	
valuell 
.ll 
	OnSpawnedll 
(ll 
p1ll 
,ll 
p2ll  "
,ll" #
p3ll$ &
,ll& '
p4ll( *
,ll* +
p5ll, .
)ll. /
;ll/ 0
}mm 	
staticoo 
voidoo 
OnDespawnedoo 
(oo  
TValueoo  &
valueoo' ,
)oo, -
{pp 	
valueqq 
.qq 
OnDespawnedqq 
(qq 
)qq 
;qq  
}rr 	
}ss 
publicuu 

classuu $
PoolableStaticMemoryPooluu )
<uu) *
TParam1uu* 1
,uu1 2
TParam2uu3 :
,uu: ;
TParam3uu< C
,uuC D
TParam4uuE L
,uuL M
TParam5uuN U
,uuU V
TParam6uuW ^
,uu^ _
TValueuu` f
>uuf g
:uuh i
StaticMemoryPooluuj z
<uuz {
TParam1	uu{ Ç
,
uuÇ É
TParam2
uuÑ ã
,
uuã å
TParam3
uuç î
,
uuî ï
TParam4
uuñ ù
,
uuù û
TParam5
uuü ¶
,
uu¶ ß
TParam6
uu® Ø
,
uuØ ∞
TValue
uu± ∑
>
uu∑ ∏
wherevv 
TValuevv 
:vv 
classvv 
,vv 
	IPoolablevv '
<vv' (
TParam1vv( /
,vv/ 0
TParam2vv1 8
,vv8 9
TParam3vv: A
,vvA B
TParam4vvC J
,vvJ K
TParam5vvL S
,vvS T
TParam6vvU \
>vv\ ]
,vv] ^
newvv_ b
(vvb c
)vvc d
{ww 
publicxx $
PoolableStaticMemoryPoolxx '
(xx' (
)xx( )
:yy 
baseyy 
(yy 
	OnSpawnedyy 
,yy 
OnDespawnedyy )
)yy) *
{zz 	
}{{ 	
static}} 
void}} 
	OnSpawned}} 
(}} 
TParam1}} %
p1}}& (
,}}( )
TParam2}}* 1
p2}}2 4
,}}4 5
TParam3}}6 =
p3}}> @
,}}@ A
TParam4}}B I
p4}}J L
,}}L M
TParam5}}N U
p5}}V X
,}}X Y
TParam6}}Z a
p6}}b d
,}}d e
TValue}}f l
value}}m r
)}}r s
{~~ 	
value 
. 
	OnSpawned 
( 
p1 
, 
p2  "
," #
p3$ &
,& '
p4( *
,* +
p5, .
,. /
p60 2
)2 3
;3 4
}
ÄÄ 	
static
ÇÇ 
void
ÇÇ 
OnDespawned
ÇÇ 
(
ÇÇ  
TValue
ÇÇ  &
value
ÇÇ' ,
)
ÇÇ, -
{
ÉÉ 	
value
ÑÑ 
.
ÑÑ 
OnDespawned
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ  
}
ÖÖ 	
}
ÜÜ 
public
àà 

class
àà &
PoolableStaticMemoryPool
àà )
<
àà) *
TParam1
àà* 1
,
àà1 2
TParam2
àà3 :
,
àà: ;
TParam3
àà< C
,
ààC D
TParam4
ààE L
,
ààL M
TParam5
ààN U
,
ààU V
TParam6
ààW ^
,
àà^ _
TParam7
àà` g
,
ààg h
TValue
àài o
>
àào p
:
ààq r
StaticMemoryPoolààs É
<ààÉ Ñ
TParam1ààÑ ã
,ààã å
TParam2ààç î
,ààî ï
TParam3ààñ ù
,ààù û
TParam4ààü ¶
,àà¶ ß
TParam5àà® Ø
,ààØ ∞
TParam6àà± ∏
,àà∏ π
TParam7àà∫ ¡
,àà¡ ¬
TValueàà√ …
>àà…  
where
ââ 
TValue
ââ 
:
ââ 
class
ââ 
,
ââ 
	IPoolable
ââ '
<
ââ' (
TParam1
ââ( /
,
ââ/ 0
TParam2
ââ1 8
,
ââ8 9
TParam3
ââ: A
,
ââA B
TParam4
ââC J
,
ââJ K
TParam5
ââL S
,
ââS T
TParam6
ââU \
,
ââ\ ]
TParam7
ââ^ e
>
ââe f
,
ââf g
new
ââh k
(
ââk l
)
ââl m
{
ää 
public
ãã &
PoolableStaticMemoryPool
ãã '
(
ãã' (
)
ãã( )
:
åå 
base
åå 
(
åå 
	OnSpawned
åå 
,
åå 
OnDespawned
åå )
)
åå) *
{
çç 	
}
éé 	
static
êê 
void
êê 
	OnSpawned
êê 
(
êê 
TParam1
êê %
p1
êê& (
,
êê( )
TParam2
êê* 1
p2
êê2 4
,
êê4 5
TParam3
êê6 =
p3
êê> @
,
êê@ A
TParam4
êêB I
p4
êêJ L
,
êêL M
TParam5
êêN U
p5
êêV X
,
êêX Y
TParam6
êêZ a
p6
êêb d
,
êêd e
TParam7
êêf m
p7
êên p
,
êêp q
TValue
êêr x
value
êêy ~
)
êê~ 
{
ëë 	
value
íí 
.
íí 
	OnSpawned
íí 
(
íí 
p1
íí 
,
íí 
p2
íí  "
,
íí" #
p3
íí$ &
,
íí& '
p4
íí( *
,
íí* +
p5
íí, .
,
íí. /
p6
íí0 2
,
íí2 3
p7
íí4 6
)
íí6 7
;
íí7 8
}
ìì 	
static
ïï 
void
ïï 
OnDespawned
ïï 
(
ïï  
TValue
ïï  &
value
ïï' ,
)
ïï, -
{
ññ 	
value
óó 
.
óó 
OnDespawned
óó 
(
óó 
)
óó 
;
óó  
}
òò 	
}
ôô 
}öö £
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder1.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
	TContract0 9
>9 :
:; <
FactoryFromBinder= N
<N O
TParam1O V
,V W
	TContractX a
>a b
{ 
public !
FactoryToChoiceBinder $
($ %
DiContainer		 
bindContainer		 %
,		% &
BindInfo		' /
bindInfo		0 8
,		8 9
FactoryBindInfo		: I
factoryBindInfo		J Y
)		Y Z
:

 
base

 
(

 
bindContainer

  
,

  !
bindInfo

" *
,

* +
factoryBindInfo

, ;
)

; <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
	TContract* 3
>3 4
ToSelf5 ;
(; <
)< =
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
	TConcrete* 3
>3 4
To5 7
<7 8
	TConcrete8 A
>A B
(B C
)C D
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
	TConcrete2 ;
>; <
(< =
BindContainer= J
,J K
BindInfoL T
,T U
FactoryBindInfoV e
)e f
;f g
} 	
} 
} ü	
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\NonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
NonLazyBinder 
:  
IfNotBoundBinder! 1
{ 
public 
NonLazyBinder 
( 
BindInfo %
bindInfo& .
). /
: 
base 
( 
bindInfo 
) 
{ 	
}		 	
public 
IfNotBoundBinder 
NonLazy  '
(' (
)( )
{ 	
BindInfo 
. 
NonLazy 
= 
true #
;# $
return 
this 
; 
} 	
public 
IfNotBoundBinder 
Lazy  $
($ %
)% &
{ 	
BindInfo 
. 
NonLazy 
= 
false $
;$ %
return 
this 
; 
} 	
} 
} ”5
^C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\TransientProvider.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 
TransientProvider

 "
:

# $
	IProvider

% .
{ 
readonly 
DiContainer 

_container '
;' (
readonly 
Type 
_concreteType #
;# $
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly 
object 
_concreteIdentifier +
;+ ,
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
public 
TransientProvider  
(  !
Type 
concreteType 
, 
DiContainer *
	container+ 4
,4 5
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6
string7 =
bindingContext> L
,L M
object 
concreteIdentifier %
,% &
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	
Assert 
. 
That 
( 
! 
concreteType %
.% &

IsAbstract& 0
(0 1
)1 2
,2 3
$str ^
,^ _
concreteType 
, 
bindingContext ,
==- /
null0 4
?5 6
$str7 9
:: ;
$str< Q
.Q R
FmtR U
(U V
bindingContextV d
)d e
)e f
;f g

_container 
= 
	container "
;" #
_concreteType 
= 
concreteType (
;( )
_extraArguments 
= 
extraArguments ,
., -
ToList- 3
(3 4
)4 5
;5 6
_concreteIdentifier 
=  !
concreteIdentifier" 4
;4 5 
_instantiateCallback    
=  ! "
instantiateCallback  # 6
;  6 7
}!! 	
public## 
bool## 
IsCached## 
{$$ 	
get%% 
{%% 
return%% 
false%% 
;%% 
}%%  !
}&& 	
public(( 
bool(( '
TypeVariesBasedOnMemberType(( /
{)) 	
get** 
{** 
return** 
_concreteType** &
.**& '
IsOpenGenericType**' 8
(**8 9
)**9 :
;**: ;
}**< =
}++ 	
public-- 
Type-- 
GetInstanceType-- #
(--# $
InjectContext--$ 1
context--2 9
)--9 :
{.. 	
if// 
(// 
!// 
_concreteType// 
.// 
DerivesFromOrEqual// 1
(//1 2
context//2 9
.//9 :

MemberType//: D
)//D E
)//E F
{00 
return11 
null11 
;11 
}22 
return44 
GetTypeToCreate44 "
(44" #
context44# *
.44* +

MemberType44+ 5
)445 6
;446 7
}55 	
public77 
void77 *
GetAllInstancesWithInjectSplit77 2
(772 3
InjectContext88 
context88 !
,88! "
List88# '
<88' (
TypeValuePair88( 5
>885 6
args887 ;
,88; <
out88= @
Action88A G
injectAction88H T
,88T U
List88V Z
<88Z [
object88[ a
>88a b
buffer88c i
)88i j
{99 	
Assert:: 
.:: 
	IsNotNull:: 
(:: 
context:: $
)::$ %
;::% &
var<< 
instanceType<< 
=<< 
GetTypeToCreate<< .
(<<. /
context<</ 6
.<<6 7

MemberType<<7 A
)<<A B
;<<B C
var>> 
	extraArgs>> 
=>> 
ZenPools>> $
.>>$ %
	SpawnList>>% .
<>>. /
TypeValuePair>>/ <
>>>< =
(>>= >
)>>> ?
;>>? @
	extraArgs@@ 
.@@ 
AllocFreeAddRange@@ '
(@@' (
_extraArguments@@( 7
)@@7 8
;@@8 9
	extraArgsAA 
.AA 
AllocFreeAddRangeAA '
(AA' (
argsAA( ,
)AA, -
;AA- .
varCC 
instanceCC 
=CC 

_containerCC %
.CC% &
InstantiateExplicitCC& 9
(CC9 :
instanceTypeCC: F
,CCF G
falseCCH M
,CCM N
	extraArgsCCO X
,CCX Y
contextCCZ a
,CCa b
_concreteIdentifierCCc v
)CCv w
;CCw x
injectActionEE 
=EE 
(EE 
)EE 
=>EE  
{FF 

_containerGG 
.GG 
InjectExplicitGG )
(GG) *
instanceHH 
,HH 
instanceTypeHH *
,HH* +
	extraArgsHH, 5
,HH5 6
contextHH7 >
,HH> ?
_concreteIdentifierHH@ S
)HHS T
;HHT U
AssertJJ 
.JJ 
ThatJJ 
(JJ 
	extraArgsJJ %
.JJ% &
CountJJ& +
==JJ, .
$numJJ/ 0
)JJ0 1
;JJ1 2
ZenPoolsKK 
.KK 
DespawnListKK $
(KK$ %
	extraArgsKK% .
)KK. /
;KK/ 0
ifMM 
(MM  
_instantiateCallbackMM (
!=MM) +
nullMM, 0
)MM0 1
{NN  
_instantiateCallbackOO (
(OO( )
contextOO) 0
,OO0 1
instanceOO2 :
)OO: ;
;OO; <
}PP 
}QQ 
;QQ 
bufferSS 
.SS 
AddSS 
(SS 
instanceSS 
)SS  
;SS  !
}TT 	
TypeVV 
GetTypeToCreateVV 
(VV 
TypeVV !
contractTypeVV" .
)VV. /
{WW 	
returnXX 
ProviderUtilXX 
.XX   
GetTypeToInstantiateXX  4
(XX4 5
contractTypeXX5 A
,XXA B
_concreteTypeXXC P
)XXP Q
;XXQ R
}YY 	
}ZZ 
}[[ ˚-
ÉC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\BindSignal\BindSignalFromBinder.cs
	namespace 	
Zenject
 
{ 
public 

class  
BindSignalFromBinder %
<% &
TObject& -
,- .
TSignal/ 6
>6 7
{ 
readonly 
BindStatement 
_bindStatement -
;- .
readonly		 
Func		 
<		 
TObject		 
,		 
Action		 %
<		% &
TSignal		& -
>		- .
>		. /
_methodGetter		0 =
;		= >
readonly

 
DiContainer

 

_container

 '
;

' (
readonly !
SignalBindingBindInfo &
_signalBindInfo' 6
;6 7
public  
BindSignalFromBinder #
(# $!
SignalBindingBindInfo !
signalBindInfo" 0
,0 1
BindStatement2 ?
bindStatement@ M
,M N
FuncO S
<S T
TObjectT [
,[ \
Action] c
<c d
TSignald k
>k l
>l m
methodGettern z
,z {
DiContainer 
	container !
)! "
{ 	
_signalBindInfo 
= 
signalBindInfo ,
;, -
_bindStatement 
= 
bindStatement *
;* +
_methodGetter 
= 
methodGetter (
;( )

_container 
= 
	container "
;" #
} 	
public 
SignalCopyBinder 
FromResolve  +
(+ ,
), -
{ 	
return 
From 
( 
x 
=> 
x 
. 
FromResolve *
(* +
)+ ,
., -
AsCached- 5
(5 6
)6 7
)7 8
;8 9
} 	
public 
SignalCopyBinder 
FromResolveAll  .
(. /
)/ 0
{ 	
return 
From 
( 
x 
=> 
x 
. 
FromResolveAll -
(- .
). /
./ 0
AsCached0 8
(8 9
)9 :
): ;
;; <
} 	
public!! 
SignalCopyBinder!! 
FromNew!!  '
(!!' (
)!!( )
{"" 	
return## 
From## 
(## 
x## 
=>## 
x## 
.## 
FromNew## &
(##& '
)##' (
.##( )
AsCached##) 1
(##1 2
)##2 3
)##3 4
;##4 5
}$$ 	
public&& 
SignalCopyBinder&& 
From&&  $
(&&$ %
Action&&% +
<&&+ ,!
ConcreteBinderGeneric&&, A
<&&A B
TObject&&B I
>&&I J
>&&J K
objectBindCallback&&L ^
)&&^ _
{'' 	
Assert(( 
.(( 
That(( 
((( 
!(( 
_bindStatement(( '
.((' (
HasFinalizer((( 4
)((4 5
;((5 6
_bindStatement)) 
.)) 
SetFinalizer)) '
())' (
new))( + 
NullBindingFinalizer)), @
())@ A
)))A B
)))B C
;))C D
var++ 
objectLookupId++ 
=++  
Guid++! %
.++% &
NewGuid++& -
(++- .
)++. /
;++/ 0
var.. 
objectBinder.. 
=.. 

_container.. )
...) *
BindNoFlush..* 5
<..5 6
TObject..6 =
>..= >
(..> ?
)..? @
...@ A
WithId..A G
(..G H
objectLookupId..H V
)..V W
;..W X
objectBindCallback00 
(00 
objectBinder00 +
)00+ ,
;00, -
Func44 
<44 
object44 
,44 
Action44 
<44  
object44  &
>44& '
>44' (
methodGetterMapper44) ;
=44< =
obj55 
=>55 
s55 
=>55 
_methodGetter55 )
(55) *
(55* +
TObject55+ 2
)552 3
obj553 6
)556 7
(557 8
(558 9
TSignal559 @
)55@ A
s55A B
)55B C
;55C D
var77 
wrapperBinder77 
=77 

_container77  *
.77* +
Bind77+ /
<77/ 0
IDisposable770 ;
>77; <
(77< =
)77= >
.88 
To88 
<88 +
SignalCallbackWithLookupWrapper88 3
>883 4
(884 5
)885 6
.99 
AsCached99 
(99 
)99 
.:: 
WithArguments:: 
(:: 
_signalBindInfo:: .
,::. /
typeof::0 6
(::6 7
TObject::7 >
)::> ?
,::? @
objectLookupId::A O
,::O P
methodGetterMapper::Q c
)::c d
.;; 
NonLazy;; 
(;; 
);; 
;;; 
var== 

copyBinder== 
=== 
new==  
SignalCopyBinder==! 1
(==1 2
wrapperBinder==3 @
.==@ A
BindInfo==A I
)==I J
;==J K

copyBinder?? 
.?? 
AddCopyBindInfo?? &
(??& '
objectBinder??' 3
.??3 4
BindInfo??4 <
)??< =
;??= >
return@@ 

copyBinder@@ 
;@@ 
}AA 	
}BB 
}CC ó#
ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByInstaller.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 *
SubContainerCreatorByInstaller

 /
:

0 1 
ISubContainerCreator

2 F
{ 
readonly 
Type 
_installerType $
;$ %
readonly 
DiContainer 

_container '
;' (
readonly 
List 
< 
TypeValuePair #
># $

_extraArgs% /
;/ 0
readonly '
SubContainerCreatorBindInfo ,
_containerBindInfo- ?
;? @
public *
SubContainerCreatorByInstaller -
(- .
DiContainer 
	container !
,! "'
SubContainerCreatorBindInfo '
containerBindInfo( 9
,9 :
Type 
installerType 
, 
IEnumerable 
< 
TypeValuePair %
>% &
	extraArgs' 0
)0 1
{ 	
_installerType 
= 
installerType *
;* +

_container 
= 
	container "
;" #

_extraArgs 
= 
	extraArgs "
." #
ToList# )
() *
)* +
;+ ,
_containerBindInfo 
=  
containerBindInfo! 2
;2 3
Assert 
. 
That 
( 
installerType %
.% &
DerivesFrom& 1
<1 2
InstallerBase2 ?
>? @
(@ A
)A B
,B C
$str u
,u v
installerType	w Ñ
)
Ñ Ö
;
Ö Ü
} 	
public   *
SubContainerCreatorByInstaller   -
(  - .
DiContainer!! 
	container!! !
,!!! "'
SubContainerCreatorBindInfo"" '
containerBindInfo""( 9
,""9 :
Type## 
installerType## 
)## 
:$$ 
this$$ 
($$ 
	container$$ 
,$$ 
containerBindInfo$$ /
,$$/ 0
installerType$$1 >
,$$> ?
new$$@ C
List$$D H
<$$H I
TypeValuePair$$I V
>$$V W
($$W X
)$$X Y
)$$Y Z
{%% 	
}&& 	
public(( 
DiContainer(( 
CreateSubContainer(( -
(((- .
List((. 2
<((2 3
TypeValuePair((3 @
>((@ A
args((B F
,((F G
InjectContext((H U
context((V ]
)((] ^
{)) 	
var** 
subContainer** 
=** 

_container** )
.**) *
CreateSubContainer*** <
(**< =
)**= >
;**> ?#
SubContainerCreatorUtil,, #
.,,# $
ApplyBindSettings,,$ 5
(,,5 6
_containerBindInfo,,6 H
,,,H I
subContainer,,J V
),,V W
;,,W X
var.. 
	extraArgs.. 
=.. 
ZenPools.. $
...$ %
	SpawnList..% .
<... /
TypeValuePair../ <
>..< =
(..= >
)..> ?
;..? @
	extraArgs00 
.00 
AllocFreeAddRange00 '
(00' (

_extraArgs00( 2
)002 3
;003 4
	extraArgs11 
.11 
AllocFreeAddRange11 '
(11' (
args11( ,
)11, -
;11- .
var33 
	installer33 
=33 
(33 
InstallerBase33 *
)33* +
subContainer33+ 7
.337 8
InstantiateExplicit338 K
(33K L
_installerType44 
,44 
	extraArgs44  )
)44) *
;44* +
ZenPools66 
.66 
DespawnList66  
(66  !
	extraArgs66! *
)66* +
;66+ ,
	installer88 
.88 
InstallBindings88 %
(88% &
)88& '
;88' (
subContainer:: 
.:: 
ResolveRoots:: %
(::% &
)::& '
;::' (
return<< 
subContainer<< 
;<<  
}== 	
}>> 
}?? Ø
ÖC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByInstanceGetter.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class /
#SubContainerCreatorByInstanceGetter 4
:5 6 
ISubContainerCreator7 K
{		 
readonly

 
Func

 
<

 
InjectContext

 #
,

# $
DiContainer

% 0
>

0 1
_subcontainerGetter

2 E
;

E F
public /
#SubContainerCreatorByInstanceGetter 2
(2 3
Func 
< 
InjectContext 
, 
DiContainer  +
>+ ,
subcontainerGetter- ?
)? @
{ 	
_subcontainerGetter 
=  !
subcontainerGetter" 4
;4 5
} 	
public 
DiContainer 
CreateSubContainer -
(- .
List. 2
<2 3
TypeValuePair3 @
>@ A
argsB F
,F G
InjectContextH U
contextV ]
)] ^
{ 	
Assert 
. 
That 
( 
args 
. 
IsEmpty $
($ %
)% &
)& '
;' (
return 
_subcontainerGetter &
(& '
context' .
). /
;/ 0
} 	
} 
} Ú
mC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class &
ConditionCopyNonLazyBinder +
:, -
CopyNonLazyBinder. ?
{		 
public

 &
ConditionCopyNonLazyBinder

 )
(

) *
BindInfo

* 2
bindInfo

3 ;
)

; <
: 
base 
( 
bindInfo 
) 
{ 	
} 	
public 
CopyNonLazyBinder  
When! %
(% &
BindingCondition& 6
	condition7 @
)@ A
{ 	
BindInfo 
. 
	Condition 
=  
	condition! *
;* +
return 
this 
; 
} 	
public 
CopyNonLazyBinder  $
WhenInjectedIntoInstance! 9
(9 :
object: @
instanceA I
)I J
{ 	
return 
When 
( 
r 
=> 
ReferenceEquals ,
(, -
r- .
.. /
ObjectInstance/ =
,= >
instance? G
)G H
)H I
;I J
} 	
public 
CopyNonLazyBinder  
WhenInjectedInto! 1
(1 2
params2 8
Type9 =
[= >
]> ?
targets@ G
)G H
{ 	
return 
When 
( 
r 
=> 
targets $
.$ %
Where% *
(* +
x+ ,
=>- /
r0 1
.1 2

ObjectType2 <
!== ?
null@ D
&&E G
rH I
.I J

ObjectTypeJ T
.T U
DerivesFromOrEqualU g
(g h
xh i
)i j
)j k
.k l
Anyl o
(o p
)p q
)q r
;r s
} 	
public 
CopyNonLazyBinder  
WhenInjectedInto! 1
<1 2
T2 3
>3 4
(4 5
)5 6
{   	
return!! 
When!! 
(!! 
r!! 
=>!! 
r!! 
.!! 

ObjectType!! )
!=!!* ,
null!!- 1
&&!!2 4
r!!5 6
.!!6 7

ObjectType!!7 A
.!!A B
DerivesFromOrEqual!!B T
(!!T U
typeof!!U [
(!![ \
T!!\ ]
)!!] ^
)!!^ _
)!!_ `
;!!` a
}"" 	
public$$ 
CopyNonLazyBinder$$  
WhenNotInjectedInto$$! 4
<$$4 5
T$$5 6
>$$6 7
($$7 8
)$$8 9
{%% 	
return&& 
When&& 
(&& 
r&& 
=>&& 
r&& 
.&& 

ObjectType&& )
==&&* ,
null&&- 1
||&&2 4
!&&5 6
r&&6 7
.&&7 8

ObjectType&&8 B
.&&B C
DerivesFromOrEqual&&C U
(&&U V
typeof&&V \
(&&\ ]
T&&] ^
)&&^ _
)&&_ `
)&&` a
;&&a b
}'' 	
}(( 
})) Ç2
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\LinqExtensions.cs
	namespace 	

ModestTree
 
{ 
public		 

static		 
class		 
LinqExtensions		 &
{

 
public 
static 
IEnumerable !
<! "
T" #
># $
Yield% *
<* +
T+ ,
>, -
(- .
this. 2
T3 4
item5 9
)9 :
{ 	
yield 
return 
item 
; 
} 	
public 
static 
TSource 
OnlyOrDefault +
<+ ,
TSource, 3
>3 4
(4 5
this5 9
IEnumerable: E
<E F
TSourceF M
>M N
sourceO U
)U V
{ 	
Assert 
. 
	IsNotNull 
( 
source #
)# $
;$ %
if 
( 
source 
. 
Count 
( 
) 
>  
$num! "
)" #
{ 
return 
default 
( 
TSource &
)& '
;' (
} 
return 
source 
. 
FirstOrDefault (
(( )
)) *
;* +
} 	
public 
static 
bool 

HasAtLeast %
<% &
T& '
>' (
(( )
this) -
IEnumerable. 9
<9 :
T: ;
>; <

enumerable= G
,G H
intI L
amountM S
)S T
{ 	
return   

enumerable   
.   
Take   "
(  " #
amount  # )
)  ) *
.  * +
Count  + 0
(  0 1
)  1 2
==  3 5
amount  6 <
;  < =
}!! 	
public## 
static## 
bool## 
HasMoreThan## &
<##& '
T##' (
>##( )
(##) *
this##* .
IEnumerable##/ :
<##: ;
T##; <
>##< =

enumerable##> H
,##H I
int##J M
amount##N T
)##T U
{$$ 	
return%% 

enumerable%% 
.%% 

HasAtLeast%% (
(%%( )
amount%%) /
+%%/ 0
$num%%0 1
)%%1 2
;%%2 3
}&& 	
public(( 
static(( 
bool(( 
HasLessThan(( &
<((& '
T((' (
>((( )
((() *
this((* .
IEnumerable((/ :
<((: ;
T((; <
>((< =

enumerable((> H
,((H I
int((J M
amount((N T
)((T U
{)) 	
return** 

enumerable** 
.** 
	HasAtMost** '
(**' (
amount**( .
-**. /
$num**/ 0
)**0 1
;**1 2
}++ 	
public-- 
static-- 
bool-- 
	HasAtMost-- $
<--$ %
T--% &
>--& '
(--' (
this--( ,
IEnumerable--- 8
<--8 9
T--9 :
>--: ;

enumerable--< F
,--F G
int--H K
amount--L R
)--R S
{.. 	
return// 

enumerable// 
.// 
Take// "
(//" #
amount//# )
+//* +
$num//, -
)//- .
.//. /
Count/// 4
(//4 5
)//5 6
<=//7 9
amount//: @
;//@ A
}00 	
public22 
static22 
bool22 
IsEmpty22 "
<22" #
T22# $
>22$ %
(22% &
this22& *
IEnumerable22+ 6
<226 7
T227 8
>228 9

enumerable22: D
)22D E
{33 	
return44 
!44 

enumerable44 
.44 
Any44 "
(44" #
)44# $
;44$ %
}55 	
public77 
static77 
IEnumerable77 !
<77! "
T77" #
>77# $
GetDuplicates77% 2
<772 3
T773 4
>774 5
(775 6
this776 :
IEnumerable77; F
<77F G
T77G H
>77H I
list77J N
)77N O
{88 	
return99 
list99 
.99 
GroupBy99 
(99  
x99  !
=>99" $
x99% &
)99& '
.99' (
Where99( -
(99- .
x99. /
=>990 2
x993 4
.994 5
Skip995 9
(999 :
$num99: ;
)99; <
.99< =
Any99= @
(99@ A
)99A B
)99B C
.99C D
Select99D J
(99J K
x99K L
=>99M O
x99P Q
.99Q R
Key99R U
)99U V
;99V W
}:: 	
public<< 
static<< 
IEnumerable<< !
<<<! "
T<<" #
><<# $
Except<<% +
<<<+ ,
T<<, -
><<- .
(<<. /
this<</ 3
IEnumerable<<4 ?
<<<? @
T<<@ A
><<A B
list<<C G
,<<G H
T<<I J
item<<K O
)<<O P
{== 	
return>> 
list>> 
.>> 
Except>> 
(>> 
item>> #
.>># $
Yield>>$ )
(>>) *
)>>* +
)>>+ ,
;>>, -
}?? 	
publicMM 
staticMM 
boolMM 
ContainsItemMM '
<MM' (
TMM( )
>MM) *
(MM* +
thisMM+ /
IEnumerableMM0 ;
<MM; <
TMM< =
>MM= >
listMM? C
,MMC D
TMME F
valueMMG L
)MML M
{NN 	
returnPP 
listPP 
.PP 
WherePP 
(PP 
xPP 
=>PP  "
objectPP# )
.PP) *
EqualsPP* 0
(PP0 1
xPP1 2
,PP2 3
valuePP4 9
)PP9 :
)PP: ;
.PP; <
AnyPP< ?
(PP? @
)PP@ A
;PPA B
}QQ 	
}RR 
}SS ùH
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder4.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
TParam3B I
,I J
TParam4K R
,R S
	TContractT ]
>] ^
:_ `!
FactoryToChoiceBindera v
<v w
TParam1w ~
,~ 
TParam2
Ä á
,
á à
TParam3
â ê
,
ê ë
TParam4
í ô
,
ô ö
	TContract
õ §
>
§ •
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
	TContractI R
>R S 
WithFactoryArgumentsT h
<h i
Ti j
>j k
(k l
Tl m
paramn s
)s t
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
	TContractI R
>R S 
WithFactoryArgumentsT h
<h i
TFactoryParam1i w
,w x
TFactoryParam2	y á
>
á à
(
à â
TFactoryParam1
â ó
param1
ò û
,
û ü
TFactoryParam2
† Æ
param2
Ø µ
)
µ ∂
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
	TContractI R
>R S 
WithFactoryArgumentsT h
<h i
TFactoryParam1i w
,w x
TFactoryParam2	y á
,
á à
TFactoryParam3
â ó
>
ó ò
(
ò ô
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
TParam3%%7 >
,%%> ?
TParam4%%@ G
,%%G H
	TContract%%I R
>%%R S 
WithFactoryArguments%%T h
<%%h i
TFactoryParam1%%i w
,%%w x
TFactoryParam2	%%y á
,
%%á à
TFactoryParam3
%%â ó
,
%%ó ò
TFactoryParam4
%%ô ß
>
%%ß ®
(
%%® ©
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
TParam3,,7 >
,,,> ?
TParam4,,@ G
,,,G H
	TContract,,I R
>,,R S 
WithFactoryArguments,,T h
<,,h i
TFactoryParam1,,i w
,,,w x
TFactoryParam2	,,y á
,
,,á à
TFactoryParam3
,,â ó
,
,,ó ò
TFactoryParam4
,,ô ß
,
,,ß ®
TFactoryParam5
,,© ∑
>
,,∑ ∏
(
,,∏ π
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
TParam3337 >
,33> ?
TParam433@ G
,33G H
	TContract33I R
>33R S 
WithFactoryArguments33T h
<33h i
TFactoryParam133i w
,33w x
TFactoryParam2	33y á
,
33á à
TFactoryParam3
33â ó
,
33ó ò
TFactoryParam4
33ô ß
,
33ß ®
TFactoryParam5
33© ∑
,
33∑ ∏
TFactoryParam6
33π «
>
33« »
(
33» …
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
TParam3::7 >
,::> ?
TParam4::@ G
,::G H
	TContract::I R
>::R S 
WithFactoryArguments::T h
(::h i
object::i o
[::o p
]::p q
args::r v
)::v w
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
TParam3@@7 >
,@@> ?
TParam4@@@ G
,@@G H
	TContract@@I R
>@@R S(
WithFactoryArgumentsExplicit@@T p
(@@p q
IEnumerable@@q |
<@@| }
TypeValuePair	@@} ä
>
@@ä ã
	extraArgs
@@å ï
)
@@ï ñ
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF œ
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder4.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
TParam39 @
,@ A
TParam4B I
,I J
	TContractK T
>T U
:V W
FactoryFromBinderX i
<i j
TParam1j q
,q r
TParam2s z
,z {
TParam3	| É
,
É Ñ
TParam4
Ö å
,
å ç
	TContract
é ó
>
ó ò
{ 
public !
FactoryToChoiceBinder $
($ %
DiContainer		 
bindContainer		 %
,		% &
BindInfo		' /
bindInfo		0 8
,		8 9
FactoryBindInfo		: I
factoryBindInfo		J Y
)		Y Z
:

 
base

 
(

 
bindContainer

  
,

  !
bindInfo

" *
,

* +
factoryBindInfo

, ;
)

; <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
	TContractE N
>N O
ToSelfP V
(V W
)W X
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
	TConcreteE N
>N O
ToP R
<R S
	TConcreteS \
>\ ]
(] ^
)^ _
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
	TConcreteM V
>V W
(W X
BindContainerX e
,e f
BindInfog o
,o p
FactoryBindInfo	q Ä
)
Ä Å
;
Å Ç
} 	
} 
} ©
vC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\ISubContainerCreator.cs
	namespace 	
Zenject
 
{ 
public 

	interface  
ISubContainerCreator )
{ 
DiContainer 
CreateSubContainer &
(& '
List' +
<+ ,
TypeValuePair, 9
>9 :
args; ?
,? @
InjectContextA N
contextO V
)V W
;W X
} 
}		 ç}
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\TickableManager.cs
	namespace

 	
Zenject


 
{ 
public 

class 
TickableManager  
{ 
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Source! '
=( )
InjectSources* 7
.7 8
Local8 =
)= >
]> ?
readonly 
List 
< 
	ITickable 
>  

_tickables! +
=, -
null. 2
;2 3
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Source! '
=( )
InjectSources* 7
.7 8
Local8 =
)= >
]> ?
readonly 
List 
< 
IFixedTickable $
>$ %
_fixedTickables& 5
=6 7
null8 <
;< =
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Source! '
=( )
InjectSources* 7
.7 8
Local8 =
)= >
]> ?
readonly 
List 
< 
ILateTickable #
># $
_lateTickables% 3
=4 5
null6 :
;: ;
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Source! '
=( )
InjectSources* 7
.7 8
Local8 =
)= >
]> ?
readonly 
List 
< 
	ValuePair 
<  
Type  $
,$ %
int& )
>) *
>* +
_priorities, 7
=8 9
null: >
;> ?
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Id! #
=$ %
$str& -
,- .
Source/ 5
=6 7
InjectSources8 E
.E F
LocalF K
)K L
]L M
readonly 
List 
< 
	ValuePair 
<  
Type  $
,$ %
int& )
>) *
>* +
_fixedPriorities, <
== >
null? C
;C D
[ 	
Inject	 
( 
Optional 
= 
true 
,  
Id! #
=$ %
$str& ,
,, -
Source. 4
=5 6
InjectSources7 D
.D E
LocalE J
)J K
]K L
readonly 
List 
< 
	ValuePair 
<  
Type  $
,$ %
int& )
>) *
>* +
_latePriorities, ;
=< =
null> B
;B C
readonly&&  
TickablesTaskUpdater&& %
_updater&&& .
=&&/ 0
new&&1 4 
TickablesTaskUpdater&&5 I
(&&I J
)&&J K
;&&K L
readonly'' %
FixedTickablesTaskUpdater'' *
_fixedUpdater''+ 8
=''9 :
new''; >%
FixedTickablesTaskUpdater''? X
(''X Y
)''Y Z
;''Z [
readonly(( $
LateTickablesTaskUpdater(( )
_lateUpdater((* 6
=((7 8
new((9 <$
LateTickablesTaskUpdater((= U
(((U V
)((V W
;((W X
bool** 
	_isPaused** 
;** 
[,, 	
Inject,,	 
],, 
public-- 
TickableManager-- 
(-- 
)--  
{.. 	
}// 	
publicBB 
IEnumerableBB 
<BB 
	ITickableBB $
>BB$ %
	TickablesBB& /
{CC 	
getDD 
{DD 
returnDD 

_tickablesDD #
;DD# $
}DD% &
}EE 	
publicGG 
boolGG 
IsPausedGG 
{HH 	
getII 
{II 
returnII 
	_isPausedII "
;II" #
}II$ %
setJJ 
{JJ 
	_isPausedJJ 
=JJ 
valueJJ #
;JJ# $
}JJ% &
}KK 	
[MM 	
InjectMM	 
]MM 
publicNN 
voidNN 

InitializeNN 
(NN 
)NN  
{OO 	
InitTickablesPP 
(PP 
)PP 
;PP 
InitFixedTickablesQQ 
(QQ 
)QQ  
;QQ  !
InitLateTickablesRR 
(RR 
)RR 
;RR  
}SS 	
voidUU 
InitFixedTickablesUU 
(UU  
)UU  !
{VV 	
foreachWW 
(WW 
varWW 
typeWW 
inWW  
_fixedPrioritiesWW! 1
.WW1 2
SelectWW2 8
(WW8 9
xWW9 :
=>WW; =
xWW> ?
.WW? @
FirstWW@ E
)WWE F
)WWF G
{XX 
AssertYY 
.YY 
ThatYY 
(YY 
typeYY  
.YY  !
DerivesFromYY! ,
<YY, -
IFixedTickableYY- ;
>YY; <
(YY< =
)YY= >
,YY> ?
$strZZ s
,ZZs t
typeZZu y
)ZZy z
;ZZz {
}[[ 
foreach]] 
(]] 
var]] 
tickable]] !
in]]" $
_fixedTickables]]% 4
)]]4 5
{^^ 
varaa 
matchesaa 
=aa 
_fixedPrioritiesaa .
.aa. /
Whereaa/ 4
(aa4 5
xaa5 6
=>aa7 9
tickableaa: B
.aaB C
GetTypeaaC J
(aaJ K
)aaK L
.aaL M
DerivesFromOrEqualaaM _
(aa_ `
xaa` a
.aaa b
Firstaab g
)aag h
)aah i
.aai j
Selectaaj p
(aap q
xaaq r
=>aas u
xaav w
.aaw x
Secondaax ~
)aa~ 
.	aa Ä
ToList
aaÄ Ü
(
aaÜ á
)
aaá à
;
aaà â
intbb 
prioritybb 
=bb 
matchesbb &
.bb& '
IsEmptybb' .
(bb. /
)bb/ 0
?bb1 2
$numbb3 4
:bb5 6
matchesbb7 >
.bb> ?
Distinctbb? G
(bbG H
)bbH I
.bbI J
SinglebbJ P
(bbP Q
)bbQ R
;bbR S
_fixedUpdaterdd 
.dd 
AddTaskdd %
(dd% &
tickabledd& .
,dd. /
prioritydd0 8
)dd8 9
;dd9 :
}ee 
}ff 	
voidhh 
InitTickableshh 
(hh 
)hh 
{ii 	
foreachjj 
(jj 
varjj 
typejj 
injj  
_prioritiesjj! ,
.jj, -
Selectjj- 3
(jj3 4
xjj4 5
=>jj6 8
xjj9 :
.jj: ;
Firstjj; @
)jj@ A
)jjA B
{kk 
Assertll 
.ll 
Thatll 
(ll 
typell  
.ll  !
DerivesFromll! ,
<ll, -
	ITickablell- 6
>ll6 7
(ll7 8
)ll8 9
,ll9 :
$strmm n
,mmn o
typemmp t
)mmt u
;mmu v
}nn 
foreachpp 
(pp 
varpp 
tickablepp !
inpp" $

_tickablespp% /
)pp/ 0
{qq 
vartt 
matchestt 
=tt 
_prioritiestt )
.tt) *
Wherett* /
(tt/ 0
xtt0 1
=>tt2 4
tickablett5 =
.tt= >
GetTypett> E
(ttE F
)ttF G
.ttG H
DerivesFromOrEqualttH Z
(ttZ [
xtt[ \
.tt\ ]
Firsttt] b
)ttb c
)ttc d
.ttd e
Selecttte k
(ttk l
xttl m
=>ttn p
xttq r
.ttr s
Secondtts y
)tty z
.ttz {
ToList	tt{ Å
(
ttÅ Ç
)
ttÇ É
;
ttÉ Ñ
intuu 
priorityuu 
=uu 
matchesuu &
.uu& '
IsEmptyuu' .
(uu. /
)uu/ 0
?uu1 2
$numuu3 4
:uu5 6
matchesuu7 >
.uu> ?
Distinctuu? G
(uuG H
)uuH I
.uuI J
SingleuuJ P
(uuP Q
)uuQ R
;uuR S
_updaterww 
.ww 
AddTaskww  
(ww  !
tickableww! )
,ww) *
priorityww+ 3
)ww3 4
;ww4 5
}xx 
}yy 	
void{{ 
InitLateTickables{{ 
({{ 
){{  
{|| 	
foreach}} 
(}} 
var}} 
type}} 
in}}  
_latePriorities}}! 0
.}}0 1
Select}}1 7
(}}7 8
x}}8 9
=>}}: <
x}}= >
.}}> ?
First}}? D
)}}D E
)}}E F
{~~ 
Assert 
. 
That 
( 
type  
.  !
DerivesFrom! ,
<, -
ILateTickable- :
>: ;
(; <
)< =
,= >
$str
ÄÄ r
,
ÄÄr s
type
ÄÄt x
)
ÄÄx y
;
ÄÄy z
}
ÅÅ 
foreach
ÉÉ 
(
ÉÉ 
var
ÉÉ 
tickable
ÉÉ !
in
ÉÉ" $
_lateTickables
ÉÉ% 3
)
ÉÉ3 4
{
ÑÑ 
var
áá 
matches
áá 
=
áá 
_latePriorities
áá -
.
áá- .
Where
áá. 3
(
áá3 4
x
áá4 5
=>
áá6 8
tickable
áá9 A
.
ááA B
GetType
ááB I
(
ááI J
)
ááJ K
.
ááK L 
DerivesFromOrEqual
ááL ^
(
áá^ _
x
áá_ `
.
áá` a
First
ááa f
)
ááf g
)
áág h
.
ááh i
Select
áái o
(
ááo p
x
ááp q
=>
áár t
x
ááu v
.
ááv w
Second
ááw }
)
áá} ~
.
áá~ 
ToListáá Ö
(ááÖ Ü
)ááÜ á
;ááá à
int
àà 
priority
àà 
=
àà 
matches
àà &
.
àà& '
IsEmpty
àà' .
(
àà. /
)
àà/ 0
?
àà1 2
$num
àà3 4
:
àà5 6
matches
àà7 >
.
àà> ?
Distinct
àà? G
(
ààG H
)
ààH I
.
ààI J
Single
ààJ P
(
ààP Q
)
ààQ R
;
ààR S
_lateUpdater
ää 
.
ää 
AddTask
ää $
(
ää$ %
tickable
ää% -
,
ää- .
priority
ää/ 7
)
ää7 8
;
ää8 9
}
ãã 
}
åå 	
public
éé 
void
éé 
Add
éé 
(
éé 
	ITickable
éé !
tickable
éé" *
,
éé* +
int
éé, /
priority
éé0 8
)
éé8 9
{
èè 	
_updater
êê 
.
êê 
AddTask
êê 
(
êê 
tickable
êê %
,
êê% &
priority
êê' /
)
êê/ 0
;
êê0 1
}
ëë 	
public
ìì 
void
ìì 
Add
ìì 
(
ìì 
	ITickable
ìì !
tickable
ìì" *
)
ìì* +
{
îî 	
Add
ïï 
(
ïï 
tickable
ïï 
,
ïï 
$num
ïï 
)
ïï 
;
ïï 
}
ññ 	
public
òò 
void
òò 
AddLate
òò 
(
òò 
ILateTickable
òò )
tickable
òò* 2
,
òò2 3
int
òò4 7
priority
òò8 @
)
òò@ A
{
ôô 	
_lateUpdater
öö 
.
öö 
AddTask
öö  
(
öö  !
tickable
öö! )
,
öö) *
priority
öö+ 3
)
öö3 4
;
öö4 5
}
õõ 	
public
ùù 
void
ùù 
AddLate
ùù 
(
ùù 
ILateTickable
ùù )
tickable
ùù* 2
)
ùù2 3
{
ûû 	
AddLate
üü 
(
üü 
tickable
üü 
,
üü 
$num
üü 
)
üü  
;
üü  !
}
†† 	
public
¢¢ 
void
¢¢ 
AddFixed
¢¢ 
(
¢¢ 
IFixedTickable
¢¢ +
tickable
¢¢, 4
,
¢¢4 5
int
¢¢6 9
priority
¢¢: B
)
¢¢B C
{
££ 	
_fixedUpdater
§§ 
.
§§ 
AddTask
§§ !
(
§§! "
tickable
§§" *
,
§§* +
priority
§§, 4
)
§§4 5
;
§§5 6
}
•• 	
public
ßß 
void
ßß 
AddFixed
ßß 
(
ßß 
IFixedTickable
ßß +
tickable
ßß, 4
)
ßß4 5
{
®® 	
_fixedUpdater
©© 
.
©© 
AddTask
©© !
(
©©! "
tickable
©©" *
,
©©* +
$num
©©, -
)
©©- .
;
©©. /
}
™™ 	
public
¨¨ 
void
¨¨ 
Remove
¨¨ 
(
¨¨ 
	ITickable
¨¨ $
tickable
¨¨% -
)
¨¨- .
{
≠≠ 	
_updater
ÆÆ 
.
ÆÆ 

RemoveTask
ÆÆ 
(
ÆÆ  
tickable
ÆÆ  (
)
ÆÆ( )
;
ÆÆ) *
}
ØØ 	
public
±± 
void
±± 

RemoveLate
±± 
(
±± 
ILateTickable
±± ,
tickable
±±- 5
)
±±5 6
{
≤≤ 	
_lateUpdater
≥≥ 
.
≥≥ 

RemoveTask
≥≥ #
(
≥≥# $
tickable
≥≥$ ,
)
≥≥, -
;
≥≥- .
}
¥¥ 	
public
∂∂ 
void
∂∂ 
RemoveFixed
∂∂ 
(
∂∂  
IFixedTickable
∂∂  .
tickable
∂∂/ 7
)
∂∂7 8
{
∑∑ 	
_fixedUpdater
∏∏ 
.
∏∏ 

RemoveTask
∏∏ $
(
∏∏$ %
tickable
∏∏% -
)
∏∏- .
;
∏∏. /
}
ππ 	
public
ªª 
void
ªª 
Update
ªª 
(
ªª 
)
ªª 
{
ºº 	
if
ΩΩ 
(
ΩΩ 
IsPaused
ΩΩ 
)
ΩΩ 
{
ææ 
return
øø 
;
øø 
}
¿¿ 
_updater
¬¬ 
.
¬¬ 
OnFrameStart
¬¬ !
(
¬¬! "
)
¬¬" #
;
¬¬# $
_updater
√√ 
.
√√ 
	UpdateAll
√√ 
(
√√ 
)
√√  
;
√√  !
}
»» 	
public
   
void
   
FixedUpdate
   
(
    
)
    !
{
ÀÀ 	
if
ÃÃ 
(
ÃÃ 
IsPaused
ÃÃ 
)
ÃÃ 
{
ÕÕ 
return
ŒŒ 
;
ŒŒ 
}
œœ 
_fixedUpdater
—— 
.
—— 
OnFrameStart
—— &
(
——& '
)
——' (
;
——( )
_fixedUpdater
““ 
.
““ 
	UpdateAll
““ #
(
““# $
)
““$ %
;
““% &
}
◊◊ 	
public
ŸŸ 
void
ŸŸ 

LateUpdate
ŸŸ 
(
ŸŸ 
)
ŸŸ  
{
⁄⁄ 	
if
€€ 
(
€€ 
IsPaused
€€ 
)
€€ 
{
‹‹ 
return
›› 
;
›› 
}
ﬁﬁ 
_lateUpdater
‡‡ 
.
‡‡ 
OnFrameStart
‡‡ %
(
‡‡% &
)
‡‡& '
;
‡‡' (
_lateUpdater
·· 
.
·· 
	UpdateAll
·· "
(
··" #
)
··# $
;
··$ %
}
ÊÊ 	
}
ÁÁ 
}ËË ∞
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder6.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
TParam39 @
,@ A
TParam4B I
,I J
TParam5K R
,R S
TParam6T [
,[ \
	TContract] f
>f g
: 	
FactoryFromBinder
 
< 
TParam1 #
,# $
TParam2% ,
,, -
TParam3. 5
,5 6
TParam47 >
,> ?
TParam5@ G
,G H
TParam6I P
,P Q
	TContractR [
>[ \
{ 
public		 !
FactoryToChoiceBinder		 $
(		$ %
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
TParam6N U
,U V
	TContractW `
>` a
ToSelfb h
(h i
)i j
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
TParam6N U
,U V
	TConcreteW `
>` a
Tob d
<d e
	TConcretee n
>n o
(o p
)p q
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
	TConcrete_ h
>h i
(i j
BindContainerj w
,w x
BindInfo	y Å
,
Å Ç
FactoryBindInfo
É í
)
í ì
;
ì î
} 	
} 
}   ¯
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder =
:> ?3
'ConcreteIdArgConditionCopyNonLazyBinder@ g
{ 
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
(; <
BindInfo< D
bindInfoE M
)M N
: 
base 
( 
bindInfo 
) 
{ 	
}		 	
public 3
'ConcreteIdArgConditionCopyNonLazyBinder 6
AsCached7 ?
(? @
)@ A
{ 	
BindInfo 
. 
Scope 
= 

ScopeTypes '
.' (
	Singleton( 1
;1 2
return 
this 
; 
} 	
public 3
'ConcreteIdArgConditionCopyNonLazyBinder 6
AsSingle7 ?
(? @
)@ A
{ 	
BindInfo 
. 
Scope 
= 

ScopeTypes '
.' (
	Singleton( 1
;1 2
BindInfo 
. !
MarkAsUniqueSingleton *
=+ ,
true- 1
;1 2
return 
this 
; 
} 	
public 3
'ConcreteIdArgConditionCopyNonLazyBinder 6
AsTransient7 B
(B C
)C D
{ 	
BindInfo 
. 
Scope 
= 

ScopeTypes '
.' (
	Transient( 1
;1 2
return 
this 
; 
} 	
} 
} ¢	
YC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ProviderUtil.cs
	namespace 	
Zenject
 
{ 
public 

static 
class 
ProviderUtil $
{ 
public 
static 
Type  
GetTypeToInstantiate /
(/ 0
Type0 4
contractType5 A
,A B
TypeC G
concreteTypeH T
)T U
{		 	
if 
( 
concreteType 
. 
IsOpenGenericType .
(. /
)/ 0
)0 1
{ 
return 
concreteType #
.# $
MakeGenericType$ 3
(3 4
contractType4 @
.@ A
GetGenericArgumentsA T
(T U
)U V
)V W
;W X
} 
Assert 
. 
DerivesFromOrEqual %
(% &
concreteType& 2
,2 3
contractType4 @
)@ A
;A B
return 
concreteType 
;  
} 	
} 
} ÚÌ
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\MemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

class 

MemoryPool 
< 
TValue "
>" #
:$ %
MemoryPoolBase& 4
<4 5
TValue5 ;
>; <
,< =
IMemoryPool> I
<I J
TValueJ P
>P Q
,Q R
IFactoryS [
<[ \
TValue\ b
>b c
{ 
public 
TValue 
Spawn 
( 
) 
{ 	
var 
item 
= 
GetInternal "
(" #
)# $
;$ %
if

 
(

 
!

 
	Container

 
.

 
IsValidating

 '
)

' (
{ 
using 
( 
ProfileBlock #
.# $
Start$ )
() *
$str* <
,< =
GetType> E
(E F
)F G
)G H
)H I
{ 
Reinitialize  
(  !
item! %
)% &
;& '
} 
} 
return 
item 
; 
} 	
	protected 
virtual 
void 
Reinitialize +
(+ ,
TValue, 2
item3 7
)7 8
{ 	
} 	
TValue 
IFactory 
< 
TValue 
> 
.  
Create  &
(& '
)' (
{ 	
return   
Spawn   
(   
)   
;   
}!! 	
}"" 
public%% 

class%% 

MemoryPool%% 
<%% 
TParam1%% #
,%%# $
TValue%%% +
>%%+ ,
:&& 	
MemoryPoolBase&&
 
<&& 
TValue&& 
>&&  
,&&  !
IMemoryPool&&" -
<&&- .
TParam1&&. 5
,&&5 6
TValue&&7 =
>&&= >
,&&> ?
IFactory&&@ H
<&&H I
TParam1&&I P
,&&P Q
TValue&&R X
>&&X Y
{'' 
public(( 
TValue(( 
Spawn(( 
((( 
TParam1(( #
param(($ )
)(() *
{)) 	
var** 
item** 
=** 
GetInternal** "
(**" #
)**# $
;**$ %
if,, 
(,, 
!,, 
	Container,, 
.,, 
IsValidating,, '
),,' (
{-- 
using22 
(22 
ProfileBlock22 #
.22# $
Start22$ )
(22) *
$str22* <
,22< =
GetType22> E
(22E F
)22F G
)22G H
)22H I
{44 
Reinitialize55  
(55  !
param55! &
,55& '
item55( ,
)55, -
;55- .
}66 
}77 
return99 
item99 
;99 
}:: 	
	protected<< 
virtual<< 
void<< 
Reinitialize<< +
(<<+ ,
TParam1<<, 3
p1<<4 6
,<<6 7
TValue<<8 >
item<<? C
)<<C D
{== 	
}?? 	
TValueAA 
IFactoryAA 
<AA 
TParam1AA 
,AA  
TValueAA! '
>AA' (
.AA( )
CreateAA) /
(AA/ 0
TParam1AA0 7
p1AA8 :
)AA: ;
{BB 	
returnCC 
SpawnCC 
(CC 
p1CC 
)CC 
;CC 
}DD 	
}EE 
publicHH 

classHH 

MemoryPoolHH 
<HH 
TParam1HH #
,HH# $
TParam2HH% ,
,HH, -
TValueHH. 4
>HH4 5
:II 	
MemoryPoolBaseII
 
<II 
TValueII 
>II  
,II  !
IMemoryPoolII" -
<II- .
TParam1II. 5
,II5 6
TParam2II7 >
,II> ?
TValueII@ F
>IIF G
,IIG H
IFactoryIII Q
<IIQ R
TParam1IIR Y
,IIY Z
TParam2II[ b
,IIb c
TValueIId j
>IIj k
{JJ 
publicKK 
TValueKK 
SpawnKK 
(KK 
TParam1KK #
param1KK$ *
,KK* +
TParam2KK, 3
param2KK4 :
)KK: ;
{LL 	
varMM 
itemMM 
=MM 
GetInternalMM "
(MM" #
)MM# $
;MM$ %
ifOO 
(OO 
!OO 
	ContainerOO 
.OO 
IsValidatingOO '
)OO' (
{PP 
usingUU 
(UU 
ProfileBlockUU #
.UU# $
StartUU$ )
(UU) *
$strUU* <
,UU< =
GetTypeUU> E
(UUE F
)UUF G
)UUG H
)UUH I
{WW 
ReinitializeXX  
(XX  !
param1XX! '
,XX' (
param2XX) /
,XX/ 0
itemXX1 5
)XX5 6
;XX6 7
}YY 
}ZZ 
return\\ 
item\\ 
;\\ 
}]] 	
	protected__ 
virtual__ 
void__ 
Reinitialize__ +
(__+ ,
TParam1__, 3
p1__4 6
,__6 7
TParam2__8 ?
p2__@ B
,__B C
TValue__D J
item__K O
)__O P
{`` 	
}bb 	
TValuedd 
IFactorydd 
<dd 
TParam1dd 
,dd  
TParam2dd! (
,dd( )
TValuedd* 0
>dd0 1
.dd1 2
Createdd2 8
(dd8 9
TParam1dd9 @
p1ddA C
,ddC D
TParam2ddE L
p2ddM O
)ddO P
{ee 	
returnff 
Spawnff 
(ff 
p1ff 
,ff 
p2ff 
)ff  
;ff  !
}gg 	
}hh 
publickk 

classkk 

MemoryPoolkk 
<kk 
TParam1kk #
,kk# $
TParam2kk% ,
,kk, -
TParam3kk. 5
,kk5 6
TValuekk7 =
>kk= >
:ll 	
MemoryPoolBasell
 
<ll 
TValuell 
>ll  
,ll  !
IMemoryPoolll" -
<ll- .
TParam1ll. 5
,ll5 6
TParam2ll7 >
,ll> ?
TParam3ll@ G
,llG H
TValuellI O
>llO P
,llP Q
IFactoryllR Z
<llZ [
TParam1ll[ b
,llb c
TParam2lld k
,llk l
TParam3llm t
,llt u
TValuellv |
>ll| }
{mm 
publicnn 
TValuenn 
Spawnnn 
(nn 
TParam1nn #
param1nn$ *
,nn* +
TParam2nn, 3
param2nn4 :
,nn: ;
TParam3nn< C
param3nnD J
)nnJ K
{oo 	
varpp 
itempp 
=pp 
GetInternalpp "
(pp" #
)pp# $
;pp$ %
ifrr 
(rr 
!rr 
	Containerrr 
.rr 
IsValidatingrr '
)rr' (
{ss 
usingxx 
(xx 
ProfileBlockxx #
.xx# $
Startxx$ )
(xx) *
$strxx* <
,xx< =
GetTypexx> E
(xxE F
)xxF G
)xxG H
)xxH I
{zz 
Reinitialize{{  
({{  !
param1{{! '
,{{' (
param2{{) /
,{{/ 0
param3{{1 7
,{{7 8
item{{9 =
){{= >
;{{> ?
}|| 
}}} 
return~~ 
item~~ 
;~~ 
} 	
	protected
ÅÅ 
virtual
ÅÅ 
void
ÅÅ 
Reinitialize
ÅÅ +
(
ÅÅ+ ,
TParam1
ÅÅ, 3
p1
ÅÅ4 6
,
ÅÅ6 7
TParam2
ÅÅ8 ?
p2
ÅÅ@ B
,
ÅÅB C
TParam3
ÅÅD K
p3
ÅÅL N
,
ÅÅN O
TValue
ÅÅP V
item
ÅÅW [
)
ÅÅ[ \
{
ÇÇ 	
}
ÑÑ 	
TValue
ÜÜ 
IFactory
ÜÜ 
<
ÜÜ 
TParam1
ÜÜ 
,
ÜÜ  
TParam2
ÜÜ! (
,
ÜÜ( )
TParam3
ÜÜ* 1
,
ÜÜ1 2
TValue
ÜÜ3 9
>
ÜÜ9 :
.
ÜÜ: ;
Create
ÜÜ; A
(
ÜÜA B
TParam1
ÜÜB I
p1
ÜÜJ L
,
ÜÜL M
TParam2
ÜÜN U
p2
ÜÜV X
,
ÜÜX Y
TParam3
ÜÜZ a
p3
ÜÜb d
)
ÜÜd e
{
áá 	
return
àà 
Spawn
àà 
(
àà 
p1
àà 
,
àà 
p2
àà 
,
àà  
p3
àà! #
)
àà# $
;
àà$ %
}
ââ 	
}
ää 
public
çç 

class
çç 

MemoryPool
çç 
<
çç 
TParam1
çç #
,
çç# $
TParam2
çç% ,
,
çç, -
TParam3
çç. 5
,
çç5 6
TParam4
çç7 >
,
çç> ?
TValue
çç@ F
>
ççF G
:
éé 	
MemoryPoolBase
éé
 
<
éé 
TValue
éé 
>
éé  
,
éé  !
IMemoryPool
éé" -
<
éé- .
TParam1
éé. 5
,
éé5 6
TParam2
éé7 >
,
éé> ?
TParam3
éé@ G
,
ééG H
TParam4
ééI P
,
ééP Q
TValue
ééR X
>
ééX Y
,
ééY Z
IFactory
éé[ c
<
ééc d
TParam1
ééd k
,
éék l
TParam2
éém t
,
éét u
TParam3
éév }
,
éé} ~
TParam4éé Ü
,ééÜ á
TValueééà é
>ééé è
{
èè 
public
êê 
TValue
êê 
Spawn
êê 
(
êê 
TParam1
êê #
param1
êê$ *
,
êê* +
TParam2
êê, 3
param2
êê4 :
,
êê: ;
TParam3
êê< C
param3
êêD J
,
êêJ K
TParam4
êêL S
param4
êêT Z
)
êêZ [
{
ëë 	
var
íí 
item
íí 
=
íí 
GetInternal
íí "
(
íí" #
)
íí# $
;
íí$ %
if
îî 
(
îî 
!
îî 
	Container
îî 
.
îî 
IsValidating
îî '
)
îî' (
{
ïï 
using
öö 
(
öö 
ProfileBlock
öö #
.
öö# $
Start
öö$ )
(
öö) *
$str
öö* <
,
öö< =
GetType
öö> E
(
ööE F
)
ööF G
)
ööG H
)
ööH I
{
úú 
Reinitialize
ùù  
(
ùù  !
param1
ùù! '
,
ùù' (
param2
ùù) /
,
ùù/ 0
param3
ùù1 7
,
ùù7 8
param4
ùù9 ?
,
ùù? @
item
ùùA E
)
ùùE F
;
ùùF G
}
ûû 
}
üü 
return
†† 
item
†† 
;
†† 
}
°° 	
	protected
££ 
virtual
££ 
void
££ 
Reinitialize
££ +
(
££+ ,
TParam1
££, 3
p1
££4 6
,
££6 7
TParam2
££8 ?
p2
££@ B
,
££B C
TParam3
££D K
p3
££L N
,
££N O
TParam4
££P W
p4
££X Z
,
££Z [
TValue
££\ b
item
££c g
)
££g h
{
§§ 	
}
¶¶ 	
TValue
®® 
IFactory
®® 
<
®® 
TParam1
®® 
,
®®  
TParam2
®®! (
,
®®( )
TParam3
®®* 1
,
®®1 2
TParam4
®®3 :
,
®®: ;
TValue
®®< B
>
®®B C
.
®®C D
Create
®®D J
(
®®J K
TParam1
®®K R
p1
®®S U
,
®®U V
TParam2
®®W ^
p2
®®_ a
,
®®a b
TParam3
®®c j
p3
®®k m
,
®®m n
TParam4
®®o v
p4
®®w y
)
®®y z
{
©© 	
return
™™ 
Spawn
™™ 
(
™™ 
p1
™™ 
,
™™ 
p2
™™ 
,
™™  
p3
™™! #
,
™™# $
p4
™™% '
)
™™' (
;
™™( )
}
´´ 	
}
¨¨ 
public
ØØ 

class
ØØ 

MemoryPool
ØØ 
<
ØØ 
TParam1
ØØ #
,
ØØ# $
TParam2
ØØ% ,
,
ØØ, -
TParam3
ØØ. 5
,
ØØ5 6
TParam4
ØØ7 >
,
ØØ> ?
TParam5
ØØ@ G
,
ØØG H
TValue
ØØI O
>
ØØO P
:
∞∞ 	
MemoryPoolBase
∞∞
 
<
∞∞ 
TValue
∞∞ 
>
∞∞  
,
∞∞  !
IMemoryPool
∞∞" -
<
∞∞- .
TParam1
∞∞. 5
,
∞∞5 6
TParam2
∞∞7 >
,
∞∞> ?
TParam3
∞∞@ G
,
∞∞G H
TParam4
∞∞I P
,
∞∞P Q
TParam5
∞∞R Y
,
∞∞Y Z
TValue
∞∞[ a
>
∞∞a b
,
∞∞b c
IFactory
∞∞d l
<
∞∞l m
TParam1
∞∞m t
,
∞∞t u
TParam2
∞∞v }
,
∞∞} ~
TParam3∞∞ Ü
,∞∞Ü á
TParam4∞∞à è
,∞∞è ê
TParam5∞∞ë ò
,∞∞ò ô
TValue∞∞ö †
>∞∞† °
{
±± 
public
≤≤ 
TValue
≤≤ 
Spawn
≤≤ 
(
≤≤ 
TParam1
≥≥ 
param1
≥≥ 
,
≥≥ 
TParam2
≥≥ #
param2
≥≥$ *
,
≥≥* +
TParam3
≥≥, 3
param3
≥≥4 :
,
≥≥: ;
TParam4
≥≥< C
param4
≥≥D J
,
≥≥J K
TParam5
≥≥L S
param5
≥≥T Z
)
≥≥Z [
{
¥¥ 	
var
µµ 
item
µµ 
=
µµ 
GetInternal
µµ "
(
µµ" #
)
µµ# $
;
µµ$ %
if
∂∂ 
(
∂∂ 
!
∂∂ 
	Container
∂∂ 
.
∂∂ 
IsValidating
∂∂ '
)
∂∂' (
{
∑∑ 
using
ºº 
(
ºº 
ProfileBlock
ºº #
.
ºº# $
Start
ºº$ )
(
ºº) *
$str
ºº* <
,
ºº< =
GetType
ºº> E
(
ººE F
)
ººF G
)
ººG H
)
ººH I
{
ææ 
Reinitialize
øø  
(
øø  !
param1
øø! '
,
øø' (
param2
øø) /
,
øø/ 0
param3
øø1 7
,
øø7 8
param4
øø9 ?
,
øø? @
param5
øøA G
,
øøG H
item
øøI M
)
øøM N
;
øøN O
}
¿¿ 
}
¡¡ 
return
¬¬ 
item
¬¬ 
;
¬¬ 
}
√√ 	
	protected
≈≈ 
virtual
≈≈ 
void
≈≈ 
Reinitialize
≈≈ +
(
≈≈+ ,
TParam1
≈≈, 3
p1
≈≈4 6
,
≈≈6 7
TParam2
≈≈8 ?
p2
≈≈@ B
,
≈≈B C
TParam3
≈≈D K
p3
≈≈L N
,
≈≈N O
TParam4
≈≈P W
p4
≈≈X Z
,
≈≈Z [
TParam5
≈≈\ c
p5
≈≈d f
,
≈≈f g
TValue
≈≈h n
item
≈≈o s
)
≈≈s t
{
∆∆ 	
}
»» 	
TValue
   
IFactory
   
<
   
TParam1
   
,
    
TParam2
  ! (
,
  ( )
TParam3
  * 1
,
  1 2
TParam4
  3 :
,
  : ;
TParam5
  < C
,
  C D
TValue
  E K
>
  K L
.
  L M
Create
  M S
(
  S T
TParam1
  T [
p1
  \ ^
,
  ^ _
TParam2
  ` g
p2
  h j
,
  j k
TParam3
  l s
p3
  t v
,
  v w
TParam4
  x 
p4  Ä Ç
,  Ç É
TParam5  Ñ ã
p5  å é
)  é è
{
ÀÀ 	
return
ÃÃ 
Spawn
ÃÃ 
(
ÃÃ 
p1
ÃÃ 
,
ÃÃ 
p2
ÃÃ 
,
ÃÃ  
p3
ÃÃ! #
,
ÃÃ# $
p4
ÃÃ% '
,
ÃÃ' (
p5
ÃÃ) +
)
ÃÃ+ ,
;
ÃÃ, -
}
ÕÕ 	
}
ŒŒ 
public
—— 

class
—— 

MemoryPool
—— 
<
—— 
TParam1
—— #
,
——# $
TParam2
——% ,
,
——, -
TParam3
——. 5
,
——5 6
TParam4
——7 >
,
——> ?
TParam5
——@ G
,
——G H
TParam6
——I P
,
——P Q
TValue
——R X
>
——X Y
:
““ 	
MemoryPoolBase
““
 
<
““ 
TValue
““ 
>
““  
,
““  !
IMemoryPool
““" -
<
““- .
TParam1
““. 5
,
““5 6
TParam2
““7 >
,
““> ?
TParam3
““@ G
,
““G H
TParam4
““I P
,
““P Q
TParam5
““R Y
,
““Y Z
TParam6
““[ b
,
““b c
TValue
““d j
>
““j k
,
““k l
IFactory
”” 
<
”” 
TParam1
”” 
,
”” 
TParam2
”” !
,
””! "
TParam3
””# *
,
””* +
TParam4
””, 3
,
””3 4
TParam5
””5 <
,
””< =
TParam6
””> E
,
””E F
TValue
””G M
>
””M N
{
‘‘ 
public
’’ 
TValue
’’ 
Spawn
’’ 
(
’’ 
TParam1
÷÷ 
param1
÷÷ 
,
÷÷ 
TParam2
÷÷ #
param2
÷÷$ *
,
÷÷* +
TParam3
÷÷, 3
param3
÷÷4 :
,
÷÷: ;
TParam4
÷÷< C
param4
÷÷D J
,
÷÷J K
TParam5
÷÷L S
param5
÷÷T Z
,
÷÷Z [
TParam6
÷÷\ c
param6
÷÷d j
)
÷÷j k
{
◊◊ 	
var
ÿÿ 
item
ÿÿ 
=
ÿÿ 
GetInternal
ÿÿ "
(
ÿÿ" #
)
ÿÿ# $
;
ÿÿ$ %
if
⁄⁄ 
(
⁄⁄ 
!
⁄⁄ 
	Container
⁄⁄ 
.
⁄⁄ 
IsValidating
⁄⁄ '
)
⁄⁄' (
{
€€ 
using
‡‡ 
(
‡‡ 
ProfileBlock
‡‡ #
.
‡‡# $
Start
‡‡$ )
(
‡‡) *
$str
‡‡* <
,
‡‡< =
GetType
‡‡> E
(
‡‡E F
)
‡‡F G
)
‡‡G H
)
‡‡H I
{
‚‚ 
Reinitialize
„„  
(
„„  !
param1
„„! '
,
„„' (
param2
„„) /
,
„„/ 0
param3
„„1 7
,
„„7 8
param4
„„9 ?
,
„„? @
param5
„„A G
,
„„G H
param6
„„I O
,
„„O P
item
„„Q U
)
„„U V
;
„„V W
}
‰‰ 
}
ÂÂ 
return
ÊÊ 
item
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
	protected
ÈÈ 
virtual
ÈÈ 
void
ÈÈ 
Reinitialize
ÈÈ +
(
ÈÈ+ ,
TParam1
ÈÈ, 3
p1
ÈÈ4 6
,
ÈÈ6 7
TParam2
ÈÈ8 ?
p2
ÈÈ@ B
,
ÈÈB C
TParam3
ÈÈD K
p3
ÈÈL N
,
ÈÈN O
TParam4
ÈÈP W
p4
ÈÈX Z
,
ÈÈZ [
TParam5
ÈÈ\ c
p5
ÈÈd f
,
ÈÈf g
TParam6
ÈÈh o
p6
ÈÈp r
,
ÈÈr s
TValue
ÈÈt z
item
ÈÈ{ 
)ÈÈ Ä
{
ÍÍ 	
}
ÏÏ 	
TValue
ÓÓ 
IFactory
ÓÓ 
<
ÓÓ 
TParam1
ÓÓ 
,
ÓÓ  
TParam2
ÓÓ! (
,
ÓÓ( )
TParam3
ÓÓ* 1
,
ÓÓ1 2
TParam4
ÓÓ3 :
,
ÓÓ: ;
TParam5
ÓÓ< C
,
ÓÓC D
TParam6
ÓÓE L
,
ÓÓL M
TValue
ÓÓN T
>
ÓÓT U
.
ÓÓU V
Create
ÓÓV \
(
ÓÓ\ ]
TParam1
ÓÓ] d
p1
ÓÓe g
,
ÓÓg h
TParam2
ÓÓi p
p2
ÓÓq s
,
ÓÓs t
TParam3
ÓÓu |
p3
ÓÓ} 
,ÓÓ Ä
TParam4ÓÓÅ à
p4ÓÓâ ã
,ÓÓã å
TParam5ÓÓç î
p5ÓÓï ó
,ÓÓó ò
TParam6ÓÓô †
p6ÓÓ° £
)ÓÓ£ §
{
ÔÔ 	
return
 
Spawn
 
(
 
p1
 
,
 
p2
 
,
  
p3
! #
,
# $
p4
% '
,
' (
p5
) +
,
+ ,
p6
- /
)
/ 0
;
0 1
}
ÒÒ 	
}
ÚÚ 
public
ıı 

class
ıı 

MemoryPool
ıı 
<
ıı 
TParam1
ıı #
,
ıı# $
TParam2
ıı% ,
,
ıı, -
TParam3
ıı. 5
,
ıı5 6
TParam4
ıı7 >
,
ıı> ?
TParam5
ıı@ G
,
ııG H
TParam6
ııI P
,
ııP Q
TParam7
ııR Y
,
ııY Z
TValue
ıı[ a
>
ııa b
:
ˆˆ 	
MemoryPoolBase
ˆˆ
 
<
ˆˆ 
TValue
ˆˆ 
>
ˆˆ  
,
ˆˆ  !
IMemoryPool
ˆˆ" -
<
ˆˆ- .
TParam1
ˆˆ. 5
,
ˆˆ5 6
TParam2
ˆˆ7 >
,
ˆˆ> ?
TParam3
ˆˆ@ G
,
ˆˆG H
TParam4
ˆˆI P
,
ˆˆP Q
TParam5
ˆˆR Y
,
ˆˆY Z
TParam6
ˆˆ[ b
,
ˆˆb c
TParam7
ˆˆd k
,
ˆˆk l
TValue
ˆˆm s
>
ˆˆs t
,
ˆˆt u
IFactory
˜˜ 
<
˜˜ 
TParam1
˜˜ 
,
˜˜ 
TParam2
˜˜ !
,
˜˜! "
TParam3
˜˜# *
,
˜˜* +
TParam4
˜˜, 3
,
˜˜3 4
TParam5
˜˜5 <
,
˜˜< =
TParam6
˜˜> E
,
˜˜E F
TParam7
˜˜G N
,
˜˜N O
TValue
˜˜P V
>
˜˜V W
{
¯¯ 
public
˘˘ 
TValue
˘˘ 
Spawn
˘˘ 
(
˘˘ 
TParam1
˙˙ 
param1
˙˙ 
,
˙˙ 
TParam2
˙˙ #
param2
˙˙$ *
,
˙˙* +
TParam3
˙˙, 3
param3
˙˙4 :
,
˙˙: ;
TParam4
˙˙< C
param4
˙˙D J
,
˙˙J K
TParam5
˙˙L S
param5
˙˙T Z
,
˙˙Z [
TParam6
˙˙\ c
param6
˙˙d j
,
˙˙j k
TParam7
˙˙l s
param7
˙˙t z
)
˙˙z {
{
˚˚ 	
var
¸¸ 
item
¸¸ 
=
¸¸ 
GetInternal
¸¸ "
(
¸¸" #
)
¸¸# $
;
¸¸$ %
if
˛˛ 
(
˛˛ 
!
˛˛ 
	Container
˛˛ 
.
˛˛ 
IsValidating
˛˛ '
)
˛˛' (
{
ˇˇ 
using
ÑÑ 
(
ÑÑ 
ProfileBlock
ÑÑ #
.
ÑÑ# $
Start
ÑÑ$ )
(
ÑÑ) *
$str
ÑÑ* <
,
ÑÑ< =
GetType
ÑÑ> E
(
ÑÑE F
)
ÑÑF G
)
ÑÑG H
)
ÑÑH I
{
ÜÜ 
Reinitialize
áá  
(
áá  !
param1
áá! '
,
áá' (
param2
áá) /
,
áá/ 0
param3
áá1 7
,
áá7 8
param4
áá9 ?
,
áá? @
param5
ááA G
,
ááG H
param6
ááI O
,
ááO P
param7
ááQ W
,
ááW X
item
ááY ]
)
áá] ^
;
áá^ _
}
àà 
}
ââ 
return
ää 
item
ää 
;
ää 
}
ãã 	
	protected
çç 
virtual
çç 
void
çç 
Reinitialize
çç +
(
çç+ ,
TParam1
çç, 3
p1
çç4 6
,
çç6 7
TParam2
çç8 ?
p2
çç@ B
,
ççB C
TParam3
ççD K
p3
ççL N
,
ççN O
TParam4
ççP W
p4
ççX Z
,
ççZ [
TParam5
çç\ c
p5
ççd f
,
ççf g
TParam6
ççh o
p6
ççp r
,
ççr s
TParam7
ççt {
p7
çç| ~
,
çç~ 
TValueççÄ Ü
itemççá ã
)ççã å
{
éé 	
}
êê 	
TValue
íí 
IFactory
íí 
<
íí 
TParam1
íí 
,
íí  
TParam2
íí! (
,
íí( )
TParam3
íí* 1
,
íí1 2
TParam4
íí3 :
,
íí: ;
TParam5
íí< C
,
ííC D
TParam6
ííE L
,
ííL M
TParam7
ííN U
,
ííU V
TValue
ííW ]
>
íí] ^
.
íí^ _
Create
íí_ e
(
ííe f
TParam1
ííf m
p1
íín p
,
ííp q
TParam2
íír y
p2
ííz |
,
íí| }
TParam3íí~ Ö
p3ííÜ à
,ííà â
TParam4ííä ë
p4ííí î
,ííî ï
TParam5ííñ ù
p5ííû †
,íí† °
TParam6íí¢ ©
p6íí™ ¨
,íí¨ ≠
TParam7ííÆ µ
p7íí∂ ∏
)íí∏ π
{
ìì 	
return
îî 
Spawn
îî 
(
îî 
p1
îî 
,
îî 
p2
îî 
,
îî  
p3
îî! #
,
îî# $
p4
îî% '
,
îî' (
p5
îî) +
,
îî+ ,
p6
îî- /
,
îî/ 0
p7
îî1 3
)
îî3 4
;
îî4 5
}
ïï 	
}
ññ 
public
ôô 

class
ôô 

MemoryPool
ôô 
<
ôô 
TParam1
ôô #
,
ôô# $
TParam2
ôô% ,
,
ôô, -
TParam3
ôô. 5
,
ôô5 6
TParam4
ôô7 >
,
ôô> ?
TParam5
ôô@ G
,
ôôG H
TParam6
ôôI P
,
ôôP Q
TParam7
ôôR Y
,
ôôY Z
TParam8
ôô[ b
,
ôôb c
TValue
ôôd j
>
ôôj k
:
öö 	
MemoryPoolBase
öö
 
<
öö 
TValue
öö 
>
öö  
,
öö  !
IMemoryPool
öö" -
<
öö- .
TParam1
öö. 5
,
öö5 6
TParam2
öö7 >
,
öö> ?
TParam3
öö@ G
,
ööG H
TParam4
ööI P
,
ööP Q
TParam5
ööR Y
,
ööY Z
TParam6
öö[ b
,
ööb c
TParam7
ööd k
,
öök l
TParam8
ööm t
,
ööt u
TValue
ööv |
>
öö| }
,
öö} ~
IFactory
õõ 
<
õõ 
TParam1
õõ 
,
õõ 
TParam2
õõ !
,
õõ! "
TParam3
õõ# *
,
õõ* +
TParam4
õõ, 3
,
õõ3 4
TParam5
õõ5 <
,
õõ< =
TParam6
õõ> E
,
õõE F
TParam7
õõG N
,
õõN O
TParam8
õõP W
,
õõW X
TValue
õõY _
>
õõ_ `
{
úú 
public
ùù 
TValue
ùù 
Spawn
ùù 
(
ùù 
TParam1
ûû 
param1
ûû 
,
ûû 
TParam2
ûû #
param2
ûû$ *
,
ûû* +
TParam3
ûû, 3
param3
ûû4 :
,
ûû: ;
TParam4
ûû< C
param4
ûûD J
,
ûûJ K
TParam5
ûûL S
param5
ûûT Z
,
ûûZ [
TParam6
ûû\ c
param6
ûûd j
,
ûûj k
TParam7
ûûl s
param7
ûût z
,
ûûz {
TParam8ûû| É
param8ûûÑ ä
)ûûä ã
{
üü 	
var
†† 
item
†† 
=
†† 
GetInternal
†† "
(
††" #
)
††# $
;
††$ %
if
¢¢ 
(
¢¢ 
!
¢¢ 
	Container
¢¢ 
.
¢¢ 
IsValidating
¢¢ '
)
¢¢' (
{
££ 
using
®® 
(
®® 
ProfileBlock
®® #
.
®®# $
Start
®®$ )
(
®®) *
$str
®®* <
,
®®< =
GetType
®®> E
(
®®E F
)
®®F G
)
®®G H
)
®®H I
{
™™ 
Reinitialize
´´  
(
´´  !
param1
´´! '
,
´´' (
param2
´´) /
,
´´/ 0
param3
´´1 7
,
´´7 8
param4
´´9 ?
,
´´? @
param5
´´A G
,
´´G H
param6
´´I O
,
´´O P
param7
´´Q W
,
´´W X
param8
´´Y _
,
´´_ `
item
´´a e
)
´´e f
;
´´f g
}
¨¨ 
}
≠≠ 
return
ÆÆ 
item
ÆÆ 
;
ÆÆ 
}
ØØ 	
	protected
±± 
virtual
±± 
void
±± 
Reinitialize
±± +
(
±±+ ,
TParam1
±±, 3
p1
±±4 6
,
±±6 7
TParam2
±±8 ?
p2
±±@ B
,
±±B C
TParam3
±±D K
p3
±±L N
,
±±N O
TParam4
±±P W
p4
±±X Z
,
±±Z [
TParam5
±±\ c
p5
±±d f
,
±±f g
TParam6
±±h o
p6
±±p r
,
±±r s
TParam7
±±t {
p7
±±| ~
,
±±~ 
TParam8±±Ä á
p8±±à ä
,±±ä ã
TValue±±å í
item±±ì ó
)±±ó ò
{
≤≤ 	
}
¥¥ 	
TValue
∂∂ 
IFactory
∂∂ 
<
∂∂ 
TParam1
∂∂ 
,
∂∂  
TParam2
∂∂! (
,
∂∂( )
TParam3
∂∂* 1
,
∂∂1 2
TParam4
∂∂3 :
,
∂∂: ;
TParam5
∂∂< C
,
∂∂C D
TParam6
∂∂E L
,
∂∂L M
TParam7
∂∂N U
,
∂∂U V
TParam8
∂∂W ^
,
∂∂^ _
TValue
∂∂` f
>
∂∂f g
.
∂∂g h
Create
∂∂h n
(
∂∂n o
TParam1
∑∑ 
p1
∑∑ 
,
∑∑ 
TParam2
∑∑ 
p2
∑∑  "
,
∑∑" #
TParam3
∑∑$ +
p3
∑∑, .
,
∑∑. /
TParam4
∑∑0 7
p4
∑∑8 :
,
∑∑: ;
TParam5
∑∑< C
p5
∑∑D F
,
∑∑F G
TParam6
∑∑H O
p6
∑∑P R
,
∑∑R S
TParam7
∑∑T [
p7
∑∑\ ^
,
∑∑^ _
TParam8
∑∑` g
p8
∑∑h j
)
∑∑j k
{
∏∏ 	
return
ππ 
Spawn
ππ 
(
ππ 
p1
ππ 
,
ππ 
p2
ππ 
,
ππ  
p3
ππ! #
,
ππ# $
p4
ππ% '
,
ππ' (
p5
ππ) +
,
ππ+ ,
p6
ππ- /
,
ππ/ 0
p7
ππ1 3
,
ππ3 4
p8
ππ5 7
)
ππ7 8
;
ππ8 9
}
∫∫ 	
}
ªª 
}ºº •N
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder6.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
TParam3B I
,I J
TParam4K R
,R S
TParam5T [
,[ \
TParam6] d
,d e
	TContractf o
>o p
:q r"
FactoryToChoiceBinder	s à
<
à â
TParam1
â ê
,
ê ë
TParam2
í ô
,
ô ö
TParam3
õ ¢
,
¢ £
TParam4
§ ´
,
´ ¨
TParam5
≠ ¥
,
¥ µ
TParam6
∂ Ω
,
Ω æ
	TContract
ø »
>
» …
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
	TContract[ d
>d e 
WithFactoryArgumentsf z
<z {
T{ |
>| }
(} ~
T~ 
param
Ä Ö
)
Ö Ü
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
	TContract[ d
>d e 
WithFactoryArgumentsf z
<z {
TFactoryParam1	{ â
,
â ä
TFactoryParam2
ã ô
>
ô ö
(
ö õ
TFactoryParam1
õ ©
param1
™ ∞
,
∞ ±
TFactoryParam2
≤ ¿
param2
¡ «
)
« »
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
	TContract[ d
>d e 
WithFactoryArgumentsf z
<z {
TFactoryParam1	{ â
,
â ä
TFactoryParam2
ã ô
,
ô ö
TFactoryParam3
õ ©
>
© ™
(
™ ´
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
TParam3%%7 >
,%%> ?
TParam4%%@ G
,%%G H
TParam5%%I P
,%%P Q
TParam6%%R Y
,%%Y Z
	TContract%%[ d
>%%d e 
WithFactoryArguments%%f z
<%%z {
TFactoryParam1	%%{ â
,
%%â ä
TFactoryParam2
%%ã ô
,
%%ô ö
TFactoryParam3
%%õ ©
,
%%© ™
TFactoryParam4
%%´ π
>
%%π ∫
(
%%∫ ª
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
TParam3,,7 >
,,,> ?
TParam4,,@ G
,,,G H
TParam5,,I P
,,,P Q
TParam6,,R Y
,,,Y Z
	TContract,,[ d
>,,d e 
WithFactoryArguments,,f z
<,,z {
TFactoryParam1	,,{ â
,
,,â ä
TFactoryParam2
,,ã ô
,
,,ô ö
TFactoryParam3
,,õ ©
,
,,© ™
TFactoryParam4
,,´ π
,
,,π ∫
TFactoryParam5
,,ª …
>
,,…  
(
,,  À
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
TParam3337 >
,33> ?
TParam433@ G
,33G H
TParam533I P
,33P Q
TParam633R Y
,33Y Z
	TContract33[ d
>33d e 
WithFactoryArguments33f z
<33z {
TFactoryParam1	33{ â
,
33â ä
TFactoryParam2
33ã ô
,
33ô ö
TFactoryParam3
33õ ©
,
33© ™
TFactoryParam4
33´ π
,
33π ∫
TFactoryParam5
33ª …
,
33…  
TFactoryParam6
33À Ÿ
>
33Ÿ ⁄
(
33⁄ €
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
TParam3::7 >
,::> ?
TParam4::@ G
,::G H
TParam5::I P
,::P Q
TParam6::R Y
,::Y Z
	TContract::[ d
>::d e 
WithFactoryArguments::f z
(::z {
object	::{ Å
[
::Å Ç
]
::Ç É
args
::Ñ à
)
::à â
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
TParam3@@7 >
,@@> ?
TParam4@@@ G
,@@G H
TParam5@@I P
,@@P Q
TParam6@@R Y
,@@Y Z
	TContract@@[ d
>@@d e)
WithFactoryArgumentsExplicit	@@f Ç
(
@@Ç É
IEnumerable
@@É é
<
@@é è
TypeValuePair
@@è ú
>
@@ú ù
	extraArgs
@@û ß
)
@@ß ®
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ˜
{C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorCached.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
SubContainerCreatorCached *
:+ , 
ISubContainerCreator- A
{ 
readonly		  
ISubContainerCreator		 %
_subCreator		& 1
;		1 2
bool 
_isLookingUp 
; 
DiContainer 
_subContainer !
;! "
public %
SubContainerCreatorCached (
(( ) 
ISubContainerCreator) =

subCreator> H
)H I
{ 	
_subCreator 
= 

subCreator $
;$ %
} 	
public 
DiContainer 
CreateSubContainer -
(- .
List. 2
<2 3
TypeValuePair3 @
>@ A
argsB F
,F G
InjectContextH U
contextV ]
)] ^
{ 	
Assert 
. 
IsEmpty 
( 
args 
)  
;  !
{   
if!! 
(!! 
_subContainer!! !
==!!" $
null!!% )
)!!) *
{"" 
Assert$$ 
.$$ 
That$$ 
($$  
!$$  !
_isLookingUp$$! -
,$$- .
$str%% t
,%%t u
context%%v }
.%%} ~!
GetObjectGraphString	%%~ í
(
%%í ì
)
%%ì î
)
%%î ï
;
%%ï ñ
_isLookingUp&&  
=&&! "
true&&# '
;&&' (
_subContainer)) !
=))" #
_subCreator))$ /
.))/ 0
CreateSubContainer))0 B
())B C
new))C F
List))G K
<))K L
TypeValuePair))L Y
>))Y Z
())Z [
)))[ \
,))\ ]
context))^ e
)))e f
;))f g
_isLookingUp,,  
=,,! "
false,,# (
;,,( )
Assert// 
.// 
	IsNotNull// $
(//$ %
_subContainer//% 2
)//2 3
;//3 4
}00 
return22 
_subContainer22 $
;22$ %
}33 
}44 	
}55 
}66 ¢

óC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\GameObject\NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder J
:K LB
5TransformScopeConcreteIdArgConditionCopyNonLazyBinder	M Ç
{ 
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H
(H I
BindInfo		 
bindInfo		 
,		 (
GameObjectCreationParameters

 (
gameObjectInfo

) 7
)

7 8
: 
base 
( 
bindInfo 
, 
gameObjectInfo +
)+ ,
{ 	
} 	
public A
5TransformScopeConcreteIdArgConditionCopyNonLazyBinder D
WithGameObjectNameE W
(W X
stringX ^
gameObjectName_ m
)m n
{ 	
GameObjectInfo 
. 
Name 
=  !
gameObjectName" 0
;0 1
return 
this 
; 
} 	
} 
} À
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\PoolFactory.cs
	namespace 	
Zenject
 
{ 
public 

class 
PoolWrapperFactory #
<# $
T$ %
>% &
:' (
IFactory) 1
<1 2
T2 3
>3 4
where 
T 
: 
IDisposable 
{		 
readonly

 
IMemoryPool

 
<

 
T

 
>

 
_pool

  %
;

% &
public 
PoolWrapperFactory !
(! "
IMemoryPool" -
<- .
T. /
>/ 0
pool1 5
)5 6
{ 	
_pool 
= 
pool 
; 
} 	
public 
T 
Create 
( 
) 
{ 	
return 
_pool 
. 
Spawn 
( 
)  
;  !
} 	
} 
public 

class 
PoolWrapperFactory #
<# $
TParam1$ +
,+ ,
TValue- 3
>3 4
:5 6
IFactory7 ?
<? @
TParam1@ G
,G H
TValueI O
>O P
where 
TValue 
: 
IDisposable "
{ 
readonly 
IMemoryPool 
< 
TParam1 $
,$ %
TValue& ,
>, -
_pool. 3
;3 4
public 
PoolWrapperFactory !
(! "
IMemoryPool" -
<- .
TParam1. 5
,5 6
TValue7 =
>= >
pool? C
)C D
{ 	
_pool 
= 
pool 
; 
} 	
public!! 
TValue!! 
Create!! 
(!! 
TParam1!! $
arg!!% (
)!!( )
{"" 	
return## 
_pool## 
.## 
Spawn## 
(## 
arg## "
)##" #
;### $
}$$ 	
}%% 
}&& Ò
yC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorUtil.cs
	namespace 	
Zenject
 
{ 
public		 

static		 
class		 #
SubContainerCreatorUtil		 /
{

 
public 
static 
void 
ApplyBindSettings ,
(, -'
SubContainerCreatorBindInfo ' 
subContainerBindInfo( <
,< =
DiContainer> I
subContainerJ V
)V W
{ 	
if 
(  
subContainerBindInfo $
.$ %
CreateKernel% 1
)1 2
{ 
var 
parentContainer #
=$ %
subContainer& 2
.2 3
ParentContainers3 C
.C D
OnlyOrDefaultD Q
(Q R
)R S
;S T
Assert 
. 
	IsNotNull  
(  !
parentContainer! 0
,0 1
$str2 j
)j k
;k l
if 
(  
subContainerBindInfo (
.( )

KernelType) 3
!=4 6
null7 ;
); <
{ 
parentContainer #
.# $
Bind$ (
(( )
typeof) /
(/ 0
Kernel0 6
)6 7
.7 8

Interfaces8 B
(B C
)C D
)D E
.E F
ToF H
(H I 
subContainerBindInfoI ]
.] ^

KernelType^ h
)h i
. #
FromSubContainerResolve 0
(0 1
)1 2
. 

ByInstance #
(# $
subContainer$ 0
)0 1
.1 2
AsCached2 :
(: ;
); <
;< =
subContainer  
.  !
Bind! %
(% & 
subContainerBindInfo& :
.: ;

KernelType; E
)E F
.F G
AsCachedG O
(O P
)P Q
;Q R
} 
else 
{ 
parentContainer #
.# $
BindInterfacesTo$ 4
<4 5
Kernel5 ;
>; <
(< =
)= >
.> ?#
FromSubContainerResolve? V
(V W
)W X
. 

ByInstance #
(# $
subContainer$ 0
)0 1
.1 2
AsCached2 :
(: ;
); <
;< =
subContainer  
.  !
Bind! %
<% &
Kernel& ,
>, -
(- .
). /
./ 0
AsCached0 8
(8 9
)9 :
;: ;
} 
if"" 
(""  
subContainerBindInfo"" (
.""( )
DefaultParentName"") :
!=""; =
null""> B
)""B C
{## ,
 DefaultGameObjectParentInstaller$$ 4
.$$4 5
Install$$5 <
($$< =
subContainer%% $
,%%$ % 
subContainerBindInfo%%& :
.%%: ;
DefaultParentName%%; L
)%%L M
;%%M N
}&& 
}(( 
})) 	
}** 
}++ °#
kC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerDependencyProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
SubContainerDependencyProvider /
:0 1
	IProvider2 ;
{		 
readonly

  
ISubContainerCreator

 % 
_subContainerCreator

& :
;

: ;
readonly 
Type 
_dependencyType %
;% &
readonly 
object 
_identifier #
;# $
readonly 
bool 
_resolveAll !
;! "
public *
SubContainerDependencyProvider -
(- .
Type 
dependencyType 
,  
object 

identifier 
,  
ISubContainerCreator  
subContainerCreator! 4
,4 5
bool6 :

resolveAll; E
)E F
{ 	 
_subContainerCreator  
=! "
subContainerCreator# 6
;6 7
_dependencyType 
= 
dependencyType ,
;, -
_identifier 
= 

identifier $
;$ %
_resolveAll 
= 

resolveAll $
;$ %
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public   
bool   '
TypeVariesBasedOnMemberType   /
{!! 	
get"" 
{"" 
return"" 
false"" 
;"" 
}""  !
}## 	
public%% 
Type%% 
GetInstanceType%% #
(%%# $
InjectContext%%$ 1
context%%2 9
)%%9 :
{&& 	
return'' 
_dependencyType'' "
;''" #
}(( 	
InjectContext** 
CreateSubContext** &
(**& '
InjectContext++ 
parent++  
,++  !
DiContainer++" -
subContainer++. :
)++: ;
{,, 	
var-- 

subContext-- 
=-- 
parent-- #
.--# $
CreateSubContext--$ 4
(--4 5
_dependencyType--5 D
,--D E
_identifier--F Q
)--Q R
;--R S

subContext// 
.// 
	Container//  
=//! "
subContainer//# /
;/// 0

subContext22 
.22 

SourceType22 !
=22" #
InjectSources22$ 1
.221 2
Local222 7
;227 8
return44 

subContext44 
;44 
}55 	
public77 
void77 *
GetAllInstancesWithInjectSplit77 2
(772 3
InjectContext88 
context88 !
,88! "
List88# '
<88' (
TypeValuePair88( 5
>885 6
args887 ;
,88; <
out88= @
Action88A G
injectAction88H T
,88T U
List88V Z
<88Z [
object88[ a
>88a b
buffer88c i
)88i j
{99 	
Assert:: 
.:: 
	IsNotNull:: 
(:: 
context:: $
)::$ %
;::% &
var<< 
subContainer<< 
=<<  
_subContainerCreator<< 3
.<<3 4
CreateSubContainer<<4 F
(<<F G
args<<G K
,<<K L
context<<M T
)<<T U
;<<U V
var>> 

subContext>> 
=>> 
CreateSubContext>> -
(>>- .
context>>. 5
,>>5 6
subContainer>>7 C
)>>C D
;>>D E
injectAction@@ 
=@@ 
null@@ 
;@@  
ifBB 
(BB 
_resolveAllBB 
)BB 
{CC 
subContainerDD 
.DD 

ResolveAllDD '
(DD' (

subContextDD( 2
,DD2 3
bufferDD4 :
)DD: ;
;DD; <
returnEE 
;EE 
}FF 
bufferHH 
.HH 
AddHH 
(HH 
subContainerHH #
.HH# $
ResolveHH$ +
(HH+ ,

subContextHH, 6
)HH6 7
)HH7 8
;HH8 9
}II 	
}JJ 
}KK ”

ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\SignalTickPriorityCopyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class (
SignalTickPriorityCopyBinder -
:. /
SignalCopyBinder0 @
{ 
public (
SignalTickPriorityCopyBinder +
(+ ,%
SignalDeclarationBindInfo %
signalBindInfo& 4
)4 5
{ 	
SignalBindInfo		 
=		 
signalBindInfo		 +
;		+ ,
}

 	
	protected %
SignalDeclarationBindInfo +
SignalBindInfo, :
{ 	
get 
; 
private 
set 
; 
} 	
public 
SignalCopyBinder 
WithTickPriority  0
(0 1
int1 4
priority5 =
)= >
{ 	
SignalBindInfo 
. 
TickPriority '
=( )
priority* 2
;2 3
SignalBindInfo 
. 
RunAsync #
=$ %
true& *
;* +
return 
this 
; 
} 	
} 
} ‡
âC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class B
6WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder G
:H I8
,ScopeConcreteIdArgConditionCopyNonLazyBinderJ v
{ '
SubContainerCreatorBindInfo #!
_subContainerBindInfo$ 9
;9 :
public B
6WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder E
(E F'
SubContainerCreatorBindInfo		 ' 
subContainerBindInfo		( <
,		< =
BindInfo		> F
bindInfo		G O
)		O P
:

 
base

 
(

 
bindInfo

 
)

 
{ 	!
_subContainerBindInfo !
=" # 
subContainerBindInfo$ 8
;8 9
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;

WithKernel< F
(F G
)G H
{ 	!
_subContainerBindInfo !
.! "
CreateKernel" .
=/ 0
true1 5
;5 6
return 
this 
; 
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;

WithKernel< F
<F G
TKernelG N
>N O
(O P
)P Q
where 
TKernel 
: 
Kernel "
{ 	!
_subContainerBindInfo !
.! "
CreateKernel" .
=/ 0
true1 5
;5 6!
_subContainerBindInfo !
.! "

KernelType" ,
=- .
typeof/ 5
(5 6
TKernel6 =
)= >
;> ?
return 
this 
; 
} 	
} 
} ïY
UC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\IInstantiator.cs
	namespace 	
Zenject
 
{		 
public 

	interface 
IInstantiator "
{ 
T 	
Instantiate
 
< 
T 
> 
( 
) 
; 
T 	
Instantiate
 
< 
T 
> 
( 
IEnumerable $
<$ %
object% +
>+ ,
	extraArgs- 6
)6 7
;7 8
object 
Instantiate 
( 
Type 
concreteType  ,
), -
;- .
object 
Instantiate 
( 
Type 
concreteType  ,
,, -
IEnumerable. 9
<9 :
object: @
>@ A
	extraArgsB K
)K L
;L M
	TContract  
InstantiateComponent &
<& '
	TContract' 0
>0 1
(1 2

GameObject2 <

gameObject= G
)G H
where 
	TContract 
: 
	Component '
;' (
	TContract  
InstantiateComponent &
<& '
	TContract' 0
>0 1
(1 2

GameObject 

gameObject !
,! "
IEnumerable# .
<. /
object/ 5
>5 6
	extraArgs7 @
)@ A
where   
	TContract   
:   
	Component   '
;  ' (
	Component!!  
InstantiateComponent!! &
(!!& '
Type"" 
componentType"" 
,"" 

GameObject""  *

gameObject""+ 5
)""5 6
;""6 7
	Component##  
InstantiateComponent## &
(##& '
Type$$ 
componentType$$ 
,$$ 

GameObject$$  *

gameObject$$+ 5
,$$5 6
IEnumerable$$7 B
<$$B C
object$$C I
>$$I J
	extraArgs$$K T
)$$T U
;$$U V
T&& 	/
#InstantiateComponentOnNewGameObject&&
 -
<&&- .
T&&. /
>&&/ 0
(&&0 1
)&&1 2
where'' 
T'' 
:'' 
	Component'' 
;''  
T(( 	/
#InstantiateComponentOnNewGameObject((
 -
<((- .
T((. /
>((/ 0
(((0 1
string((1 7
gameObjectName((8 F
)((F G
where)) 
T)) 
:)) 
	Component)) 
;))  
T** 	/
#InstantiateComponentOnNewGameObject**
 -
<**- .
T**. /
>**/ 0
(**0 1
IEnumerable**1 <
<**< =
object**= C
>**C D
	extraArgs**E N
)**N O
where++ 
T++ 
:++ 
	Component++ 
;++  
T,, 	/
#InstantiateComponentOnNewGameObject,,
 -
<,,- .
T,,. /
>,,/ 0
(,,0 1
string,,1 7
gameObjectName,,8 F
,,,F G
IEnumerable,,H S
<,,S T
object,,T Z
>,,Z [
	extraArgs,,\ e
),,e f
where-- 
T-- 
:-- 
	Component-- 
;--  

GameObject00 
InstantiatePrefab00 $
(00$ %
UnityEngine00% 0
.000 1
Object001 7
prefab008 >
)00> ?
;00? @

GameObject11 
InstantiatePrefab11 $
(11$ %
UnityEngine22 
.22 
Object22 
prefab22 %
,22% &
	Transform22' 0
parentTransform221 @
)22@ A
;22A B

GameObject33 
InstantiatePrefab33 $
(33$ %
UnityEngine44 
.44 
Object44 
prefab44 %
,44% &
Vector344' .
position44/ 7
,447 8

Quaternion449 C
rotation44D L
,44L M
	Transform44N W
parentTransform44X g
)44g h
;44h i

GameObject77 %
InstantiatePrefabResource77 ,
(77, -
string77- 3
resourcePath774 @
)77@ A
;77A B

GameObject88 %
InstantiatePrefabResource88 ,
(88, -
string99 
resourcePath99 
,99  
	Transform99! *
parentTransform99+ :
)99: ;
;99; <

GameObject:: %
InstantiatePrefabResource:: ,
(::, -
string;; 
resourcePath;; 
,;;  
Vector3;;! (
position;;) 1
,;;1 2

Quaternion;;3 =
rotation;;> F
,;;F G
	Transform;;H Q
parentTransform;;R a
);;a b
;;;b c
T?? 	)
InstantiatePrefabForComponent??
 '
<??' (
T??( )
>??) *
(??* +
UnityEngine??+ 6
.??6 7
Object??7 =
prefab??> D
)??D E
;??E F
T@@ 	)
InstantiatePrefabForComponent@@
 '
<@@' (
T@@( )
>@@) *
(@@* +
UnityEngineAA 
.AA 
ObjectAA 
prefabAA %
,AA% &
IEnumerableAA' 2
<AA2 3
objectAA3 9
>AA9 :
	extraArgsAA; D
)AAD E
;AAE F
TBB 	)
InstantiatePrefabForComponentBB
 '
<BB' (
TBB( )
>BB) *
(BB* +
UnityEngineCC 
.CC 
ObjectCC 
prefabCC %
,CC% &
	TransformCC' 0
parentTransformCC1 @
)CC@ A
;CCA B
TDD 	)
InstantiatePrefabForComponentDD
 '
<DD' (
TDD( )
>DD) *
(DD* +
UnityEngineEE 
.EE 
ObjectEE 
prefabEE %
,EE% &
	TransformEE' 0
parentTransformEE1 @
,EE@ A
IEnumerableEEB M
<EEM N
objectEEN T
>EET U
	extraArgsEEV _
)EE_ `
;EE` a
TFF 	)
InstantiatePrefabForComponentFF
 '
<FF' (
TFF( )
>FF) *
(FF* +
UnityEngineGG 
.GG 
ObjectGG 
prefabGG %
,GG% &
Vector3GG' .
positionGG/ 7
,GG7 8

QuaternionGG9 C
rotationGGD L
,GGL M
	TransformGGN W
parentTransformGGX g
)GGg h
;GGh i
THH 	)
InstantiatePrefabForComponentHH
 '
<HH' (
THH( )
>HH) *
(HH* +
UnityEngineII 
.II 
ObjectII 
prefabII %
,II% &
Vector3II' .
positionII/ 7
,II7 8

QuaternionII9 C
rotationIID L
,IIL M
	TransformIIN W
parentTransformIIX g
,IIg h
IEnumerableIIi t
<IIt u
objectIIu {
>II{ |
	extraArgs	II} Ü
)
IIÜ á
;
IIá à
objectJJ )
InstantiatePrefabForComponentJJ ,
(JJ, -
TypeKK 
concreteTypeKK 
,KK 
UnityEngineKK *
.KK* +
ObjectKK+ 1
prefabKK2 8
,KK8 9
	TransformKK: C
parentTransformKKD S
,KKS T
IEnumerableKKU `
<KK` a
objectKKa g
>KKg h
	extraArgsKKi r
)KKr s
;KKs t
TOO 	1
%InstantiatePrefabResourceForComponentOO
 /
<OO/ 0
TOO0 1
>OO1 2
(OO2 3
stringOO3 9
resourcePathOO: F
)OOF G
;OOG H
TPP 	1
%InstantiatePrefabResourceForComponentPP
 /
<PP/ 0
TPP0 1
>PP1 2
(PP2 3
stringQQ 
resourcePathQQ 
,QQ  
IEnumerableQQ! ,
<QQ, -
objectQQ- 3
>QQ3 4
	extraArgsQQ5 >
)QQ> ?
;QQ? @
TRR 	1
%InstantiatePrefabResourceForComponentRR
 /
<RR/ 0
TRR0 1
>RR1 2
(RR2 3
stringSS 
resourcePathSS 
,SS  
	TransformSS! *
parentTransformSS+ :
)SS: ;
;SS; <
TTT 	1
%InstantiatePrefabResourceForComponentTT
 /
<TT/ 0
TTT0 1
>TT1 2
(TT2 3
stringUU 
resourcePathUU 
,UU  
	TransformUU! *
parentTransformUU+ :
,UU: ;
IEnumerableUU< G
<UUG H
objectUUH N
>UUN O
	extraArgsUUP Y
)UUY Z
;UUZ [
TVV 	1
%InstantiatePrefabResourceForComponentVV
 /
<VV/ 0
TVV0 1
>VV1 2
(VV2 3
stringWW 
resourcePathWW 
,WW  
Vector3WW! (
positionWW) 1
,WW1 2

QuaternionWW3 =
rotationWW> F
,WWF G
	TransformWWH Q
parentTransformWWR a
)WWa b
;WWb c
TXX 	1
%InstantiatePrefabResourceForComponentXX
 /
<XX/ 0
TXX0 1
>XX1 2
(XX2 3
stringYY 
resourcePathYY 
,YY  
Vector3YY! (
positionYY) 1
,YY1 2

QuaternionYY3 =
rotationYY> F
,YYF G
	TransformYYH Q
parentTransformYYR a
,YYa b
IEnumerableYYc n
<YYn o
objectYYo u
>YYu v
	extraArgs	YYw Ä
)
YYÄ Å
;
YYÅ Ç
objectZZ 1
%InstantiatePrefabResourceForComponentZZ 4
(ZZ4 5
Type[[ 
concreteType[[ 
,[[ 
string[[ %
resourcePath[[& 2
,[[2 3
	Transform[[4 =
parentTransform[[> M
,[[M N
IEnumerable[[O Z
<[[Z [
object[[[ a
>[[a b
	extraArgs[[c l
)[[l m
;[[m n
T]] 	/
#InstantiateScriptableObjectResource]]
 -
<]]- .
T]]. /
>]]/ 0
(]]0 1
string]]1 7
resourcePath]]8 D
)]]D E
where^^ 
T^^ 
:^^ 
ScriptableObject^^ &
;^^& '
T__ 	/
#InstantiateScriptableObjectResource__
 -
<__- .
T__. /
>__/ 0
(__0 1
string`` 
resourcePath`` 
,``  
IEnumerable``! ,
<``, -
object``- 3
>``3 4
	extraArgs``5 >
)``> ?
whereaa 
Taa 
:aa 
ScriptableObjectaa &
;aa& '
objectbb /
#InstantiateScriptableObjectResourcebb 2
(bb2 3
Typecc  
scriptableObjectTypecc %
,cc% &
stringcc' -
resourcePathcc. :
)cc: ;
;cc; <
objectdd /
#InstantiateScriptableObjectResourcedd 2
(dd2 3
Typeee  
scriptableObjectTypeee %
,ee% &
stringee' -
resourcePathee. :
,ee: ;
IEnumerableee< G
<eeG H
objecteeH N
>eeN O
	extraArgseeP Y
)eeY Z
;eeZ [

GameObjectgg !
CreateEmptyGameObjectgg (
(gg( )
stringgg) /
namegg0 4
)gg4 5
;gg5 6
}ii 
}jj ˘8
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\InitializableManager.cs
	namespace 	
Zenject
 
{ 
public 

class  
InitializableManager %
{ 
List 
< 
InitializableInfo 
> 
_initializables  /
;/ 0
bool 
_hasInitialized 
; 
[ 	
Inject	 
] 
public  
InitializableManager #
(# $
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
IInitializable 
>  
initializables! /
,/ 0
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
	ValuePair 
< 
Type 
,  
int! $
>$ %
>% &

priorities' 1
)1 2
{ 	
_initializables 
= 
new !
List" &
<& '
InitializableInfo' 8
>8 9
(9 :
): ;
;; <
for 
( 
int 
i 
= 
$num 
; 
i 
< 
initializables  .
.. /
Count/ 4
;4 5
i6 7
++7 9
)9 :
{ 
var 
initializable !
=" #
initializables$ 2
[2 3
i3 4
]4 5
;5 6
var   
matches   
=   

priorities   (
.  ( )
Where  ) .
(  . /
x  / 0
=>  1 3
initializable  4 A
.  A B
GetType  B I
(  I J
)  J K
.  K L
DerivesFromOrEqual  L ^
(  ^ _
x  _ `
.  ` a
First  a f
)  f g
)  g h
.  h i
Select  i o
(  o p
x  p q
=>  r t
x  u v
.  v w
Second  w }
)  } ~
.  ~ 
ToList	   Ö
(
  Ö Ü
)
  Ü á
;
  á à
int!! 
priority!! 
=!! 
matches!! &
.!!& '
IsEmpty!!' .
(!!. /
)!!/ 0
?!!1 2
$num!!3 4
:!!5 6
matches!!7 >
.!!> ?
Distinct!!? G
(!!G H
)!!H I
.!!I J
Single!!J P
(!!P Q
)!!Q R
;!!R S
_initializables## 
.##  
Add##  #
(### $
new##$ '
InitializableInfo##( 9
(##9 :
initializable##: G
,##G H
priority##I Q
)##Q R
)##R S
;##S T
}$$ 
}%% 	
public'' 
void'' 
Add'' 
('' 
IInitializable'' &
initializable''' 4
)''4 5
{(( 	
Add)) 
()) 
initializable)) 
,)) 
$num))  
)))  !
;))! "
}** 	
public,, 
void,, 
Add,, 
(,, 
IInitializable,, &
initializable,,' 4
,,,4 5
int,,6 9
priority,,: B
),,B C
{-- 	
Assert.. 
... 
That.. 
(.. 
!.. 
_hasInitialized.. (
)..( )
;..) *
_initializables// 
.// 
Add// 
(//  
new00 
InitializableInfo00 %
(00% &
initializable00& 3
,003 4
priority005 =
)00= >
)00> ?
;00? @
}11 	
public33 
void33 

Initialize33 
(33 
)33  
{44 	
Assert55 
.55 
That55 
(55 
!55 
_hasInitialized55 (
)55( )
;55) *
_hasInitialized66 
=66 
true66 "
;66" #
_initializables88 
=88 
_initializables88 -
.88- .
OrderBy88. 5
(885 6
x886 7
=>888 :
x88; <
.88< =
Priority88= E
)88E F
.88F G
ToList88G M
(88M N
)88N O
;88O P
foreach;; 
(;; 
var;; 
initializable;; &
in;;' )
_initializables;;* 9
.;;9 :
Select;;: @
(;;@ A
x;;A B
=>;;C E
x;;F G
.;;G H
Initializable;;H U
);;U V
.;;V W
GetDuplicates;;W d
(;;d e
);;e f
);;f g
{<< 
Assert== 
.== 
That== 
(== 
false== !
,==! "
$str==# S
.==S T
Fmt==T W
(==W X
initializable==X e
.==e f
GetType==f m
(==m n
)==n o
)==o p
)==p q
;==q r
}>> 
foreachAA 
(AA 
varAA 
initializableAA &
inAA' )
_initializablesAA* 9
)AA9 :
{BB 
tryCC 
{DD 
usingII 
(II 
ProfileBlockII '
.II' (
StartII( -
(II- .
$strII. @
,II@ A
initializableIIB O
.IIO P
InitializableIIP ]
.II] ^
GetTypeII^ e
(IIe f
)IIf g
)IIg h
)IIh i
{KK 
initializableLL %
.LL% &
InitializableLL& 3
.LL3 4

InitializeLL4 >
(LL> ?
)LL? @
;LL@ A
}MM 
}NN 
catchOO 
(OO 
	ExceptionOO  
eOO! "
)OO" #
{PP 
throwQQ 
AssertQQ  
.QQ  !
CreateExceptionQQ! 0
(QQ0 1
eRR 
,RR 
$strRR ]
,RR] ^
initializableRR_ l
.RRl m
InitializableRRm z
.RRz {
GetType	RR{ Ç
(
RRÇ É
)
RRÉ Ñ
)
RRÑ Ö
;
RRÖ Ü
}SS 
}TT 
}UU 	
classWW 
InitializableInfoWW 
{XX 	
publicYY 
IInitializableYY !
InitializableYY" /
;YY/ 0
publicZZ 
intZZ 
PriorityZZ 
;ZZ  
public\\ 
InitializableInfo\\ $
(\\$ %
IInitializable\\% 3
initializable\\4 A
,\\A B
int\\C F
priority\\G O
)\\O P
{]] 
Initializable^^ 
=^^ 
initializable^^  -
;^^- .
Priority__ 
=__ 
priority__ #
;__# $
}`` 
}aa 	
}bb 
}cc —/
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\PoolableManager.cs
	namespace 	
Zenject
 
{ 
public		 

class		 
PoolableManager		  
{

 
readonly 
List 
< 
	IPoolable 
>  

_poolables! +
;+ ,
bool 

_isSpawned 
; 
public 
PoolableManager 
( 
[ 
InjectLocal 
] 
List 
< 
	IPoolable 
> 
	poolables %
,% &
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
	ValuePair 
< 
Type 
,  
int! $
>$ %
>% &

priorities' 1
)1 2
{ 	

_poolables 
= 
	poolables "
." #
Select# )
() *
x* +
=>, .
CreatePoolableInfo/ A
(A B
xB C
,C D

prioritiesE O
)O P
)P Q
. 
OrderBy 
( 
x 
=> 
x 
.  
Priority  (
)( )
.) *
Select* 0
(0 1
x1 2
=>3 5
x6 7
.7 8
Poolable8 @
)@ A
.A B
ToListB H
(H I
)I J
;J K
} 	
PoolableInfo 
CreatePoolableInfo '
(' (
	IPoolable( 1
poolable2 :
,: ;
List< @
<@ A
	ValuePairA J
<J K
TypeK O
,O P
intQ T
>T U
>U V

prioritiesW a
)a b
{ 	
var 
match 
= 

priorities "
." #
Where# (
(( )
x) *
=>+ -
poolable. 6
.6 7
GetType7 >
(> ?
)? @
.@ A
DerivesFromOrEqualA S
(S T
xT U
.U V
FirstV [
)[ \
)\ ]
.] ^
Select^ d
(d e
xe f
=>g i
(j k
intk n
?n o
)o p
(p q
xq r
.r s
Seconds y
)y z
)z {
.{ |
SingleOrDefault	| ã
(
ã å
)
å ç
;
ç é
int 
priority 
= 
match  
.  !
HasValue! )
?* +
match, 1
.1 2
Value2 7
:8 9
$num: ;
;; <
return 
new 
PoolableInfo #
(# $
poolable$ ,
,, -
priority. 6
)6 7
;7 8
} 	
public!! 
void!! 
TriggerOnSpawned!! $
(!!$ %
)!!% &
{"" 	
Assert## 
.## 
That## 
(## 
!## 

_isSpawned## #
)### $
;##$ %

_isSpawned$$ 
=$$ 
true$$ 
;$$ 
for&& 
(&& 
int&& 
i&& 
=&& 
$num&& 
;&& 
i&& 
<&& 

_poolables&&  *
.&&* +
Count&&+ 0
;&&0 1
i&&2 3
++&&3 5
)&&5 6
{'' 
using,, 
(,, 
ProfileBlock,, #
.,,# $
Start,,$ )
(,,) *
$str,,* 9
,,,9 :

_poolables,,; E
[,,E F
i,,F G
],,G H
.,,H I
GetType,,I P
(,,P Q
),,Q R
),,R S
),,S T
{.. 

_poolables// 
[// 
i//  
]//  !
.//! "
	OnSpawned//" +
(//+ ,
)//, -
;//- .
}00 
}11 
}22 	
public44 
void44 
TriggerOnDespawned44 &
(44& '
)44' (
{55 	
Assert66 
.66 
That66 
(66 

_isSpawned66 "
)66" #
;66# $

_isSpawned77 
=77 
false77 
;77 
for:: 
(:: 
int:: 
i:: 
=:: 

_poolables:: #
.::# $
Count::$ )
-::* +
$num::, -
;::- .
i::/ 0
>=::1 3
$num::4 5
;::5 6
i::7 8
--::8 :
)::: ;
{;; 
using@@ 
(@@ 
ProfileBlock@@ #
.@@# $
Start@@$ )
(@@) *
$str@@* ;
,@@; <

_poolables@@= G
[@@G H
i@@H I
]@@I J
.@@J K
GetType@@K R
(@@R S
)@@S T
)@@T U
)@@U V
{BB 

_poolablesCC 
[CC 
iCC  
]CC  !
.CC! "
OnDespawnedCC" -
(CC- .
)CC. /
;CC/ 0
}DD 
}EE 
}FF 	
structHH 
PoolableInfoHH 
{II 	
publicJJ 
	IPoolableJJ 
PoolableJJ %
;JJ% &
publicKK 
intKK 
PriorityKK 
;KK  
publicMM 
PoolableInfoMM 
(MM  
	IPoolableMM  )
poolableMM* 2
,MM2 3
intMM4 7
priorityMM8 @
)MM@ A
{NN 
PoolableOO 
=OO 
poolableOO #
;OO# $
PriorityPP 
=PP 
priorityPP #
;PP# $
}QQ 
}RR 	
}SS 
}TT ä	
oC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabCreators\IPrefabInstantiator.cs
	namespace 	
Zenject
 
{ 
public		 

	interface		 
IPrefabInstantiator		 (
{

 
Type 
ArgumentTarget 
{ 	
get 
; 
} 	
List 
< 
TypeValuePair 
> 
ExtraArguments *
{ 	
get 
; 
} 	(
GameObjectCreationParameters $(
GameObjectCreationParameters% A
{ 	
get 
; 
} 	

GameObject 
Instantiate 
( 
InjectContext ,
context- 4
,4 5
List6 :
<: ;
TypeValuePair; H
>H I
argsJ N
,N O
outP S
ActionT Z
injectAction[ g
)g h
;h i
UnityEngine 
. 
Object 
	GetPrefab $
($ %
)% &
;& '
} 
} Ã
ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByNewPrefab.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 *
SubContainerCreatorByNewPrefab		 /
:		0 1 
ISubContainerCreator		2 F
{

 
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
readonly 
IPrefabProvider  
_prefabProvider! 0
;0 1
readonly 
DiContainer 

_container '
;' (
public *
SubContainerCreatorByNewPrefab -
(- .
DiContainer 
	container !
,! "
IPrefabProvider# 2
prefabProvider3 A
,A B(
GameObjectCreationParameters (
gameObjectBindInfo) ;
); <
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
_prefabProvider 
= 
prefabProvider ,
;, -

_container 
= 
	container "
;" #
} 	
public 
DiContainer 
CreateSubContainer -
(- .
List. 2
<2 3
TypeValuePair3 @
>@ A
argsB F
,F G
InjectContextH U
parentContextV c
)c d
{ 	
Assert 
. 
That 
( 
args 
. 
IsEmpty $
($ %
)% &
)& '
;' (
var 
prefab 
= 
_prefabProvider (
.( )
	GetPrefab) 2
(2 3
)3 4
;4 5
var 

gameObject 
= 

_container '
.' (
InstantiatePrefab( 9
(9 :
prefab: @
,@ A
_gameObjectBindInfoB U
)U V
;V W
var 
context 
= 

gameObject $
.$ %
GetComponent% 1
<1 2
GameObjectContext2 C
>C D
(D E
)E F
;F G
Assert!! 
.!! 
That!! 
(!! 
context!! 
!=!!  "
null!!# '
,!!' (
$str"" f
,""f g
prefab""h n
.""n o
name""o s
)""s t
;""t u
return&& 
context&& 
.&& 
	Container&& $
;&&$ %
}'' 	
}(( 
})) ∞
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\Kernels\ProjectKernel.cs
	namespace 	
Zenject
 
{		 
public

 

class

 
ProjectKernel

 
:

  

MonoKernel

! +
{ 
[ 	
Inject	 
] 
ZenjectSettings 
	_settings !
=" #
null$ (
;( )
[ 	
Inject	 
]  
SceneContextRegistry 
_contextRegistry -
=. /
null0 4
;4 5
public'' 
void'' 
OnApplicationQuit'' %
(''% &
)''& '
{(( 	
if)) 
()) 
	_settings)) 
.)) @
4EnsureDeterministicDestructionOrderOnApplicationQuit)) N
)))N O
{** $
DestroyEverythingInOrder++ (
(++( )
)++) *
;++* +
},, 
}-- 	
public// 
void// $
DestroyEverythingInOrder// ,
(//, -
)//- .
{00 	 
ForceUnloadAllScenes11  
(11  !
true11! %
)11% &
;11& '
Assert44 
.44 
That44 
(44 
!44 
IsDestroyed44 $
)44$ %
;44% &
DestroyImmediate55 
(55 

gameObject55 '
)55' (
;55( )
Assert66 
.66 
That66 
(66 
IsDestroyed66 #
)66# $
;66$ %
}77 	
public99 
void99  
ForceUnloadAllScenes99 (
(99( )
bool99) -
	immediate99. 7
=998 9
false99: ?
)99? @
{:: 	
Assert== 
.== 
That== 
(== 
!== 
IsDestroyed== $
)==$ %
;==% &
var?? 

sceneOrder?? 
=?? 
new??  
List??! %
<??% &
Scene??& +
>??+ ,
(??, -
)??- .
;??. /
forAA 
(AA 
intAA 
iAA 
=AA 
$numAA 
;AA 
iAA 
<AA 
SceneManagerAA  ,
.AA, -

sceneCountAA- 7
;AA7 8
iAA9 :
++AA: <
)AA< =
{BB 

sceneOrderCC 
.CC 
AddCC 
(CC 
SceneManagerCC +
.CC+ ,

GetSceneAtCC, 6
(CC6 7
iCC7 8
)CC8 9
)CC9 :
;CC: ;
}DD 
foreachHH 
(HH 
varHH 
sceneContextHH %
inHH& (
_contextRegistryHH) 9
.HH9 :
SceneContextsHH: G
.HHG H
OrderByDescendingHHH Y
(HHY Z
xHHZ [
=>HH\ ^

sceneOrderHH_ i
.HHi j
IndexOfHHj q
(HHq r
xHHr s
.HHs t

gameObjectHHt ~
.HH~ 
scene	HH Ñ
)
HHÑ Ö
)
HHÖ Ü
.
HHÜ á
ToList
HHá ç
(
HHç é
)
HHé è
)
HHè ê
{II 
ifJJ 
(JJ 
	immediateJJ 
)JJ 
{KK 
DestroyImmediateLL $
(LL$ %
sceneContextLL% 1
.LL1 2

gameObjectLL2 <
)LL< =
;LL= >
}MM 
elseNN 
{OO 
DestroyPP 
(PP 
sceneContextPP (
.PP( )

gameObjectPP) 3
)PP3 4
;PP4 5
}QQ 
}RR 
}SS 	
}TT 
}UU é
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder3.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
TParam39 @
,@ A
	TContractB K
>K L
:M N
FactoryFromBinderO `
<` a
TParam1a h
,h i
TParam2j q
,q r
TParam3s z
,z {
	TContract	| Ö
>
Ö Ü
{ 
public !
FactoryToChoiceBinder $
($ %
DiContainer		 
bindContainer		 %
,		% &
BindInfo		' /
bindInfo		0 8
,		8 9
FactoryBindInfo		: I
factoryBindInfo		J Y
)		Y Z
:

 
base

 
(

 
bindContainer

  
,

  !
bindInfo

" *
,

* +
factoryBindInfo

, ;
)

; <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
	TContract< E
>E F
ToSelfG M
(M N
)N O
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
	TConcrete< E
>E F
ToG I
<I J
	TConcreteJ S
>S T
(T U
)U V
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
	TConcreteD M
>M N
(N O
BindContainerO \
,\ ]
BindInfo^ f
,f g
FactoryBindInfoh w
)w x
;x y
} 	
} 
} ¨
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder5.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
	TContractV _
>_ `
: 	*
FactoryArgumentsToChoiceBinder
 (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
	TContractV _
>_ `
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
:		 
base		 
(		 
bindContainer		  
,		  !
bindInfo		" *
,		* +
factoryBindInfo		, ;
)		; <
{

 	
} 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
TParam3@ G
,G H
TParam4I P
,P Q
TParam5R Y
,Y Z
	TContract[ d
>d e
WithIdf l
(l m
objectm s

identifiert ~
)~ 
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} —@
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder5.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
TParam3= D
,D E
TParam4F M
,M N
TParam5O V
,V W
	TContractX a
>a b
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
,0 1
TParam32 9
,9 :
TParam4; B
,B C
TParam5D K
>K L
installerMethodM \
)\ ]
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
,D E
TParam3F M
,M N
TParam4O V
,V W
TParam5X _
>_ `
(` a
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public!! E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder!! H!
ByNewGameObjectMethod!!I ^
(!!^ _
Action%% 
<%% 
DiContainer%% 
,%% 
TParam1%%  '
,%%' (
TParam2%%) 0
,%%0 1
TParam3%%2 9
,%%9 :
TParam4%%; B
,%%B C
TParam5%%D K
>%%K L
installerMethod%%M \
)%%\ ]
{&& 	
var'' 
gameObjectInfo'' 
=''  
new''! $(
GameObjectCreationParameters''% A
(''A B
)''B C
;''C D
ProviderFunc)) 
=)) 
(** 
	container** 
)** 
=>** 
new** "*
SubContainerDependencyProvider**# A
(**A B
ContractType++  
,++  !
SubIdentifier++" /
,++/ 0
new,, 4
(SubContainerCreatorByNewGameObjectMethod,, @
<,,@ A
TParam1,,A H
,,,H I
TParam2,,J Q
,,,Q R
TParam3,,S Z
,,,Z [
TParam4,,\ c
,,,c d
TParam5,,e l
>,,l m
(,,m n
	container-- !
,--! "
gameObjectInfo--# 1
,--1 2
installerMethod--3 B
)--B C
,--C D
false--E J
)--J K
;--K L
return// 
new// E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder// P
(//P Q
BindInfo//Q Y
,//Y Z
gameObjectInfo//[ i
)//i j
;//j k
}00 	
public22 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder22 H
ByNewPrefabMethod22I Z
(22Z [
UnityEngine33 
.33 
Object33 
prefab33 %
,33% &
Action77 
<77 
DiContainer77 
,77 
TParam177  '
,77' (
TParam277) 0
,770 1
TParam3772 9
,779 :
TParam477; B
,77B C
TParam577D K
>77K L
installerMethod77M \
)77\ ]
{88 	
BindingUtil99 
.99 
AssertIsValidPrefab99 +
(99+ ,
prefab99, 2
)992 3
;993 4
var;; 
gameObjectInfo;; 
=;;  
new;;! $(
GameObjectCreationParameters;;% A
(;;A B
);;B C
;;;C D
ProviderFunc== 
=== 
(>> 
	container>> 
)>> 
=>>> 
new>> "*
SubContainerDependencyProvider>># A
(>>A B
ContractType??  
,??  !
SubIdentifier??" /
,??/ 0
new@@ 0
$SubContainerCreatorByNewPrefabMethod@@ <
<@@< =
TParam1@@= D
,@@D E
TParam2@@F M
,@@M N
TParam3@@O V
,@@V W
TParam4@@X _
,@@_ `
TParam5@@a h
>@@h i
(@@i j
	containerAA !
,AA! "
newBB 
PrefabProviderBB *
(BB* +
prefabBB+ 1
)BB1 2
,BB2 3
gameObjectInfoCC &
,CC& '
installerMethodCC( 7
)CC7 8
,CC8 9
falseCC: ?
)CC? @
;CC@ A
returnEE 
newEE E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderEE P
(EEP Q
BindInfoEEQ Y
,EEY Z
gameObjectInfoEE[ i
)EEi j
;EEj k
}FF 	
publicHH E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderHH H%
ByNewPrefabResourceMethodHHI b
(HHb c
stringII 
resourcePathII 
,II  
ActionMM 
<MM 
DiContainerMM 
,MM 
TParam1MM  '
,MM' (
TParam2MM) 0
,MM0 1
TParam3MM2 9
,MM9 :
TParam4MM; B
,MMB C
TParam5MMD K
>MMK L
installerMethodMMM \
)MM\ ]
{NN 	
BindingUtilOO 
.OO %
AssertIsValidResourcePathOO 1
(OO1 2
resourcePathOO2 >
)OO> ?
;OO? @
varQQ 
gameObjectInfoQQ 
=QQ  
newQQ! $(
GameObjectCreationParametersQQ% A
(QQA B
)QQB C
;QQC D
ProviderFuncSS 
=SS 
(TT 
	containerTT 
)TT 
=>TT 
newTT "*
SubContainerDependencyProviderTT# A
(TTA B
ContractTypeUU  
,UU  !
SubIdentifierUU" /
,UU/ 0
newVV 0
$SubContainerCreatorByNewPrefabMethodVV <
<VV< =
TParam1VV= D
,VVD E
TParam2VVF M
,VVM N
TParam3VVO V
,VVV W
TParam4VVX _
,VV_ `
TParam5VVa h
>VVh i
(VVi j
	containerWW !
,WW! "
newXX "
PrefabProviderResourceXX 2
(XX2 3
resourcePathXX3 ?
)XX? @
,XX@ A
gameObjectInfoYY &
,YY& '
installerMethodYY( 7
)YY7 8
,YY8 9
falseYY: ?
)YY? @
;YY@ A
return[[ 
new[[ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder[[ P
([[P Q
BindInfo[[Q Y
,[[Y Z
gameObjectInfo[[[ i
)[[i j
;[[j k
}\\ 	
}^^ 
}__ †,
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\GuiRenderableManager.cs
	namespace 	
Zenject
 
{ 
public

 

class

  
GuiRenderableManager

 %
{ 
List 
< 
RenderableInfo 
> 
_renderables )
;) *
public  
GuiRenderableManager #
(# $
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
IGuiRenderable 
>  
renderables! ,
,, -
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
	ValuePair 
< 
Type 
,  
int! $
>$ %
>% &

priorities' 1
)1 2
{ 	
_renderables 
= 
new 
List #
<# $
RenderableInfo$ 2
>2 3
(3 4
)4 5
;5 6
foreach 
( 
var 

renderable #
in$ &
renderables' 2
)2 3
{ 
var 
matches 
= 

priorities (
. 
Where 
( 
x 
=> 

renderable  *
.* +
GetType+ 2
(2 3
)3 4
.4 5
DerivesFromOrEqual5 G
(G H
xH I
.I J
FirstJ O
)O P
)P Q
. 
Select 
( 
x 
=>  
x! "
." #
Second# )
)) *
.* +
ToList+ 1
(1 2
)2 3
;3 4
int 
priority 
= 
matches &
.& '
IsEmpty' .
(. /
)/ 0
?1 2
$num3 4
:5 6
matches7 >
.> ?
Distinct? G
(G H
)H I
.I J
SingleJ P
(P Q
)Q R
;R S
_renderables   
.   
Add    
(    !
new!! 
RenderableInfo!! &
(!!& '

renderable!!' 1
,!!1 2
priority!!3 ;
)!!; <
)!!< =
;!!= >
}"" 
_renderables$$ 
=$$ 
_renderables$$ '
.$$' (
OrderBy$$( /
($$/ 0
x$$0 1
=>$$2 4
x$$5 6
.$$6 7
Priority$$7 ?
)$$? @
.$$@ A
ToList$$A G
($$G H
)$$H I
;$$I J
foreach'' 
('' 
var'' 

renderable'' #
in''$ &
_renderables''' 3
.''3 4
Select''4 :
('': ;
x''; <
=>''= ?
x''@ A
.''A B

Renderable''B L
)''L M
.''M N
GetDuplicates''N [
(''[ \
)''\ ]
)''] ^
{(( 
Assert)) 
.)) 
That)) 
()) 
false)) !
,))! "
$str))# S
.))S T
Fmt))T W
())W X

renderable))X b
.))b c
GetType))c j
())j k
)))k l
)))l m
)))m n
;))n o
}** 
},, 	
public.. 
void.. 
OnGui.. 
(.. 
).. 
{// 	
foreach00 
(00 
var00 

renderable00 #
in00$ &
_renderables00' 3
)003 4
{11 
try22 
{33 
using88 
(88 
ProfileBlock88 '
.88' (
Start88( -
(88- .
$str88. ?
,88? @

renderable88A K
.88K L

Renderable88L V
.88V W
GetType88W ^
(88^ _
)88_ `
)88` a
)88a b
{:: 

renderable;; "
.;;" #

Renderable;;# -
.;;- .
	GuiRender;;. 7
(;;7 8
);;8 9
;;;9 :
}<< 
}== 
catch>> 
(>> 
	Exception>>  
e>>! "
)>>" #
{?? 
throw@@ 
Assert@@  
.@@  !
CreateException@@! 0
(@@0 1
eAA 
,AA 
$strAA G
,AAG H

renderableAAI S
.AAS T

RenderableAAT ^
.AA^ _
GetTypeAA_ f
(AAf g
)AAg h
)AAh i
;AAi j
}BB 
}CC 
}DD 	
classFF 
RenderableInfoFF 
{GG 	
publicHH 
IGuiRenderableHH !

RenderableHH" ,
;HH, -
publicII 
intII 
PriorityII 
;II  
publicKK 
RenderableInfoKK !
(KK! "
IGuiRenderableKK" 0

renderableKK1 ;
,KK; <
intKK= @
priorityKKA I
)KKI J
{LL 

RenderableMM 
=MM 

renderableMM '
;MM' (
PriorityNN 
=NN 
priorityNN #
;NN# $
}OO 
}PP 	
}QQ 
}RR ˛<
©C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\AddToGameObjectComponentProviders\AddToCurrentGameObjectComponentProvider.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class 3
'AddToCurrentGameObjectComponentProvider 8
:9 :
	IProvider; D
{ 
readonly 
Type 
_componentType $
;$ %
readonly 
DiContainer 

_container '
;' (
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly 
object 
_concreteIdentifier +
;+ ,
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
public 3
'AddToCurrentGameObjectComponentProvider 6
(6 7
DiContainer 
	container !
,! "
Type# '
componentType( 5
,5 6
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6
object7 =
concreteIdentifier> P
,P Q
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	
Assert 
. 
That 
( 
componentType %
.% &
DerivesFrom& 1
<1 2
	Component2 ;
>; <
(< =
)= >
)> ?
;? @
_extraArguments 
= 
extraArguments ,
., -
ToList- 3
(3 4
)4 5
;5 6
_componentType 
= 
componentType *
;* +

_container 
= 
	container "
;" #
_concreteIdentifier 
=  !
concreteIdentifier" 4
;4 5 
_instantiateCallback    
=  ! "
instantiateCallback  # 6
;  6 7
}!! 	
public## 
bool## 
IsCached## 
{$$ 	
get%% 
{%% 
return%% 
false%% 
;%% 
}%%  !
}&& 	
public(( 
bool(( '
TypeVariesBasedOnMemberType(( /
{)) 	
get** 
{** 
return** 
false** 
;** 
}**  !
}++ 	
	protected-- 
DiContainer-- 
	Container-- '
{.. 	
get// 
{// 
return// 

_container// #
;//# $
}//% &
}00 	
	protected22 
Type22 
ComponentType22 $
{33 	
get44 
{44 
return44 
_componentType44 '
;44' (
}44) *
}55 	
public77 
Type77 
GetInstanceType77 #
(77# $
InjectContext77$ 1
context772 9
)779 :
{88 	
return99 
_componentType99 !
;99! "
}:: 	
public<< 
void<< *
GetAllInstancesWithInjectSplit<< 2
(<<2 3
InjectContext== 
context== !
,==! "
List==# '
<==' (
TypeValuePair==( 5
>==5 6
args==7 ;
,==; <
out=== @
Action==A G
injectAction==H T
,==T U
List==V Z
<==Z [
object==[ a
>==a b
buffer==c i
)==i j
{>> 	
Assert?? 
.?? 
	IsNotNull?? 
(?? 
context?? $
)??$ %
;??% &
AssertAA 
.AA 
ThatAA 
(AA 
contextAA 
.AA  

ObjectTypeAA  *
.AA* +
DerivesFromAA+ 6
<AA6 7
	ComponentAA7 @
>AA@ A
(AAA B
)AAB C
,AAC D
$str	BB ¨
,
BB¨ ≠
contextCC 
.CC 

MemberTypeCC "
,CC" #
contextCC$ +
.CC+ ,

ObjectTypeCC, 6
)CC6 7
;CC7 8
objectEE 
instanceEE 
;EE 
ifGG 
(GG 
!GG 

_containerGG 
.GG 
IsValidatingGG (
||GG) +
TypeAnalyzerGG, 8
.GG8 9'
ShouldAllowDuringValidationGG9 T
(GGT U
_componentTypeGGU c
)GGc d
)GGd e
{HH 
varII 
gameObjII 
=II 
(II 
(II  
	ComponentII  )
)II) *
contextII* 1
.II1 2
ObjectInstanceII2 @
)II@ A
.IIA B

gameObjectIIB L
;IIL M
varKK 
componentInstanceKK %
=KK& '
gameObjKK( /
.KK/ 0
GetComponentKK0 <
(KK< =
_componentTypeKK= K
)KKK L
;KKL M
instanceLL 
=LL 
componentInstanceLL ,
;LL, -
ifQQ 
(QQ 
componentInstanceQQ %
!=QQ& (
nullQQ) -
)QQ- .
{RR 
injectActionSS  
=SS! "
nullSS# '
;SS' (
bufferTT 
.TT 
AddTT 
(TT 
instanceTT '
)TT' (
;TT( )
returnUU 
;UU 
}VV 
instanceXX 
=XX 
gameObjXX "
.XX" #
AddComponentXX# /
(XX/ 0
_componentTypeXX0 >
)XX> ?
;XX? @
}YY 
elseZZ 
{[[ 
instance\\ 
=\\ 
new\\ 
ValidationMarker\\ /
(\\/ 0
_componentType\\0 >
)\\> ?
;\\? @
}]] 
injectActionbb 
=bb 
(bb 
)bb 
=>bb  
{cc 
vardd 
	extraArgsdd 
=dd 
ZenPoolsdd  (
.dd( )
	SpawnListdd) 2
<dd2 3
TypeValuePairdd3 @
>dd@ A
(ddA B
)ddB C
;ddC D
	extraArgsff 
.ff 
AllocFreeAddRangeff +
(ff+ ,
_extraArgumentsff, ;
)ff; <
;ff< =
	extraArgsgg 
.gg 
AllocFreeAddRangegg +
(gg+ ,
argsgg, 0
)gg0 1
;gg1 2

_containerii 
.ii 
InjectExplicitii )
(ii) *
instanceii* 2
,ii2 3
_componentTypeii4 B
,iiB C
	extraArgsiiD M
,iiM N
contextiiO V
,iiV W
_concreteIdentifieriiX k
)iik l
;iil m
Assertkk 
.kk 
Thatkk 
(kk 
	extraArgskk %
.kk% &
IsEmptykk& -
(kk- .
)kk. /
)kk/ 0
;kk0 1
ZenPoolsll 
.ll 
DespawnListll $
(ll$ %
	extraArgsll% .
)ll. /
;ll/ 0
ifnn 
(nn  
_instantiateCallbacknn (
!=nn) +
nullnn, 0
)nn0 1
{oo  
_instantiateCallbackpp (
(pp( )
contextpp) 0
,pp0 1
instancepp2 :
)pp: ;
;pp; <
}qq 
}rr 
;rr 
buffertt 
.tt 
Addtt 
(tt 
instancett 
)tt  
;tt  !
}uu 	
}vv 
}ww à
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder0.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
	TContract) 2
>2 3
:4 5*
FactoryArgumentsToChoiceBinder6 T
<T U
	TContractU ^
>^ _
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
bindInfo &
,& '
factoryBindInfo( 7
)7 8
{		 	
}

 	
public *
FactoryArgumentsToChoiceBinder -
<- .
	TContract. 7
>7 8
WithId9 ?
(? @
object@ F

identifierG Q
)Q R
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ß
YC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\Kernels\Kernel.cs
	namespace 	
Zenject
 
{ 
[ 
DebuggerStepThrough 
] 
public 

class 
Kernel 
: 
IInitializable (
,( )
IDisposable* 5
,5 6
	ITickable7 @
,@ A
ILateTickableB O
,O P
IFixedTickableQ _
,_ `
ILateDisposablea p
{ 
[		 	
InjectLocal			 
]		 
TickableManager

 
_tickableManager

 (
=

) *
null

+ /
;

/ 0
[ 	
InjectLocal	 
]  
InitializableManager !
_initializableManager 2
=3 4
null5 9
;9 :
[ 	
InjectLocal	 
] 
DisposableManager 
_disposablesManager -
=. /
null0 4
;4 5
public 
virtual 
void 

Initialize &
(& '
)' (
{ 	!
_initializableManager !
.! "

Initialize" ,
(, -
)- .
;. /
} 	
public 
virtual 
void 
Dispose #
(# $
)$ %
{ 	
_disposablesManager 
.  
Dispose  '
(' (
)( )
;) *
} 	
public 
virtual 
void 
LateDispose '
(' (
)( )
{ 	
_disposablesManager 
.  
LateDispose  +
(+ ,
), -
;- .
} 	
public!! 
virtual!! 
void!! 
Tick!!  
(!!  !
)!!! "
{"" 	
_tickableManager## 
.## 
Update## #
(### $
)##$ %
;##% &
}$$ 	
public&& 
virtual&& 
void&& 
LateTick&& $
(&&$ %
)&&% &
{'' 	
_tickableManager(( 
.(( 

LateUpdate(( '
(((' (
)((( )
;(() *
})) 	
public++ 
virtual++ 
void++ 
	FixedTick++ %
(++% &
)++& '
{,, 	
_tickableManager-- 
.-- 
FixedUpdate-- (
(--( )
)--) *
;--* +
}.. 	
}// 
}00 Ÿ
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\FactoryProviderWrapper.cs
	namespace 	
Zenject
 
{ 
public 

class "
FactoryProviderWrapper '
<' (
	TContract( 1
>1 2
:3 4
IFactory5 =
<= >
	TContract> G
>G H
{ 
readonly 
	IProvider 
	_provider $
;$ %
readonly 
InjectContext 
_injectContext -
;- .
public

 "
FactoryProviderWrapper

 %
(

% &
	IProvider 
provider 
, 
InjectContext  -
injectContext. ;
); <
{ 	
Assert 
. 
That 
( 
injectContext %
.% &

MemberType& 0
.0 1
DerivesFromOrEqual1 C
<C D
	TContractD M
>M N
(N O
)O P
)P Q
;Q R
	_provider 
= 
provider  
;  !
_injectContext 
= 
injectContext *
;* +
} 	
public 
	TContract 
Create 
(  
)  !
{ 	
var 
instance 
= 
	_provider $
.$ %
GetInstance% 0
(0 1
_injectContext1 ?
)? @
;@ A
if 
( 
_injectContext 
. 
	Container (
.( )
IsValidating) 5
)5 6
{ 
return 
default 
( 
	TContract (
)( )
;) *
} 
Assert 
. 
That 
( 
instance  
==! #
null$ (
|| 
instance 
. 
GetType #
(# $
)$ %
.% &
DerivesFromOrEqual& 8
(8 9
_injectContext9 G
.G H

MemberTypeH R
)R S
)S T
;T U
return   
(   
	TContract   
)   
instance   &
;  & '
}!! 	
}"" 
}## Æ
\C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\LazyInstanceInjector.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class  
LazyInstanceInjector %
{ 
readonly 
DiContainer 

_container '
;' (
readonly 
HashSet 
< 
object 
>  
_instancesToInject! 3
=4 5
new6 9
HashSet: A
<A B
objectB H
>H I
(I J
)J K
;K L
public  
LazyInstanceInjector #
(# $
DiContainer$ /
	container0 9
)9 :
{ 	

_container 
= 
	container "
;" #
} 	
public 
IEnumerable 
< 
object !
>! "
	Instances# ,
{ 	
get 
{ 
return 
_instancesToInject +
;+ ,
}- .
} 	
public!! 
void!! 
AddInstance!! 
(!!  
object!!  &
instance!!' /
)!!/ 0
{"" 	
_instancesToInject## 
.## 
Add## "
(##" #
instance### +
)##+ ,
;##, -
}$$ 	
public&& 
void&& 
AddInstances&&  
(&&  !
IEnumerable&&! ,
<&&, -
object&&- 3
>&&3 4
	instances&&5 >
)&&> ?
{'' 	
_instancesToInject(( 
.(( 
	UnionWith(( (
(((( )
	instances(() 2
)((2 3
;((3 4
})) 	
public++ 
void++ 

LazyInject++ 
(++ 
object++ %
instance++& .
)++. /
{,, 	
if-- 
(-- 
_instancesToInject-- "
.--" #
Remove--# )
(--) *
instance--* 2
)--2 3
)--3 4
{.. 

_container// 
.// 
Inject// !
(//! "
instance//" *
)//* +
;//+ ,
}00 
}11 	
public33 
void33 
LazyInjectAll33 !
(33! "
)33" #
{44 	
using66 
(66 
ProfileBlock66 
.66  
Start66  %
(66% &
$str66& R
)66R S
)66S T
{88 
var99 
tempList99 
=99 
new99 "
List99# '
<99' (
object99( .
>99. /
(99/ 0
)990 1
;991 2
while;; 
(;; 
!;; 
_instancesToInject;; *
.;;* +
IsEmpty;;+ 2
(;;2 3
);;3 4
);;4 5
{<< 
tempList== 
.== 
Clear== "
(==" #
)==# $
;==$ %
tempList>> 
.>> 
AddRange>> %
(>>% &
_instancesToInject>>& 8
)>>8 9
;>>9 :
foreach@@ 
(@@ 
var@@  
instance@@! )
in@@* ,
tempList@@- 5
)@@5 6
{AA 

LazyInjectEE "
(EE" #
instanceEE# +
)EE+ ,
;EE, -
}FF 
}GG 
}HH 
}II 	
}JJ 
}KK î 
ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Conventions\ConventionAssemblySelectionBinder.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class -
!ConventionAssemblySelectionBinder 2
{ 
public -
!ConventionAssemblySelectionBinder 0
(0 1
ConventionBindInfo1 C
bindInfoD L
)L M
{ 	
BindInfo 
= 
bindInfo 
;  
} 	
	protected 
ConventionBindInfo $
BindInfo% -
{ 	
get 
; 
private 
set 
; 
} 	
public 
void 
FromAllAssemblies %
(% &
)& '
{ 	
} 	
public 
void "
FromAssemblyContaining *
<* +
T+ ,
>, -
(- .
). /
{ 	$
FromAssembliesContaining   $
(  $ %
typeof  % +
(  + ,
T  , -
)  - .
)  . /
;  / 0
}!! 	
public## 
void## $
FromAssembliesContaining## ,
(##, -
params##- 3
Type##4 8
[##8 9
]##9 :
types##; @
)##@ A
{$$ 	$
FromAssembliesContaining%% $
(%%$ %
(%%% &
IEnumerable%%& 1
<%%1 2
Type%%2 6
>%%6 7
)%%7 8
types%%8 =
)%%= >
;%%> ?
}&& 	
public(( 
void(( $
FromAssembliesContaining(( ,
(((, -
IEnumerable((- 8
<((8 9
Type((9 =
>((= >
types((? D
)((D E
{)) 	
FromAssemblies** 
(** 
types**  
.**  !
Select**! '
(**' (
t**( )
=>*** ,
t**- .
.**. /
Assembly**/ 7
)**7 8
.**8 9
Distinct**9 A
(**A B
)**B C
)**C D
;**D E
}++ 	
public-- 
void-- 
FromThisAssembly-- $
(--$ %
)--% &
{.. 	
FromAssemblies// 
(// 
Assembly// #
.//# $
GetCallingAssembly//$ 6
(//6 7
)//7 8
)//8 9
;//9 :
}00 	
public22 
void22 
FromAssembly22  
(22  !
Assembly22! )
assembly22* 2
)222 3
{33 	
FromAssemblies44 
(44 
assembly44 #
)44# $
;44$ %
}55 	
public77 
void77 
FromAssemblies77 "
(77" #
params77# )
Assembly77* 2
[772 3
]773 4

assemblies775 ?
)77? @
{88 	
FromAssemblies99 
(99 
(99 
IEnumerable99 '
<99' (
Assembly99( 0
>990 1
)991 2

assemblies992 <
)99< =
;99= >
}:: 	
public<< 
void<< 
FromAssemblies<< "
(<<" #
IEnumerable<<# .
<<<. /
Assembly<</ 7
><<7 8

assemblies<<9 C
)<<C D
{== 	
BindInfo>> 
.>> 
AddAssemblyFilter>> &
(>>& '
assembly>>' /
=>>>0 2

assemblies>>3 =
.>>= >
Contains>>> F
(>>F G
assembly>>G O
)>>O P
)>>P Q
;>>Q R
}?? 	
publicAA 
voidAA 
FromAssembliesWhereAA '
(AA' (
FuncAA( ,
<AA, -
AssemblyAA- 5
,AA5 6
boolAA7 ;
>AA; <
	predicateAA= F
)AAF G
{BB 	
BindInfoCC 
.CC 
AddAssemblyFilterCC &
(CC& '
	predicateCC' 0
)CC0 1
;CC1 2
}DD 	
}EE 
}FF ¶á
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\MemoryPoolBase.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
PoolExceededFixedSizeException /
:0 1
	Exception2 ;
{		 
public

 *
PoolExceededFixedSizeException

 -
(

- .
string

. 4
errorMessage

5 A
)

A B
: 
base 
( 
errorMessage 
)  
{ 	
} 	
} 
[ 
Serializable 
] 
public 

class 
MemoryPoolSettings #
{ 
public 
int 
InitialSize 
; 
public 
int 
MaxSize 
; 
public 
PoolExpandMethods  
ExpandMethod! -
;- .
public 
MemoryPoolSettings !
(! "
)" #
{ 	
InitialSize 
= 
$num 
; 
MaxSize 
= 
int 
. 
MaxValue "
;" #
ExpandMethod 
= 
PoolExpandMethods ,
., -

OneAtATime- 7
;7 8
} 	
public 
MemoryPoolSettings !
(! "
int" %
initialSize& 1
,1 2
int3 6
maxSize7 >
,> ?
PoolExpandMethods@ Q
expandMethodR ^
)^ _
{ 	
InitialSize   
=   
initialSize   %
;  % &
MaxSize!! 
=!! 
maxSize!! 
;!! 
ExpandMethod"" 
="" 
expandMethod"" '
;""' (
}## 	
public%% 
static%% 
readonly%% 
MemoryPoolSettings%% 1
Default%%2 9
=%%: ;
new%%< ?
MemoryPoolSettings%%@ R
(%%R S
)%%S T
;%%T U
}&& 
[(( (
ZenjectAllowDuringValidation(( !
]((! "
public)) 

class)) 
MemoryPoolBase)) 
<))  
	TContract))  )
>))) *
:))+ ,
IValidatable))- 9
,))9 :
IMemoryPool)); F
,))F G
IDisposable))H S
{** 
Stack++ 
<++ 
	TContract++ 
>++ 
_inactiveItems++ '
;++' (
IFactory,, 
<,, 
	TContract,, 
>,, 
_factory,, $
;,,$ %
MemoryPoolSettings-- 
	_settings-- $
;--$ %
DiContainer.. 

_container.. 
;.. 
int00 
_activeCount00 
;00 
[22 	
Inject22	 
]22 
void33 
	Construct33 
(33 
IFactory44 
<44 
	TContract44 
>44 
factory44  '
,44' (
DiContainer55 
	container55 !
,55! "
[66 
InjectOptional66 
]66 
MemoryPoolSettings77 
settings77 '
)77' (
{88 	
	_settings99 
=99 
settings99  
??99! #
MemoryPoolSettings99$ 6
.996 7
Default997 >
;99> ?
_factory:: 
=:: 
factory:: 
;:: 

_container;; 
=;; 
	container;; "
;;;" #
_inactiveItems== 
=== 
new==  
Stack==! &
<==& '
	TContract==' 0
>==0 1
(==1 2
	_settings==2 ;
.==; <
InitialSize==< G
)==G H
;==H I
if?? 
(?? 
!?? 
	container?? 
.?? 
IsValidating?? '
)??' (
{@@ 
forAA 
(AA 
intAA 
iAA 
=AA 
$numAA 
;AA 
iAA  !
<AA" #
	_settingsAA$ -
.AA- .
InitialSizeAA. 9
;AA9 :
iAA; <
++AA< >
)AA> ?
{BB 
_inactiveItemsCC "
.CC" #
PushCC# '
(CC' (
AllocNewCC( 0
(CC0 1
)CC1 2
)CC2 3
;CC3 4
}DD 
}EE $
StaticMemoryPoolRegistryHH $
.HH$ %
AddHH% (
(HH( )
thisHH) -
)HH- .
;HH. /
}JJ 	
	protectedLL 
DiContainerLL 
	ContainerLL '
{MM 	
getNN 
{NN 
returnNN 

_containerNN #
;NN# $
}NN% &
}OO 	
publicQQ 
IEnumerableQQ 
<QQ 
	TContractQQ $
>QQ$ %
InactiveItemsQQ& 3
{RR 	
getSS 
{SS 
returnSS 
_inactiveItemsSS '
;SS' (
}SS) *
}TT 	
publicVV 
intVV 
NumTotalVV 
{WW 	
getXX 
{XX 
returnXX 
NumInactiveXX $
+XX% &
	NumActiveXX' 0
;XX0 1
}XX2 3
}YY 	
public[[ 
int[[ 
NumInactive[[ 
{\\ 	
get]] 
{]] 
return]] 
_inactiveItems]] '
.]]' (
Count]]( -
;]]- .
}]]/ 0
}^^ 	
public`` 
int`` 
	NumActive`` 
{aa 	
getbb 
{bb 
returnbb 
_activeCountbb %
;bb% &
}bb' (
}cc 	
publicee 
Typeee 
ItemTypeee 
{ff 	
getgg 
{gg 
returngg 
typeofgg 
(gg  
	TContractgg  )
)gg) *
;gg* +
}gg, -
}hh 	
publicjj 
voidjj 
Disposejj 
(jj 
)jj 
{kk 	$
StaticMemoryPoolRegistrymm $
.mm$ %
Removemm% +
(mm+ ,
thismm, 0
)mm0 1
;mm1 2
}oo 	
voidqq 
IMemoryPoolqq 
.qq 
Despawnqq  
(qq  !
objectqq! '
itemqq( ,
)qq, -
{rr 	
Despawnss 
(ss 
(ss 
	TContractss 
)ss 
itemss #
)ss# $
;ss$ %
}tt 	
publicvv 
voidvv 
Despawnvv 
(vv 
	TContractvv %
itemvv& *
)vv* +
{ww 	
Assertxx 
.xx 
Thatxx 
(xx 
!xx 
_inactiveItemsxx '
.xx' (
Containsxx( 0
(xx0 1
itemxx1 5
)xx5 6
,xx6 7
$stryy ;
,yy; <
GetTypeyy= D
(yyD E
)yyE F
)yyF G
;yyG H
_activeCount{{ 
--{{ 
;{{ 
_inactiveItems}} 
.}} 
Push}} 
(}}  
item}}  $
)}}$ %
;}}% &
using
ÉÉ 
(
ÉÉ 
ProfileBlock
ÉÉ 
.
ÉÉ  
Start
ÉÉ  %
(
ÉÉ% &
$str
ÉÉ& 7
,
ÉÉ7 8
GetType
ÉÉ9 @
(
ÉÉ@ A
)
ÉÉA B
)
ÉÉB C
)
ÉÉC D
{
ÖÖ 
OnDespawned
ÜÜ 
(
ÜÜ 
item
ÜÜ  
)
ÜÜ  !
;
ÜÜ! "
}
áá 
if
ââ 
(
ââ 
_inactiveItems
ââ 
.
ââ 
Count
ââ $
>
ââ% &
	_settings
ââ' 0
.
ââ0 1
MaxSize
ââ1 8
)
ââ8 9
{
ää 
Resize
ãã 
(
ãã 
	_settings
ãã  
.
ãã  !
MaxSize
ãã! (
)
ãã( )
;
ãã) *
}
åå 
}
çç 	
	TContract
èè 
AllocNew
èè 
(
èè 
)
èè 
{
êê 	
try
ëë 
{
íí 
var
ìì 
item
ìì 
=
ìì 
_factory
ìì #
.
ìì# $
Create
ìì$ *
(
ìì* +
)
ìì+ ,
;
ìì, -
if
ïï 
(
ïï 
!
ïï 

_container
ïï 
.
ïï  
IsValidating
ïï  ,
)
ïï, -
{
ññ 
Assert
óó 
.
óó 
	IsNotNull
óó $
(
óó$ %
item
óó% )
,
óó) *
$str
óó+ e
,
óóe f
_factory
óóg o
.
óóo p
GetType
óóp w
(
óów x
)
óóx y
,
óóy z
GetTypeóó{ Ç
(óóÇ É
)óóÉ Ñ
)óóÑ Ö
;óóÖ Ü
	OnCreated
òò 
(
òò 
item
òò "
)
òò" #
;
òò# $
}
ôô 
return
õõ 
item
õõ 
;
õõ 
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù 
e
ùù 
)
ùù 
{
ûû 
throw
üü 
new
üü 
ZenjectException
üü *
(
üü* +
$str
†† T
.
††T U
Fmt
††U X
(
††X Y
typeof
°° 
(
°° 
	TContract
°° (
)
°°( )
,
°°) *
GetType
°°+ 2
(
°°2 3
)
°°3 4
)
°°4 5
,
°°5 6
e
°°7 8
)
°°8 9
;
°°9 :
}
¢¢ 
}
££ 	
void
•• 
IValidatable
•• 
.
•• 
Validate
•• "
(
••" #
)
••# $
{
¶¶ 	
try
ßß 
{
®® 
_factory
©© 
.
©© 
Create
©© 
(
©©  
)
©©  !
;
©©! "
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
e
´´ 
)
´´ 
{
¨¨ 
throw
≠≠ 
new
≠≠ 
ZenjectException
≠≠ *
(
≠≠* +
$str
ÆÆ 9
.
ÆÆ9 :
Fmt
ÆÆ: =
(
ÆÆ= >
GetType
ÆÆ> E
(
ÆÆE F
)
ÆÆF G
)
ÆÆG H
,
ÆÆH I
e
ÆÆJ K
)
ÆÆK L
;
ÆÆL M
}
ØØ 
}
∞∞ 	
public
≤≤ 
void
≤≤ 
Clear
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 	
Resize
¥¥ 
(
¥¥ 
$num
¥¥ 
)
¥¥ 
;
¥¥ 
}
µµ 	
public
∑∑ 
void
∑∑ 
ShrinkBy
∑∑ 
(
∑∑ 
int
∑∑  
numToRemove
∑∑! ,
)
∑∑, -
{
∏∏ 	
Resize
ππ 
(
ππ 
_inactiveItems
ππ !
.
ππ! "
Count
ππ" '
-
ππ( )
numToRemove
ππ* 5
)
ππ5 6
;
ππ6 7
}
∫∫ 	
public
ºº 
void
ºº 
ExpandBy
ºº 
(
ºº 
int
ºº  
numToAdd
ºº! )
)
ºº) *
{
ΩΩ 	
Resize
ææ 
(
ææ 
_inactiveItems
ææ !
.
ææ! "
Count
ææ" '
+
ææ( )
numToAdd
ææ* 2
)
ææ2 3
;
ææ3 4
}
øø 	
	protected
¡¡ 
	TContract
¡¡ 
GetInternal
¡¡ '
(
¡¡' (
)
¡¡( )
{
¬¬ 	
if
√√ 
(
√√ 
_inactiveItems
√√ 
.
√√ 
Count
√√ $
==
√√% '
$num
√√( )
)
√√) *
{
ƒƒ 

ExpandPool
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
Assert
∆∆ 
.
∆∆ 
That
∆∆ 
(
∆∆ 
!
∆∆ 
_inactiveItems
∆∆ +
.
∆∆+ ,
IsEmpty
∆∆, 3
(
∆∆3 4
)
∆∆4 5
)
∆∆5 6
;
∆∆6 7
}
«« 
var
…… 
item
…… 
=
…… 
_inactiveItems
…… %
.
……% &
Pop
……& )
(
……) *
)
……* +
;
……+ ,
_activeCount
   
++
   
;
   
	OnSpawned
ÀÀ 
(
ÀÀ 
item
ÀÀ 
)
ÀÀ 
;
ÀÀ 
return
ÃÃ 
item
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
œœ 
void
œœ 
Resize
œœ 
(
œœ 
int
œœ 
desiredPoolSize
œœ .
)
œœ. /
{
–– 	
if
—— 
(
—— 
_inactiveItems
—— 
.
—— 
Count
—— $
==
——% '
desiredPoolSize
——( 7
)
——7 8
{
““ 
return
”” 
;
”” 
}
‘‘ 
if
÷÷ 
(
÷÷ 
	_settings
÷÷ 
.
÷÷ 
ExpandMethod
÷÷ &
==
÷÷' )
PoolExpandMethods
÷÷* ;
.
÷÷; <
Disabled
÷÷< D
)
÷÷D E
{
◊◊ 
throw
ÿÿ 
new
ÿÿ ,
PoolExceededFixedSizeException
ÿÿ 8
(
ÿÿ8 9
$str
ŸŸ ^
.
⁄⁄ 
Fmt
⁄⁄ 
(
⁄⁄ 
GetType
⁄⁄  
(
⁄⁄  !
)
⁄⁄! "
,
⁄⁄" #
_inactiveItems
⁄⁄$ 2
.
⁄⁄2 3
Count
⁄⁄3 8
)
⁄⁄8 9
)
⁄⁄9 :
;
⁄⁄: ;
}
€€ 
Assert
›› 
.
›› 
That
›› 
(
›› 
desiredPoolSize
›› '
>=
››( *
$num
››+ ,
,
››, -
$str
››. a
)
››a b
;
››b c
while
ﬂﬂ 
(
ﬂﬂ 
_inactiveItems
ﬂﬂ !
.
ﬂﬂ! "
Count
ﬂﬂ" '
>
ﬂﬂ( )
desiredPoolSize
ﬂﬂ* 9
)
ﬂﬂ9 :
{
‡‡ 
OnDestroyed
·· 
(
·· 
_inactiveItems
·· *
.
··* +
Pop
··+ .
(
··. /
)
··/ 0
)
··0 1
;
··1 2
}
‚‚ 
while
‰‰ 
(
‰‰ 
desiredPoolSize
‰‰ "
>
‰‰# $
_inactiveItems
‰‰% 3
.
‰‰3 4
Count
‰‰4 9
)
‰‰9 :
{
ÂÂ 
_inactiveItems
ÊÊ 
.
ÊÊ 
Push
ÊÊ #
(
ÊÊ# $
AllocNew
ÊÊ$ ,
(
ÊÊ, -
)
ÊÊ- .
)
ÊÊ. /
;
ÊÊ/ 0
}
ÁÁ 
Assert
ÈÈ 
.
ÈÈ 
IsEqual
ÈÈ 
(
ÈÈ 
_inactiveItems
ÈÈ )
.
ÈÈ) *
Count
ÈÈ* /
,
ÈÈ/ 0
desiredPoolSize
ÈÈ1 @
)
ÈÈ@ A
;
ÈÈA B
}
ÍÍ 	
void
ÏÏ 

ExpandPool
ÏÏ 
(
ÏÏ 
)
ÏÏ 
{
ÌÌ 	
switch
ÓÓ 
(
ÓÓ 
	_settings
ÓÓ 
.
ÓÓ 
ExpandMethod
ÓÓ *
)
ÓÓ* +
{
ÔÔ 
case
 
PoolExpandMethods
 &
.
& '
Disabled
' /
:
/ 0
{
ÒÒ 
throw
ÚÚ 
new
ÚÚ ,
PoolExceededFixedSizeException
ÚÚ <
(
ÚÚ< =
$str
ÛÛ N
.
ÙÙ 
Fmt
ÙÙ 
(
ÙÙ 
GetType
ÙÙ $
(
ÙÙ$ %
)
ÙÙ% &
,
ÙÙ& '
_inactiveItems
ÙÙ( 6
.
ÙÙ6 7
Count
ÙÙ7 <
)
ÙÙ< =
)
ÙÙ= >
;
ÙÙ> ?
}
ıı 
case
ˆˆ 
PoolExpandMethods
ˆˆ &
.
ˆˆ& '

OneAtATime
ˆˆ' 1
:
ˆˆ1 2
{
˜˜ 
ExpandBy
¯¯ 
(
¯¯ 
$num
¯¯ 
)
¯¯ 
;
¯¯  
break
˘˘ 
;
˘˘ 
}
˙˙ 
case
˚˚ 
PoolExpandMethods
˚˚ &
.
˚˚& '
Double
˚˚' -
:
˚˚- .
{
¸¸ 
if
˝˝ 
(
˝˝ 
NumTotal
˝˝  
==
˝˝! #
$num
˝˝$ %
)
˝˝% &
{
˛˛ 
ExpandBy
ˇˇ  
(
ˇˇ  !
$num
ˇˇ! "
)
ˇˇ" #
;
ˇˇ# $
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
ExpandBy
ÉÉ  
(
ÉÉ  !
NumTotal
ÉÉ! )
)
ÉÉ) *
;
ÉÉ* +
}
ÑÑ 
break
ÖÖ 
;
ÖÖ 
}
ÜÜ 
default
áá 
:
áá 
{
àà 
throw
ââ 
Assert
ââ  
.
ââ  !
CreateException
ââ! 0
(
ââ0 1
)
ââ1 2
;
ââ2 3
}
ää 
}
ãã 
}
åå 	
	protected
éé 
virtual
éé 
void
éé 
OnDespawned
éé *
(
éé* +
	TContract
éé+ 4
item
éé5 9
)
éé9 :
{
èè 	
}
ëë 	
	protected
ìì 
virtual
ìì 
void
ìì 
	OnSpawned
ìì (
(
ìì( )
	TContract
ìì) 2
item
ìì3 7
)
ìì7 8
{
îî 	
}
ññ 	
	protected
òò 
virtual
òò 
void
òò 
	OnCreated
òò (
(
òò( )
	TContract
òò) 2
item
òò3 7
)
òò7 8
{
ôô 	
}
õõ 	
	protected
ùù 
virtual
ùù 
void
ùù 
OnDestroyed
ùù *
(
ùù* +
	TContract
ùù+ 4
item
ùù5 9
)
ùù9 :
{
ûû 	
}
†† 	
}
°° 
}¢¢ â2
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ReflectionTypeInfo.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
ReflectionTypeInfo #
{		 
public

 
readonly

 
Type

 
Type

 !
;

! "
public 
readonly 
Type 
BaseType %
;% &
public 
readonly 
List 
< 
InjectPropertyInfo /
>/ 0
InjectProperties1 A
;A B
public 
readonly 
List 
< 
InjectFieldInfo ,
>, -
InjectFields. :
;: ;
public 
readonly !
InjectConstructorInfo -
InjectConstructor. ?
;? @
public 
readonly 
List 
< 
InjectMethodInfo -
>- .
InjectMethods/ <
;< =
public 
ReflectionTypeInfo !
(! "
Type 
type 
, 
Type 
baseType 
, !
InjectConstructorInfo !
injectConstructor" 3
,3 4
List 
< 
InjectMethodInfo !
>! "
injectMethods# 0
,0 1
List 
< 
InjectFieldInfo  
>  !
injectFields" .
,. /
List 
< 
InjectPropertyInfo #
># $
injectProperties% 5
)5 6
{ 	
Type 
= 
type 
; 
BaseType 
= 
baseType 
;  
InjectFields 
= 
injectFields '
;' (
InjectConstructor 
= 
injectConstructor  1
;1 2
InjectMethods 
= 
injectMethods )
;) *
InjectProperties 
= 
injectProperties /
;/ 0
} 	
[!! 	
NoReflectionBaking!!	 
]!! 
public"" 
class"" 
InjectFieldInfo"" $
{## 	
public$$ 
readonly$$ 
	FieldInfo$$ %
	FieldInfo$$& /
;$$/ 0
public%% 
readonly%% 
InjectableInfo%% *
InjectableInfo%%+ 9
;%%9 :
public'' 
InjectFieldInfo'' "
(''" #
	FieldInfo(( 
	fieldInfo(( #
,((# $
InjectableInfo)) 
injectableInfo)) -
)))- .
{** 
InjectableInfo++ 
=++  
injectableInfo++! /
;++/ 0
	FieldInfo,, 
=,, 
	fieldInfo,, %
;,,% &
}-- 
}.. 	
[00 	
NoReflectionBaking00	 
]00 
public11 
class11 
InjectParameterInfo11 (
{22 	
public33 
readonly33 
ParameterInfo33 )
ParameterInfo33* 7
;337 8
public44 
readonly44 
InjectableInfo44 *
InjectableInfo44+ 9
;449 :
public66 
InjectParameterInfo66 &
(66& '
ParameterInfo77 
parameterInfo77 +
,77+ ,
InjectableInfo88 
injectableInfo88 -
)88- .
{99 
InjectableInfo:: 
=::  
injectableInfo::! /
;::/ 0
ParameterInfo;; 
=;; 
parameterInfo;;  -
;;;- .
}<< 
}== 	
[?? 	
NoReflectionBaking??	 
]?? 
public@@ 
class@@ 
InjectPropertyInfo@@ '
{AA 	
publicBB 
readonlyBB 
PropertyInfoBB (
PropertyInfoBB) 5
;BB5 6
publicCC 
readonlyCC 
InjectableInfoCC *
InjectableInfoCC+ 9
;CC9 :
publicEE 
InjectPropertyInfoEE %
(EE% &
PropertyInfoFF 
propertyInfoFF )
,FF) *
InjectableInfoGG 
injectableInfoGG -
)GG- .
{HH 
InjectableInfoII 
=II  
injectableInfoII! /
;II/ 0
PropertyInfoJJ 
=JJ 
propertyInfoJJ +
;JJ+ ,
}KK 
}LL 	
[NN 	
NoReflectionBakingNN	 
]NN 
publicOO 
classOO 
InjectMethodInfoOO %
{PP 	
publicQQ 
readonlyQQ 

MethodInfoQQ &

MethodInfoQQ' 1
;QQ1 2
publicRR 
readonlyRR 
ListRR  
<RR  !
InjectParameterInfoRR! 4
>RR4 5

ParametersRR6 @
;RR@ A
publicTT 
InjectMethodInfoTT #
(TT# $

MethodInfoUU 

methodInfoUU %
,UU% &
ListVV 
<VV 
InjectParameterInfoVV (
>VV( )

parametersVV* 4
)VV4 5
{WW 

MethodInfoXX 
=XX 

methodInfoXX '
;XX' (

ParametersYY 
=YY 

parametersYY '
;YY' (
}ZZ 
}[[ 	
[]] 	
NoReflectionBaking]]	 
]]] 
public^^ 
class^^ !
InjectConstructorInfo^^ *
{__ 	
public`` 
readonly`` 
ConstructorInfo`` +
ConstructorInfo``, ;
;``; <
publicaa 
readonlyaa 
Listaa  
<aa  !
InjectParameterInfoaa! 4
>aa4 5

Parametersaa6 @
;aa@ A
publiccc !
InjectConstructorInfocc (
(cc( )
ConstructorInfodd 
constructorInfodd  /
,dd/ 0
Listee 
<ee 
InjectParameterInfoee (
>ee( )

parametersee* 4
)ee4 5
{ff 
ConstructorInfogg 
=gg  !
constructorInfogg" 1
;gg1 2

Parametershh 
=hh 

parametershh '
;hh' (
}ii 
}jj 	
}kk 
}ll ïC
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder6.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
TParam3= D
,D E
TParam4F M
,M N
TParam5O V
,V W
TParam6X _
,_ `
	TContracta j
>j k
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
,0 1
TParam32 9
,9 :
TParam4; B
,B C
TParam5D K
,K L
TParam6M T
>T U
installerMethodV e
)e f
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
,D E
TParam3F M
,M N
TParam4O V
,V W
TParam5X _
,_ `
TParam6a h
>h i
(i j
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public!! E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder!! H!
ByNewGameObjectMethod!!I ^
(!!^ _
Action%% 
<%% 
DiContainer%% 
,%% 
TParam1%%  '
,%%' (
TParam2%%) 0
,%%0 1
TParam3%%2 9
,%%9 :
TParam4%%; B
,%%B C
TParam5%%D K
,%%K L
TParam6%%M T
>%%T U
installerMethod%%V e
)%%e f
{&& 	
var'' 
gameObjectInfo'' 
=''  
new''! $(
GameObjectCreationParameters''% A
(''A B
)''B C
;''C D
ProviderFunc)) 
=)) 
(** 
	container** 
)** 
=>** 
new** "*
SubContainerDependencyProvider**# A
(**A B
ContractType++  
,++  !
SubIdentifier++" /
,++/ 0
new,, 4
(SubContainerCreatorByNewGameObjectMethod,, @
<,,@ A
TParam1,,A H
,,,H I
TParam2,,J Q
,,,Q R
TParam3,,S Z
,,,Z [
TParam4,,\ c
,,,c d
TParam5,,e l
,,,l m
TParam6,,n u
>,,u v
(,,v w
	container-- !
,--! "
gameObjectInfo--# 1
,--1 2
installerMethod--3 B
)--B C
,--C D
false--E J
)--J K
;--K L
return// 
new// E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder// P
(//P Q
BindInfo//Q Y
,//Y Z
gameObjectInfo//[ i
)//i j
;//j k
}00 	
public22 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder22 H
ByNewPrefabMethod22I Z
(22Z [
UnityEngine33 
.33 
Object33 
prefab33 %
,33% &
Action77 
<77 
DiContainer77 
,77 
TParam177  '
,77' (
TParam277) 0
,770 1
TParam3772 9
,779 :
TParam477; B
,77B C
TParam577D K
,77K L
TParam677M T
>77T U
installerMethod77V e
)77e f
{88 	
BindingUtil99 
.99 
AssertIsValidPrefab99 +
(99+ ,
prefab99, 2
)992 3
;993 4
var;; 
gameObjectInfo;; 
=;;  
new;;! $(
GameObjectCreationParameters;;% A
(;;A B
);;B C
;;;C D
ProviderFunc== 
=== 
(>> 
	container>> 
)>> 
=>>> 
new>> "*
SubContainerDependencyProvider>># A
(>>A B
ContractType??  
,??  !
SubIdentifier??" /
,??/ 0
new@@ 0
$SubContainerCreatorByNewPrefabMethod@@ <
<@@< =
TParam1@@= D
,@@D E
TParam2@@F M
,@@M N
TParam3@@O V
,@@V W
TParam4@@X _
,@@_ `
TParam5@@a h
,@@h i
TParam6@@j q
>@@q r
(@@r s
	containerAA !
,AA! "
newBB 
PrefabProviderBB *
(BB* +
prefabBB+ 1
)BB1 2
,BB2 3
gameObjectInfoCC &
,CC& '
installerMethodCC( 7
)CC7 8
,CC8 9
falseCC: ?
)CC? @
;CC@ A
returnEE 
newEE E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderEE P
(EEP Q
BindInfoEEQ Y
,EEY Z
gameObjectInfoEE[ i
)EEi j
;EEj k
}FF 	
publicHH E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderHH H%
ByNewPrefabResourceMethodHHI b
(HHb c
stringII 
resourcePathII 
,II  
ActionMM 
<MM 
DiContainerMM 
,MM 
TParam1MM  '
,MM' (
TParam2MM) 0
,MM0 1
TParam3MM2 9
,MM9 :
TParam4MM; B
,MMB C
TParam5MMD K
,MMK L
TParam6MMM T
>MMT U
installerMethodMMV e
)MMe f
{NN 	
BindingUtilOO 
.OO %
AssertIsValidResourcePathOO 1
(OO1 2
resourcePathOO2 >
)OO> ?
;OO? @
varQQ 
gameObjectInfoQQ 
=QQ  
newQQ! $(
GameObjectCreationParametersQQ% A
(QQA B
)QQB C
;QQC D
ProviderFuncSS 
=SS 
(TT 
	containerTT 
)TT 
=>TT 
newTT "*
SubContainerDependencyProviderTT# A
(TTA B
ContractTypeUU  
,UU  !
SubIdentifierUU" /
,UU/ 0
newVV 0
$SubContainerCreatorByNewPrefabMethodVV <
<VV< =
TParam1VV= D
,VVD E
TParam2VVF M
,VVM N
TParam3VVO V
,VVV W
TParam4VVX _
,VV_ `
TParam5VVa h
,VVh i
TParam6VVj q
>VVq r
(VVr s
	containerWW !
,WW! "
newXX "
PrefabProviderResourceXX 2
(XX2 3
resourcePathXX3 ?
)XX? @
,XX@ A
gameObjectInfoYY &
,YY& '
installerMethodYY( 7
)YY7 8
,YY8 9
falseYY: ?
)YY? @
;YY@ A
return[[ 
new[[ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder[[ P
([[P Q
BindInfo[[Q Y
,[[Y Z
gameObjectInfo[[[ i
)[[i j
;[[j k
}\\ 	
}^^ 
}__ µ
åC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\DecoratorToChoiceFromBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class '
DecoratorToChoiceFromBinder ,
<, -
	TContract- 6
>6 7
{ 
DiContainer 
_bindContainer "
;" #
BindInfo 
	_bindInfo 
; 
FactoryBindInfo 
_factoryBindInfo (
;( )
public

 '
DecoratorToChoiceFromBinder

 *
(

* +
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
{ 	
_bindContainer 
= 
bindContainer *
;* +
	_bindInfo 
= 
bindInfo  
;  !
_factoryBindInfo 
= 
factoryBindInfo .
;. /
} 	
public 
FactoryFromBinder  
<  !
	TContract! *
,* +
	TConcrete, 5
>5 6
With7 ;
<; <
	TConcrete< E
>E F
(F G
)G H
where 
	TConcrete 
: 
	TContract '
{ 	
	_bindInfo 
. 
ToChoice 
=  
	ToChoices! *
.* +
Concrete+ 3
;3 4
	_bindInfo 
. 
ToTypes 
. 
Clear #
(# $
)$ %
;% &
	_bindInfo 
. 
ToTypes 
. 
Add !
(! "
typeof" (
(( )
	TConcrete) 2
)2 3
)3 4
;4 5
return 
new 
FactoryFromBinder (
<( )
	TContract) 2
,2 3
	TConcrete4 =
>= >
(> ?
_bindContainer 
, 
	_bindInfo  )
,) *
_factoryBindInfo+ ;
); <
;< =
} 	
} 
} ƒ	
™C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\DeclareSignal\DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class D
8DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder I
:J KC
6DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder	L Ç
{ 
public D
8DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder G
(G H%
SignalDeclarationBindInfo %
signalBindInfo& 4
)4 5
: 
base 
( 
signalBindInfo !
)! "
{		 	
}

 	
public B
6DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder E
WithIdF L
(L M
objectM S

identifierT ^
)^ _
{ 	
SignalBindInfo 
. 

Identifier %
=& '

identifier( 2
;2 3
return 
this 
; 
} 	
} 
} ø
lC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\PoolCleanupChecker.cs
	namespace 	
Zenject
 
{ 
public 

class 
PoolCleanupChecker #
:$ %
ILateDisposable& 5
{ 
readonly 
List 
< 
IMemoryPool !
>! "
_poolFactories# 1
;1 2
readonly 
List 
< 
Type 
> 
_ignoredPools )
;) *
public 
PoolCleanupChecker !
(! "
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
IMemoryPool 
> 
poolFactories +
,+ ,
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Local+ 0
)0 1
]1 2
List 
< 
Type 
> 
ignoredPools #
)# $
{ 	
_poolFactories 
= 
poolFactories *
;* +
_ignoredPools 
= 
ignoredPools (
;( )
Assert 
. 
That 
( 
ignoredPools $
.$ %
All% (
(( )
x) *
=>+ -
x. /
./ 0
DerivesFrom0 ;
<; <
IMemoryPool< G
>G H
(H I
)I J
)J K
)K L
;L M
} 	
public 
void 
LateDispose 
(  
)  !
{ 	
foreach 
( 
var 
pool 
in  
_poolFactories! /
)/ 0
{ 
if   
(   
!   
_ignoredPools   "
.  " #
Contains  # +
(  + ,
pool  , 0
.  0 1
GetType  1 8
(  8 9
)  9 :
)  : ;
)  ; <
{!! 
Assert"" 
."" 
IsEqual"" "
(""" #
pool""# '
.""' (
	NumActive""( 1
,""1 2
$num""3 4
,""4 5
$str	## Ä
.
##Ä Å
Fmt
##Å Ñ
(
##Ñ Ö
pool
##Ö â
.
##â ä
GetType
##ä ë
(
##ë í
)
##í ì
,
##ì î
pool
##ï ô
.
##ô ö
ItemType
##ö ¢
)
##¢ £
)
##£ §
;
##§ •
}$$ 
}%% 
}&& 	
}'' 
}(( ¶x
gC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\PoolableMemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
PoolableMemoryPool #
<# $
TValue$ *
>* +
: 	

MemoryPool
 
< 
TValue 
> 
where 
TValue 
: 
	IPoolable  
{ 
	protected 
override 
void 
OnDespawned  +
(+ ,
TValue, 2
item3 7
)7 8
{		 	
item

 
.

 
OnDespawned

 
(

 
)

 
;

 
} 	
	protected 
override 
void 
Reinitialize  ,
(, -
TValue- 3
item4 8
)8 9
{ 	
item 
. 
	OnSpawned 
( 
) 
; 
} 	
} 
public 

class 
PoolableMemoryPool #
<# $
TParam1$ +
,+ ,
TValue- 3
>3 4
: 	

MemoryPool
 
< 
TParam1 
, 
TValue $
>$ %
where 
TValue 
: 
	IPoolable  
<  !
TParam1! (
>( )
{ 
	protected 
override 
void 
OnDespawned  +
(+ ,
TValue, 2
item3 7
)7 8
{ 	
item 
. 
OnDespawned 
( 
) 
; 
} 	
	protected 
override 
void 
Reinitialize  ,
(, -
TParam1- 4
p15 7
,7 8
TValue9 ?
item@ D
)D E
{ 	
item 
. 
	OnSpawned 
( 
p1 
) 
; 
}   	
}!! 
public$$ 

class$$ 
PoolableMemoryPool$$ #
<$$# $
TParam1$$$ +
,$$+ ,
TParam2$$- 4
,$$4 5
TValue$$6 <
>$$< =
:%% 	

MemoryPool%%
 
<%% 
TParam1%% 
,%% 
TParam2%% %
,%%% &
TValue%%' -
>%%- .
where&& 
TValue&& 
:&& 
	IPoolable&&  
<&&  !
TParam1&&! (
,&&( )
TParam2&&* 1
>&&1 2
{'' 
	protected(( 
override(( 
void(( 
OnDespawned((  +
(((+ ,
TValue((, 2
item((3 7
)((7 8
{)) 	
item** 
.** 
OnDespawned** 
(** 
)** 
;** 
}++ 	
	protected-- 
override-- 
void-- 
Reinitialize--  ,
(--, -
TParam1--- 4
p1--5 7
,--7 8
TParam2--9 @
p2--A C
,--C D
TValue--E K
item--L P
)--P Q
{.. 	
item// 
.// 
	OnSpawned// 
(// 
p1// 
,// 
p2// !
)//! "
;//" #
}00 	
}11 
public44 

class44 
PoolableMemoryPool44 #
<44# $
TParam144$ +
,44+ ,
TParam244- 4
,444 5
TParam3446 =
,44= >
TValue44? E
>44E F
:55 	

MemoryPool55
 
<55 
TParam155 
,55 
TParam255 %
,55% &
TParam355' .
,55. /
TValue550 6
>556 7
where66 
TValue66 
:66 
	IPoolable66  
<66  !
TParam166! (
,66( )
TParam266* 1
,661 2
TParam3663 :
>66: ;
{77 
	protected88 
override88 
void88 
OnDespawned88  +
(88+ ,
TValue88, 2
item883 7
)887 8
{99 	
item:: 
.:: 
OnDespawned:: 
(:: 
):: 
;:: 
};; 	
	protected== 
override== 
void== 
Reinitialize==  ,
(==, -
TParam1==- 4
p1==5 7
,==7 8
TParam2==9 @
p2==A C
,==C D
TParam3==E L
p3==M O
,==O P
TValue==Q W
item==X \
)==\ ]
{>> 	
item?? 
.?? 
	OnSpawned?? 
(?? 
p1?? 
,?? 
p2?? !
,??! "
p3??# %
)??% &
;??& '
}@@ 	
}AA 
publicDD 

classDD 
PoolableMemoryPoolDD #
<DD# $
TParam1DD$ +
,DD+ ,
TParam2DD- 4
,DD4 5
TParam3DD6 =
,DD= >
TParam4DD? F
,DDF G
TValueDDH N
>DDN O
:EE 	

MemoryPoolEE
 
<EE 
TParam1EE 
,EE 
TParam2EE %
,EE% &
TParam3EE' .
,EE. /
TParam4EE0 7
,EE7 8
TValueEE9 ?
>EE? @
whereFF 
TValueFF 
:FF 
	IPoolableFF  
<FF  !
TParam1FF! (
,FF( )
TParam2FF* 1
,FF1 2
TParam3FF3 :
,FF: ;
TParam4FF< C
>FFC D
{GG 
	protectedHH 
overrideHH 
voidHH 
OnDespawnedHH  +
(HH+ ,
TValueHH, 2
itemHH3 7
)HH7 8
{II 	
itemJJ 
.JJ 
OnDespawnedJJ 
(JJ 
)JJ 
;JJ 
}KK 	
	protectedMM 
overrideMM 
voidMM 
ReinitializeMM  ,
(MM, -
TParam1MM- 4
p1MM5 7
,MM7 8
TParam2MM9 @
p2MMA C
,MMC D
TParam3MME L
p3MMM O
,MMO P
TParam4MMQ X
p4MMY [
,MM[ \
TValueMM] c
itemMMd h
)MMh i
{NN 	
itemOO 
.OO 
	OnSpawnedOO 
(OO 
p1OO 
,OO 
p2OO !
,OO! "
p3OO# %
,OO% &
p4OO' )
)OO) *
;OO* +
}PP 	
}QQ 
publicTT 

classTT 
PoolableMemoryPoolTT #
<TT# $
TParam1TT$ +
,TT+ ,
TParam2TT- 4
,TT4 5
TParam3TT6 =
,TT= >
TParam4TT? F
,TTF G
TParam5TTH O
,TTO P
TValueTTQ W
>TTW X
:UU 	

MemoryPoolUU
 
<UU 
TParam1UU 
,UU 
TParam2UU %
,UU% &
TParam3UU' .
,UU. /
TParam4UU0 7
,UU7 8
TParam5UU9 @
,UU@ A
TValueUUB H
>UUH I
whereVV 
TValueVV 
:VV 
	IPoolableVV  
<VV  !
TParam1VV! (
,VV( )
TParam2VV* 1
,VV1 2
TParam3VV3 :
,VV: ;
TParam4VV< C
,VVC D
TParam5VVE L
>VVL M
{WW 
	protectedXX 
overrideXX 
voidXX 
OnDespawnedXX  +
(XX+ ,
TValueXX, 2
itemXX3 7
)XX7 8
{YY 	
itemZZ 
.ZZ 
OnDespawnedZZ 
(ZZ 
)ZZ 
;ZZ 
}[[ 	
	protected]] 
override]] 
void]] 
Reinitialize]]  ,
(]], -
TParam1]]- 4
p1]]5 7
,]]7 8
TParam2]]9 @
p2]]A C
,]]C D
TParam3]]E L
p3]]M O
,]]O P
TParam4]]Q X
p4]]Y [
,]][ \
TParam5]]] d
p5]]e g
,]]g h
TValue]]i o
item]]p t
)]]t u
{^^ 	
item__ 
.__ 
	OnSpawned__ 
(__ 
p1__ 
,__ 
p2__ !
,__! "
p3__# %
,__% &
p4__' )
,__) *
p5__+ -
)__- .
;__. /
}`` 	
}aa 
publicdd 

classdd 
PoolableMemoryPooldd #
<dd# $
TParam1dd$ +
,dd+ ,
TParam2dd- 4
,dd4 5
TParam3dd6 =
,dd= >
TParam4dd? F
,ddF G
TParam5ddH O
,ddO P
TParam6ddQ X
,ddX Y
TValueddZ `
>dd` a
:ee 	

MemoryPoolee
 
<ee 
TParam1ee 
,ee 
TParam2ee %
,ee% &
TParam3ee' .
,ee. /
TParam4ee0 7
,ee7 8
TParam5ee9 @
,ee@ A
TParam6eeB I
,eeI J
TValueeeK Q
>eeQ R
whereff 
TValueff 
:ff 
	IPoolableff  
<ff  !
TParam1ff! (
,ff( )
TParam2ff* 1
,ff1 2
TParam3ff3 :
,ff: ;
TParam4ff< C
,ffC D
TParam5ffE L
,ffL M
TParam6ffN U
>ffU V
{gg 
	protectedhh 
overridehh 
voidhh 
OnDespawnedhh  +
(hh+ ,
TValuehh, 2
itemhh3 7
)hh7 8
{ii 	
itemjj 
.jj 
OnDespawnedjj 
(jj 
)jj 
;jj 
}kk 	
	protectedmm 
overridemm 
voidmm 
Reinitializemm  ,
(mm, -
TParam1mm- 4
p1mm5 7
,mm7 8
TParam2mm9 @
p2mmA C
,mmC D
TParam3mmE L
p3mmM O
,mmO P
TParam4mmQ X
p4mmY [
,mm[ \
TParam5mm] d
p5mme g
,mmg h
TParam6mmi p
p6mmq s
,mms t
TValuemmu {
item	mm| Ä
)
mmÄ Å
{nn 	
itemoo 
.oo 
	OnSpawnedoo 
(oo 
p1oo 
,oo 
p2oo !
,oo! "
p3oo# %
,oo% &
p4oo' )
,oo) *
p5oo+ -
,oo- .
p6oo/ 1
)oo1 2
;oo2 3
}pp 	
}qq 
publictt 

classtt 
PoolableMemoryPooltt #
<tt# $
TParam1tt$ +
,tt+ ,
TParam2tt- 4
,tt4 5
TParam3tt6 =
,tt= >
TParam4tt? F
,ttF G
TParam5ttH O
,ttO P
TParam6ttQ X
,ttX Y
TParam7ttZ a
,tta b
TValuettc i
>tti j
:uu 	

MemoryPooluu
 
<uu 
TParam1uu 
,uu 
TParam2uu %
,uu% &
TParam3uu' .
,uu. /
TParam4uu0 7
,uu7 8
TParam5uu9 @
,uu@ A
TParam6uuB I
,uuI J
TParam7uuK R
,uuR S
TValueuuT Z
>uuZ [
wherevv 
TValuevv 
:vv 
	IPoolablevv  
<vv  !
TParam1vv! (
,vv( )
TParam2vv* 1
,vv1 2
TParam3vv3 :
,vv: ;
TParam4vv< C
,vvC D
TParam5vvE L
,vvL M
TParam6vvN U
,vvU V
TParam7vvW ^
>vv^ _
{ww 
	protectedxx 
overridexx 
voidxx 
OnDespawnedxx  +
(xx+ ,
TValuexx, 2
itemxx3 7
)xx7 8
{yy 	
itemzz 
.zz 
OnDespawnedzz 
(zz 
)zz 
;zz 
}{{ 	
	protected}} 
override}} 
void}} 
Reinitialize}}  ,
(}}, -
TParam1}}- 4
p1}}5 7
,}}7 8
TParam2}}9 @
p2}}A C
,}}C D
TParam3}}E L
p3}}M O
,}}O P
TParam4}}Q X
p4}}Y [
,}}[ \
TParam5}}] d
p5}}e g
,}}g h
TParam6}}i p
p6}}q s
,}}s t
TParam7}}u |
p7}}} 
,	}} Ä
TValue
}}Å á
item
}}à å
)
}}å ç
{~~ 	
item 
. 
	OnSpawned 
( 
p1 
, 
p2 !
,! "
p3# %
,% &
p4' )
,) *
p5+ -
,- .
p6/ 1
,1 2
p73 5
)5 6
;6 7
}
ÄÄ 	
}
ÅÅ 
public
ÑÑ 

class
ÑÑ  
PoolableMemoryPool
ÑÑ #
<
ÑÑ# $
TParam1
ÑÑ$ +
,
ÑÑ+ ,
TParam2
ÑÑ- 4
,
ÑÑ4 5
TParam3
ÑÑ6 =
,
ÑÑ= >
TParam4
ÑÑ? F
,
ÑÑF G
TParam5
ÑÑH O
,
ÑÑO P
TParam6
ÑÑQ X
,
ÑÑX Y
TParam7
ÑÑZ a
,
ÑÑa b
TParam8
ÑÑc j
,
ÑÑj k
TValue
ÑÑl r
>
ÑÑr s
:
ÖÖ 	

MemoryPool
ÖÖ
 
<
ÖÖ 
TParam1
ÖÖ 
,
ÖÖ 
TParam2
ÖÖ %
,
ÖÖ% &
TParam3
ÖÖ' .
,
ÖÖ. /
TParam4
ÖÖ0 7
,
ÖÖ7 8
TParam5
ÖÖ9 @
,
ÖÖ@ A
TParam6
ÖÖB I
,
ÖÖI J
TParam7
ÖÖK R
,
ÖÖR S
TParam8
ÖÖT [
,
ÖÖ[ \
TValue
ÖÖ] c
>
ÖÖc d
where
ÜÜ 
TValue
ÜÜ 
:
ÜÜ 
	IPoolable
ÜÜ  
<
ÜÜ  !
TParam1
ÜÜ! (
,
ÜÜ( )
TParam2
ÜÜ* 1
,
ÜÜ1 2
TParam3
ÜÜ3 :
,
ÜÜ: ;
TParam4
ÜÜ< C
,
ÜÜC D
TParam5
ÜÜE L
,
ÜÜL M
TParam6
ÜÜN U
,
ÜÜU V
TParam7
ÜÜW ^
,
ÜÜ^ _
TParam8
ÜÜ` g
>
ÜÜg h
{
áá 
	protected
àà 
override
àà 
void
àà 
OnDespawned
àà  +
(
àà+ ,
TValue
àà, 2
item
àà3 7
)
àà7 8
{
ââ 	
item
ää 
.
ää 
OnDespawned
ää 
(
ää 
)
ää 
;
ää 
}
ãã 	
	protected
çç 
override
çç 
void
çç 
Reinitialize
çç  ,
(
çç, -
TParam1
çç- 4
p1
çç5 7
,
çç7 8
TParam2
çç9 @
p2
ççA C
,
ççC D
TParam3
ççE L
p3
ççM O
,
ççO P
TParam4
ççQ X
p4
ççY [
,
çç[ \
TParam5
çç] d
p5
ççe g
,
ççg h
TParam6
ççi p
p6
ççq s
,
ççs t
TParam7
ççu |
p7
çç} 
,çç Ä
TParam8ççÅ à
p8ççâ ã
,ççã å
TValueççç ì
itemççî ò
)ççò ô
{
éé 	
item
èè 
.
èè 
	OnSpawned
èè 
(
èè 
p1
èè 
,
èè 
p2
èè !
,
èè! "
p3
èè# %
,
èè% &
p4
èè' )
,
èè) *
p5
èè+ -
,
èè- .
p6
èè/ 1
,
èè1 2
p7
èè3 5
,
èè5 6
p8
èè7 9
)
èè9 :
;
èè: ;
}
êê 	
}
ëë 
}íí ‹#
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodProviderMultiple.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class "
MethodProviderMultiple '
<' (
TReturn( /
>/ 0
:1 2
	IProvider3 <
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
Func 
< 
InjectContext #
,# $
IEnumerable% 0
<0 1
TReturn1 8
>8 9
>9 :
_method; B
;B C
public "
MethodProviderMultiple %
(% &
Func 
< 
InjectContext 
, 
IEnumerable  +
<+ ,
TReturn, 3
>3 4
>4 5
method6 <
,< =
DiContainer 
	container !
)! "
{ 	

_container 
= 
	container "
;" #
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{   	
return!! 
typeof!! 
(!! 
TReturn!! !
)!!! "
;!!" #
}"" 	
public$$ 
void$$ *
GetAllInstancesWithInjectSplit$$ 2
($$2 3
InjectContext%% 
context%% !
,%%! "
List%%# '
<%%' (
TypeValuePair%%( 5
>%%5 6
args%%7 ;
,%%; <
out%%= @
Action%%A G
injectAction%%H T
,%%T U
List%%V Z
<%%Z [
object%%[ a
>%%a b
buffer%%c i
)%%i j
{&& 	
Assert'' 
.'' 
IsEmpty'' 
('' 
args'' 
)''  
;''  !
Assert(( 
.(( 
	IsNotNull(( 
((( 
context(( $
)(($ %
;((% &
Assert** 
.** 
That** 
(** 
typeof** 
(** 
TReturn** &
)**& '
.**' (
DerivesFromOrEqual**( :
(**: ;
context**; B
.**B C

MemberType**C M
)**M N
)**N O
;**O P
injectAction,, 
=,, 
null,, 
;,,  
if-- 
(-- 

_container-- 
.-- 
IsValidating-- '
&&--( *
!--+ ,
TypeAnalyzer--, 8
.--8 9'
ShouldAllowDuringValidation--9 T
(--T U
context--U \
.--\ ]

MemberType--] g
)--g h
)--h i
{.. 
buffer// 
.// 
Add// 
(// 
new// 
ValidationMarker// /
(/// 0
typeof//0 6
(//6 7
TReturn//7 >
)//> ?
)//? @
)//@ A
;//A B
}00 
else11 
{22 
var33 
result33 
=33 
_method33 $
(33$ %
context33% ,
)33, -
;33- .
if55 
(55 
result55 
==55 
null55 "
)55" #
{66 
throw77 
Assert77  
.77  !
CreateException77! 0
(770 1
$str88 `
,88` a
_method99 
.99  
ToDebugString99  -
(99- .
)99. /
,99/ 0
context991 8
.998 9 
GetObjectGraphString999 M
(99M N
)99N O
)99O P
;99P Q
}:: 
foreach<< 
(<< 
var<< 
obj<<  
in<<! #
result<<$ *
)<<* +
{== 
buffer>> 
.>> 
Add>> 
(>> 
obj>> "
)>>" #
;>># $
}?? 
}@@ 
}AA 	
}BB 
}CC ˜
XC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\InstallerBase.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class 
InstallerBase '
:( )

IInstaller* 4
{ 
[ 	
Inject	 
] 
DiContainer 

_container 
=  
null! %
;% &
	protected 
DiContainer 
	Container '
{		 	
get

 
{

 
return

 

_container

 #
;

# $
}

% &
} 	
public 
virtual 
bool 
	IsEnabled %
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
abstract 
void 
InstallBindings ,
(, -
)- .
;. /
} 
} £
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\PlaceholderFactoryBase.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IPlaceholderFactory (
:) *
IValidatable+ 7
{		 
}

 
public 

abstract 
class "
PlaceholderFactoryBase 0
<0 1
TValue1 7
>7 8
:9 :
IPlaceholderFactory; N
{ 
	IProvider 
	_provider 
; 
InjectContext 
_injectContext $
;$ %
[ 	
Inject	 
] 
void 
	Construct 
( 
	IProvider  
provider! )
,) *
InjectContext+ 8
injectContext9 F
)F G
{ 	
Assert 
. 
	IsNotNull 
( 
provider %
)% &
;& '
Assert 
. 
	IsNotNull 
( 
injectContext *
)* +
;+ ,
	_provider 
= 
provider  
;  !
_injectContext 
= 
injectContext *
;* +
} 	
	protected 
TValue 
CreateInternal '
(' (
List( ,
<, -
TypeValuePair- :
>: ;
	extraArgs< E
)E F
{ 	
try 
{ 
var   
result   
=   
	_provider   &
.  & '
GetInstance  ' 2
(  2 3
_injectContext  3 A
,  A B
	extraArgs  C L
)  L M
;  M N
if"" 
("" 
_injectContext"" "
.""" #
	Container""# ,
."", -
IsValidating""- 9
&&"": <
result""= C
is""D F
ValidationMarker""G W
)""W X
{## 
return$$ 
default$$ "
($$" #
TValue$$# )
)$$) *
;$$* +
}%% 
Assert'' 
.'' 
That'' 
('' 
result'' "
==''# %
null''& *
||''+ -
result''. 4
.''4 5
GetType''5 <
(''< =
)''= >
.''> ?
DerivesFromOrEqual''? Q
<''Q R
TValue''R X
>''X Y
(''Y Z
)''Z [
)''[ \
;''\ ]
return)) 
()) 
TValue)) 
))) 
result))  &
;))& '
}** 
catch++ 
(++ 
	Exception++ 
e++ 
)++ 
{,, 
throw-- 
new-- 
ZenjectException-- *
(--* +
$str.. T
...T U
Fmt..U X
(..X Y
typeof..Y _
(.._ `
TValue..` f
)..f g
,..g h
GetType..i p
(..p q
)..q r
)..r s
,..s t
e..u v
)..v w
;..w x
}// 
}00 	
public22 
virtual22 
void22 
Validate22 $
(22$ %
)22% &
{33 	
	_provider44 
.44 
GetInstance44 !
(44! "
_injectContext55 
,55 
ValidationUtil55  .
.55. /
CreateDefaultArgs55/ @
(55@ A

ParamTypes55A K
.55K L
ToArray55L S
(55S T
)55T U
)55U V
)55V W
;55W X
}66 	
	protected88 
abstract88 
IEnumerable88 &
<88& '
Type88' +
>88+ ,

ParamTypes88- 7
{99 	
get:: 
;:: 
};; 	
}<< 
}== ÑH
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\PrefabFactory.cs
	namespace 	
Zenject
 
{ 
public 

class 
PrefabFactory 
< 
T  
>  !
:" #
IFactory$ ,
<, -
UnityEngine- 8
.8 9
Object9 ?
,? @
TA B
>B C
{ 
[ 	
Inject	 
] 
readonly 
DiContainer 

_container '
=( )
null* .
;. /
public 
DiContainer 
	Container $
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
public 
virtual 
T 
Create 
(  
UnityEngine  +
.+ ,
Object, 2
prefab3 9
)9 :
{ 	
Assert 
. 
That 
( 
prefab 
!= !
null" &
,& '
$str f
,f g
typeofh n
(n o
To p
)p q
)q r
;r s
return 

_container 
. )
InstantiatePrefabForComponent ;
<; <
T< =
>= >
(> ?
prefab? E
)E F
;F G
} 	
}"" 
public%% 

class%% 
PrefabFactory%% 
<%% 
P1%% !
,%%! "
T%%# $
>%%$ %
:%%& '
IFactory%%( 0
<%%0 1
UnityEngine%%1 <
.%%< =
Object%%= C
,%%C D
P1%%E G
,%%G H
T%%I J
>%%J K
{'' 
[(( 	
Inject((	 
](( 
readonly)) 
DiContainer)) 

_container)) '
=))( )
null))* .
;)). /
public++ 
DiContainer++ 
	Container++ $
{,, 	
get-- 
{-- 
return-- 

_container-- #
;--# $
}--% &
}.. 	
public00 
virtual00 
T00 
Create00 
(00  
UnityEngine00  +
.00+ ,
Object00, 2
prefab003 9
,009 :
P100; =
param00> C
)00C D
{11 	
Assert22 
.22 
That22 
(22 
prefab22 
!=22 !
null22" &
,22& '
$str33 f
,33f g
typeof33h n
(33n o
T33o p
)33p q
)33q r
;33r s
return55 
(55 
T55 
)55 

_container55  
.55  !1
%InstantiatePrefabForComponentExplicit55! F
(55F G
typeof66 
(66 
T66 
)66 
,66 
prefab66 !
,66! "

InjectUtil66# -
.66- .!
CreateArgListExplicit66. C
(66C D
param66D I
)66I J
)66J K
;66K L
}77 	
}88 
public;; 

class;; 
PrefabFactory;; 
<;; 
P1;; !
,;;! "
P2;;# %
,;;% &
T;;' (
>;;( )
:;;* +
IFactory;;, 4
<;;4 5
UnityEngine;;5 @
.;;@ A
Object;;A G
,;;G H
P1;;I K
,;;K L
P2;;M O
,;;O P
T;;Q R
>;;R S
{== 
[>> 	
Inject>>	 
]>> 
readonly?? 
DiContainer?? 

_container?? '
=??( )
null??* .
;??. /
publicAA 
DiContainerAA 
	ContainerAA $
{BB 	
getCC 
{CC 
returnCC 

_containerCC #
;CC# $
}CC% &
}DD 	
publicFF 
virtualFF 
TFF 
CreateFF 
(FF  
UnityEngineFF  +
.FF+ ,
ObjectFF, 2
prefabFF3 9
,FF9 :
P1FF; =
paramFF> C
,FFC D
P2FFE G
param2FFH N
)FFN O
{GG 	
AssertHH 
.HH 
ThatHH 
(HH 
prefabHH 
!=HH !
nullHH" &
,HH& '
$strII f
,IIf g
typeofIIh n
(IIn o
TIIo p
)IIp q
)IIq r
;IIr s
returnKK 
(KK 
TKK 
)KK 

_containerKK  
.KK  !1
%InstantiatePrefabForComponentExplicitKK! F
(KKF G
typeofLL 
(LL 
TLL 
)LL 
,LL 
prefabLL !
,LL! "

InjectUtilLL# -
.LL- .!
CreateArgListExplicitLL. C
(LLC D
paramLLD I
,LLI J
param2LLK Q
)LLQ R
)LLR S
;LLS T
}MM 	
}NN 
publicQQ 

classQQ 
PrefabFactoryQQ 
<QQ 
P1QQ !
,QQ! "
P2QQ# %
,QQ% &
P3QQ' )
,QQ) *
TQQ+ ,
>QQ, -
:QQ. /
IFactoryQQ0 8
<QQ8 9
UnityEngineQQ9 D
.QQD E
ObjectQQE K
,QQK L
P1QQM O
,QQO P
P2QQQ S
,QQS T
P3QQU W
,QQW X
TQQY Z
>QQZ [
{SS 
[TT 	
InjectTT	 
]TT 
readonlyUU 
DiContainerUU 

_containerUU '
=UU( )
nullUU* .
;UU. /
publicWW 
DiContainerWW 
	ContainerWW $
{XX 	
getYY 
{YY 
returnYY 

_containerYY #
;YY# $
}YY% &
}ZZ 	
public\\ 
virtual\\ 
T\\ 
Create\\ 
(\\  
UnityEngine\\  +
.\\+ ,
Object\\, 2
prefab\\3 9
,\\9 :
P1\\; =
param\\> C
,\\C D
P2\\E G
param2\\H N
,\\N O
P3\\P R
param3\\S Y
)\\Y Z
{]] 	
Assert^^ 
.^^ 
That^^ 
(^^ 
prefab^^ 
!=^^ !
null^^" &
,^^& '
$str__ f
,__f g
typeof__h n
(__n o
T__o p
)__p q
)__q r
;__r s
returnaa 
(aa 
Taa 
)aa 

_containeraa  
.aa  !1
%InstantiatePrefabForComponentExplicitaa! F
(aaF G
typeofbb 
(bb 
Tbb 
)bb 
,bb 
prefabbb !
,bb! "

InjectUtilbb# -
.bb- .!
CreateArgListExplicitbb. C
(bbC D
parambbD I
,bbI J
param2bbK Q
,bbQ R
param3bbS Y
)bbY Z
)bbZ [
;bb[ \
}cc 	
}dd 
publicgg 

classgg 
PrefabFactorygg 
<gg 
P1gg !
,gg! "
P2gg# %
,gg% &
P3gg' )
,gg) *
P4gg+ -
,gg- .
Tgg/ 0
>gg0 1
:gg2 3
IFactorygg4 <
<gg< =
UnityEnginegg= H
.ggH I
ObjectggI O
,ggO P
P1ggQ S
,ggS T
P2ggU W
,ggW X
P3ggY [
,gg[ \
P4gg] _
,gg_ `
Tgga b
>ggb c
{ii 
[jj 	
Injectjj	 
]jj 
readonlykk 
DiContainerkk 

_containerkk '
=kk( )
nullkk* .
;kk. /
publicmm 
DiContainermm 
	Containermm $
{nn 	
getoo 
{oo 
returnoo 

_containeroo #
;oo# $
}oo% &
}pp 	
publicrr 
virtualrr 
Trr 
Createrr 
(rr  
UnityEnginerr  +
.rr+ ,
Objectrr, 2
prefabrr3 9
,rr9 :
P1rr; =
paramrr> C
,rrC D
P2rrE G
param2rrH N
,rrN O
P3rrP R
param3rrS Y
,rrY Z
P4rr[ ]
param4rr^ d
)rrd e
{ss 	
Asserttt 
.tt 
Thattt 
(tt 
prefabtt 
!=tt !
nulltt" &
,tt& '
$struu f
,uuf g
typeofuuh n
(uun o
Tuuo p
)uup q
)uuq r
;uur s
returnww 
(ww 
Tww 
)ww 

_containerww  
.ww  !1
%InstantiatePrefabForComponentExplicitww! F
(wwF G
typeofxx 
(xx 
Txx 
)xx 
,xx 
prefabxx !
,xx! "

InjectUtilxx# -
.xx- .!
CreateArgListExplicitxx. C
(xxC D
paramxxD I
,xxI J
param2xxK Q
,xxQ R
param3xxS Y
,xxY Z
param4xx[ a
)xxa b
)xxb c
;xxc d
}yy 	
}zz 
}{{ Ë
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabCreators\PrefabInstantiatorCached.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class $
PrefabInstantiatorCached )
:* +
IPrefabInstantiator, ?
{ 
readonly 
IPrefabInstantiator $
_subInstantiator% 5
;5 6

GameObject 
_gameObject 
; 
public $
PrefabInstantiatorCached '
(' (
IPrefabInstantiator( ;
subInstantiator< K
)K L
{ 	
_subInstantiator 
= 
subInstantiator .
;. /
} 	
public 
List 
< 
TypeValuePair !
>! "
ExtraArguments# 1
{ 	
get 
{ 
return 
_subInstantiator )
.) *
ExtraArguments* 8
;8 9
}: ;
} 	
public 
Type 
ArgumentTarget "
{ 	
get 
{ 
return 
_subInstantiator )
.) *
ArgumentTarget* 8
;8 9
}: ;
} 	
public   (
GameObjectCreationParameters   +(
GameObjectCreationParameters  , H
{!! 	
get"" 
{"" 
return"" 
_subInstantiator"" )
."") *(
GameObjectCreationParameters""* F
;""F G
}""H I
}## 	
public%% 
UnityEngine%% 
.%% 
Object%% !
	GetPrefab%%" +
(%%+ ,
)%%, -
{&& 	
return'' 
_subInstantiator'' #
.''# $
	GetPrefab''$ -
(''- .
)''. /
;''/ 0
}(( 	
public** 

GameObject** 
Instantiate** %
(**% &
InjectContext**& 3
context**4 ;
,**; <
List**= A
<**A B
TypeValuePair**B O
>**O P
args**Q U
,**U V
out**W Z
Action**[ a
injectAction**b n
)**n o
{++ 	
Assert.. 
... 
IsEmpty.. 
(.. 
args.. 
)..  
;..  !
if00 
(00 
_gameObject00 
!=00 
null00 #
)00# $
{11 
injectAction22 
=22 
null22 #
;22# $
return33 
_gameObject33 "
;33" #
}44 
_gameObject66 
=66 
_subInstantiator66 *
.66* +
Instantiate66+ 6
(666 7
context667 >
,66> ?
new66@ C
List66D H
<66H I
TypeValuePair66I V
>66V W
(66W X
)66X Y
,66Y Z
out66[ ^
injectAction66_ k
)66k l
;66l m
return77 
_gameObject77 
;77 
}88 	
}99 
}:: ◊@
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\ZenjectSettings.cs
	namespace 	
Zenject
 
{ 
public 

enum $
ValidationErrorResponses (
{		 
Log

 
,

 
Throw 
} 
public 

enum 
RootResolveMethods "
{ 
NonLazyOnly 
, 
All 
} 
public 

enum "
SignalDefaultSyncModes &
{ 
Synchronous 
, 
Asynchronous 
} 
public 

enum )
SignalMissingHandlerResponses -
{ 
Ignore 
, 
Throw 
, 
Warn 
} 
[!! 
Serializable!! 
]!! 
["" (
ZenjectAllowDuringValidation"" !
]""! "
[## 
NoReflectionBaking## 
]## 
public$$ 

class$$ 
ZenjectSettings$$  
{%% 
public&& 
static&& 
ZenjectSettings&& %
Default&&& -
=&&. /
new&&0 3
ZenjectSettings&&4 C
(&&C D
)&&D E
;&&E F
[)) 	
SerializeField))	 
])) 
bool++ A
5_ensureDeterministicDestructionOrderOnApplicationQuit++ B
;++B C
[.. 	
SerializeField..	 
].. 
bool00 5
)_displayWarningWhenResolvingDuringInstall00 6
;006 7
[33 	
SerializeField33	 
]33 
RootResolveMethods55 (
_validationRootResolveMethod55 7
;557 8
[88 	
SerializeField88	 
]88 $
ValidationErrorResponses::  $
_validationErrorResponse::! 9
;::9 :
[== 	
SerializeField==	 
]== 
SignalSettings?? 
_signalSettings?? &
;??& '
publicAA 
ZenjectSettingsAA 
(AA $
ValidationErrorResponsesBB $#
validationErrorResponseBB% <
,BB< =
RootResolveMethodsCC '
validationRootResolveMethodCC :
=CC; <
RootResolveMethodsCC= O
.CCO P
NonLazyOnlyCCP [
,CC[ \
boolDD 4
(displayWarningWhenResolvingDuringInstallDD 9
=DD: ;
trueDD< @
,DD@ A
boolEE @
4ensureDeterministicDestructionOrderOnApplicationQuitEE E
=EEF G
falseEEH M
,EEM N
SignalSettingsFF 
signalSettingsFF )
=FF* +
nullFF, 0
)FF0 1
{GG 	$
_validationErrorResponseHH $
=HH% &#
validationErrorResponseHH' >
;HH> ?(
_validationRootResolveMethodII (
=II) *'
validationRootResolveMethodII+ F
;IIF G5
)_displayWarningWhenResolvingDuringInstallJJ 5
=JJ6 74
(displayWarningWhenResolvingDuringInstallJJ8 `
;JJ` aA
5_ensureDeterministicDestructionOrderOnApplicationQuitKK A
=KKB C@
4ensureDeterministicDestructionOrderOnApplicationQuitKKC w
;KKw x
_signalSettingsLL 
=LL 
signalSettingsLL ,
??LL- /
SignalSettingsLL0 >
.LL> ?
DefaultLL? F
;LLF G
}MM 	
publicQQ 
ZenjectSettingsQQ 
(QQ 
)QQ  
:RR 
thisRR 
(RR $
ValidationErrorResponsesRR +
.RR+ ,
LogRR, /
)RR/ 0
{SS 	
}TT 	
publicVV 
SignalSettingsVV 
SignalsVV %
{WW 	
getXX 
{XX 
returnXX 
_signalSettingsXX (
;XX( )
}XX* +
}YY 	
public^^ $
ValidationErrorResponses^^ '#
ValidationErrorResponse^^( ?
{__ 	
get`` 
{`` 
return`` $
_validationErrorResponse`` 1
;``1 2
}``3 4
}aa 	
publicff 
RootResolveMethodsff !'
ValidationRootResolveMethodff" =
{gg 	
gethh 
{hh 
returnhh (
_validationRootResolveMethodhh 5
;hh5 6
}hh7 8
}ii 	
publickk 
boolkk 4
(DisplayWarningWhenResolvingDuringInstallkk <
{ll 	
getmm 
{mm 
returnmm 5
)_displayWarningWhenResolvingDuringInstallmm B
;mmB C
}mmD E
}nn 	
publicvv 
boolvv @
4EnsureDeterministicDestructionOrderOnApplicationQuitvv H
{ww 	
getxx 
{xx 
returnxx A
5_ensureDeterministicDestructionOrderOnApplicationQuitxx N
;xxN O
}xxP Q
}yy 	
[{{ 	
Serializable{{	 
]{{ 
public|| 
class|| 
SignalSettings|| #
{}} 	
public~~ 
static~~ 
SignalSettings~~ (
Default~~) 0
=~~1 2
new~~3 6
SignalSettings~~7 E
(~~E F
)~~F G
;~~G H
[
ÅÅ 
SerializeField
ÅÅ 
]
ÅÅ $
SignalDefaultSyncModes
ÉÉ "
_defaultSyncMode
ÉÉ# 3
;
ÉÉ3 4
[
ÜÜ 
SerializeField
ÜÜ 
]
ÜÜ +
SignalMissingHandlerResponses
àà ),
_missingHandlerDefaultResponse
àà* H
;
ààH I
[
ãã 
SerializeField
ãã 
]
ãã 
bool
çç '
_requireStrictUnsubscribe
çç *
;
çç* +
[
êê 
SerializeField
êê 
]
êê 
int
íí '
_defaultAsyncTickPriority
íí )
;
íí) *
public
îî 
SignalSettings
îî !
(
îî! "$
SignalDefaultSyncModes
ïï &
defaultSyncMode
ïï' 6
,
ïï6 7+
SignalMissingHandlerResponses
ññ -+
missingHandlerDefaultResponse
ññ. K
=
ññL M+
SignalMissingHandlerResponses
ññN k
.
ññk l
Warn
ññl p
,
ññp q
bool
óó &
requireStrictUnsubscribe
óó -
=
óó. /
false
óó0 5
,
óó5 6
int
öö &
defaultAsyncTickPriority
öö ,
=
öö- .
$num
öö/ 0
)
öö0 1
{
õõ 
_defaultSyncMode
úú  
=
úú! "
defaultSyncMode
úú# 2
;
úú2 3,
_missingHandlerDefaultResponse
ùù .
=
ùù/ 0+
missingHandlerDefaultResponse
ùù1 N
;
ùùN O'
_requireStrictUnsubscribe
ûû )
=
ûû* +&
requireStrictUnsubscribe
ûû, D
;
ûûD E'
_defaultAsyncTickPriority
üü )
=
üü* +&
defaultAsyncTickPriority
üü, D
;
üüD E
}
†† 
public
§§ 
SignalSettings
§§ !
(
§§! "
)
§§" #
:
•• 
this
•• 
(
•• $
SignalDefaultSyncModes
•• -
.
••- .
Synchronous
••. 9
)
••9 :
{
¶¶ 
}
ßß 
public
©© 
int
©© &
DefaultAsyncTickPriority
©© /
{
™™ 
get
´´ 
{
´´ 
return
´´ '
_defaultAsyncTickPriority
´´ 6
;
´´6 7
}
´´8 9
}
¨¨ 
public
ÆÆ $
SignalDefaultSyncModes
ÆÆ )
DefaultSyncMode
ÆÆ* 9
{
ØØ 
get
∞∞ 
{
∞∞ 
return
∞∞ 
_defaultSyncMode
∞∞ -
;
∞∞- .
}
∞∞/ 0
}
±± 
public
≥≥ +
SignalMissingHandlerResponses
≥≥ 0+
MissingHandlerDefaultResponse
≥≥1 N
{
¥¥ 
get
µµ 
{
µµ 
return
µµ ,
_missingHandlerDefaultResponse
µµ ;
;
µµ; <
}
µµ= >
}
∂∂ 
public
∏∏ 
bool
∏∏ &
RequireStrictUnsubscribe
∏∏ 0
{
ππ 
get
∫∫ 
{
∫∫ 
return
∫∫ '
_requireStrictUnsubscribe
∫∫ 6
;
∫∫6 7
}
∫∫8 9
}
ªª 
}
ºº 	
}
ΩΩ 
}ææ ∂1
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\SceneContextRegistry.cs
	namespace 	
Zenject
 
{ 
public 

class  
SceneContextRegistry %
{ 
readonly		 

Dictionary		 
<		 
Scene		 !
,		! "
SceneContext		# /
>		/ 0
_map		1 5
=		6 7
new		8 ;

Dictionary		< F
<		F G
Scene		G L
,		L M
SceneContext		N Z
>		Z [
(		[ \
)		\ ]
;		] ^
public 
IEnumerable 
< 
SceneContext '
>' (
SceneContexts) 6
{ 	
get 
{ 
return 
_map 
. 
Values $
;$ %
}& '
} 	
public 
void 
Add 
( 
SceneContext $
context% ,
), -
{ 	
Assert 
. 
That 
( 
! 
_map 
. 
ContainsKey )
() *
context* 1
.1 2

gameObject2 <
.< =
scene= B
)B C
)C D
;D E
_map 
. 
Add 
( 
context 
. 

gameObject '
.' (
scene( -
,- .
context/ 6
)6 7
;7 8
} 	
public 
SceneContext #
GetSceneContextForScene 3
(3 4
string4 :
name; ?
)? @
{ 	
var 
scene 
= 
SceneManager $
.$ %
GetSceneByName% 3
(3 4
name4 8
)8 9
;9 :
Assert 
. 
That 
( 
scene 
. 
IsValid %
(% &
)& '
,' (
$str) O
,O P
nameQ U
)U V
;V W
return #
GetSceneContextForScene *
(* +
scene+ 0
)0 1
;1 2
} 	
public 
SceneContext #
GetSceneContextForScene 3
(3 4
Scene4 9
scene: ?
)? @
{ 	
return 
_map 
[ 
scene 
] 
; 
}   	
public"" 
SceneContext"" &
TryGetSceneContextForScene"" 6
(""6 7
string""7 =
name""> B
)""B C
{## 	
var$$ 
scene$$ 
=$$ 
SceneManager$$ $
.$$$ %
GetSceneByName$$% 3
($$3 4
name$$4 8
)$$8 9
;$$9 :
Assert%% 
.%% 
That%% 
(%% 
scene%% 
.%% 
IsValid%% %
(%%% &
)%%& '
,%%' (
$str%%) O
,%%O P
name%%Q U
)%%U V
;%%V W
return&& &
TryGetSceneContextForScene&& -
(&&- .
scene&&. 3
)&&3 4
;&&4 5
}'' 	
public)) 
SceneContext)) &
TryGetSceneContextForScene)) 6
())6 7
Scene))7 <
scene))= B
)))B C
{** 	
SceneContext++ 
context++  
;++  !
if-- 
(-- 
_map-- 
.-- 
TryGetValue--  
(--  !
scene--! &
,--& '
out--( +
context--, 3
)--3 4
)--4 5
{.. 
return// 
context// 
;// 
}00 
return22 
null22 
;22 
}33 	
public55 
DiContainer55  
GetContainerForScene55 /
(55/ 0
Scene550 5
scene556 ;
)55; <
{66 	
var77 
	container77 
=77 #
TryGetContainerForScene77 3
(773 4
scene774 9
)779 :
;77: ;
if99 
(99 
	container99 
!=99 
null99 !
)99! "
{:: 
return;; 
	container;;  
;;;  !
}<< 
throw>> 
Assert>> 
.>> 
CreateException>> (
(>>( )
$str?? <
,??< =
scene??> C
.??C D
name??D H
)??H I
;??I J
}@@ 	
publicBB 
DiContainerBB #
TryGetContainerForSceneBB 2
(BB2 3
SceneBB3 8
sceneBB9 >
)BB> ?
{CC 	
ifDD 
(DD 
sceneDD 
==DD 
ProjectContextDD '
.DD' (
InstanceDD( 0
.DD0 1

gameObjectDD1 ;
.DD; <
sceneDD< A
)DDA B
{EE 
returnFF 
ProjectContextFF %
.FF% &
InstanceFF& .
.FF. /
	ContainerFF/ 8
;FF8 9
}GG 
varII 
sceneContextII 
=II &
TryGetSceneContextForSceneII 9
(II9 :
sceneII: ?
)II? @
;II@ A
ifKK 
(KK 
sceneContextKK 
!=KK 
nullKK  $
)KK$ %
{LL 
returnMM 
sceneContextMM #
.MM# $
	ContainerMM$ -
;MM- .
}NN 
returnPP 
nullPP 
;PP 
}QQ 	
publicSS 
voidSS 
RemoveSS 
(SS 
SceneContextSS '
contextSS( /
)SS/ 0
{TT 	
boolUU 
removedUU 
=UU 
_mapUU 
.UU  
RemoveUU  &
(UU& '
contextUU' .
.UU. /

gameObjectUU/ 9
.UU9 :
sceneUU: ?
)UU? @
;UU@ A
ifWW 
(WW 
!WW 
removedWW 
)WW 
{XX 
LogYY 
.YY 
WarnYY 
(YY 
$strYY R
)YYR S
;YYS T
}ZZ 
}[[ 	
}\\ 
}^^ Ñ
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\SignalSubscriptionId.cs
	namespace 	
Zenject
 
{ 
[ 
DebuggerStepThrough 
] 
public 

struct  
SignalSubscriptionId &
:' (

IEquatable) 3
<3 4 
SignalSubscriptionId4 H
>H I
{ 
	BindingId		 
	_signalId		 
;		 
object

 
	_callback

 
;

 
public  
SignalSubscriptionId #
(# $
	BindingId$ -
signalId. 6
,6 7
object8 >
callback? G
)G H
{ 	
	_signalId 
= 
signalId  
;  !
	_callback 
= 
callback  
;  !
} 	
public 
	BindingId 
SignalId !
{ 	
get 
{ 
return 
	_signalId "
;" #
}$ %
} 	
public 
object 
Callback 
{ 	
get 
{ 
return 
	_callback "
;" #
}$ %
} 	
public 
override 
int 
GetHashCode '
(' (
)( )
{ 	
	unchecked 
{ 
int   
hash   
=   
$num   
;   
hash!! 
=!! 
hash!! 
*!! 
$num!!  
+!!! "
	_signalId!!# ,
.!!, -
GetHashCode!!- 8
(!!8 9
)!!9 :
;!!: ;
hash"" 
="" 
hash"" 
*"" 
$num""  
+""! "
	_callback""# ,
."", -
GetHashCode""- 8
(""8 9
)""9 :
;"": ;
return## 
hash## 
;## 
}$$ 
}%% 	
public'' 
override'' 
bool'' 
Equals'' #
(''# $
object''$ *
that''+ /
)''/ 0
{(( 	
if)) 
()) 
that)) 
is))  
SignalSubscriptionId)) ,
))), -
{** 
return++ 
Equals++ 
(++ 
(++  
SignalSubscriptionId++ 3
)++3 4
that++4 8
)++8 9
;++9 :
},, 
return.. 
false.. 
;.. 
}// 	
public11 
bool11 
Equals11 
(11  
SignalSubscriptionId11 /
that110 4
)114 5
{22 	
return33 
Equals33 
(33 
	_signalId33 #
,33# $
that33% )
.33) *
	_signalId33* 3
)333 4
&&44 
Equals44 
(44 
Callback44 "
,44" #
that44$ (
.44( )
Callback44) 1
)441 2
;442 3
}55 	
public77 
static77 
bool77 
operator77 #
==77$ &
(77' ( 
SignalSubscriptionId77( <
left77= A
,77A B 
SignalSubscriptionId77C W
right77X ]
)77] ^
{88 	
return99 
left99 
.99 
Equals99 
(99 
right99 $
)99$ %
;99% &
}:: 	
public<< 
static<< 
bool<< 
operator<< #
!=<<$ &
(<<' ( 
SignalSubscriptionId<<( <
left<<= A
,<<A B 
SignalSubscriptionId<<C W
right<<X ]
)<<] ^
{== 	
return>> 
!>> 
left>> 
.>> 
Equals>> 
(>>  
right>>  %
)>>% &
;>>& '
}?? 	
}@@ 
}AA ßK
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder5.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
TParam3B I
,I J
TParam4K R
,R S
TParam5T [
,[ \
	TContract] f
>f g
:h i!
FactoryToChoiceBinderj 
<	 Ä
TParam1
Ä á
,
á à
TParam2
â ê
,
ê ë
TParam3
í ô
,
ô ö
TParam4
õ ¢
,
¢ £
TParam5
§ ´
,
´ ¨
	TContract
≠ ∂
>
∂ ∑
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
	TContractR [
>[ \ 
WithFactoryArguments] q
<q r
Tr s
>s t
(t u
Tu v
paramw |
)| }
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
	TContractR [
>[ \ 
WithFactoryArguments] q
<q r
TFactoryParam1	r Ä
,
Ä Å
TFactoryParam2
Ç ê
>
ê ë
(
ë í
TFactoryParam1
í †
param1
° ß
,
ß ®
TFactoryParam2
© ∑
param2
∏ æ
)
æ ø
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
	TContractR [
>[ \ 
WithFactoryArguments] q
<q r
TFactoryParam1	r Ä
,
Ä Å
TFactoryParam2
Ç ê
,
ê ë
TFactoryParam3
í †
>
† °
(
° ¢
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
TParam3%%7 >
,%%> ?
TParam4%%@ G
,%%G H
TParam5%%I P
,%%P Q
	TContract%%R [
>%%[ \ 
WithFactoryArguments%%] q
<%%q r
TFactoryParam1	%%r Ä
,
%%Ä Å
TFactoryParam2
%%Ç ê
,
%%ê ë
TFactoryParam3
%%í †
,
%%† °
TFactoryParam4
%%¢ ∞
>
%%∞ ±
(
%%± ≤
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
TParam3,,7 >
,,,> ?
TParam4,,@ G
,,,G H
TParam5,,I P
,,,P Q
	TContract,,R [
>,,[ \ 
WithFactoryArguments,,] q
<,,q r
TFactoryParam1	,,r Ä
,
,,Ä Å
TFactoryParam2
,,Ç ê
,
,,ê ë
TFactoryParam3
,,í †
,
,,† °
TFactoryParam4
,,¢ ∞
,
,,∞ ±
TFactoryParam5
,,≤ ¿
>
,,¿ ¡
(
,,¡ ¬
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
TParam3337 >
,33> ?
TParam433@ G
,33G H
TParam533I P
,33P Q
	TContract33R [
>33[ \ 
WithFactoryArguments33] q
<33q r
TFactoryParam1	33r Ä
,
33Ä Å
TFactoryParam2
33Ç ê
,
33ê ë
TFactoryParam3
33í †
,
33† °
TFactoryParam4
33¢ ∞
,
33∞ ±
TFactoryParam5
33≤ ¿
,
33¿ ¡
TFactoryParam6
33¬ –
>
33– —
(
33— “
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
TParam3::7 >
,::> ?
TParam4::@ G
,::G H
TParam5::I P
,::P Q
	TContract::R [
>::[ \ 
WithFactoryArguments::] q
(::q r
object::r x
[::x y
]::y z
args::{ 
)	:: Ä
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
TParam3@@7 >
,@@> ?
TParam4@@@ G
,@@G H
TParam5@@I P
,@@P Q
	TContract@@R [
>@@[ \(
WithFactoryArgumentsExplicit@@] y
(@@y z
IEnumerable	@@z Ö
<
@@Ö Ü
TypeValuePair
@@Ü ì
>
@@ì î
	extraArgs
@@ï û
)
@@û ü
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ìÖ
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\MonoMemoryPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
MonoMemoryPool 
<  
TValue  &
>& '
:( )

MemoryPool* 4
<4 5
TValue5 ;
>; <
where		 
TValue		 
:		 
	Component		  
{

 
	Transform 
_originalParent !
;! "
[ 	
Inject	 
] 
public 
MonoMemoryPool 
( 
) 
{ 	
} 	
	protected 
override 
void 
	OnCreated  )
() *
TValue* 0
item1 5
)5 6
{ 	
item 
. 

gameObject 
. 
	SetActive %
(% &
false& +
)+ ,
;, -
_originalParent 
= 
item "
." #
	transform# ,
., -
parent- 3
;3 4
} 	
	protected 
override 
void 
OnDestroyed  +
(+ ,
TValue, 2
item3 7
)7 8
{ 	

GameObject 
. 
Destroy 
( 
item #
.# $

gameObject$ .
). /
;/ 0
} 	
	protected 
override 
void 
	OnSpawned  )
() *
TValue* 0
item1 5
)5 6
{ 	
item   
.   

gameObject   
.   
	SetActive   %
(  % &
true  & *
)  * +
;  + ,
}!! 	
	protected## 
override## 
void## 
OnDespawned##  +
(##+ ,
TValue##, 2
item##3 7
)##7 8
{$$ 	
item%% 
.%% 

gameObject%% 
.%% 
	SetActive%% %
(%%% &
false%%& +
)%%+ ,
;%%, -
if'' 
('' 
item'' 
.'' 
	transform'' 
.'' 
parent'' %
!=''& (
_originalParent'') 8
)''8 9
{(( 
item)) 
.)) 
	transform)) 
.)) 
	SetParent)) (
())( )
_originalParent))) 8
,))8 9
false)): ?
)))? @
;))@ A
}** 
}++ 	
},, 
public11 

class11 
MonoMemoryPool11 
<11  
TParam111  '
,11' (
TValue11) /
>11/ 0
:111 2

MemoryPool113 =
<11= >
TParam111> E
,11E F
TValue11G M
>11M N
where22 
TValue22 
:22 
	Component22  
{33 
	Transform44 
_originalParent44 !
;44! "
[66 	
Inject66	 
]66 
public77 
MonoMemoryPool77 
(77 
)77 
{88 	
}99 	
	protected;; 
override;; 
void;; 
	OnCreated;;  )
(;;) *
TValue;;* 0
item;;1 5
);;5 6
{<< 	
item== 
.== 

gameObject== 
.== 
	SetActive== %
(==% &
false==& +
)==+ ,
;==, -
_originalParent?? 
=?? 
item?? "
.??" #
	transform??# ,
.??, -
parent??- 3
;??3 4
}@@ 	
	protectedBB 
overrideBB 
voidBB 
OnDestroyedBB  +
(BB+ ,
TValueBB, 2
itemBB3 7
)BB7 8
{CC 	

GameObjectDD 
.DD 
DestroyDD 
(DD 
itemDD #
.DD# $

gameObjectDD$ .
)DD. /
;DD/ 0
}EE 	
	protectedGG 
overrideGG 
voidGG 
	OnSpawnedGG  )
(GG) *
TValueGG* 0
itemGG1 5
)GG5 6
{HH 	
itemII 
.II 

gameObjectII 
.II 
	SetActiveII %
(II% &
trueII& *
)II* +
;II+ ,
}JJ 	
	protectedLL 
overrideLL 
voidLL 
OnDespawnedLL  +
(LL+ ,
TValueLL, 2
itemLL3 7
)LL7 8
{MM 	
itemNN 
.NN 

gameObjectNN 
.NN 
	SetActiveNN %
(NN% &
falseNN& +
)NN+ ,
;NN, -
ifPP 
(PP 
itemPP 
.PP 
	transformPP 
.PP 
parentPP %
!=PP& (
_originalParentPP) 8
)PP8 9
{QQ 
itemRR 
.RR 
	transformRR 
.RR 
	SetParentRR (
(RR( )
_originalParentRR) 8
,RR8 9
falseRR: ?
)RR? @
;RR@ A
}SS 
}TT 	
}UU 
publicZZ 

classZZ 
MonoMemoryPoolZZ 
<ZZ  
TParam1ZZ  '
,ZZ' (
TParam2ZZ) 0
,ZZ0 1
TValueZZ2 8
>ZZ8 9
:[[ 	

MemoryPool[[
 
<[[ 
TParam1[[ 
,[[ 
TParam2[[ %
,[[% &
TValue[[' -
>[[- .
where\\ 
TValue\\ 
:\\ 
	Component\\  
{]] 
	Transform^^ 
_originalParent^^ !
;^^! "
[`` 	
Inject``	 
]`` 
publicaa 
MonoMemoryPoolaa 
(aa 
)aa 
{bb 	
}cc 	
	protectedee 
overrideee 
voidee 
	OnCreatedee  )
(ee) *
TValueee* 0
itemee1 5
)ee5 6
{ff 	
itemgg 
.gg 

gameObjectgg 
.gg 
	SetActivegg %
(gg% &
falsegg& +
)gg+ ,
;gg, -
_originalParentii 
=ii 
itemii "
.ii" #
	transformii# ,
.ii, -
parentii- 3
;ii3 4
}jj 	
	protectedll 
overridell 
voidll 
OnDestroyedll  +
(ll+ ,
TValuell, 2
itemll3 7
)ll7 8
{mm 	

GameObjectnn 
.nn 
Destroynn 
(nn 
itemnn #
.nn# $

gameObjectnn$ .
)nn. /
;nn/ 0
}oo 	
	protectedqq 
overrideqq 
voidqq 
	OnSpawnedqq  )
(qq) *
TValueqq* 0
itemqq1 5
)qq5 6
{rr 	
itemss 
.ss 

gameObjectss 
.ss 
	SetActivess %
(ss% &
truess& *
)ss* +
;ss+ ,
}tt 	
	protectedvv 
overridevv 
voidvv 
OnDespawnedvv  +
(vv+ ,
TValuevv, 2
itemvv3 7
)vv7 8
{ww 	
itemxx 
.xx 

gameObjectxx 
.xx 
	SetActivexx %
(xx% &
falsexx& +
)xx+ ,
;xx, -
ifzz 
(zz 
itemzz 
.zz 
	transformzz 
.zz 
parentzz %
!=zz& (
_originalParentzz) 8
)zz8 9
{{{ 
item|| 
.|| 
	transform|| 
.|| 
	SetParent|| (
(||( )
_originalParent||) 8
,||8 9
false||: ?
)||? @
;||@ A
}}} 
}~~ 	
} 
public
ÑÑ 

class
ÑÑ 
MonoMemoryPool
ÑÑ 
<
ÑÑ  
TParam1
ÑÑ  '
,
ÑÑ' (
TParam2
ÑÑ) 0
,
ÑÑ0 1
TParam3
ÑÑ2 9
,
ÑÑ9 :
TValue
ÑÑ; A
>
ÑÑA B
:
ÖÖ 	

MemoryPool
ÖÖ
 
<
ÖÖ 
TParam1
ÖÖ 
,
ÖÖ 
TParam2
ÖÖ %
,
ÖÖ% &
TParam3
ÖÖ' .
,
ÖÖ. /
TValue
ÖÖ0 6
>
ÖÖ6 7
where
ÜÜ 
TValue
ÜÜ 
:
ÜÜ 
	Component
ÜÜ  
{
áá 
	Transform
àà 
_originalParent
àà !
;
àà! "
[
ää 	
Inject
ää	 
]
ää 
public
ãã 
MonoMemoryPool
ãã 
(
ãã 
)
ãã 
{
åå 	
}
çç 	
	protected
èè 
override
èè 
void
èè 
	OnCreated
èè  )
(
èè) *
TValue
èè* 0
item
èè1 5
)
èè5 6
{
êê 	
item
ëë 
.
ëë 

gameObject
ëë 
.
ëë 
	SetActive
ëë %
(
ëë% &
false
ëë& +
)
ëë+ ,
;
ëë, -
_originalParent
ìì 
=
ìì 
item
ìì "
.
ìì" #
	transform
ìì# ,
.
ìì, -
parent
ìì- 3
;
ìì3 4
}
îî 	
	protected
ññ 
override
ññ 
void
ññ 
OnDestroyed
ññ  +
(
ññ+ ,
TValue
ññ, 2
item
ññ3 7
)
ññ7 8
{
óó 	

GameObject
òò 
.
òò 
Destroy
òò 
(
òò 
item
òò #
.
òò# $

gameObject
òò$ .
)
òò. /
;
òò/ 0
}
ôô 	
	protected
õõ 
override
õõ 
void
õõ 
	OnSpawned
õõ  )
(
õõ) *
TValue
õõ* 0
item
õõ1 5
)
õõ5 6
{
úú 	
item
ùù 
.
ùù 

gameObject
ùù 
.
ùù 
	SetActive
ùù %
(
ùù% &
true
ùù& *
)
ùù* +
;
ùù+ ,
}
ûû 	
	protected
†† 
override
†† 
void
†† 
OnDespawned
††  +
(
††+ ,
TValue
††, 2
item
††3 7
)
††7 8
{
°° 	
item
¢¢ 
.
¢¢ 

gameObject
¢¢ 
.
¢¢ 
	SetActive
¢¢ %
(
¢¢% &
false
¢¢& +
)
¢¢+ ,
;
¢¢, -
if
§§ 
(
§§ 
item
§§ 
.
§§ 
	transform
§§ 
.
§§ 
parent
§§ %
!=
§§& (
_originalParent
§§) 8
)
§§8 9
{
•• 
item
¶¶ 
.
¶¶ 
	transform
¶¶ 
.
¶¶ 
	SetParent
¶¶ (
(
¶¶( )
_originalParent
¶¶) 8
,
¶¶8 9
false
¶¶: ?
)
¶¶? @
;
¶¶@ A
}
ßß 
}
®® 	
}
©© 
public
ÆÆ 

class
ÆÆ 
MonoMemoryPool
ÆÆ 
<
ÆÆ  
TParam1
ÆÆ  '
,
ÆÆ' (
TParam2
ÆÆ) 0
,
ÆÆ0 1
TParam3
ÆÆ2 9
,
ÆÆ9 :
TParam4
ÆÆ; B
,
ÆÆB C
TValue
ÆÆD J
>
ÆÆJ K
:
ØØ 	

MemoryPool
ØØ
 
<
ØØ 
TParam1
ØØ 
,
ØØ 
TParam2
ØØ %
,
ØØ% &
TParam3
ØØ' .
,
ØØ. /
TParam4
ØØ0 7
,
ØØ7 8
TValue
ØØ9 ?
>
ØØ? @
where
∞∞ 
TValue
∞∞ 
:
∞∞ 
	Component
∞∞  
{
±± 
	Transform
≤≤ 
_originalParent
≤≤ !
;
≤≤! "
[
¥¥ 	
Inject
¥¥	 
]
¥¥ 
public
µµ 
MonoMemoryPool
µµ 
(
µµ 
)
µµ 
{
∂∂ 	
}
∑∑ 	
	protected
ππ 
override
ππ 
void
ππ 
	OnCreated
ππ  )
(
ππ) *
TValue
ππ* 0
item
ππ1 5
)
ππ5 6
{
∫∫ 	
item
ªª 
.
ªª 

gameObject
ªª 
.
ªª 
	SetActive
ªª %
(
ªª% &
false
ªª& +
)
ªª+ ,
;
ªª, -
_originalParent
ΩΩ 
=
ΩΩ 
item
ΩΩ "
.
ΩΩ" #
	transform
ΩΩ# ,
.
ΩΩ, -
parent
ΩΩ- 3
;
ΩΩ3 4
}
ææ 	
	protected
¿¿ 
override
¿¿ 
void
¿¿ 
OnDestroyed
¿¿  +
(
¿¿+ ,
TValue
¿¿, 2
item
¿¿3 7
)
¿¿7 8
{
¡¡ 	

GameObject
¬¬ 
.
¬¬ 
Destroy
¬¬ 
(
¬¬ 
item
¬¬ #
.
¬¬# $

gameObject
¬¬$ .
)
¬¬. /
;
¬¬/ 0
}
√√ 	
	protected
≈≈ 
override
≈≈ 
void
≈≈ 
	OnSpawned
≈≈  )
(
≈≈) *
TValue
≈≈* 0
item
≈≈1 5
)
≈≈5 6
{
∆∆ 	
item
«« 
.
«« 

gameObject
«« 
.
«« 
	SetActive
«« %
(
««% &
true
««& *
)
««* +
;
««+ ,
}
»» 	
	protected
   
override
   
void
   
OnDespawned
    +
(
  + ,
TValue
  , 2
item
  3 7
)
  7 8
{
ÀÀ 	
item
ÃÃ 
.
ÃÃ 

gameObject
ÃÃ 
.
ÃÃ 
	SetActive
ÃÃ %
(
ÃÃ% &
false
ÃÃ& +
)
ÃÃ+ ,
;
ÃÃ, -
if
ŒŒ 
(
ŒŒ 
item
ŒŒ 
.
ŒŒ 
	transform
ŒŒ 
.
ŒŒ 
parent
ŒŒ %
!=
ŒŒ& (
_originalParent
ŒŒ) 8
)
ŒŒ8 9
{
œœ 
item
–– 
.
–– 
	transform
–– 
.
–– 
	SetParent
–– (
(
––( )
_originalParent
––) 8
,
––8 9
false
––: ?
)
––? @
;
––@ A
}
—— 
}
““ 	
}
”” 
public
ÿÿ 

class
ÿÿ 
MonoMemoryPool
ÿÿ 
<
ÿÿ  
TParam1
ÿÿ  '
,
ÿÿ' (
TParam2
ÿÿ) 0
,
ÿÿ0 1
TParam3
ÿÿ2 9
,
ÿÿ9 :
TParam4
ÿÿ; B
,
ÿÿB C
TParam5
ÿÿD K
,
ÿÿK L
TValue
ÿÿM S
>
ÿÿS T
:
ŸŸ 	

MemoryPool
ŸŸ
 
<
ŸŸ 
TParam1
ŸŸ 
,
ŸŸ 
TParam2
ŸŸ %
,
ŸŸ% &
TParam3
ŸŸ' .
,
ŸŸ. /
TParam4
ŸŸ0 7
,
ŸŸ7 8
TParam5
ŸŸ9 @
,
ŸŸ@ A
TValue
ŸŸB H
>
ŸŸH I
where
⁄⁄ 
TValue
⁄⁄ 
:
⁄⁄ 
	Component
⁄⁄  
{
€€ 
	Transform
‹‹ 
_originalParent
‹‹ !
;
‹‹! "
[
ﬁﬁ 	
Inject
ﬁﬁ	 
]
ﬁﬁ 
public
ﬂﬂ 
MonoMemoryPool
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 	
}
·· 	
	protected
„„ 
override
„„ 
void
„„ 
	OnCreated
„„  )
(
„„) *
TValue
„„* 0
item
„„1 5
)
„„5 6
{
‰‰ 	
item
ÂÂ 
.
ÂÂ 

gameObject
ÂÂ 
.
ÂÂ 
	SetActive
ÂÂ %
(
ÂÂ% &
false
ÂÂ& +
)
ÂÂ+ ,
;
ÂÂ, -
_originalParent
ÁÁ 
=
ÁÁ 
item
ÁÁ "
.
ÁÁ" #
	transform
ÁÁ# ,
.
ÁÁ, -
parent
ÁÁ- 3
;
ÁÁ3 4
}
ËË 	
	protected
ÍÍ 
override
ÍÍ 
void
ÍÍ 
OnDestroyed
ÍÍ  +
(
ÍÍ+ ,
TValue
ÍÍ, 2
item
ÍÍ3 7
)
ÍÍ7 8
{
ÎÎ 	

GameObject
ÏÏ 
.
ÏÏ 
Destroy
ÏÏ 
(
ÏÏ 
item
ÏÏ #
.
ÏÏ# $

gameObject
ÏÏ$ .
)
ÏÏ. /
;
ÏÏ/ 0
}
ÌÌ 	
	protected
ÔÔ 
override
ÔÔ 
void
ÔÔ 
	OnSpawned
ÔÔ  )
(
ÔÔ) *
TValue
ÔÔ* 0
item
ÔÔ1 5
)
ÔÔ5 6
{
 	
item
ÒÒ 
.
ÒÒ 

gameObject
ÒÒ 
.
ÒÒ 
	SetActive
ÒÒ %
(
ÒÒ% &
true
ÒÒ& *
)
ÒÒ* +
;
ÒÒ+ ,
}
ÚÚ 	
	protected
ÙÙ 
override
ÙÙ 
void
ÙÙ 
OnDespawned
ÙÙ  +
(
ÙÙ+ ,
TValue
ÙÙ, 2
item
ÙÙ3 7
)
ÙÙ7 8
{
ıı 	
item
ˆˆ 
.
ˆˆ 

gameObject
ˆˆ 
.
ˆˆ 
	SetActive
ˆˆ %
(
ˆˆ% &
false
ˆˆ& +
)
ˆˆ+ ,
;
ˆˆ, -
if
¯¯ 
(
¯¯ 
item
¯¯ 
.
¯¯ 
	transform
¯¯ 
.
¯¯ 
parent
¯¯ %
!=
¯¯& (
_originalParent
¯¯) 8
)
¯¯8 9
{
˘˘ 
item
˙˙ 
.
˙˙ 
	transform
˙˙ 
.
˙˙ 
	SetParent
˙˙ (
(
˙˙( )
_originalParent
˙˙) 8
,
˙˙8 9
false
˙˙: ?
)
˙˙? @
;
˙˙@ A
}
˚˚ 
}
¸¸ 	
}
˝˝ 
}˛˛ ÿ
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Validation\IValidatable.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IValidatable !
{ 
void 
Validate 
( 
) 
; 
} 
} ˚ù
aC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenReflectionTypeAnalyzer.cs
	namespace

 	
Zenject


 
.

 
Internal

 
{ 
public 

static 
class "
ReflectionTypeAnalyzer .
{ 
static 
readonly 
HashSet 
<  
Type  $
>$ %!
_injectAttributeTypes& ;
;; <
static "
ReflectionTypeAnalyzer %
(% &
)& '
{ 	!
_injectAttributeTypes !
=" #
new$ '
HashSet( /
</ 0
Type0 4
>4 5
(5 6
)6 7
;7 8!
_injectAttributeTypes !
.! "
Add" %
(% &
typeof& ,
(, -
InjectAttributeBase- @
)@ A
)A B
;B C
} 	
public 
static 
void $
AddCustomInjectAttribute 3
<3 4
T4 5
>5 6
(6 7
)7 8
where 
T 
: 
	Attribute 
{ 	$
AddCustomInjectAttribute $
($ %
typeof% +
(+ ,
T, -
)- .
). /
;/ 0
} 	
public 
static 
void $
AddCustomInjectAttribute 3
(3 4
Type4 8
type9 =
)= >
{ 	
Assert 
. 
That 
( 
type 
. 
DerivesFrom (
<( )
	Attribute) 2
>2 3
(3 4
)4 5
)5 6
;6 7!
_injectAttributeTypes !
.! "
Add" %
(% &
type& *
)* +
;+ ,
}   	
public"" 
static"" 
ReflectionTypeInfo"" (
GetReflectionInfo"") :
("": ;
Type""; ?
type""@ D
)""D E
{## 	
Assert$$ 
.$$ 
That$$ 
($$ 
!$$ 
type$$ 
.$$ 
IsEnum$$ $
($$$ %
)$$% &
,$$& '
$str$$( b
,$$b c
type$$d h
)$$h i
;$$i j
Assert%% 
.%% 
That%% 
(%% 
!%% 
type%% 
.%% 
IsArray%% %
,%%% &
$str%%' b
,%%b c
type%%d h
)%%h i
;%%i j
var'' 
baseType'' 
='' 
type'' 
.''  
BaseType''  (
(''( )
)'') *
;''* +
if)) 
()) 
baseType)) 
==)) 
typeof)) "
())" #
object))# )
)))) *
)))* +
{** 
baseType++ 
=++ 
null++ 
;++  
},, 
return.. 
new.. 
ReflectionTypeInfo.. )
(..) *
type// 
,// 
baseType// 
,// 
GetConstructorInfo//  2
(//2 3
type//3 7
)//7 8
,//8 9
GetMethodInfos//: H
(//H I
type//I M
)//M N
,//N O
GetFieldInfos00 
(00 
type00 "
)00" #
,00# $
GetPropertyInfos00% 5
(005 6
type006 :
)00: ;
)00; <
;00< =
}11 	
static33 
List33 
<33 
ReflectionTypeInfo33 &
.33& '
InjectPropertyInfo33' 9
>339 :
GetPropertyInfos33; K
(33K L
Type33L P
type33Q U
)33U V
{44 	
return55 
type55 
.55 &
DeclaredInstanceProperties55 2
(552 3
)553 4
.66 
Where66 
(66 
x66 
=>66 !
_injectAttributeTypes66 1
.661 2
Any662 5
(665 6
a666 7
=>668 :
x66; <
.66< =
HasAttribute66= I
(66I J
a66J K
)66K L
)66L M
)66M N
.77 
Select77 
(77 
x77 
=>77 
new77  
ReflectionTypeInfo77! 3
.773 4
InjectPropertyInfo774 F
(77F G
x88 
,88 &
GetInjectableInfoForMember88 1
(881 2
type882 6
,886 7
x888 9
)889 :
)88: ;
)88; <
.88< =
ToList88= C
(88C D
)88D E
;88E F
}99 	
static;; 
List;; 
<;; 
ReflectionTypeInfo;; &
.;;& '
InjectFieldInfo;;' 6
>;;6 7
GetFieldInfos;;8 E
(;;E F
Type;;F J
type;;K O
);;O P
{<< 	
return== 
type== 
.== "
DeclaredInstanceFields== .
(==. /
)==/ 0
.>> 
Where>> 
(>> 
x>> 
=>>> !
_injectAttributeTypes>> 1
.>>1 2
Any>>2 5
(>>5 6
a>>6 7
=>>>8 :
x>>; <
.>>< =
HasAttribute>>= I
(>>I J
a>>J K
)>>K L
)>>L M
)>>M N
.?? 
Select?? 
(?? 
x?? 
=>?? 
new??  
ReflectionTypeInfo??! 3
.??3 4
InjectFieldInfo??4 C
(??C D
x@@ 
,@@ &
GetInjectableInfoForMember@@ 1
(@@1 2
type@@2 6
,@@6 7
x@@8 9
)@@9 :
)@@: ;
)@@; <
.AA 
ToListAA 
(AA 
)AA 
;AA 
}BB 	
staticDD 
ListDD 
<DD 
ReflectionTypeInfoDD &
.DD& '
InjectMethodInfoDD' 7
>DD7 8
GetMethodInfosDD9 G
(DDG H
TypeDDH L
typeDDM Q
)DDQ R
{EE 	
varFF 
injectMethodInfosFF !
=FF" #
newFF$ '
ListFF( ,
<FF, -
ReflectionTypeInfoFF- ?
.FF? @
InjectMethodInfoFF@ P
>FFP Q
(FFQ R
)FFR S
;FFS T
varLL 
methodInfosLL 
=LL 
typeLL "
.LL" ##
DeclaredInstanceMethodsLL# :
(LL: ;
)LL; <
.MM 
WhereMM 
(MM 
xMM 
=>MM !
_injectAttributeTypesMM 1
.MM1 2
AnyMM2 5
(MM5 6
aMM6 7
=>MM8 :
xMM; <
.MM< =
GetCustomAttributesMM= P
(MMP Q
aMMQ R
,MMR S
falseMMT Y
)MMY Z
.MMZ [
AnyMM[ ^
(MM^ _
)MM_ `
)MM` a
)MMa b
.MMb c
ToListMMc i
(MMi j
)MMj k
;MMk l
forOO 
(OO 
intOO 
iOO 
=OO 
$numOO 
;OO 
iOO 
<OO 
methodInfosOO  +
.OO+ ,
CountOO, 1
;OO1 2
iOO3 4
++OO4 6
)OO6 7
{PP 
varQQ 

methodInfoQQ 
=QQ  
methodInfosQQ! ,
[QQ, -
iQQ- .
]QQ. /
;QQ/ 0
varRR 

injectAttrRR 
=RR  

methodInfoRR! +
.RR+ ,
AllAttributesRR, 9
<RR9 :
InjectAttributeBaseRR: M
>RRM N
(RRN O
)RRO P
.RRP Q
SingleOrDefaultRRQ `
(RR` a
)RRa b
;RRb c
ifTT 
(TT 

injectAttrTT 
!=TT !
nullTT" &
)TT& '
{UU 
AssertVV 
.VV 
ThatVV 
(VV  
!VV  !

injectAttrVV! +
.VV+ ,
OptionalVV, 4
&&VV5 7

injectAttrVV8 B
.VVB C
IdVVC E
==VVF H
nullVVI M
&&VVN P

injectAttrVVQ [
.VV[ \
SourceVV\ b
==VVc e
InjectSourcesVVf s
.VVs t
AnyVVt w
,VVw x
$strWW d
)WWd e
;WWe f
}XX 
varZZ 
injectParamInfosZZ $
=ZZ% &

methodInfoZZ' 1
.ZZ1 2
GetParametersZZ2 ?
(ZZ? @
)ZZ@ A
.[[ 
Select[[ 
([[ 
x[[ 
=>[[  (
CreateInjectableInfoForParam[[! =
([[= >
type[[> B
,[[B C
x[[D E
)[[E F
)[[F G
.[[G H
ToList[[H N
([[N O
)[[O P
;[[P Q
injectMethodInfos]] !
.]]! "
Add]]" %
(]]% &
new^^ 
ReflectionTypeInfo^^ *
.^^* +
InjectMethodInfo^^+ ;
(^^; <

methodInfo^^< F
,^^F G
injectParamInfos^^H X
)^^X Y
)^^Y Z
;^^Z [
}__ 
returnaa 
injectMethodInfosaa $
;aa$ %
}bb 	
staticdd 
ReflectionTypeInfodd !
.dd! "!
InjectConstructorInfodd" 7
GetConstructorInfodd8 J
(ddJ K
TypeddK O
typeddP T
)ddT U
{ee 	
varff 
argsff 
=ff 
newff 
Listff 
<ff  
ReflectionTypeInfoff  2
.ff2 3
InjectParameterInfoff3 F
>ffF G
(ffG H
)ffH I
;ffI J
varhh 
constructorhh 
=hh #
TryGetInjectConstructorhh 5
(hh5 6
typehh6 :
)hh: ;
;hh; <
ifjj 
(jj 
constructorjj 
!=jj 
nulljj #
)jj# $
{kk 
argsll 
.ll 
AddRangell 
(ll 
constructorll )
.ll) *
GetParametersll* 7
(ll7 8
)ll8 9
.ll9 :
Selectll: @
(ll@ A
xmm 
=>mm (
CreateInjectableInfoForParammm 5
(mm5 6
typemm6 :
,mm: ;
xmm< =
)mm= >
)mm> ?
)mm? @
;mm@ A
}nn 
returnpp 
newpp 
ReflectionTypeInfopp )
.pp) *!
InjectConstructorInfopp* ?
(pp? @
constructorpp@ K
,ppK L
argsppM Q
)ppQ R
;ppR S
}qq 	
staticss 
ReflectionTypeInfoss !
.ss! "
InjectParameterInfoss" 5(
CreateInjectableInfoForParamss6 R
(ssR S
Typett 

parentTypett 
,tt 
ParameterInfott *
	paramInfott+ 4
)tt4 5
{uu 	
varvv 
injectAttributesvv  
=vv! "
	paramInfovv# ,
.vv, -
AllAttributesvv- :
<vv: ;
InjectAttributeBasevv; N
>vvN O
(vvO P
)vvP Q
.vvQ R
ToListvvR X
(vvX Y
)vvY Z
;vvZ [
Assertxx 
.xx 
Thatxx 
(xx 
injectAttributesxx (
.xx( )
Countxx) .
<=xx/ 1
$numxx2 3
,xx3 4
$stryy {
,yy{ |
	paramInfo	yy} Ü
.
yyÜ á
Name
yyá ã
,
yyã å

parentType
yyç ó
)
yyó ò
;
yyò ô
var{{ 

injectAttr{{ 
={{ 
injectAttributes{{ -
.{{- .
SingleOrDefault{{. =
({{= >
){{> ?
;{{? @
object}} 

identifier}} 
=}} 
null}}  $
;}}$ %
bool~~ 

isOptional~~ 
=~~ 
false~~ #
;~~# $
InjectSources 

sourceType $
=% &
InjectSources' 4
.4 5
Any5 8
;8 9
if
ÅÅ 
(
ÅÅ 

injectAttr
ÅÅ 
!=
ÅÅ 
null
ÅÅ "
)
ÅÅ" #
{
ÇÇ 

identifier
ÉÉ 
=
ÉÉ 

injectAttr
ÉÉ '
.
ÉÉ' (
Id
ÉÉ( *
;
ÉÉ* +

isOptional
ÑÑ 
=
ÑÑ 

injectAttr
ÑÑ '
.
ÑÑ' (
Optional
ÑÑ( 0
;
ÑÑ0 1

sourceType
ÖÖ 
=
ÖÖ 

injectAttr
ÖÖ '
.
ÖÖ' (
Source
ÖÖ( .
;
ÖÖ. /
}
ÜÜ 
bool
àà )
isOptionalWithADefaultValue
àà ,
=
àà- .
(
àà/ 0
	paramInfo
àà0 9
.
àà9 :

Attributes
àà: D
&
ààE F!
ParameterAttributes
ààG Z
.
ààZ [

HasDefault
àà[ e
)
ààe f
==
ààg i!
ParameterAttributes
ààj }
.
àà} ~

HasDefaultàà~ à
;ààà â
return
ää 
new
ää  
ReflectionTypeInfo
ää )
.
ää) *!
InjectParameterInfo
ää* =
(
ää= >
	paramInfo
ãã 
,
ãã 
new
åå 
InjectableInfo
åå "
(
åå" #)
isOptionalWithADefaultValue
çç /
||
çç0 2

isOptional
çç3 =
,
çç= >

identifier
éé 
,
éé 
	paramInfo
èè 
.
èè 
Name
èè "
,
èè" #
	paramInfo
êê 
.
êê 
ParameterType
êê +
,
êê+ ,)
isOptionalWithADefaultValue
ëë /
?
ëë0 1
	paramInfo
ëë2 ;
.
ëë; <
DefaultValue
ëë< H
:
ëëI J
null
ëëK O
,
ëëO P

sourceType
íí 
)
íí 
)
íí  
;
íí  !
}
ìì 	
static
ïï 
InjectableInfo
ïï (
GetInjectableInfoForMember
ïï 8
(
ïï8 9
Type
ïï9 =

parentType
ïï> H
,
ïïH I

MemberInfo
ïïJ T
memInfo
ïïU \
)
ïï\ ]
{
ññ 	
var
óó 
injectAttributes
óó  
=
óó! "
memInfo
óó# *
.
óó* +
AllAttributes
óó+ 8
<
óó8 9!
InjectAttributeBase
óó9 L
>
óóL M
(
óóM N
)
óóN O
.
óóO P
ToList
óóP V
(
óóV W
)
óóW X
;
óóX Y
Assert
ôô 
.
ôô 
That
ôô 
(
ôô 
injectAttributes
ôô (
.
ôô( )
Count
ôô) .
<=
ôô/ 1
$num
ôô2 3
,
ôô3 4
$ströö Ö
,ööÖ Ü
memInfoööá é
.ööé è
Nameööè ì
,ööì î

parentTypeööï ü
)ööü †
;öö† °
var
úú 

injectAttr
úú 
=
úú 
injectAttributes
úú -
.
úú- .
SingleOrDefault
úú. =
(
úú= >
)
úú> ?
;
úú? @
object
ûû 

identifier
ûû 
=
ûû 
null
ûû  $
;
ûû$ %
bool
üü 

isOptional
üü 
=
üü 
false
üü #
;
üü# $
InjectSources
†† 

sourceType
†† $
=
††% &
InjectSources
††' 4
.
††4 5
Any
††5 8
;
††8 9
if
¢¢ 
(
¢¢ 

injectAttr
¢¢ 
!=
¢¢ 
null
¢¢ "
)
¢¢" #
{
££ 

identifier
§§ 
=
§§ 

injectAttr
§§ '
.
§§' (
Id
§§( *
;
§§* +

isOptional
•• 
=
•• 

injectAttr
•• '
.
••' (
Optional
••( 0
;
••0 1

sourceType
¶¶ 
=
¶¶ 

injectAttr
¶¶ '
.
¶¶' (
Source
¶¶( .
;
¶¶. /
}
ßß 
Type
©© 

memberType
©© 
=
©© 
memInfo
©© %
is
©©& (
	FieldInfo
©©) 2
?
™™ 
(
™™ 
(
™™ 
	FieldInfo
™™ 
)
™™ 
memInfo
™™ %
)
™™% &
.
™™& '
	FieldType
™™' 0
:
™™1 2
(
™™3 4
(
™™4 5
PropertyInfo
™™5 A
)
™™A B
memInfo
™™B I
)
™™I J
.
™™J K
PropertyType
™™K W
;
™™W X
return
¨¨ 
new
¨¨ 
InjectableInfo
¨¨ %
(
¨¨% &

isOptional
≠≠ 
,
≠≠ 

identifier
ÆÆ 
,
ÆÆ 
memInfo
ØØ 
.
ØØ 
Name
ØØ 
,
ØØ 

memberType
∞∞ 
,
∞∞ 
null
±± 
,
±± 

sourceType
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 	
static
µµ 
ConstructorInfo
µµ %
TryGetInjectConstructor
µµ 6
(
µµ6 7
Type
µµ7 ;
type
µµ< @
)
µµ@ A
{
∂∂ 	
if
∏∏ 
(
∏∏ 
type
∏∏ 
.
∏∏  
DerivesFromOrEqual
∏∏ '
<
∏∏' (
	Component
∏∏( 1
>
∏∏1 2
(
∏∏2 3
)
∏∏3 4
)
∏∏4 5
{
ππ 
return
∫∫ 
null
∫∫ 
;
∫∫ 
}
ªª 
if
ææ 
(
ææ 
type
ææ 
.
ææ 

IsAbstract
ææ 
(
ææ  
)
ææ  !
)
ææ! "
{
øø 
return
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 
var
√√ 
constructors
√√ 
=
√√ 
type
√√ #
.
√√# $
Constructors
√√$ 0
(
√√0 1
)
√√1 2
;
√√2 3
if
ÀÀ 
(
ÀÀ 
constructors
ÀÀ 
.
ÀÀ 
IsEmpty
ÀÀ $
(
ÀÀ$ %
)
ÀÀ% &
)
ÀÀ& '
{
ÃÃ 
return
ÕÕ 
null
ÕÕ 
;
ÕÕ 
}
ŒŒ 
if
–– 
(
–– 
constructors
–– 
.
–– 
HasMoreThan
–– (
(
––( )
$num
––) *
)
––* +
)
––+ ,
{
—— 
var
““ !
explicitConstructor
““ '
=
““( )
(
““* +
from
““+ /
c
““0 1
in
““2 4
constructors
““5 A
where
““B G#
_injectAttributeTypes
““H ]
.
““] ^
Any
““^ a
(
““a b
a
““b c
=>
““d f
c
““g h
.
““h i
HasAttribute
““i u
(
““u v
a
““v w
)
““w x
)
““x y
select““z Ä
c““Å Ç
)““Ç É
.““É Ñ
SingleOrDefault““Ñ ì
(““ì î
)““î ï
;““ï ñ
if
‘‘ 
(
‘‘ !
explicitConstructor
‘‘ '
!=
‘‘( *
null
‘‘+ /
)
‘‘/ 0
{
’’ 
return
÷÷ !
explicitConstructor
÷÷ .
;
÷÷. /
}
◊◊ 
var
‹‹ %
singlePublicConstructor
‹‹ +
=
‹‹, -
constructors
‹‹. :
.
‹‹: ;
Where
‹‹; @
(
‹‹@ A
x
‹‹A B
=>
‹‹C E
x
‹‹F G
.
‹‹G H
IsPublic
‹‹H P
)
‹‹P Q
.
‹‹Q R
OnlyOrDefault
‹‹R _
(
‹‹_ `
)
‹‹` a
;
‹‹a b
if
ﬁﬁ 
(
ﬁﬁ %
singlePublicConstructor
ﬁﬁ +
!=
ﬁﬁ, .
null
ﬁﬁ/ 3
)
ﬁﬁ3 4
{
ﬂﬂ 
return
‡‡ %
singlePublicConstructor
‡‡ 2
;
‡‡2 3
}
·· 
return
ËË 
constructors
ËË #
.
ËË# $
OrderBy
ËË$ +
(
ËË+ ,
x
ËË, -
=>
ËË. 0
x
ËË1 2
.
ËË2 3
GetParameters
ËË3 @
(
ËË@ A
)
ËËA B
.
ËËB C
Count
ËËC H
(
ËËH I
)
ËËI J
)
ËËJ K
.
ËËK L
First
ËËL Q
(
ËËQ R
)
ËËR S
;
ËËS T
}
ÈÈ 
return
ÎÎ 
constructors
ÎÎ 
[
ÎÎ  
$num
ÎÎ  !
]
ÎÎ! "
;
ÎÎ" #
}
ÏÏ 	
}
ÑÑ 
}ÖÖ ¶B
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder2.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
	TContractB K
>K L
:M N!
FactoryToChoiceBinderO d
<d e
TParam1e l
,l m
TParam2n u
,u v
	TContract	w Ä
>
Ä Å
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
	TContract7 @
>@ A 
WithFactoryArgumentsB V
<V W
TW X
>X Y
(Y Z
TZ [
param\ a
)a b
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
	TContract7 @
>@ A 
WithFactoryArgumentsB V
<V W
TFactoryParam1W e
,e f
TFactoryParam2g u
>u v
(v w
TFactoryParam1	w Ö
param1
Ü å
,
å ç
TFactoryParam2
é ú
param2
ù £
)
£ §
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
	TContract7 @
>@ A 
WithFactoryArgumentsB V
<V W
TFactoryParam1W e
,e f
TFactoryParam2g u
,u v
TFactoryParam3	w Ö
>
Ö Ü
(
Ü á
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
	TContract%%7 @
>%%@ A 
WithFactoryArguments%%B V
<%%V W
TFactoryParam1%%W e
,%%e f
TFactoryParam2%%g u
,%%u v
TFactoryParam3	%%w Ö
,
%%Ö Ü
TFactoryParam4
%%á ï
>
%%ï ñ
(
%%ñ ó
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
	TContract,,7 @
>,,@ A 
WithFactoryArguments,,B V
<,,V W
TFactoryParam1,,W e
,,,e f
TFactoryParam2,,g u
,,,u v
TFactoryParam3	,,w Ö
,
,,Ö Ü
TFactoryParam4
,,á ï
,
,,ï ñ
TFactoryParam5
,,ó •
>
,,• ¶
(
,,¶ ß
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
	TContract337 @
>33@ A 
WithFactoryArguments33B V
<33V W
TFactoryParam133W e
,33e f
TFactoryParam233g u
,33u v
TFactoryParam3	33w Ö
,
33Ö Ü
TFactoryParam4
33á ï
,
33ï ñ
TFactoryParam5
33ó •
,
33• ¶
TFactoryParam6
33ß µ
>
33µ ∂
(
33∂ ∑
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
	TContract::7 @
>::@ A 
WithFactoryArguments::B V
(::V W
object::W ]
[::] ^
]::^ _
args::` d
)::d e
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
	TContract@@7 @
>@@@ A(
WithFactoryArgumentsExplicit@@B ^
(@@^ _
IEnumerable@@_ j
<@@j k
TypeValuePair@@k x
>@@x y
	extraArgs	@@z É
)
@@É Ñ
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ¥
ñC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder T
:U VF
9DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder	W ê
{ 
public O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder R
(R S'
SubContainerCreatorBindInfo ' 
subContainerBindInfo( <
,< =
BindInfo> F
bindInfoG O
)O P
: 
base 
(  
subContainerBindInfo '
,' (
bindInfo) 1
)1 2
{		 	
}

 	
public E
9DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder H

WithKernelI S
(S T
)T U
{ 	'
SubContainerCreatorBindInfo '
.' (
CreateKernel( 4
=5 6
true7 ;
;; <
return 
this 
; 
} 	
public E
9DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder H

WithKernelI S
<S T
TKernelT [
>[ \
(\ ]
)] ^
where 
TKernel 
: 
Kernel "
{ 	'
SubContainerCreatorBindInfo '
.' (
CreateKernel( 4
=5 6
true7 ;
;; <'
SubContainerCreatorBindInfo '
.' (

KernelType( 2
=3 4
typeof5 ;
(; <
TKernel< C
)C D
;D E
return 
this 
; 
} 	
} 
} ¯
ìC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\GameObject\TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 A
5TransformScopeConcreteIdArgConditionCopyNonLazyBinder		 F
:		G H8
,ScopeConcreteIdArgConditionCopyNonLazyBinder		I u
{

 
public A
5TransformScopeConcreteIdArgConditionCopyNonLazyBinder D
(D E
BindInfo 
bindInfo 
, (
GameObjectCreationParameters (
gameObjectInfo) 7
)7 8
: 
base 
( 
bindInfo 
) 
{ 	
GameObjectInfo 
= 
gameObjectInfo +
;+ ,
} 	
	protected (
GameObjectCreationParameters .
GameObjectInfo/ =
{ 	
get 
; 
private 
set 
; 
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
UnderTransform< J
(J K
	TransformK T
parentU [
)[ \
{ 	
GameObjectInfo 
. 
ParentTransform *
=+ ,
parent- 3
;3 4
return 
this 
; 
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
UnderTransform< J
(J K
FuncK O
<O P
InjectContextP ]
,] ^
	Transform_ h
>h i
parentGetterj v
)v w
{   	
GameObjectInfo!! 
.!! !
ParentTransformGetter!! 0
=!!1 2
parentGetter!!3 ?
;!!? @
return"" 
this"" 
;"" 
}## 	
public%% 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder%% ;
UnderTransformGroup%%< O
(%%O P
string%%P V
transformGroupname%%W i
)%%i j
{&& 	
GameObjectInfo'' 
.'' 
	GroupName'' $
=''% &
transformGroupname''' 9
;''9 :
return(( 
this(( 
;(( 
})) 	
}** 
}++ »	
ÉC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\BindSignal\BindSignalIdToBinder.cs
	namespace 	
Zenject
 
{ 
public 

class  
BindSignalIdToBinder %
<% &
TSignal& -
>- .
:/ 0
BindSignalToBinder1 C
<C D
TSignalD K
>K L
{ 
public  
BindSignalIdToBinder #
(# $
DiContainer$ /
	container0 9
,9 :!
SignalBindingBindInfo; P
signalBindInfoQ _
)_ `
:		 
base		 
(		 
	container		 
,		 
signalBindInfo		 ,
)		, -
{

 	
} 	
public 
BindSignalToBinder !
<! "
TSignal" )
>) *
WithId+ 1
(1 2
object2 8

identifier9 C
)C D
{ 	
SignalBindInfo 
. 

Identifier %
=& '

identifier( 2
;2 3
return 
this 
; 
} 	
} 
} ˜!
aC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindInfo\BindStatement.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 
BindStatement		 
:		  
IDisposable		! ,
{

 
readonly 
List 
< 
IDisposable !
>! "
_disposables# /
;/ 0
IBindingFinalizer 
_bindingFinalizer +
;+ ,
public 
BindStatement 
( 
) 
{ 	
_disposables 
= 
new 
List #
<# $
IDisposable$ /
>/ 0
(0 1
)1 2
;2 3
Reset 
( 
) 
; 
} 	
public %
BindingInheritanceMethods ($
BindingInheritanceMethod) A
{ 	
get 
{ 
AssertHasFinalizer "
(" #
)# $
;$ %
return 
_bindingFinalizer (
.( )$
BindingInheritanceMethod) A
;A B
} 
} 	
public 
bool 
HasFinalizer  
{ 	
get 
{ 
return 
_bindingFinalizer *
!=+ -
null. 2
;2 3
}4 5
}   	
public"" 
void"" 
SetFinalizer""  
(""  !
IBindingFinalizer""! 2
bindingFinalizer""3 C
)""C D
{## 	
_bindingFinalizer$$ 
=$$ 
bindingFinalizer$$  0
;$$0 1
}%% 	
void'' 
AssertHasFinalizer'' 
(''  
)''  !
{(( 	
if)) 
()) 
_bindingFinalizer)) !
==))" $
null))% )
)))) *
{** 
throw++ 
Assert++ 
.++ 
CreateException++ ,
(++, -
$str,, Z
),,Z [
;,,[ \
}-- 
}.. 	
public00 
void00 
AddDisposable00 !
(00! "
IDisposable00" -

disposable00. 8
)008 9
{11 	
_disposables22 
.22 
Add22 
(22 

disposable22 '
)22' (
;22( )
}33 	
public55 
BindInfo55 
SpawnBindInfo55 %
(55% &
)55& '
{66 	
var77 
bindInfo77 
=77 
ZenPools77 #
.77# $
SpawnBindInfo77$ 1
(771 2
)772 3
;773 4
AddDisposable88 
(88 
bindInfo88 "
)88" #
;88# $
return99 
bindInfo99 
;99 
}:: 	
public<< 
void<< 
FinalizeBinding<< #
(<<# $
DiContainer<<$ /
	container<<0 9
)<<9 :
{== 	
AssertHasFinalizer>> 
(>> 
)>>  
;>>  !
_bindingFinalizer?? 
.?? 
FinalizeBinding?? -
(??- .
	container??. 7
)??7 8
;??8 9
}@@ 	
publicBB 
voidBB 
ResetBB 
(BB 
)BB 
{CC 	
_bindingFinalizerDD 
=DD 
nullDD  $
;DD$ %
forFF 
(FF 
intFF 
iFF 
=FF 
$numFF 
;FF 
iFF 
<FF 
_disposablesFF  ,
.FF, -
CountFF- 2
;FF2 3
iFF4 5
++FF5 7
)FF7 8
{GG 
_disposablesHH 
[HH 
iHH 
]HH 
.HH  
DisposeHH  '
(HH' (
)HH( )
;HH) *
}II 
_disposablesKK 
.KK 
ClearKK 
(KK 
)KK  
;KK  !
}LL 	
publicNN 
voidNN 
DisposeNN 
(NN 
)NN 
{OO 	
ZenPoolsPP 
.PP 
DespawnStatementPP %
(PP% &
thisPP& *
)PP* +
;PP+ ,
}QQ 	
}RR 
}SS À
kC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabProviders\PrefabProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
PrefabProvider 
:  !
IPrefabProvider" 1
{		 
readonly

 
UnityEngine

 
.

 
Object

 #
_prefab

$ +
;

+ ,
public 
PrefabProvider 
( 
UnityEngine )
.) *
Object* 0
prefab1 7
)7 8
{ 	
Assert 
. 
	IsNotNull 
( 
prefab #
)# $
;$ %
_prefab 
= 
prefab 
; 
} 	
public 
UnityEngine 
. 
Object !
	GetPrefab" +
(+ ,
), -
{ 	
return 
_prefab 
; 
} 	
} 
} Æ
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\DeclareSignal\SignalBindingBindInfo.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
SignalBindingBindInfo &
{ 
public !
SignalBindingBindInfo $
($ %
Type% )

signalType* 4
)4 5
{		 	

SignalType

 
=

 

signalType

 #
;

# $
} 	
public 
object 

Identifier  
{ 	
get 
; 
set 
; 
} 	
public 
Type 

SignalType 
{ 	
get 
; 
private 
set 
; 
} 	
} 
} ¢

aC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\StaticContext.cs
	namespace 	
Zenject
 
{ 
public

 

static

 
class

 
StaticContext

 %
{ 
static 
DiContainer 

_container %
;% &
public 
static 
void 
Clear  
(  !
)! "
{ 	

_container 
= 
null 
; 
} 	
public 
static 
bool 
HasContainer '
{ 	
get 
{ 
return 

_container #
!=$ &
null' +
;+ ,
}- .
} 	
public 
static 
DiContainer !
	Container" +
{ 	
get 
{ 
if 
( 

_container 
== !
null" &
)& '
{ 

_container 
=  
new! $
DiContainer% 0
(0 1
)1 2
;2 3
}   
return"" 

_container"" !
;""! "
}## 
}$$ 	
}%% 
}&& ∫
zC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Conventions\ConventionSelectTypesBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class '
ConventionSelectTypesBinder ,
{ 
readonly 
ConventionBindInfo #
	_bindInfo$ -
;- .
public

 '
ConventionSelectTypesBinder

 *
(

* +
ConventionBindInfo

+ =
bindInfo

> F
)

F G
{ 	
	_bindInfo 
= 
bindInfo  
;  !
} 	'
ConventionFilterTypesBinder #
CreateNextBinder$ 4
(4 5
)5 6
{ 	
return 
new '
ConventionFilterTypesBinder 2
(2 3
	_bindInfo3 <
)< =
;= >
} 	
public '
ConventionFilterTypesBinder *
AllTypes+ 3
(3 4
)4 5
{ 	
return 
CreateNextBinder #
(# $
)$ %
;% &
} 	
public '
ConventionFilterTypesBinder *

AllClasses+ 5
(5 6
)6 7
{ 	
	_bindInfo 
. 
AddTypeFilter #
(# $
t$ %
=>& (
t) *
.* +
IsClass+ 2
)2 3
;3 4
return 
CreateNextBinder #
(# $
)$ %
;% &
} 	
public   '
ConventionFilterTypesBinder   *!
AllNonAbstractClasses  + @
(  @ A
)  A B
{!! 	
	_bindInfo"" 
."" 
AddTypeFilter"" #
(""# $
t""$ %
=>""& (
t"") *
.""* +
IsClass""+ 2
&&""3 5
!""6 7
t""7 8
.""8 9

IsAbstract""9 C
)""C D
;""D E
return## 
CreateNextBinder## #
(### $
)##$ %
;##% &
}$$ 	
public&& '
ConventionFilterTypesBinder&& *
AllAbstractClasses&&+ =
(&&= >
)&&> ?
{'' 	
	_bindInfo(( 
.(( 
AddTypeFilter(( #
(((# $
t(($ %
=>((& (
t(() *
.((* +
IsClass((+ 2
&&((3 5
t((6 7
.((7 8

IsAbstract((8 B
)((B C
;((C D
return)) 
CreateNextBinder)) #
())# $
)))$ %
;))% &
}** 	
public,, '
ConventionFilterTypesBinder,, *
AllInterfaces,,+ 8
(,,8 9
),,9 :
{-- 	
	_bindInfo.. 
... 
AddTypeFilter.. #
(..# $
t..$ %
=>..& (
t..) *
...* +
IsInterface..+ 6
)..6 7
;..7 8
return// 
CreateNextBinder// #
(//# $
)//$ %
;//% &
}00 	
}11 
}22 ¨
gC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\IBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IBindingFinalizer &
{ %
BindingInheritanceMethods !$
BindingInheritanceMethod" :
{ 	
get 
; 
} 	
void

 
FinalizeBinding

 
(

 
DiContainer

 (
	container

) 2
)

2 3
;

3 4
} 
} ˛.
\C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindInfo\BindInfo.cs
	namespace 	
Zenject
 
{ 
public 

enum 

ScopeTypes 
{		 
Unset

 
,

 
	Transient 
, 
	Singleton 
} 
public 

enum 
	ToChoices 
{ 
Self 
, 
Concrete 
} 
public 

enum  
InvalidBindResponses $
{ 
Assert 
, 
Skip 
} 
public 

enum %
BindingInheritanceMethods )
{ 
None 
, 
CopyIntoAll 
, 
CopyDirectOnly 
, 
MoveIntoAll   
,   
MoveDirectOnly!! 
}"" 
[$$ 
NoReflectionBaking$$ 
]$$ 
public%% 

class%% 
BindInfo%% 
:%% 
IDisposable%% '
{&& 
public'' 
bool'' !
MarkAsCreationBinding'' )
;'') *
public(( 
bool(( !
MarkAsUniqueSingleton(( )
;(() *
public)) 
object)) 
ConcreteIdentifier)) (
;))( )
public** 
bool** 
SaveProvider**  
;**  !
public++ 
bool++ 
OnlyBindIfNotBound++ &
;++& '
public,, 
bool,,  
RequireExplicitScope,, (
;,,( )
public-- 
object-- 

Identifier--  
;--  !
public.. 
readonly.. 
List.. 
<.. 
Type.. !
>..! "
ContractTypes..# 0
;..0 1
public// %
BindingInheritanceMethods// ($
BindingInheritanceMethod//) A
;//A B
public00  
InvalidBindResponses00 #
InvalidBindResponse00$ 7
;007 8
public11 
bool11 
NonLazy11 
;11 
public22 
BindingCondition22 
	Condition22  )
;22) *
public33 
	ToChoices33 
ToChoice33 !
;33! "
public44 
string44 
ContextInfo44 !
;44! "
public55 
readonly55 
List55 
<55 
Type55 !
>55! "
ToTypes55# *
;55* +
public66 

ScopeTypes66 
Scope66 
;66  
public77 
readonly77 
List77 
<77 
TypeValuePair77 *
>77* +
	Arguments77, 5
;775 6
public88 
Action88 
<88 
InjectContext88 #
,88# $
object88% +
>88+ , 
InstantiatedCallback88- A
;88A B
public:: 
BindInfo:: 
(:: 
):: 
{;; 	
ContractTypes<< 
=<< 
new<< 
List<<  $
<<<$ %
Type<<% )
><<) *
(<<* +
)<<+ ,
;<<, -
ToTypes== 
=== 
new== 
List== 
<== 
Type== #
>==# $
(==$ %
)==% &
;==& '
	Arguments>> 
=>> 
new>> 
List>>  
<>>  !
TypeValuePair>>! .
>>>. /
(>>/ 0
)>>0 1
;>>1 2
Reset@@ 
(@@ 
)@@ 
;@@ 
}AA 	
publicCC 
voidCC 
DisposeCC 
(CC 
)CC 
{DD 	
ZenPoolsEE 
.EE 
DespawnBindInfoEE $
(EE$ %
thisEE% )
)EE) *
;EE* +
}FF 	
[HH 	
ConditionalHH	 
(HH 
$strHH #
)HH# $
]HH$ %
publicII 
voidII 
SetContextInfoII "
(II" #
stringII# )
contextInfoII* 5
)II5 6
{JJ 	
ContextInfoKK 
=KK 
contextInfoKK %
;KK% &
}LL 	
publicNN 
voidNN 
ResetNN 
(NN 
)NN 
{OO 	!
MarkAsCreationBindingPP !
=PP" #
truePP$ (
;PP( )!
MarkAsUniqueSingletonQQ !
=QQ" #
falseQQ$ )
;QQ) *
ConcreteIdentifierRR 
=RR  
nullRR! %
;RR% &
SaveProviderSS 
=SS 
falseSS  
;SS  !
OnlyBindIfNotBoundTT 
=TT  
falseTT! &
;TT& ' 
RequireExplicitScopeUU  
=UU! "
falseUU# (
;UU( )

IdentifierVV 
=VV 
nullVV 
;VV 
ContractTypesWW 
.WW 
ClearWW 
(WW  
)WW  !
;WW! "$
BindingInheritanceMethodXX $
=XX% &%
BindingInheritanceMethodsXX' @
.XX@ A
NoneXXA E
;XXE F
InvalidBindResponseYY 
=YY  ! 
InvalidBindResponsesYY" 6
.YY6 7
AssertYY7 =
;YY= >
NonLazyZZ 
=ZZ 
falseZZ 
;ZZ 
	Condition[[ 
=[[ 
null[[ 
;[[ 
ToChoice\\ 
=\\ 
	ToChoices\\  
.\\  !
Self\\! %
;\\% &
ContextInfo]] 
=]] 
null]] 
;]] 
ToTypes^^ 
.^^ 
Clear^^ 
(^^ 
)^^ 
;^^ 
Scope__ 
=__ 

ScopeTypes__ 
.__ 
Unset__ $
;__$ %
	Arguments`` 
.`` 
Clear`` 
(`` 
)`` 
;``  
InstantiatedCallbackaa  
=aa! "
nullaa# '
;aa' (
}bb 	
}cc 
}dd Ó%
[C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\CachedProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
CachedProvider 
:  !
	IProvider" +
{		 
readonly

 
	IProvider

 
_creator

 #
;

# $
List 
< 
object 
> 

_instances 
;  
bool 
_isCreatingInstance  
;  !
public 
CachedProvider 
( 
	IProvider '
creator( /
)/ 0
{ 	
_creator 
= 
creator 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get   
{!! 
throw## 
Assert## 
.## 
CreateException## ,
(##, -
)##- .
;##. /
}$$ 
}%% 	
public'' 
int'' 
NumInstances'' 
{(( 	
get)) 
{** 
{.. 
return// 

_instances// %
==//& (
null//) -
?//. /
$num//0 1
://2 3

_instances//4 >
.//> ?
Count//? D
;//D E
}00 
}11 
}22 	
public66 
void66 

ClearCache66 
(66 
)66  
{77 	
{;; 

_instances<< 
=<< 
null<< !
;<<! "
}== 
}>> 	
public@@ 
Type@@ 
GetInstanceType@@ #
(@@# $
InjectContext@@$ 1
context@@2 9
)@@9 :
{AA 	
returnBB 
_creatorBB 
.BB 
GetInstanceTypeBB +
(BB+ ,
contextBB, 3
)BB3 4
;BB4 5
}CC 	
publicEE 
voidEE *
GetAllInstancesWithInjectSplitEE 2
(EE2 3
InjectContextFF 
contextFF !
,FF! "
ListFF# '
<FF' (
TypeValuePairFF( 5
>FF5 6
argsFF7 ;
,FF; <
outFF= @
ActionFFA G
injectActionFFH T
,FFT U
ListFFV Z
<FFZ [
objectFF[ a
>FFa b
bufferFFc i
)FFi j
{GG 	
AssertHH 
.HH 
	IsNotNullHH 
(HH 
contextHH $
)HH$ %
;HH% &
{MM 
ifNN 
(NN 

_instancesNN 
!=NN !
nullNN" &
)NN& '
{OO 
injectActionPP  
=PP! "
nullPP# '
;PP' (
bufferQQ 
.QQ 
AllocFreeAddRangeQQ ,
(QQ, -

_instancesQQ- 7
)QQ7 8
;QQ8 9
returnRR 
;RR 
}SS 
ifXX 
(XX 
_isCreatingInstanceXX '
)XX' (
{YY 
varZZ 
instanceTypeZZ $
=ZZ% &
_creatorZZ' /
.ZZ/ 0
GetInstanceTypeZZ0 ?
(ZZ? @
contextZZ@ G
)ZZG H
;ZZH I
throw[[ 
Assert[[  
.[[  !
CreateException[[! 0
([[0 1
$str\\ f
,\\f g
instanceType]] $
,]]$ %
context]]& -
.]]- . 
GetObjectGraphString]]. B
(]]B C
)]]C D
,]]D E
instanceType]]F R
)]]R S
;]]S T
}^^ 
_isCreatingInstance`` #
=``$ %
true``& *
;``* +
varcc 
	instancescc 
=cc 
newcc  #
Listcc$ (
<cc( )
objectcc) /
>cc/ 0
(cc0 1
)cc1 2
;cc2 3
_creatordd 
.dd *
GetAllInstancesWithInjectSplitdd 7
(dd7 8
contextdd8 ?
,dd? @
argsddA E
,ddE F
outddG J
injectActionddK W
,ddW X
	instancesddY b
)ddb c
;ddc d
Assertee 
.ee 
	IsNotNullee  
(ee  !
	instancesee! *
)ee* +
;ee+ ,

_instancesgg 
=gg 
	instancesgg &
;gg& '
_isCreatingInstanceii #
=ii$ %
falseii& +
;ii+ ,
bufferkk 
.kk 
AllocFreeAddRangekk (
(kk( )
	instanceskk) 2
)kk2 3
;kk3 4
}ll 
}mm 	
}nn 
}oo ï
bC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\ListPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
ListPool 
< 
T 
> 
: 
StaticMemoryPool /
</ 0
List0 4
<4 5
T5 6
>6 7
>7 8
{ 
static 
ListPool 
< 
T 
> 
	_instance $
=% &
new' *
ListPool+ 3
<3 4
T4 5
>5 6
(6 7
)7 8
;8 9
public		 
ListPool		 
(		 
)		 
{

 	
OnDespawnedMethod 
= 
OnDespawned  +
;+ ,
} 	
public 
static 
ListPool 
< 
T  
>  !
Instance" *
{ 	
get 
{ 
return 
	_instance "
;" #
}$ %
} 	
void 
OnDespawned 
( 
List 
< 
T 
>  
list! %
)% &
{ 	
list 
. 
Clear 
( 
) 
; 
} 	
} 
} ∑Z
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder10.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
TParam3B I
,I J
TParam4K R
,R S
TParam5T [
,[ \
TParam6] d
,d e
TParam7f m
,m n
TParam8o v
,v w
TParam9x 
,	 Ä
TParam10
Å â
,
â ä
	TContract
ã î
>
î ï
:
ñ ó#
FactoryToChoiceBinder
ò ≠
<
≠ Æ
TParam1
Æ µ
,
µ ∂
TParam2
∑ æ
,
æ ø
TParam3
¿ «
,
« »
TParam4
… –
,
– —
TParam5
“ Ÿ
,
Ÿ ⁄
TParam6
€ ‚
,
‚ „
TParam7
‰ Î
,
Î Ï
TParam8
Ì Ù
,
Ù ı
TParam9
ˆ ˝
,
˝ ˛
TParam10
ˇ á
,
á à
	TContract
â í
>
í ì
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
TParam7[ b
,b c
TParam8d k
,k l
TParam9m t
,t u
TParam10v ~
,~ 
	TContract
Ä â
>
â ä"
WithFactoryArguments
ã ü
<
ü †
T
† °
>
° ¢
(
¢ £
T
£ §
param
• ™
)
™ ´
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
TParam7[ b
,b c
TParam8d k
,k l
TParam9m t
,t u
TParam10v ~
,~ 
	TContract
Ä â
>
â ä"
WithFactoryArguments
ã ü
<
ü †
TFactoryParam1
† Æ
,
Æ Ø
TFactoryParam2
∞ æ
>
æ ø
(
ø ¿
TFactoryParam1
¿ Œ
param1
œ ’
,
’ ÷
TFactoryParam2
◊ Â
param2
Ê Ï
)
Ï Ì
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
TParam4@ G
,G H
TParam5I P
,P Q
TParam6R Y
,Y Z
TParam7[ b
,b c
TParam8d k
,k l
TParam9m t
,t u
TParam10v ~
,~ 
	TContract
Ä â
>
â ä"
WithFactoryArguments
ã ü
<
ü †
TFactoryParam1
† Æ
,
Æ Ø
TFactoryParam2
∞ æ
,
æ ø
TFactoryParam3
¿ Œ
>
Œ œ
(
œ –
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
TParam3%%7 >
,%%> ?
TParam4%%@ G
,%%G H
TParam5%%I P
,%%P Q
TParam6%%R Y
,%%Y Z
TParam7%%[ b
,%%b c
TParam8%%d k
,%%k l
TParam9%%m t
,%%t u
TParam10%%v ~
,%%~ 
	TContract
%%Ä â
>
%%â ä"
WithFactoryArguments
%%ã ü
<
%%ü †
TFactoryParam1
%%† Æ
,
%%Æ Ø
TFactoryParam2
%%∞ æ
,
%%æ ø
TFactoryParam3
%%¿ Œ
,
%%Œ œ
TFactoryParam4
%%– ﬁ
>
%%ﬁ ﬂ
(
%%ﬂ ‡
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
TParam3,,7 >
,,,> ?
TParam4,,@ G
,,,G H
TParam5,,I P
,,,P Q
TParam6,,R Y
,,,Y Z
TParam7,,[ b
,,,b c
TParam8,,d k
,,,k l
TParam9,,m t
,,,t u
TParam10,,v ~
,,,~ 
	TContract
,,Ä â
>
,,â ä"
WithFactoryArguments
,,ã ü
<
,,ü †
TFactoryParam1
,,† Æ
,
,,Æ Ø
TFactoryParam2
,,∞ æ
,
,,æ ø
TFactoryParam3
,,¿ Œ
,
,,Œ œ
TFactoryParam4
,,– ﬁ
,
,,ﬁ ﬂ
TFactoryParam5
,,‡ Ó
>
,,Ó Ô
(
,,Ô 
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
TParam3337 >
,33> ?
TParam433@ G
,33G H
TParam533I P
,33P Q
TParam633R Y
,33Y Z
TParam733[ b
,33b c
TParam833d k
,33k l
TParam933m t
,33t u
TParam1033v ~
,33~ 
	TContract
33Ä â
>
33â ä"
WithFactoryArguments
33ã ü
<
33ü †
TFactoryParam1
33† Æ
,
33Æ Ø
TFactoryParam2
33∞ æ
,
33æ ø
TFactoryParam3
33¿ Œ
,
33Œ œ
TFactoryParam4
33– ﬁ
,
33ﬁ ﬂ
TFactoryParam5
33‡ Ó
,
33Ó Ô
TFactoryParam6
33 ˛
>
33˛ ˇ
(
33ˇ Ä
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
TParam3::7 >
,::> ?
TParam4::@ G
,::G H
TParam5::I P
,::P Q
TParam6::R Y
,::Y Z
TParam7::[ b
,::b c
TParam8::d k
,::k l
TParam9::m t
,::t u
TParam10::v ~
,::~ 
	TContract
::Ä â
>
::â ä"
WithFactoryArguments
::ã ü
(
::ü †
object
::† ¶
[
::¶ ß
]
::ß ®
args
::© ≠
)
::≠ Æ
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
TParam3@@7 >
,@@> ?
TParam4@@@ G
,@@G H
TParam5@@I P
,@@P Q
TParam6@@R Y
,@@Y Z
TParam7@@[ b
,@@b c
TParam8@@d k
,@@k l
TParam9@@m t
,@@t u
TParam10@@v ~
,@@~ 
	TContract
@@Ä â
>
@@â ä*
WithFactoryArgumentsExplicit
@@ã ß
(
@@ß ®
IEnumerable
@@® ≥
<
@@≥ ¥
TypeValuePair
@@¥ ¡
>
@@¡ ¬
	extraArgs
@@√ Ã
)
@@Ã Õ
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ¡
jC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\Kernels\DefaultGameObjectKernel.cs
	namespace 	
Zenject
 
{ 
public 

class #
DefaultGameObjectKernel (
:) *

MonoKernel+ 5
{ 
} 
} ç>
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder4.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
TParam3= D
,D E
TParam4F M
,M N
	TContractO X
>X Y
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
,0 1
TParam32 9
,9 :
TParam4; B
>B C
installerMethodD S
)S T
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
,D E
TParam3F M
,M N
TParam4O V
>V W
(W X
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public!! E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder!! H!
ByNewGameObjectMethod!!I ^
(!!^ _
Action%% 
<%% 
DiContainer%% 
,%% 
TParam1%%  '
,%%' (
TParam2%%) 0
,%%0 1
TParam3%%2 9
,%%9 :
TParam4%%; B
>%%B C
installerMethod%%D S
)%%S T
{&& 	
var'' 
gameObjectInfo'' 
=''  
new''! $(
GameObjectCreationParameters''% A
(''A B
)''B C
;''C D
ProviderFunc)) 
=)) 
(** 
	container** 
)** 
=>** 
new** "*
SubContainerDependencyProvider**# A
(**A B
ContractType++  
,++  !
SubIdentifier++" /
,++/ 0
new,, 4
(SubContainerCreatorByNewGameObjectMethod,, @
<,,@ A
TParam1,,A H
,,,H I
TParam2,,J Q
,,,Q R
TParam3,,S Z
,,,Z [
TParam4,,\ c
>,,c d
(,,d e
	container-- !
,--! "
gameObjectInfo--# 1
,--1 2
installerMethod--3 B
)--B C
,--C D
false--E J
)--J K
;--K L
return// 
new// E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder// P
(//P Q
BindInfo//Q Y
,//Y Z
gameObjectInfo//[ i
)//i j
;//j k
}00 	
public22 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder22 H
ByNewPrefabMethod22I Z
(22Z [
UnityEngine33 
.33 
Object33 
prefab33 %
,33% &
Action77 
<77 
DiContainer77 
,77 
TParam177  '
,77' (
TParam277) 0
,770 1
TParam3772 9
,779 :
TParam477; B
>77B C
installerMethod77D S
)77S T
{88 	
BindingUtil99 
.99 
AssertIsValidPrefab99 +
(99+ ,
prefab99, 2
)992 3
;993 4
var;; 
gameObjectInfo;; 
=;;  
new;;! $(
GameObjectCreationParameters;;% A
(;;A B
);;B C
;;;C D
ProviderFunc== 
=== 
(>> 
	container>> 
)>> 
=>>> 
new>> "*
SubContainerDependencyProvider>># A
(>>A B
ContractType??  
,??  !
SubIdentifier??" /
,??/ 0
new@@ 0
$SubContainerCreatorByNewPrefabMethod@@ <
<@@< =
TParam1@@= D
,@@D E
TParam2@@F M
,@@M N
TParam3@@O V
,@@V W
TParam4@@X _
>@@_ `
(@@` a
	containerAA !
,AA! "
newBB 
PrefabProviderBB *
(BB* +
prefabBB+ 1
)BB1 2
,BB2 3
gameObjectInfoCC &
,CC& '
installerMethodCC( 7
)CC7 8
,CC8 9
falseCC: ?
)CC? @
;CC@ A
returnEE 
newEE E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderEE P
(EEP Q
BindInfoEEQ Y
,EEY Z
gameObjectInfoEE[ i
)EEi j
;EEj k
}FF 	
publicHH E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderHH H%
ByNewPrefabResourceMethodHHI b
(HHb c
stringII 
resourcePathII 
,II  
ActionMM 
<MM 
DiContainerMM 
,MM 
TParam1MM  '
,MM' (
TParam2MM) 0
,MM0 1
TParam3MM2 9
,MM9 :
TParam4MM; B
>MMB C
installerMethodMMD S
)MMS T
{NN 	
BindingUtilOO 
.OO %
AssertIsValidResourcePathOO 1
(OO1 2
resourcePathOO2 >
)OO> ?
;OO? @
varQQ 
gameObjectInfoQQ 
=QQ  
newQQ! $(
GameObjectCreationParametersQQ% A
(QQA B
)QQB C
;QQC D
ProviderFuncSS 
=SS 
(TT 
	containerTT 
)TT 
=>TT 
newTT "*
SubContainerDependencyProviderTT# A
(TTA B
ContractTypeUU  
,UU  !
SubIdentifierUU" /
,UU/ 0
newVV 0
$SubContainerCreatorByNewPrefabMethodVV <
<VV< =
TParam1VV= D
,VVD E
TParam2VVF M
,VVM N
TParam3VVO V
,VVV W
TParam4VVX _
>VV_ `
(VV` a
	containerWW !
,WW! "
newXX "
PrefabProviderResourceXX 2
(XX2 3
resourcePathXX3 ?
)XX? @
,XX@ A
gameObjectInfoYY &
,YY& '
installerMethodYY( 7
)YY7 8
,YY8 9
falseYY: ?
)YY? @
;YY@ A
return[[ 
new[[ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder[[ P
([[P Q
BindInfo[[Q Y
,[[Y Z
gameObjectInfo[[[ i
)[[i j
;[[j k
}\\ 	
}^^ 
}__ õ_
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class )
ArgConditionCopyNonLazyBinder .
:/ 09
-InstantiateCallbackConditionCopyNonLazyBinder1 ^
{ 
public		 )
ArgConditionCopyNonLazyBinder		 ,
(		, -
BindInfo		- 5
bindInfo		6 >
)		> ?
:

 
base

 
(

 
bindInfo

 
)

 
{ 	
} 	
public 9
-InstantiateCallbackConditionCopyNonLazyBinder <
WithArguments= J
<J K
TK L
>L M
(M N
TN O
paramP U
)U V
{ 	
BindInfo 
. 
	Arguments 
. 
Clear $
($ %
)% &
;& '
BindInfo 
. 
	Arguments 
. 
Add "
(" #

InjectUtil# -
.- .
CreateTypePair. <
(< =
param= B
)B C
)C D
;D E
return 
this 
; 
} 	
public 9
-InstantiateCallbackConditionCopyNonLazyBinder <
WithArguments= J
<J K
TParam1K R
,R S
TParam2T [
>[ \
(\ ]
TParam1] d
param1e k
,k l
TParam2m t
param2u {
){ |
{ 	
BindInfo 
. 
	Arguments 
. 
Clear $
($ %
)% &
;& '
BindInfo 
. 
	Arguments 
. 
Add "
(" #

InjectUtil# -
.- .
CreateTypePair. <
(< =
param1= C
)C D
)D E
;E F
BindInfo 
. 
	Arguments 
. 
Add "
(" #

InjectUtil# -
.- .
CreateTypePair. <
(< =
param2= C
)C D
)D E
;E F
return 
this 
; 
} 	
public   9
-InstantiateCallbackConditionCopyNonLazyBinder   <
WithArguments  = J
<  J K
TParam1  K R
,  R S
TParam2  T [
,  [ \
TParam3  ] d
>  d e
(  e f
TParam1!! 
param1!! 
,!! 
TParam2!! #
param2!!$ *
,!!* +
TParam3!!, 3
param3!!4 :
)!!: ;
{"" 	
BindInfo## 
.## 
	Arguments## 
.## 
Clear## $
(##$ %
)##% &
;##& '
BindInfo$$ 
.$$ 
	Arguments$$ 
.$$ 
Add$$ "
($$" #

InjectUtil$$# -
.$$- .
CreateTypePair$$. <
($$< =
param1$$= C
)$$C D
)$$D E
;$$E F
BindInfo%% 
.%% 
	Arguments%% 
.%% 
Add%% "
(%%" #

InjectUtil%%# -
.%%- .
CreateTypePair%%. <
(%%< =
param2%%= C
)%%C D
)%%D E
;%%E F
BindInfo&& 
.&& 
	Arguments&& 
.&& 
Add&& "
(&&" #

InjectUtil&&# -
.&&- .
CreateTypePair&&. <
(&&< =
param3&&= C
)&&C D
)&&D E
;&&E F
return'' 
this'' 
;'' 
}(( 	
public** 9
-InstantiateCallbackConditionCopyNonLazyBinder** <
WithArguments**= J
<**J K
TParam1**K R
,**R S
TParam2**T [
,**[ \
TParam3**] d
,**d e
TParam4**f m
>**m n
(**n o
TParam1++ 
param1++ 
,++ 
TParam2++ #
param2++$ *
,++* +
TParam3++, 3
param3++4 :
,++: ;
TParam4++< C
param4++D J
)++J K
{,, 	
BindInfo-- 
.-- 
	Arguments-- 
.-- 
Clear-- $
(--$ %
)--% &
;--& '
BindInfo.. 
... 
	Arguments.. 
... 
Add.. "
(.." #

InjectUtil..# -
...- .
CreateTypePair... <
(..< =
param1..= C
)..C D
)..D E
;..E F
BindInfo// 
.// 
	Arguments// 
.// 
Add// "
(//" #

InjectUtil//# -
.//- .
CreateTypePair//. <
(//< =
param2//= C
)//C D
)//D E
;//E F
BindInfo00 
.00 
	Arguments00 
.00 
Add00 "
(00" #

InjectUtil00# -
.00- .
CreateTypePair00. <
(00< =
param300= C
)00C D
)00D E
;00E F
BindInfo11 
.11 
	Arguments11 
.11 
Add11 "
(11" #

InjectUtil11# -
.11- .
CreateTypePair11. <
(11< =
param411= C
)11C D
)11D E
;11E F
return22 
this22 
;22 
}33 	
public55 9
-InstantiateCallbackConditionCopyNonLazyBinder55 <
WithArguments55= J
<55J K
TParam155K R
,55R S
TParam255T [
,55[ \
TParam355] d
,55d e
TParam455f m
,55m n
TParam555o v
>55v w
(55w x
TParam166 
param166 
,66 
TParam266 #
param266$ *
,66* +
TParam366, 3
param3664 :
,66: ;
TParam466< C
param466D J
,66J K
TParam566L S
param566T Z
)66Z [
{77 	
BindInfo88 
.88 
	Arguments88 
.88 
Clear88 $
(88$ %
)88% &
;88& '
BindInfo99 
.99 
	Arguments99 
.99 
Add99 "
(99" #

InjectUtil99# -
.99- .
CreateTypePair99. <
(99< =
param199= C
)99C D
)99D E
;99E F
BindInfo:: 
.:: 
	Arguments:: 
.:: 
Add:: "
(::" #

InjectUtil::# -
.::- .
CreateTypePair::. <
(::< =
param2::= C
)::C D
)::D E
;::E F
BindInfo;; 
.;; 
	Arguments;; 
.;; 
Add;; "
(;;" #

InjectUtil;;# -
.;;- .
CreateTypePair;;. <
(;;< =
param3;;= C
);;C D
);;D E
;;;E F
BindInfo<< 
.<< 
	Arguments<< 
.<< 
Add<< "
(<<" #

InjectUtil<<# -
.<<- .
CreateTypePair<<. <
(<<< =
param4<<= C
)<<C D
)<<D E
;<<E F
BindInfo== 
.== 
	Arguments== 
.== 
Add== "
(==" #

InjectUtil==# -
.==- .
CreateTypePair==. <
(==< =
param5=== C
)==C D
)==D E
;==E F
return>> 
this>> 
;>> 
}?? 	
publicAA 9
-InstantiateCallbackConditionCopyNonLazyBinderAA <
WithArgumentsAA= J
<AAJ K
TParam1AAK R
,AAR S
TParam2AAT [
,AA[ \
TParam3AA] d
,AAd e
TParam4AAf m
,AAm n
TParam5AAo v
,AAv w
TParam6AAx 
>	AA Ä
(
AAÄ Å
TParam1BB 
param1BB 
,BB 
TParam2BB #
param2BB$ *
,BB* +
TParam3BB, 3
param3BB4 :
,BB: ;
TParam4BB< C
param4BBD J
,BBJ K
TParam5BBL S
param5BBT Z
,BBZ [
TParam6BB\ c
param6BBd j
)BBj k
{CC 	
BindInfoDD 
.DD 
	ArgumentsDD 
.DD 
ClearDD $
(DD$ %
)DD% &
;DD& '
BindInfoEE 
.EE 
	ArgumentsEE 
.EE 
AddEE "
(EE" #

InjectUtilEE# -
.EE- .
CreateTypePairEE. <
(EE< =
param1EE= C
)EEC D
)EED E
;EEE F
BindInfoFF 
.FF 
	ArgumentsFF 
.FF 
AddFF "
(FF" #

InjectUtilFF# -
.FF- .
CreateTypePairFF. <
(FF< =
param2FF= C
)FFC D
)FFD E
;FFE F
BindInfoGG 
.GG 
	ArgumentsGG 
.GG 
AddGG "
(GG" #

InjectUtilGG# -
.GG- .
CreateTypePairGG. <
(GG< =
param3GG= C
)GGC D
)GGD E
;GGE F
BindInfoHH 
.HH 
	ArgumentsHH 
.HH 
AddHH "
(HH" #

InjectUtilHH# -
.HH- .
CreateTypePairHH. <
(HH< =
param4HH= C
)HHC D
)HHD E
;HHE F
BindInfoII 
.II 
	ArgumentsII 
.II 
AddII "
(II" #

InjectUtilII# -
.II- .
CreateTypePairII. <
(II< =
param5II= C
)IIC D
)IID E
;IIE F
BindInfoJJ 
.JJ 
	ArgumentsJJ 
.JJ 
AddJJ "
(JJ" #

InjectUtilJJ# -
.JJ- .
CreateTypePairJJ. <
(JJ< =
param6JJ= C
)JJC D
)JJD E
;JJE F
returnKK 
thisKK 
;KK 
}LL 	
publicNN 9
-InstantiateCallbackConditionCopyNonLazyBinderNN <
WithArgumentsNN= J
(NNJ K
objectNNK Q
[NNQ R
]NNR S
argsNNT X
)NNX Y
{OO 	
BindInfoPP 
.PP 
	ArgumentsPP 
.PP 
ClearPP $
(PP$ %
)PP% &
;PP& '
forRR 
(RR 
intRR 
iRR 
=RR 
$numRR 
;RR 
iRR 
<RR 
argsRR  $
.RR$ %
LengthRR% +
;RR+ ,
iRR- .
++RR. 0
)RR0 1
{SS 
varTT 
argTT 
=TT 
argsTT 
[TT 
iTT  
]TT  !
;TT! "
AssertVV 
.VV 
	IsNotNullVV  
(VV  !
argVV! $
,VV$ %
$str	WW Ã
)
WWÃ Õ
;
WWÕ Œ
BindInfoYY 
.YY 
	ArgumentsYY "
.YY" #
AddYY# &
(YY& '
newZZ 
TypeValuePairZZ %
(ZZ% &
argZZ& )
.ZZ) *
GetTypeZZ* 1
(ZZ1 2
)ZZ2 3
,ZZ3 4
argZZ5 8
)ZZ8 9
)ZZ9 :
;ZZ: ;
}[[ 
return\\ 
this\\ 
;\\ 
}]] 	
public__ 9
-InstantiateCallbackConditionCopyNonLazyBinder__ <!
WithArgumentsExplicit__= R
(__R S
IEnumerable__S ^
<__^ _
TypeValuePair___ l
>__l m
	extraArgs__n w
)__w x
{`` 	
BindInfoaa 
.aa 
	Argumentsaa 
.aa 
Clearaa $
(aa$ %
)aa% &
;aa& '
foreachcc 
(cc 
varcc 
argcc 
incc 
	extraArgscc  )
)cc) *
{dd 
BindInfoee 
.ee 
	Argumentsee "
.ee" #
Addee# &
(ee& '
argee' *
)ee* +
;ee+ ,
}ff 
returngg 
thisgg 
;gg 
}hh 	
}ii 
}jj W
UC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ProfileTimers.csÙ#
}C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\Pooling\MemoryPoolBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class &
MemoryPoolBindingFinalizer +
<+ ,
	TContract, 5
>5 6
:7 8$
ProviderBindingFinalizer9 Q
{ 
readonly		 
MemoryPoolBindInfo		 #
_poolBindInfo		$ 1
;		1 2
readonly

 
FactoryBindInfo

  
_factoryBindInfo

! 1
;

1 2
public &
MemoryPoolBindingFinalizer )
() *
BindInfo 
bindInfo 
, 
FactoryBindInfo .
factoryBindInfo/ >
,> ?
MemoryPoolBindInfo@ R
poolBindInfoS _
)_ `
: 
base 
( 
bindInfo 
) 
{ 	
Assert 
. 
That 
( 
factoryBindInfo '
.' (
FactoryType( 3
.3 4
DerivesFrom4 ?
<? @
IMemoryPool@ K
>K L
(L M
)M N
)N O
;O P
_factoryBindInfo 
= 
factoryBindInfo .
;. /
_poolBindInfo 
= 
poolBindInfo (
;( )
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
var 
factory 
= 
new "
FactoryProviderWrapper 4
<4 5
	TContract5 >
>> ?
(? @
_factoryBindInfo  
.  !
ProviderFunc! -
(- .
	container. 7
)7 8
,8 9
new: =
InjectContext> K
(K L
	containerL U
,U V
typeofW ]
(] ^
	TContract^ g
)g h
)h i
)i j
;j k
var 
settings 
= 
new 
MemoryPoolSettings 1
(1 2
_poolBindInfo 
. 
InitialSize )
,) *
_poolBindInfo+ 8
.8 9
MaxSize9 @
,@ A
_poolBindInfoB O
.O P
ExpandMethodP \
)\ ]
;] ^
var   
transientProvider   !
=  " #
new  $ '
TransientProvider  ( 9
(  9 :
_factoryBindInfo!!  
.!!  !
FactoryType!!! ,
,!!, -
	container"" 
,"" 
_factoryBindInfo##  
.##  !
	Arguments##! *
.##* +
Concat##+ 1
(##1 2

InjectUtil$$ 
.$$ !
CreateArgListExplicit$$ 4
($$4 5
factory$$5 <
,$$< =
settings$$> F
)$$F G
)$$G H
.$$H I
ToList$$I O
($$O P
)$$P Q
,$$Q R
BindInfo%% 
.%% 
ContextInfo%% $
,%%$ %
BindInfo%%& .
.%%. /
ConcreteIdentifier%%/ A
,%%A B
null%%C G
)%%G H
;%%H I
	IProvider'' 
mainProvider'' "
;''" #
if)) 
()) 
BindInfo)) 
.)) 
Scope)) 
==)) !

ScopeTypes))" ,
.)), -
Unset))- 2
||))3 5
BindInfo))6 >
.))> ?
Scope))? D
==))E G

ScopeTypes))H R
.))R S
	Singleton))S \
)))\ ]
{** 
mainProvider++ 
=++ 
BindingUtil++ *
.++* + 
CreateCachedProvider+++ ?
(++? @
transientProvider++@ Q
)++Q R
;++R S
},, 
else-- 
{.. 
Assert// 
.// 
IsEqual// 
(// 
BindInfo// '
.//' (
Scope//( -
,//- .

ScopeTypes/// 9
.//9 :
	Transient//: C
)//C D
;//D E
mainProvider00 
=00 
transientProvider00 0
;000 1
}11 +
RegisterProviderForAllContracts33 +
(33+ ,
	container33, 5
,335 6
mainProvider337 C
)33C D
;33D E
}44 	
}55 
}66 Ã
åC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class E
9DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder J
:K L8
,ScopeConcreteIdArgConditionCopyNonLazyBinderM y
{ 
public E
9DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder H
(H I'
SubContainerCreatorBindInfo ' 
subContainerBindInfo( <
,< =
BindInfo> F
bindInfoG O
)O P
: 
base 
( 
bindInfo 
) 
{		 	'
SubContainerCreatorBindInfo

 '
=

( ) 
subContainerBindInfo

* >
;

> ?
} 	
	protected '
SubContainerCreatorBindInfo -'
SubContainerCreatorBindInfo. I
{ 	
get 
; 
private 
set 
; 
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;'
WithDefaultGameObjectParent< W
(W X
stringX ^
defaultParentName_ p
)p q
{ 	'
SubContainerCreatorBindInfo '
.' (
DefaultParentName( 9
=: ;
defaultParentName< M
;M N
return 
this 
; 
} 	
} 
} ®
•C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\AddToGameObjectComponentProviders\AddToNewGameObjectComponentProvider.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 /
#AddToNewGameObjectComponentProvider

 4
:

5 60
$AddToGameObjectComponentProviderBase

7 [
{ 
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
public /
#AddToNewGameObjectComponentProvider 2
(2 3
DiContainer 
	container !
,! "
Type# '
componentType( 5
,5 6
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6(
GameObjectCreationParameters7 S
gameObjectBindInfoT f
,f g
object 
concreteIdentifier %
,% &
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
: 
base 
( 
	container 
, 
componentType +
,+ ,
extraArguments- ;
,; <
concreteIdentifier= O
,O P
instantiateCallbackQ d
)d e
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
} 	
	protected 
override 
bool 
ShouldToggleActive  2
{ 	
get 
{ 
return 
true 
; 
}  
} 	
	protected 
override 

GameObject %
GetGameObject& 3
(3 4
InjectContext4 A
contextB I
)I J
{ 	
if 
( 
_gameObjectBindInfo #
.# $
Name$ (
==) +
null, 0
)0 1
{   
_gameObjectBindInfo!! #
.!!# $
Name!!$ (
=!!) *
ComponentType!!+ 8
.!!8 9
Name!!9 =
;!!= >
}"" 
return$$ 
	Container$$ 
.$$ !
CreateEmptyGameObject$$ 2
($$2 3
_gameObjectBindInfo$$3 F
,$$F G
context$$H O
)$$O P
;$$P Q
}%% 	
}&& 
}'' •Z
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ReflectionUtil.cs
	namespace 	

ModestTree
 
{ 
public 

static 
class 
ReflectionUtil &
{		 
public

 
static

 
Array

 
CreateArray

 '
(

' (
Type

( ,
elementType

- 8
,

8 9
List

: >
<

> ?
object

? E
>

E F
	instances

G P
)

P Q
{ 	
var 
array 
= 
Array 
. 
CreateInstance ,
(, -
elementType- 8
,8 9
	instances: C
.C D
CountD I
)I J
;J K
for 
( 
int 
i 
= 
$num 
; 
i 
< 
	instances  )
.) *
Count* /
;/ 0
i1 2
++2 4
)4 5
{ 
var 
instance 
= 
	instances (
[( )
i) *
]* +
;+ ,
if 
( 
instance 
!= 
null  $
)$ %
{ 
Assert 
. 
That 
(  
instance  (
.( )
GetType) 0
(0 1
)1 2
.2 3
DerivesFromOrEqual3 E
(E F
elementTypeF Q
)Q R
,R S
$str ^
+^ _
elementType` k
+l m
$strm }
+~ 
instance
Ä à
.
à â
GetType
â ê
(
ê ë
)
ë í
+
ì î
$str
ï ò
)
ò ô
;
ô ö
} 
array 
. 
SetValue 
( 
instance '
,' (
i) *
)* +
;+ ,
} 
return 
array 
; 
} 	
public 
static 
IList 
CreateGenericList -
(- .
Type. 2
elementType3 >
,> ?
List@ D
<D E
objectE K
>K L
	instancesM V
)V W
{ 	
var   
genericType   
=   
typeof   $
(  $ %
List  % )
<  ) *
>  * +
)  + ,
.  , -
MakeGenericType  - <
(  < =
elementType  = H
)  H I
;  I J
var"" 
list"" 
="" 
("" 
IList"" 
)"" 
	Activator"" '
.""' (
CreateInstance""( 6
(""6 7
genericType""7 B
)""B C
;""C D
for$$ 
($$ 
int$$ 
i$$ 
=$$ 
$num$$ 
;$$ 
i$$ 
<$$ 
	instances$$  )
.$$) *
Count$$* /
;$$/ 0
i$$1 2
++$$2 4
)$$4 5
{%% 
var&& 
instance&& 
=&& 
	instances&& (
[&&( )
i&&) *
]&&* +
;&&+ ,
if(( 
((( 
instance(( 
!=(( 
null((  $
)(($ %
{)) 
Assert** 
.** 
That** 
(**  
instance**  (
.**( )
GetType**) 0
(**0 1
)**1 2
.**2 3
DerivesFromOrEqual**3 E
(**E F
elementType**F Q
)**Q R
,**R S
$str++ e
+++e f
elementType++g r
+++s t
$str	++t Ñ
+
++Ö Ü
instance
++á è
.
++è ê
GetType
++ê ó
(
++ó ò
)
++ò ô
+
++ö õ
$str
++ú ü
)
++ü †
;
++† °
},, 
list.. 
... 
Add.. 
(.. 
instance.. !
)..! "
;.." #
}// 
return11 
list11 
;11 
}22 	
public44 
static44 
string44 
ToDebugString44 *
(44* +
this44+ /

MethodInfo440 :
method44; A
)44A B
{55 	
return66 
$str66 
.66 
Fmt66  
(66  !
method66! '
.66' (
DeclaringType66( 5
.665 6

PrettyName666 @
(66@ A
)66A B
,66B C
method66D J
.66J K
Name66K O
)66O P
;66P Q
}77 	
public99 
static99 
string99 
ToDebugString99 *
(99* +
this99+ /
Action990 6
action997 =
)99= >
{:: 	
return>> 
action>> 
.>> 
Method>>  
.>>  !
ToDebugString>>! .
(>>. /
)>>/ 0
;>>0 1
}@@ 	
publicBB 
staticBB 
stringBB 
ToDebugStringBB *
<BB* +
TParam1BB+ 2
>BB2 3
(BB3 4
thisBB4 8
ActionBB9 ?
<BB? @
TParam1BB@ G
>BBG H
actionBBI O
)BBO P
{CC 	
returnGG 
actionGG 
.GG 
MethodGG  
.GG  !
ToDebugStringGG! .
(GG. /
)GG/ 0
;GG0 1
}II 	
publicKK 
staticKK 
stringKK 
ToDebugStringKK *
<KK* +
TParam1KK+ 2
,KK2 3
TParam2KK4 ;
>KK; <
(KK< =
thisKK= A
ActionKKB H
<KKH I
TParam1KKI P
,KKP Q
TParam2KKR Y
>KKY Z
actionKK[ a
)KKa b
{LL 	
returnPP 
actionPP 
.PP 
MethodPP  
.PP  !
ToDebugStringPP! .
(PP. /
)PP/ 0
;PP0 1
}RR 	
publicTT 
staticTT 
stringTT 
ToDebugStringTT *
<TT* +
TParam1TT+ 2
,TT2 3
TParam2TT4 ;
,TT; <
TParam3TT= D
>TTD E
(TTE F
thisTTF J
ActionTTK Q
<TTQ R
TParam1TTR Y
,TTY Z
TParam2TT[ b
,TTb c
TParam3TTd k
>TTk l
actionTTm s
)TTs t
{UU 	
returnYY 
actionYY 
.YY 
MethodYY  
.YY  !
ToDebugStringYY! .
(YY. /
)YY/ 0
;YY0 1
}[[ 	
public]] 
static]] 
string]] 
ToDebugString]] *
<]]* +
TParam1]]+ 2
,]]2 3
TParam2]]4 ;
,]]; <
TParam3]]= D
,]]D E
TParam4]]F M
>]]M N
(]]N O
this]]O S
Action]]T Z
<]]Z [
TParam1]][ b
,]]b c
TParam2]]d k
,]]k l
TParam3]]m t
,]]t u
TParam4]]v }
>]]} ~
action	]] Ö
)
]]Ö Ü
{^^ 	
returnbb 
actionbb 
.bb 
Methodbb  
.bb  !
ToDebugStringbb! .
(bb. /
)bb/ 0
;bb0 1
}dd 	
publicff 
staticff 
stringff 
ToDebugStringff *
<ff* +
TParam1ff+ 2
,ff2 3
TParam2ff4 ;
,ff; <
TParam3ff= D
,ffD E
TParam4ffF M
,ffM N
TParam5ffO V
>ffV W
(ffW X
thisffX \
Actionhh 
<hh 
TParam1hh 
,hh 
TParam2hh #
,hh# $
TParam3hh% ,
,hh, -
TParam4hh. 5
,hh5 6
TParam5hh7 >
>hh> ?
actionhh@ F
)hhF G
{ll 	
returnpp 
actionpp 
.pp 
Methodpp  
.pp  !
ToDebugStringpp! .
(pp. /
)pp/ 0
;pp0 1
}rr 	
publictt 
statictt 
stringtt 
ToDebugStringtt *
<tt* +
TParam1tt+ 2
,tt2 3
TParam2tt4 ;
,tt; <
TParam3tt= D
,ttD E
TParam4ttF M
,ttM N
TParam5ttO V
,ttV W
TParam6ttX _
>tt_ `
(tt` a
thistta e
Actionvv 
<vv 
TParam1vv 
,vv 
TParam2vv #
,vv# $
TParam3vv% ,
,vv, -
TParam4vv. 5
,vv5 6
TParam5vv7 >
,vv> ?
TParam6vv@ G
>vvG H
actionvvI O
)vvO P
{zz 	
return~~ 
action~~ 
.~~ 
Method~~  
.~~  !
ToDebugString~~! .
(~~. /
)~~/ 0
;~~0 1
}
ÄÄ 	
public
ÇÇ 
static
ÇÇ 
string
ÇÇ 
ToDebugString
ÇÇ *
<
ÇÇ* +
TParam1
ÇÇ+ 2
>
ÇÇ2 3
(
ÇÇ3 4
this
ÇÇ4 8
Func
ÇÇ9 =
<
ÇÇ= >
TParam1
ÇÇ> E
>
ÇÇE F
func
ÇÇG K
)
ÇÇK L
{
ÉÉ 	
return
áá 
func
áá 
.
áá 
Method
áá 
.
áá 
ToDebugString
áá ,
(
áá, -
)
áá- .
;
áá. /
}
ââ 	
public
ãã 
static
ãã 
string
ãã 
ToDebugString
ãã *
<
ãã* +
TParam1
ãã+ 2
,
ãã2 3
TParam2
ãã4 ;
>
ãã; <
(
ãã< =
this
ãã= A
Func
ããB F
<
ããF G
TParam1
ããG N
,
ããN O
TParam2
ããP W
>
ããW X
func
ããY ]
)
ãã] ^
{
åå 	
return
êê 
func
êê 
.
êê 
Method
êê 
.
êê 
ToDebugString
êê ,
(
êê, -
)
êê- .
;
êê. /
}
íí 	
public
îî 
static
îî 
string
îî 
ToDebugString
îî *
<
îî* +
TParam1
îî+ 2
,
îî2 3
TParam2
îî4 ;
,
îî; <
TParam3
îî= D
>
îîD E
(
îîE F
this
îîF J
Func
îîK O
<
îîO P
TParam1
îîP W
,
îîW X
TParam2
îîY `
,
îî` a
TParam3
îîb i
>
îîi j
func
îîk o
)
îîo p
{
ïï 	
return
ôô 
func
ôô 
.
ôô 
Method
ôô 
.
ôô 
ToDebugString
ôô ,
(
ôô, -
)
ôô- .
;
ôô. /
}
õõ 	
public
ùù 
static
ùù 
string
ùù 
ToDebugString
ùù *
<
ùù* +
TParam1
ùù+ 2
,
ùù2 3
TParam2
ùù4 ;
,
ùù; <
TParam3
ùù= D
,
ùùD E
TParam4
ùùF M
>
ùùM N
(
ùùN O
this
ùùO S
Func
ùùT X
<
ùùX Y
TParam1
ùùY `
,
ùù` a
TParam2
ùùb i
,
ùùi j
TParam3
ùùk r
,
ùùr s
TParam4
ùùt {
>
ùù{ |
funcùù} Å
)ùùÅ Ç
{
ûû 	
return
¢¢ 
func
¢¢ 
.
¢¢ 
Method
¢¢ 
.
¢¢ 
ToDebugString
¢¢ ,
(
¢¢, -
)
¢¢- .
;
¢¢. /
}
§§ 	
}
•• 
}¶¶ Ã;
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder3.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
TParam3= D
,D E
	TContractF O
>O P
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
ActionE K
<K L
DiContainerL W
,W X
TParam1Y `
,` a
TParam2b i
,i j
TParam3k r
>r s
installerMethod	t É
)
É Ñ
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
,D E
TParam3F M
>M N
(N O
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H!
ByNewGameObjectMethodI ^
(^ _
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
,0 1
TParam32 9
>9 :
installerMethod; J
)J K
{ 	
var   
gameObjectInfo   
=    
new  ! $(
GameObjectCreationParameters  % A
(  A B
)  B C
;  C D
ProviderFunc"" 
="" 
(## 
	container## 
)## 
=>## 
new## "*
SubContainerDependencyProvider### A
(##A B
ContractType$$  
,$$  !
SubIdentifier$$" /
,$$/ 0
new%% 4
(SubContainerCreatorByNewGameObjectMethod%% @
<%%@ A
TParam1%%A H
,%%H I
TParam2%%J Q
,%%Q R
TParam3%%S Z
>%%Z [
(%%[ \
	container&& !
,&&! "
gameObjectInfo&&# 1
,&&1 2
installerMethod&&3 B
)&&B C
,&&C D
false&&E J
)&&J K
;&&K L
return(( 
new(( E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(( P
(((P Q
BindInfo((Q Y
,((Y Z
gameObjectInfo(([ i
)((i j
;((j k
})) 	
public++ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder++ H
ByNewPrefabMethod++I Z
(++Z [
UnityEngine,, 
.,, 
Object,, 
prefab,, %
,,,% &
Action,,' -
<,,- .
DiContainer,,. 9
,,,9 :
TParam1,,; B
,,,B C
TParam2,,D K
,,,K L
TParam3,,M T
>,,T U
installerMethod,,V e
),,e f
{-- 	
BindingUtil.. 
... 
AssertIsValidPrefab.. +
(..+ ,
prefab.., 2
)..2 3
;..3 4
var00 
gameObjectInfo00 
=00  
new00! $(
GameObjectCreationParameters00% A
(00A B
)00B C
;00C D
ProviderFunc22 
=22 
(33 
	container33 
)33 
=>33 
new33 "*
SubContainerDependencyProvider33# A
(33A B
ContractType44  
,44  !
SubIdentifier44" /
,44/ 0
new55 0
$SubContainerCreatorByNewPrefabMethod55 <
<55< =
TParam155= D
,55D E
TParam255F M
,55M N
TParam355O V
>55V W
(55W X
	container66 !
,66! "
new77 
PrefabProvider77 *
(77* +
prefab77+ 1
)771 2
,772 3
gameObjectInfo88 &
,88& '
installerMethod88( 7
)887 8
,888 9
false88: ?
)88? @
;88@ A
return:: 
new:: E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder:: P
(::P Q
BindInfo::Q Y
,::Y Z
gameObjectInfo::[ i
)::i j
;::j k
};; 	
public== E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder== H%
ByNewPrefabResourceMethod==I b
(==b c
string>> 
resourcePath>> 
,>>  
Action>>! '
<>>' (
DiContainer>>( 3
,>>3 4
TParam1>>5 <
,>>< =
TParam2>>> E
,>>E F
TParam3>>G N
>>>N O
installerMethod>>P _
)>>_ `
{?? 	
BindingUtil@@ 
.@@ %
AssertIsValidResourcePath@@ 1
(@@1 2
resourcePath@@2 >
)@@> ?
;@@? @
varBB 
gameObjectInfoBB 
=BB  
newBB! $(
GameObjectCreationParametersBB% A
(BBA B
)BBB C
;BBC D
ProviderFuncDD 
=DD 
(EE 
	containerEE 
)EE 
=>EE 
newEE "*
SubContainerDependencyProviderEE# A
(EEA B
ContractTypeFF  
,FF  !
SubIdentifierFF" /
,FF/ 0
newGG 0
$SubContainerCreatorByNewPrefabMethodGG <
<GG< =
TParam1GG= D
,GGD E
TParam2GGF M
,GGM N
TParam3GGO V
>GGV W
(GGW X
	containerHH !
,HH! "
newII "
PrefabProviderResourceII 2
(II2 3
resourcePathII3 ?
)II? @
,II@ A
gameObjectInfoJJ &
,JJ& '
installerMethodJJ( 7
)JJ7 8
,JJ8 9
falseJJ: ?
)JJ? @
;JJ@ A
returnLL 
newLL E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderLL P
(LLP Q
BindInfoLLQ Y
,LLY Z
gameObjectInfoLL[ i
)LLi j
;LLj k
}MM 	
}OO 
}PP ¶u
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder2.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
TParam2, 3
,3 4
	TContract5 >
>> ?
:@ A!
FactoryFromBinderBaseB W
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func5 9
<9 :
DiContainer: E
,E F
TParam1G N
,N O
TParam2P W
,W X
	TContractY b
>b c
methodd j
)j k
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
TParam2H O
,O P
	TContractQ Z
>Z [
([ \
method\ b
)b c
;c d
return 
this 
; 
} 	
public &
ConditionCopyNonLazyBinder )
FromFactory* 5
<5 6
TSubFactory6 A
>A B
(B C
)C D
where 
TSubFactory 
: 
IFactory  (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
	TContract; D
>D E
{ 	
return 
this 
. 
FromIFactory $
($ %
x% &
=>' )
x* +
.+ ,
To, .
<. /
TSubFactory/ :
>: ;
(; <
)< =
.= >
AsCached> F
(F G
)G H
)H I
;I J
}   	
public"" %
FactorySubContainerBinder"" (
<""( )
TParam1"") 0
,""0 1
TParam2""2 9
,""9 :
	TContract""; D
>""D E#
FromSubContainerResolve""F ]
(""] ^
)""^ _
{## 	
return$$ #
FromSubContainerResolve$$ *
($$* +
null$$+ /
)$$/ 0
;$$0 1
}%% 	
public'' %
FactorySubContainerBinder'' (
<''( )
TParam1'') 0
,''0 1
TParam2''2 9
,''9 :
	TContract''; D
>''D E#
FromSubContainerResolve''F ]
(''] ^
object''^ d
subIdentifier''e r
)''r s
{(( 	
return)) 
new)) %
FactorySubContainerBinder)) 0
<))0 1
TParam1))1 8
,))8 9
TParam2)): A
,))A B
	TContract))C L
>))L M
())M N
BindContainer** 
,** 
BindInfo** '
,**' (
FactoryBindInfo**) 8
,**8 9
subIdentifier**: G
)**G H
;**H I
}++ 	
},, 
public00 

static00 
class00 (
FactoryFromBinder2Extensions00 4
{11 
public22 
static22 )
ArgConditionCopyNonLazyBinder22 3
FromIFactory224 @
<22@ A
TParam122A H
,22H I
TParam222J Q
,22Q R
	TContract22S \
>22\ ]
(22] ^
this33 
FactoryFromBinder33 "
<33" #
TParam133# *
,33* +
TParam233, 3
,333 4
	TContract335 >
>33> ?

fromBinder33@ J
,33J K
Action44 
<44 !
ConcreteBinderGeneric44 (
<44( )
IFactory44) 1
<441 2
TParam1442 9
,449 :
TParam244; B
,44B C
	TContract44D M
>44M N
>44N O
>44O P 
factoryBindGenerator44Q e
)44e f
{55 	
Guid66 
	factoryId66 
;66  
factoryBindGenerator77  
(77  !

fromBinder88 
.88  
CreateIFactoryBinder88 /
<88/ 0
IFactory880 8
<888 9
TParam1889 @
,88@ A
TParam288B I
,88I J
	TContract88K T
>88T U
>88U V
(88V W
out88W Z
	factoryId88[ d
)88d e
)88e f
;88f g

fromBinder:: 
.:: 
ProviderFunc:: #
=::$ %
(;; 
	container;; 
);; 
=>;; 
{;;  
return;;! '
new;;( +
IFactoryProvider;;, <
<;;< =
TParam1;;= D
,;;D E
TParam2;;F M
,;;M N
	TContract;;O X
>;;X Y
(;;Y Z
	container;;Z c
,;;c d
	factoryId;;e n
);;n o
;;;o p
};;q r
;;;r s
return== 
new== )
ArgConditionCopyNonLazyBinder== 4
(==4 5

fromBinder==5 ?
.==? @
BindInfo==@ H
)==H I
;==I J
}>> 	
public@@ 
static@@ )
ArgConditionCopyNonLazyBinder@@ 3"
FromPoolableMemoryPool@@4 J
<@@J K
TParam1@@K R
,@@R S
TParam2@@T [
,@@[ \
	TContract@@] f
>@@f g
(@@g h
thisAA 
FactoryFromBinderAA "
<AA" #
TParam1AA# *
,AA* +
TParam2AA, 3
,AA3 4
	TContractAA5 >
>AA> ?

fromBinderAA@ J
)AAJ K
whereDD 
	TContractDD 
:DD 
	IPoolableDD '
<DD' (
TParam1DD( /
,DD/ 0
TParam2DD1 8
,DD8 9
IMemoryPoolDD: E
>DDE F
{EE 	
returnFF 

fromBinderFF 
.FF "
FromPoolableMemoryPoolFF 4
<FF4 5
TParam1FF5 <
,FF< =
TParam2FF> E
,FFE F
	TContractFFG P
>FFP Q
(FFQ R
xFFR S
=>FFT V
{FFW X
}FFX Y
)FFY Z
;FFZ [
}GG 	
publicII 
staticII )
ArgConditionCopyNonLazyBinderII 3"
FromPoolableMemoryPoolII4 J
<IIJ K
TParam1IIK R
,IIR S
TParam2IIT [
,II[ \
	TContractII] f
>IIf g
(IIg h
thisJJ 
FactoryFromBinderJJ "
<JJ" #
TParam1JJ# *
,JJ* +
TParam2JJ, 3
,JJ3 4
	TContractJJ5 >
>JJ> ?

fromBinderJJ@ J
,JJJ K
ActionKK 
<KK .
"MemoryPoolInitialSizeMaxSizeBinderKK 5
<KK5 6
	TContractKK6 ?
>KK? @
>KK@ A
poolBindGeneratorKKB S
)KKS T
whereNN 
	TContractNN 
:NN 
	IPoolableNN '
<NN' (
TParam1NN( /
,NN/ 0
TParam2NN1 8
,NN8 9
IMemoryPoolNN: E
>NNE F
{OO 	
returnPP 

fromBinderPP 
.PP "
FromPoolableMemoryPoolPP 4
<PP4 5
TParam1PP5 <
,PP< =
TParam2PP> E
,PPE F
	TContractPPG P
,PPP Q
PoolableMemoryPoolPPR d
<PPd e
TParam1PPe l
,PPl m
TParam2PPn u
,PPu v
IMemoryPool	PPw Ç
,
PPÇ É
	TContract
PPÑ ç
>
PPç é
>
PPé è
(
PPè ê
poolBindGenerator
PPê °
)
PP° ¢
;
PP¢ £
}QQ 	
publicTT 
staticTT )
ArgConditionCopyNonLazyBinderTT 3&
FromMonoPoolableMemoryPoolTT4 N
<TTN O
TParam1TTO V
,TTV W
TParam2TTX _
,TT_ `
	TContractTTa j
>TTj k
(TTk l
thisUU 
FactoryFromBinderUU "
<UU" #
TParam1UU# *
,UU* +
TParam2UU, 3
,UU3 4
	TContractUU5 >
>UU> ?

fromBinderUU@ J
)UUJ K
whereXX 
	TContractXX 
:XX 
	ComponentXX '
,XX' (
	IPoolableXX) 2
<XX2 3
TParam1XX3 :
,XX: ;
TParam2XX< C
,XXC D
IMemoryPoolXXE P
>XXP Q
{YY 	
returnZZ 

fromBinderZZ 
.ZZ &
FromMonoPoolableMemoryPoolZZ 8
<ZZ8 9
TParam1ZZ9 @
,ZZ@ A
TParam2ZZB I
,ZZI J
	TContractZZK T
>ZZT U
(ZZU V
xZZV W
=>ZZX Z
{ZZ[ \
}ZZ\ ]
)ZZ] ^
;ZZ^ _
}[[ 	
public]] 
static]] )
ArgConditionCopyNonLazyBinder]] 3&
FromMonoPoolableMemoryPool]]4 N
<]]N O
TParam1]]O V
,]]V W
TParam2]]X _
,]]_ `
	TContract]]a j
>]]j k
(]]k l
this^^ 
FactoryFromBinder^^ "
<^^" #
TParam1^^# *
,^^* +
TParam2^^, 3
,^^3 4
	TContract^^5 >
>^^> ?

fromBinder^^@ J
,^^J K
Action__ 
<__ .
"MemoryPoolInitialSizeMaxSizeBinder__ 5
<__5 6
	TContract__6 ?
>__? @
>__@ A
poolBindGenerator__B S
)__S T
wherebb 
	TContractbb 
:bb 
	Componentbb '
,bb' (
	IPoolablebb) 2
<bb2 3
TParam1bb3 :
,bb: ;
TParam2bb< C
,bbC D
IMemoryPoolbbE P
>bbP Q
{cc 	
returndd 

fromBinderdd 
.dd "
FromPoolableMemoryPooldd 4
<dd4 5
TParam1dd5 <
,dd< =
TParam2dd> E
,ddE F
	TContractddG P
,ddP Q"
MonoPoolableMemoryPoolddR h
<ddh i
TParam1ddi p
,ddp q
TParam2ddr y
,ddy z
IMemoryPool	dd{ Ü
,
ddÜ á
	TContract
ddà ë
>
ddë í
>
ddí ì
(
ddì î
poolBindGenerator
ddî •
)
dd• ¶
;
dd¶ ß
}ee 	
publichh 
statichh )
ArgConditionCopyNonLazyBinderhh 3"
FromPoolableMemoryPoolhh4 J
<hhJ K
TParam1hhK R
,hhR S
TParam2hhT [
,hh[ \
	TContracthh] f
,hhf g
TMemoryPoolhhh s
>hhs t
(hht u
thisii 
FactoryFromBinderii "
<ii" #
TParam1ii# *
,ii* +
TParam2ii, 3
,ii3 4
	TContractii5 >
>ii> ?

fromBinderii@ J
)iiJ K
wherell 
	TContractll 
:ll 
	IPoolablell '
<ll' (
TParam1ll( /
,ll/ 0
TParam2ll1 8
,ll8 9
IMemoryPoolll: E
>llE F
wheremm 
TMemoryPoolmm 
:mm 

MemoryPoolmm  *
<mm* +
TParam1mm+ 2
,mm2 3
TParam2mm4 ;
,mm; <
IMemoryPoolmm= H
,mmH I
	TContractmmJ S
>mmS T
{nn 	
returnoo 

fromBinderoo 
.oo "
FromPoolableMemoryPooloo 4
<oo4 5
TParam1oo5 <
,oo< =
TParam2oo> E
,ooE F
	TContractooG P
,ooP Q
TMemoryPoolooR ]
>oo] ^
(oo^ _
xoo_ `
=>ooa c
{ood e
}ooe f
)oof g
;oog h
}pp 	
publicrr 
staticrr )
ArgConditionCopyNonLazyBinderrr 3"
FromPoolableMemoryPoolrr4 J
<rrJ K
TParam1rrK R
,rrR S
TParam2rrT [
,rr[ \
	TContractrr] f
,rrf g
TMemoryPoolrrh s
>rrs t
(rrt u
thisss 
FactoryFromBinderss "
<ss" #
TParam1ss# *
,ss* +
TParam2ss, 3
,ss3 4
	TContractss5 >
>ss> ?

fromBinderss@ J
,ssJ K
Actiontt 
<tt .
"MemoryPoolInitialSizeMaxSizeBindertt 5
<tt5 6
	TContracttt6 ?
>tt? @
>tt@ A
poolBindGeneratorttB S
)ttS T
whereww 
	TContractww 
:ww 
	IPoolableww '
<ww' (
TParam1ww( /
,ww/ 0
TParam2ww1 8
,ww8 9
IMemoryPoolww: E
>wwE F
wherexx 
TMemoryPoolxx 
:xx 

MemoryPoolxx  *
<xx* +
TParam1xx+ 2
,xx2 3
TParam2xx4 ;
,xx; <
IMemoryPoolxx= H
,xxH I
	TContractxxJ S
>xxS T
{yy 	
var|| 
poolId|| 
=|| 
Guid|| 
.|| 
NewGuid|| %
(||% &
)||& '
;||' (
var 
binder 
= 

fromBinder #
.# $
BindContainer$ 1
.1 20
$BindMemoryPoolCustomInterfaceNoFlush2 V
<V W
	TContractW `
,` a
TMemoryPoolb m
,m n
TMemoryPoolo z
>z {
({ |
)| }
.
ÄÄ 
WithId
ÄÄ 
(
ÄÄ 
poolId
ÄÄ 
)
ÄÄ 
;
ÄÄ  
binder
ÉÉ 
.
ÉÉ 
NonLazy
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
poolBindGenerator
ÖÖ 
(
ÖÖ 
binder
ÖÖ $
)
ÖÖ$ %
;
ÖÖ% &

fromBinder
áá 
.
áá 
ProviderFunc
áá #
=
áá$ %
(
àà 
	container
àà 
)
àà 
=>
àà 
{
àà  
return
àà! '
new
àà( +(
PoolableMemoryPoolProvider
àà, F
<
ààF G
TParam1
ààG N
,
ààN O
TParam2
ààP W
,
ààW X
	TContract
ààY b
,
ààb c
TMemoryPool
ààd o
>
àào p
(
ààp q
	container
ààq z
,
ààz {
poolIdàà| Ç
)ààÇ É
;ààÉ Ñ
}ààÖ Ü
;ààÜ á
return
ää 
new
ää +
ArgConditionCopyNonLazyBinder
ää 4
(
ää4 5

fromBinder
ää5 ?
.
ää? @
BindInfo
ää@ H
)
ääH I
;
ääI J
}
ãã 	
}
åå 
}çç ˛O
eC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\GameObjectContext.cs
	namespace 	
Zenject
 
{ 
public 

class 
GameObjectContext "
:# $
RunnableContext% 4
{ 
public 
event 
Action 

PreInstall &
;& '
public 
event 
Action 
PostInstall '
;' (
public 
event 
Action 

PreResolve &
;& '
public 
event 
Action 
PostResolve '
;' (
[ 	
SerializeField	 
] 
[ 	
Tooltip	 
( 
$str	 Í
)
Í Î
]
Î Ï
[ 	 
FormerlySerializedAs	 
( 
$str '
)' (
]( )

MonoKernel 
_kernel 
; 
DiContainer 

_container 
; 
public 
override 
DiContainer #
	Container$ -
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
public!! 
override!! 
IEnumerable!! #
<!!# $

GameObject!!$ .
>!!. /
GetRootGameObjects!!0 B
(!!B C
)!!C D
{"" 	
return## 
new## 
[## 
]## 
{## 

gameObject## %
}##& '
;##' (
}$$ 	
[&& 	
Inject&&	 
]&& 
public'' 
void'' 
	Construct'' 
('' 
DiContainer(( 
parentContainer(( '
)((' (
{)) 	
Assert** 
.** 
IsNull** 
(** 

_container** $
)**$ %
;**% &

_container,, 
=,, 
parentContainer,, (
.,,( )
CreateSubContainer,,) ;
(,,; <
),,< =
;,,= >

Initialize.. 
(.. 
).. 
;.. 
}// 	
	protected11 
override11 
void11 
RunInternal11  +
(11+ ,
)11, -
{22 	
if44 
(44 

PreInstall44 
!=44 
null44 "
)44" #
{55 

PreInstall66 
(66 
)66 
;66 
}77 
var99 $
injectableMonoBehaviours99 (
=99) *
new99+ .
List99/ 3
<993 4
MonoBehaviour994 A
>99A B
(99B C
)99C D
;99D E'
GetInjectableMonoBehaviours;; '
(;;' ($
injectableMonoBehaviours;;( @
);;@ A
;;;A B
foreach== 
(== 
var== 
instance== !
in==" $$
injectableMonoBehaviours==% =
)=== >
{>> 
if?? 
(?? 
instance?? 
is?? 

MonoKernel??  *
)??* +
{@@ 
AssertAA 
.AA 
ThatAA 
(AA  
ReferenceEqualsAA  /
(AA/ 0
instanceAA0 8
,AA8 9
_kernelAA: A
)AAA B
,AAB C
$str	BB È
)
BBÈ Í
;
BBÍ Î
}CC 

_containerEE 
.EE 
QueueForInjectEE )
(EE) *
instanceEE* 2
)EE2 3
;EE3 4
}FF 

_containerHH 
.HH 
IsInstallingHH #
=HH$ %
trueHH& *
;HH* +
tryJJ 
{KK 
InstallBindingsLL 
(LL  $
injectableMonoBehavioursLL  8
)LL8 9
;LL9 :
}MM 
finallyNN 
{OO 

_containerPP 
.PP 
IsInstallingPP '
=PP( )
falsePP* /
;PP/ 0
}QQ 
ifSS 
(SS 
PostInstallSS 
!=SS 
nullSS #
)SS# $
{TT 
PostInstallUU 
(UU 
)UU 
;UU 
}VV 
ifXX 
(XX 

PreResolveXX 
!=XX 
nullXX "
)XX" #
{YY 

PreResolveZZ 
(ZZ 
)ZZ 
;ZZ 
}[[ 

_container]] 
.]] 
ResolveRoots]] #
(]]# $
)]]$ %
;]]% &
if__ 
(__ 
PostResolve__ 
!=__ 
null__ #
)__# $
{`` 
PostResolveaa 
(aa 
)aa 
;aa 
}bb 
ifnn 
(nn 

gameObjectnn 
.nn 
scenenn  
.nn  !
isLoadednn! )
&&nn* ,
!nn- .

_containernn. 8
.nn8 9
IsValidatingnn9 E
)nnE F
{oo 
_kernelpp 
=pp 

_containerpp $
.pp$ %
Resolvepp% ,
<pp, -

MonoKernelpp- 7
>pp7 8
(pp8 9
)pp9 :
;pp: ;
_kernelqq 
.qq 

Initializeqq "
(qq" #
)qq# $
;qq$ %
}rr 
}ss 	
	protecteduu 
overrideuu 
voiduu '
GetInjectableMonoBehavioursuu  ;
(uu; <
Listuu< @
<uu@ A
MonoBehaviouruuA N
>uuN O
monoBehavioursuuP ^
)uu^ _
{vv 	
ZenUtilInternalww 
.ww @
4AddStateMachineBehaviourAutoInjectersUnderGameObjectww P
(wwP Q

gameObjectwwQ [
)ww[ \
;ww\ ]
foreachzz 
(zz 
varzz 
monoBehaviourzz &
inzz' )
GetComponentszz* 7
<zz7 8
MonoBehaviourzz8 E
>zzE F
(zzF G
)zzG H
)zzH I
{{{ 
if|| 
(|| 
monoBehaviour|| !
==||" $
null||% )
)||) *
{}} 
continue 
; 
}
ÄÄ 
if
ÇÇ 
(
ÇÇ 
!
ÇÇ 
ZenUtilInternal
ÇÇ $
.
ÇÇ$ %+
IsInjectableMonoBehaviourType
ÇÇ% B
(
ÇÇB C
monoBehaviour
ÇÇC P
.
ÇÇP Q
GetType
ÇÇQ X
(
ÇÇX Y
)
ÇÇY Z
)
ÇÇZ [
)
ÇÇ[ \
{
ÉÉ 
continue
ÑÑ 
;
ÑÑ 
}
ÖÖ 
if
áá 
(
áá 
monoBehaviour
áá !
==
áá" $
this
áá% )
)
áá) *
{
àà 
continue
ââ 
;
ââ 
}
ää 
monoBehaviours
åå 
.
åå 
Add
åå "
(
åå" #
monoBehaviour
åå# 0
)
åå0 1
;
åå1 2
}
çç 
for
èè 
(
èè 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
i
èè 
<
èè 
	transform
èè  )
.
èè) *

childCount
èè* 4
;
èè4 5
i
èè6 7
++
èè7 9
)
èè9 :
{
êê 
var
ëë 
child
ëë 
=
ëë 
	transform
ëë %
.
ëë% &
GetChild
ëë& .
(
ëë. /
i
ëë/ 0
)
ëë0 1
;
ëë1 2
if
ìì 
(
ìì 
child
ìì 
!=
ìì 
null
ìì !
)
ìì! "
{
îî 
ZenUtilInternal
ïï #
.
ïï# $8
*GetInjectableMonoBehavioursUnderGameObject
ïï$ N
(
ïïN O
child
ññ 
.
ññ 

gameObject
ññ (
,
ññ( )
monoBehaviours
ññ* 8
)
ññ8 9
;
ññ9 :
}
óó 
}
òò 
}
ôô 	
void
õõ 
InstallBindings
õõ 
(
õõ 
List
õõ !
<
õõ! "
MonoBehaviour
õõ" /
>
õõ/ 0&
injectableMonoBehaviours
õõ1 I
)
õõI J
{
úú 	

_container
ùù 
.
ùù 
DefaultParent
ùù $
=
ùù% &
	transform
ùù' 0
;
ùù0 1

_container
üü 
.
üü 
Bind
üü 
<
üü 
Context
üü #
>
üü# $
(
üü$ %
)
üü% &
.
üü& '
FromInstance
üü' 3
(
üü3 4
this
üü4 8
)
üü8 9
;
üü9 :

_container
†† 
.
†† 
Bind
†† 
<
†† 
GameObjectContext
†† -
>
††- .
(
††. /
)
††/ 0
.
††0 1
FromInstance
††1 =
(
††= >
this
††> B
)
††B C
;
††C D
if
¢¢ 
(
¢¢ 
_kernel
¢¢ 
==
¢¢ 
null
¢¢ 
)
¢¢  
{
££ 

_container
§§ 
.
§§ 
Bind
§§ 
<
§§  

MonoKernel
§§  *
>
§§* +
(
§§+ ,
)
§§, -
.
•• 
To
•• 
<
•• %
DefaultGameObjectKernel
•• /
>
••/ 0
(
••0 1
)
••1 2
.
••2 3 
FromNewComponentOn
••3 E
(
••E F

gameObject
••F P
)
••P Q
.
••Q R
AsSingle
••R Z
(
••Z [
)
••[ \
.
••\ ]
NonLazy
••] d
(
••d e
)
••e f
;
••f g
}
¶¶ 
else
ßß 
{
®® 

_container
©© 
.
©© 
Bind
©© 
<
©©  

MonoKernel
©©  *
>
©©* +
(
©©+ ,
)
©©, -
.
©©- .
FromInstance
©©. :
(
©©: ;
_kernel
©©; B
)
©©B C
.
©©C D
AsSingle
©©D L
(
©©L M
)
©©M N
.
©©N O
NonLazy
©©O V
(
©©V W
)
©©W X
;
©©X Y
}
™™ "
InstallSceneBindings
¨¨  
(
¨¨  !&
injectableMonoBehaviours
¨¨! 9
)
¨¨9 :
;
¨¨: ;
InstallInstallers
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠  
}
ÆÆ 	
}
ØØ 
}∞∞ É1
mC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ScriptableObjectInstanceProvider.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class ,
 ScriptableObjectInstanceProvider 1
:2 3
	IProvider4 =
{ 
readonly 
DiContainer 

_container '
;' (
readonly 
Type 
_resourceType #
;# $
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly 
bool 

_createNew  
;  !
readonly 
object 
_concreteIdentifier +
;+ ,
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
readonly 
UnityEngine 
. 
Object #
	_resource$ -
;- .
public ,
 ScriptableObjectInstanceProvider /
(/ 0
UnityEngine 
. 
Object 
resource '
,' (
Type) -
resourceType. :
,: ;
DiContainer 
	container !
,! "
IEnumerable# .
<. /
TypeValuePair/ <
>< =
extraArguments> L
,L M
bool 
	createNew 
, 
object "
concreteIdentifier# 5
,5 6
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	

_container 
= 
	container "
;" #
Assert 
. 
DerivesFromOrEqual %
<% &
ScriptableObject& 6
>6 7
(7 8
resourceType8 D
)D E
;E F
	_resource   
=   
resource    
;    !
_extraArguments!! 
=!! 
extraArguments!! ,
.!!, -
ToList!!- 3
(!!3 4
)!!4 5
;!!5 6
_resourceType"" 
="" 
resourceType"" (
;""( )

_createNew## 
=## 
	createNew## "
;##" #
_concreteIdentifier$$ 
=$$  !
concreteIdentifier$$" 4
;$$4 5 
_instantiateCallback%%  
=%%! "
instantiateCallback%%# 6
;%%6 7
}&& 	
public(( 
bool(( 
IsCached(( 
{)) 	
get** 
{** 
return** 
false** 
;** 
}**  !
}++ 	
public-- 
bool-- '
TypeVariesBasedOnMemberType-- /
{.. 	
get// 
{// 
return// 
false// 
;// 
}//  !
}00 	
public22 
Type22 
GetInstanceType22 #
(22# $
InjectContext22$ 1
context222 9
)229 :
{33 	
return44 
_resourceType44  
;44  !
}55 	
public77 
void77 *
GetAllInstancesWithInjectSplit77 2
(772 3
InjectContext88 
context88 !
,88! "
List88# '
<88' (
TypeValuePair88( 5
>885 6
args887 ;
,88; <
out88= @
Action88A G
injectAction88H T
,88T U
List88V Z
<88Z [
object88[ a
>88a b
buffer88c i
)88i j
{99 	
Assert:: 
.:: 
	IsNotNull:: 
(:: 
context:: $
)::$ %
;::% &
if<< 
(<< 

_createNew<< 
)<< 
{== 
buffer>> 
.>> 
Add>> 
(>> 
UnityEngine>> &
.>>& '
ScriptableObject>>' 7
.>>7 8
Instantiate>>8 C
(>>C D
	_resource>>D M
)>>M N
)>>N O
;>>O P
}?? 
else@@ 
{AA 
bufferBB 
.BB 
AddBB 
(BB 
	_resourceBB $
)BB$ %
;BB% &
}CC 
injectActionEE 
=EE 
(EE 
)EE 
=>EE  
{FF 
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG 
;GG 
iGG  !
<GG" #
bufferGG$ *
.GG* +
CountGG+ 0
;GG0 1
iGG2 3
++GG3 5
)GG5 6
{HH 
varII 
objII 
=II 
bufferII $
[II$ %
iII% &
]II& '
;II' (
varKK 
	extraArgsKK !
=KK" #
ZenPoolsKK$ ,
.KK, -
	SpawnListKK- 6
<KK6 7
TypeValuePairKK7 D
>KKD E
(KKE F
)KKF G
;KKG H
	extraArgsMM 
.MM 
AllocFreeAddRangeMM /
(MM/ 0
_extraArgumentsMM0 ?
)MM? @
;MM@ A
	extraArgsNN 
.NN 
AllocFreeAddRangeNN /
(NN/ 0
argsNN0 4
)NN4 5
;NN5 6

_containerPP 
.PP 
InjectExplicitPP -
(PP- .
objQQ 
,QQ 
_resourceTypeQQ *
,QQ* +
	extraArgsQQ, 5
,QQ5 6
contextQQ7 >
,QQ> ?
_concreteIdentifierQQ@ S
)QQS T
;QQT U
ZenPoolsSS 
.SS 
DespawnListSS (
(SS( )
	extraArgsSS) 2
)SS2 3
;SS3 4
ifUU 
(UU  
_instantiateCallbackUU ,
!=UU- /
nullUU0 4
)UU4 5
{VV  
_instantiateCallbackWW ,
(WW, -
contextWW- 4
,WW4 5
objWW6 9
)WW9 :
;WW: ;
}XX 
}YY 
}ZZ 
;ZZ 
}[[ 	
}\\ 
}]] ¿è
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenjectSceneLoader.cs
	namespace 	
Zenject
 
{		 
public

 

enum

 !
LoadSceneRelationship

 %
{ 
None 
, 
Child 
, 
Sibling 
} 
public 

class 
ZenjectSceneLoader #
{ 
readonly 
ProjectKernel 
_projectKernel -
;- .
readonly 
DiContainer 
_sceneContainer ,
;, -
public 
ZenjectSceneLoader !
(! "
[ 
InjectOptional 
] 
SceneContext 
	sceneRoot "
," #
ProjectKernel 
projectKernel '
)' (
{   	
_projectKernel!! 
=!! 
projectKernel!! *
;!!* +
_sceneContainer"" 
="" 
	sceneRoot"" '
==""( *
null""+ /
?""0 1
null""2 6
:""7 8
	sceneRoot""9 B
.""B C
	Container""C L
;""L M
}## 	
public%% 
void%% 
	LoadScene%% 
(%% 
string%% $
	sceneName%%% .
)%%. /
{&& 	
	LoadScene'' 
('' 
	sceneName'' 
,''  
LoadSceneMode''! .
.''. /
Single''/ 5
)''5 6
;''6 7
}(( 	
public** 
void** 
	LoadScene** 
(** 
string** $
	sceneName**% .
,**. /
LoadSceneMode**0 =
loadMode**> F
)**F G
{++ 	
	LoadScene,, 
(,, 
	sceneName,, 
,,,  
loadMode,,! )
,,,) *
null,,+ /
),,/ 0
;,,0 1
}-- 	
public// 
void// 
	LoadScene// 
(// 
string00 
	sceneName00 
,00 
LoadSceneMode00 +
loadMode00, 4
,004 5
Action006 <
<00< =
DiContainer00= H
>00H I
extraBindings00J W
)00W X
{11 	
	LoadScene22 
(22 
	sceneName22 
,22  
loadMode22! )
,22) *
extraBindings22+ 8
,228 9!
LoadSceneRelationship22: O
.22O P
None22P T
)22T U
;22U V
}33 	
public55 
void55 
	LoadScene55 
(55 
string66 
	sceneName66 
,66 
LoadSceneMode77 
loadMode77 "
,77" #
Action88 
<88 
DiContainer88 
>88 
extraBindings88  -
,88- .!
LoadSceneRelationship99 !
containerMode99" /
)99/ 0
{:: 	
	LoadScene;; 
(;; 
	sceneName;; 
,;;  
loadMode;;! )
,;;) *
extraBindings;;+ 8
,;;8 9
containerMode;;: G
,;;G H
null;;I M
);;M N
;;;N O
}<< 	
public>> 
void>> 
	LoadScene>> 
(>> 
string?? 
	sceneName?? 
,?? 
LoadSceneMode@@ 
loadMode@@ "
,@@" #
ActionAA 
<AA 
DiContainerAA 
>AA 
extraBindingsAA  -
,AA- .!
LoadSceneRelationshipBB !
containerModeBB" /
,BB/ 0
ActionCC 
<CC 
DiContainerCC 
>CC 
extraBindingsLateCC  1
)CC1 2
{DD 	
PrepareForLoadSceneEE 
(EE  
loadModeEE  (
,EE( )
extraBindingsEE* 7
,EE7 8
extraBindingsLateEE9 J
,EEJ K
containerModeEEL Y
)EEY Z
;EEZ [
AssertGG 
.GG 
ThatGG 
(GG 
ApplicationGG #
.GG# $$
CanStreamedLevelBeLoadedGG$ <
(GG< =
	sceneNameGG= F
)GGF G
,GGG H
$strHH ,
,HH, -
	sceneNameHH. 7
)HH7 8
;HH8 9
SceneManagerJJ 
.JJ 
	LoadSceneJJ "
(JJ" #
	sceneNameJJ# ,
,JJ, -
loadModeJJ. 6
)JJ6 7
;JJ7 8
}OO 	
publicQQ 
AsyncOperationQQ 
LoadSceneAsyncQQ ,
(QQ, -
stringQQ- 3
	sceneNameQQ4 =
)QQ= >
{RR 	
returnSS 
LoadSceneAsyncSS !
(SS! "
	sceneNameSS" +
,SS+ ,
LoadSceneModeSS- :
.SS: ;
SingleSS; A
)SSA B
;SSB C
}TT 	
publicVV 
AsyncOperationVV 
LoadSceneAsyncVV ,
(VV, -
stringVV- 3
	sceneNameVV4 =
,VV= >
LoadSceneModeVV? L
loadModeVVM U
)VVU V
{WW 	
returnXX 
LoadSceneAsyncXX !
(XX! "
	sceneNameXX" +
,XX+ ,
loadModeXX- 5
,XX5 6
nullXX7 ;
)XX; <
;XX< =
}YY 	
public[[ 
AsyncOperation[[ 
LoadSceneAsync[[ ,
([[, -
string\\ 
	sceneName\\ 
,\\ 
LoadSceneMode\\ +
loadMode\\, 4
,\\4 5
Action\\6 <
<\\< =
DiContainer\\= H
>\\H I
extraBindings\\J W
)\\W X
{]] 	
return^^ 
LoadSceneAsync^^ !
(^^! "
	sceneName^^" +
,^^+ ,
loadMode^^- 5
,^^5 6
extraBindings^^7 D
,^^D E!
LoadSceneRelationship^^F [
.^^[ \
None^^\ `
)^^` a
;^^a b
}__ 	
publicaa 
AsyncOperationaa 
LoadSceneAsyncaa ,
(aa, -
stringbb 
	sceneNamebb 
,bb 
LoadSceneModecc 
loadModecc "
,cc" #
Actiondd 
<dd 
DiContainerdd 
>dd 
extraBindingsdd  -
,dd- .!
LoadSceneRelationshipee !
containerModeee" /
)ee/ 0
{ff 	
returngg 
LoadSceneAsyncgg !
(gg! "
	sceneNamehh 
,hh 
loadModehh #
,hh# $
extraBindingshh% 2
,hh2 3
containerModehh4 A
,hhA B
nullhhC G
)hhG H
;hhH I
}ii 	
publickk 
AsyncOperationkk 
LoadSceneAsynckk ,
(kk, -
stringll 
	sceneNamell 
,ll 
LoadSceneModemm 
loadModemm "
,mm" #
Actionnn 
<nn 
DiContainernn 
>nn 
extraBindingsnn  -
,nn- .!
LoadSceneRelationshipoo !
containerModeoo" /
,oo/ 0
Actionpp 
<pp 
DiContainerpp 
>pp 
extraBindingsLatepp  1
)pp1 2
{qq 	
PrepareForLoadScenerr 
(rr  
loadModerr  (
,rr( )
extraBindingsrr* 7
,rr7 8
extraBindingsLaterr9 J
,rrJ K
containerModerrL Y
)rrY Z
;rrZ [
Asserttt 
.tt 
Thattt 
(tt 
Applicationtt #
.tt# $$
CanStreamedLevelBeLoadedtt$ <
(tt< =
	sceneNamett= F
)ttF G
,ttG H
$struu ,
,uu, -
	sceneNameuu. 7
)uu7 8
;uu8 9
returnww 
SceneManagerww 
.ww  
LoadSceneAsyncww  .
(ww. /
	sceneNameww/ 8
,ww8 9
loadModeww: B
)wwB C
;wwC D
}xx 	
voidzz 
PrepareForLoadScenezz  
(zz  !
LoadSceneMode{{ 
loadMode{{ "
,{{" #
Action|| 
<|| 
DiContainer|| 
>|| 
extraBindings||  -
,||- .
Action}} 
<}} 
DiContainer}} 
>}} 
extraBindingsLate}}  1
,}}1 2!
LoadSceneRelationship~~ !
containerMode~~" /
)~~/ 0
{ 	
if
ÄÄ 
(
ÄÄ 
loadMode
ÄÄ 
==
ÄÄ 
LoadSceneMode
ÄÄ )
.
ÄÄ) *
Single
ÄÄ* 0
)
ÄÄ0 1
{
ÅÅ 
Assert
ÇÇ 
.
ÇÇ 
IsEqual
ÇÇ 
(
ÇÇ 
containerMode
ÇÇ ,
,
ÇÇ, -#
LoadSceneRelationship
ÇÇ. C
.
ÇÇC D
None
ÇÇD H
)
ÇÇH I
;
ÇÇI J
_projectKernel
àà 
.
àà "
ForceUnloadAllScenes
àà 3
(
àà3 4
)
àà4 5
;
àà5 6
}
ââ 
if
ãã 
(
ãã 
containerMode
ãã 
==
ãã  #
LoadSceneRelationship
ãã! 6
.
ãã6 7
None
ãã7 ;
)
ãã; <
{
åå 
SceneContext
çç 
.
çç 
ParentContainers
çç -
=
çç. /
null
çç0 4
;
çç4 5
}
éé 
else
èè 
if
èè 
(
èè 
containerMode
èè "
==
èè# %#
LoadSceneRelationship
èè& ;
.
èè; <
Child
èè< A
)
èèA B
{
êê 
if
ëë 
(
ëë 
_sceneContainer
ëë #
==
ëë$ &
null
ëë' +
)
ëë+ ,
{
íí 
SceneContext
ìì  
.
ìì  !
ParentContainers
ìì! 1
=
ìì2 3
null
ìì4 8
;
ìì8 9
}
îî 
else
ïï 
{
ññ 
SceneContext
óó  
.
óó  !
ParentContainers
óó! 1
=
óó2 3
new
óó4 7
[
óó7 8
]
óó8 9
{
óó: ;
_sceneContainer
óó< K
}
óóL M
;
óóM N
}
òò 
}
ôô 
else
öö 
{
õõ 
Assert
úú 
.
úú 
	IsNotNull
úú  
(
úú  !
_sceneContainer
úú! 0
,
úú0 1
$str
ùù f
)
ùùf g
;
ùùg h
Assert
ûû 
.
ûû 
IsEqual
ûû 
(
ûû 
containerMode
ûû ,
,
ûû, -#
LoadSceneRelationship
ûû. C
.
ûûC D
Sibling
ûûD K
)
ûûK L
;
ûûL M
SceneContext
üü 
.
üü 
ParentContainers
üü -
=
üü. /
_sceneContainer
üü0 ?
.
üü? @
ParentContainers
üü@ P
;
üüP Q
}
†† 
SceneContext
¢¢ 
.
¢¢ (
ExtraBindingsInstallMethod
¢¢ 3
=
¢¢4 5
extraBindings
¢¢6 C
;
¢¢C D
SceneContext
££ 
.
££ ,
ExtraBindingsLateInstallMethod
££ 7
=
££8 9
extraBindingsLate
££: K
;
££K L
}
§§ 	
public
¶¶ 
void
¶¶ 
	LoadScene
¶¶ 
(
¶¶ 
int
¶¶ !

sceneIndex
¶¶" ,
)
¶¶, -
{
ßß 	
	LoadScene
®® 
(
®® 

sceneIndex
®®  
,
®®  !
LoadSceneMode
®®" /
.
®®/ 0
Single
®®0 6
)
®®6 7
;
®®7 8
}
©© 	
public
´´ 
void
´´ 
	LoadScene
´´ 
(
´´ 
int
´´ !

sceneIndex
´´" ,
,
´´, -
LoadSceneMode
´´. ;
loadMode
´´< D
)
´´D E
{
¨¨ 	
	LoadScene
≠≠ 
(
≠≠ 

sceneIndex
≠≠  
,
≠≠  !
loadMode
≠≠" *
,
≠≠* +
null
≠≠, 0
)
≠≠0 1
;
≠≠1 2
}
ÆÆ 	
public
∞∞ 
void
∞∞ 
	LoadScene
∞∞ 
(
∞∞ 
int
±± 

sceneIndex
±± 
,
±± 
LoadSceneMode
±± )
loadMode
±±* 2
,
±±2 3
Action
±±4 :
<
±±: ;
DiContainer
±±; F
>
±±F G
extraBindings
±±H U
)
±±U V
{
≤≤ 	
	LoadScene
≥≥ 
(
≥≥ 

sceneIndex
≥≥  
,
≥≥  !
loadMode
≥≥" *
,
≥≥* +
extraBindings
≥≥, 9
,
≥≥9 :#
LoadSceneRelationship
≥≥; P
.
≥≥P Q
None
≥≥Q U
)
≥≥U V
;
≥≥V W
}
¥¥ 	
public
∂∂ 
void
∂∂ 
	LoadScene
∂∂ 
(
∂∂ 
int
∑∑ 

sceneIndex
∑∑ 
,
∑∑ 
LoadSceneMode
∏∏ 
loadMode
∏∏ "
,
∏∏" #
Action
ππ 
<
ππ 
DiContainer
ππ 
>
ππ 
extraBindings
ππ  -
,
ππ- .#
LoadSceneRelationship
∫∫ !
containerMode
∫∫" /
)
∫∫/ 0
{
ªª 	
	LoadScene
ºº 
(
ºº 

sceneIndex
ºº  
,
ºº  !
loadMode
ºº" *
,
ºº* +
extraBindings
ºº, 9
,
ºº9 :
containerMode
ºº; H
,
ººH I
null
ººJ N
)
ººN O
;
ººO P
}
ΩΩ 	
public
øø 
void
øø 
	LoadScene
øø 
(
øø 
int
¿¿ 

sceneIndex
¿¿ 
,
¿¿ 
LoadSceneMode
¡¡ 
loadMode
¡¡ "
,
¡¡" #
Action
¬¬ 
<
¬¬ 
DiContainer
¬¬ 
>
¬¬ 
extraBindings
¬¬  -
,
¬¬- .#
LoadSceneRelationship
√√ !
containerMode
√√" /
,
√√/ 0
Action
ƒƒ 
<
ƒƒ 
DiContainer
ƒƒ 
>
ƒƒ 
extraBindingsLate
ƒƒ  1
)
ƒƒ1 2
{
≈≈ 	!
PrepareForLoadScene
∆∆ 
(
∆∆  
loadMode
∆∆  (
,
∆∆( )
extraBindings
∆∆* 7
,
∆∆7 8
extraBindingsLate
∆∆9 J
,
∆∆J K
containerMode
∆∆L Y
)
∆∆Y Z
;
∆∆Z [
Assert
»» 
.
»» 
That
»» 
(
»» 
Application
»» #
.
»»# $&
CanStreamedLevelBeLoaded
»»$ <
(
»»< =

sceneIndex
»»= G
)
»»G H
,
»»H I
$str
…… ,
,
……, -

sceneIndex
……. 8
)
……8 9
;
……9 :
SceneManager
ÀÀ 
.
ÀÀ 
	LoadScene
ÀÀ "
(
ÀÀ" #

sceneIndex
ÀÀ# -
,
ÀÀ- .
loadMode
ÀÀ/ 7
)
ÀÀ7 8
;
ÀÀ8 9
}
–– 	
public
““ 
AsyncOperation
““ 
LoadSceneAsync
““ ,
(
““, -
int
““- 0

sceneIndex
““1 ;
)
““; <
{
”” 	
return
‘‘ 
LoadSceneAsync
‘‘ !
(
‘‘! "

sceneIndex
‘‘" ,
,
‘‘, -
LoadSceneMode
‘‘. ;
.
‘‘; <
Single
‘‘< B
)
‘‘B C
;
‘‘C D
}
’’ 	
public
◊◊ 
AsyncOperation
◊◊ 
LoadSceneAsync
◊◊ ,
(
◊◊, -
int
◊◊- 0

sceneIndex
◊◊1 ;
,
◊◊; <
LoadSceneMode
◊◊= J
loadMode
◊◊K S
)
◊◊S T
{
ÿÿ 	
return
ŸŸ 
LoadSceneAsync
ŸŸ !
(
ŸŸ! "

sceneIndex
ŸŸ" ,
,
ŸŸ, -
loadMode
ŸŸ. 6
,
ŸŸ6 7
null
ŸŸ8 <
)
ŸŸ< =
;
ŸŸ= >
}
⁄⁄ 	
public
‹‹ 
AsyncOperation
‹‹ 
LoadSceneAsync
‹‹ ,
(
‹‹, -
int
›› 

sceneIndex
›› 
,
›› 
LoadSceneMode
›› )
loadMode
››* 2
,
››2 3
Action
››4 :
<
››: ;
DiContainer
››; F
>
››F G
extraBindings
››H U
)
››U V
{
ﬁﬁ 	
return
ﬂﬂ 
LoadSceneAsync
ﬂﬂ !
(
ﬂﬂ! "

sceneIndex
ﬂﬂ" ,
,
ﬂﬂ, -
loadMode
ﬂﬂ. 6
,
ﬂﬂ6 7
extraBindings
ﬂﬂ8 E
,
ﬂﬂE F#
LoadSceneRelationship
ﬂﬂG \
.
ﬂﬂ\ ]
None
ﬂﬂ] a
)
ﬂﬂa b
;
ﬂﬂb c
}
‡‡ 	
public
‚‚ 
AsyncOperation
‚‚ 
LoadSceneAsync
‚‚ ,
(
‚‚, -
int
„„ 

sceneIndex
„„ 
,
„„ 
LoadSceneMode
‰‰ 
loadMode
‰‰ "
,
‰‰" #
Action
ÂÂ 
<
ÂÂ 
DiContainer
ÂÂ 
>
ÂÂ 
extraBindings
ÂÂ  -
,
ÂÂ- .#
LoadSceneRelationship
ÊÊ !
containerMode
ÊÊ" /
)
ÊÊ/ 0
{
ÁÁ 	
return
ËË 
LoadSceneAsync
ËË !
(
ËË! "

sceneIndex
ÈÈ 
,
ÈÈ 
loadMode
ÈÈ $
,
ÈÈ$ %
extraBindings
ÈÈ& 3
,
ÈÈ3 4
containerMode
ÈÈ5 B
,
ÈÈB C
null
ÈÈD H
)
ÈÈH I
;
ÈÈI J
}
ÍÍ 	
public
ÏÏ 
AsyncOperation
ÏÏ 
LoadSceneAsync
ÏÏ ,
(
ÏÏ, -
int
ÌÌ 

sceneIndex
ÌÌ 
,
ÌÌ 
LoadSceneMode
ÓÓ 
loadMode
ÓÓ "
,
ÓÓ" #
Action
ÔÔ 
<
ÔÔ 
DiContainer
ÔÔ 
>
ÔÔ 
extraBindings
ÔÔ  -
,
ÔÔ- .#
LoadSceneRelationship
 !
containerMode
" /
,
/ 0
Action
ÒÒ 
<
ÒÒ 
DiContainer
ÒÒ 
>
ÒÒ 
extraBindingsLate
ÒÒ  1
)
ÒÒ1 2
{
ÚÚ 	!
PrepareForLoadScene
ÛÛ 
(
ÛÛ  
loadMode
ÛÛ  (
,
ÛÛ( )
extraBindings
ÛÛ* 7
,
ÛÛ7 8
extraBindingsLate
ÛÛ9 J
,
ÛÛJ K
containerMode
ÛÛL Y
)
ÛÛY Z
;
ÛÛZ [
Assert
ıı 
.
ıı 
That
ıı 
(
ıı 
Application
ıı #
.
ıı# $&
CanStreamedLevelBeLoaded
ıı$ <
(
ıı< =

sceneIndex
ıı= G
)
ııG H
,
ııH I
$str
ˆˆ ,
,
ˆˆ, -

sceneIndex
ˆˆ. 8
)
ˆˆ8 9
;
ˆˆ9 :
return
¯¯ 
SceneManager
¯¯ 
.
¯¯  
LoadSceneAsync
¯¯  .
(
¯¯. /

sceneIndex
¯¯/ 9
,
¯¯9 :
loadMode
¯¯; C
)
¯¯C D
;
¯¯D E
}
˘˘ 	
}
˙˙ 
}˚˚ ¯
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder5.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
TParam39 @
,@ A
TParam4B I
,I J
TParam5K R
,R S
	TContractT ]
>] ^
: 	
FactoryFromBinder
 
< 
TParam1 #
,# $
TParam2% ,
,, -
TParam3. 5
,5 6
TParam47 >
,> ?
TParam5@ G
,G H
	TContractI R
>R S
{ 
public		 !
FactoryToChoiceBinder		 $
(		$ %
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
	TContractN W
>W X
ToSelfY _
(_ `
)` a
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
	TConcreteN W
>W X
ToY [
<[ \
	TConcrete\ e
>e f
(f g
)g h
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
	TConcreteV _
>_ `
(` a
BindContainera n
,n o
BindInfop x
,x y
FactoryBindInfo	z â
)
â ä
;
ä ã
} 	
} 
}   Ä
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Injection\LazyInject.cs
	namespace 	
Zenject
 
{ 
[ (
ZenjectAllowDuringValidation !
]! "
[ 
NoReflectionBaking 
] 
public 

class 

LazyInject 
< 
T 
> 
:  
IValidatable! -
{ 
readonly		 
DiContainer		 

_container		 '
;		' (
readonly

 
InjectContext

 
_context

 '
;

' (
bool 
	_hasValue 
; 
T 	
_value
 
; 
public 

LazyInject 
( 
DiContainer %
	container& /
,/ 0
InjectContext1 >
context? F
)F G
{ 	
Assert 
. 
DerivesFromOrEqual %
<% &
T& '
>' (
(( )
context) 0
.0 1

MemberType1 ;
); <
;< =

_container 
= 
	container "
;" #
_context 
= 
context 
; 
} 	
void 
IValidatable 
. 
Validate "
(" #
)# $
{ 	

_container 
. 
Resolve 
( 
_context '
)' (
;( )
} 	
public 
T 
Value 
{ 	
get 
{ 
if   
(   
!   
	_hasValue   
)   
{!! 
_value"" 
="" 
("" 
T"" 
)""  

_container""  *
.""* +
Resolve""+ 2
(""2 3
_context""3 ;
)""; <
;""< =
	_hasValue## 
=## 
true##  $
;##$ %
}$$ 
return&& 
_value&& 
;&& 
}'' 
}(( 	
})) 
}** ˙\
ùC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinderBase.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class )
FactorySubContainerBinderBase .
<. /
	TContract/ 8
>8 9
{ 
public		 )
FactorySubContainerBinderBase		 ,
(		, -
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
{ 	
FactoryBindInfo 
= 
factoryBindInfo -
;- .
SubIdentifier 
= 
subIdentifier )
;) *
BindInfo 
= 
bindInfo 
;  
BindContainer 
= 
bindContainer )
;) *
factoryBindInfo 
. 
ProviderFunc (
=) *
null+ /
;/ 0
} 	
	protected 
DiContainer 
BindContainer +
{ 	
get 
; 
private 
set 
; 
} 	
	protected 
FactoryBindInfo !
FactoryBindInfo" 1
{ 	
get 
; 
private 
set 
; 
} 	
	protected 
Func 
< 
DiContainer "
," #
	IProvider$ -
>- .
ProviderFunc/ ;
{   	
get!! 
{!! 
return!! 
FactoryBindInfo!! (
.!!( )
ProviderFunc!!) 5
;!!5 6
}!!7 8
set"" 
{"" 
FactoryBindInfo"" !
.""! "
ProviderFunc""" .
=""/ 0
value""1 6
;""6 7
}""8 9
}## 	
	protected%% 
BindInfo%% 
BindInfo%% #
{&& 	
get'' 
;'' 
private(( 
set(( 
;(( 
})) 	
	protected++ 
object++ 
SubIdentifier++ &
{,, 	
get-- 
;-- 
private.. 
set.. 
;.. 
}// 	
	protected11 
Type11 
ContractType11 #
{22 	
get33 
{33 
return33 
typeof33 
(33  
	TContract33  )
)33) *
;33* +
}33, -
}44 	
public66 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder66 ;
ByInstaller66< G
<66G H

TInstaller66H R
>66R S
(66S T
)66T U
where77 

TInstaller77 
:77 
InstallerBase77 ,
{88 	
return99 
ByInstaller99 
(99 
typeof99 %
(99% &

TInstaller99& 0
)990 1
)991 2
;992 3
}:: 	
public<< 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder<< ;
ByInstaller<<< G
(<<G H
Type<<H L
installerType<<M Z
)<<Z [
{== 	
Assert>> 
.>> 
That>> 
(>> 
installerType>> %
.>>% &
DerivesFrom>>& 1
<>>1 2
InstallerBase>>2 ?
>>>? @
(>>@ A
)>>A B
,>>B C
$str?? u
,??u v
installerType	??w Ñ
)
??Ñ Ö
;
??Ö Ü
varAA  
subcontainerBindInfoAA $
=AA% &
newAA' *'
SubContainerCreatorBindInfoAA+ F
(AAF G
)AAG H
;AAH I
ProviderFuncCC 
=CC 
(DD 
	containerDD 
)DD 
=>DD 
newDD "*
SubContainerDependencyProviderDD# A
(DDA B
ContractTypeEE  
,EE  !
SubIdentifierEE" /
,EE/ 0
newFF *
SubContainerCreatorByInstallerFF 6
(FF6 7
	containerGG !
,GG! " 
subcontainerBindInfoGG# 7
,GG7 8
installerTypeGG9 F
,GGF G
BindInfoGGH P
.GGP Q
	ArgumentsGGQ Z
)GGZ [
,GG[ \
falseGG] b
)GGb c
;GGc d
returnII 
newII 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderII C
(IIC D
BindInfoIID L
)IIL M
;IIM N
}JJ 	
publicMM E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderMM H$
ByNewGameObjectInstallerMMI a
<MMa b

TInstallerMMb l
>MMl m
(MMm n
)MMn o
whereNN 

TInstallerNN 
:NN 
InstallerBaseNN ,
{OO 	
returnPP $
ByNewGameObjectInstallerPP +
(PP+ ,
typeofPP, 2
(PP2 3

TInstallerPP3 =
)PP= >
)PP> ?
;PP? @
}QQ 	
publicSS E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderSS H$
ByNewGameObjectInstallerSSI a
(SSa b
TypeSSb f
installerTypeSSg t
)SSt u
{TT 	
AssertUU 
.UU 
ThatUU 
(UU 
installerTypeUU %
.UU% &
DerivesFromUU& 1
<UU1 2
InstallerBaseUU2 ?
>UU? @
(UU@ A
)UUA B
,UUB C
$strVV u
,VVu v
installerType	VVw Ñ
)
VVÑ Ö
;
VVÖ Ü
varXX 
gameObjectInfoXX 
=XX  
newXX! $(
GameObjectCreationParametersXX% A
(XXA B
)XXB C
;XXC D
ProviderFuncZZ 
=ZZ 
([[ 
	container[[ 
)[[ 
=>[[ 
new[[ "*
SubContainerDependencyProvider[[# A
([[A B
ContractType\\  
,\\  !
SubIdentifier\\" /
,\\/ 0
new]] 7
+SubContainerCreatorByNewGameObjectInstaller]] C
(]]C D
	container^^ !
,^^! "
gameObjectInfo^^# 1
,^^1 2
installerType^^3 @
,^^@ A
BindInfo^^B J
.^^J K
	Arguments^^K T
)^^T U
,^^U V
false^^W \
)^^\ ]
;^^] ^
return`` 
new`` E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder`` P
(``P Q
BindInfo``Q Y
,``Y Z
gameObjectInfo``[ i
)``i j
;``j k
}aa 	
publiccc E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBindercc H 
ByNewPrefabInstallerccI ]
<cc] ^

TInstallercc^ h
>cch i
(cci j
UnityEnginedd 
.dd 
Objectdd 
prefabdd %
)dd% &
whereee 

TInstalleree 
:ee 
InstallerBaseee ,
{ff 	
returngg  
ByNewPrefabInstallergg '
(gg' (
prefabgg( .
,gg. /
typeofgg0 6
(gg6 7

TInstallergg7 A
)ggA B
)ggB C
;ggC D
}hh 	
publicjj E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderjj H 
ByNewPrefabInstallerjjI ]
(jj] ^
UnityEnginekk 
.kk 
Objectkk 
prefabkk %
,kk% &
Typekk' +
installerTypekk, 9
)kk9 :
{ll 	
Assertmm 
.mm 
Thatmm 
(mm 
installerTypemm %
.mm% &
DerivesFrommm& 1
<mm1 2
InstallerBasemm2 ?
>mm? @
(mm@ A
)mmA B
,mmB C
$strnn u
,nnu v
installerType	nnw Ñ
)
nnÑ Ö
;
nnÖ Ü
varpp 
gameObjectInfopp 
=pp  
newpp! $(
GameObjectCreationParameterspp% A
(ppA B
)ppB C
;ppC D
ProviderFuncrr 
=rr 
(ss 
	containerss 
)ss 
=>ss 
newss "*
SubContainerDependencyProviderss# A
(ssA B
ContractTypett  
,tt  !
SubIdentifiertt" /
,tt/ 0
newuu 3
'SubContainerCreatorByNewPrefabInstalleruu ?
(uu? @
	containervv !
,vv! "
newww 
PrefabProviderww *
(ww* +
prefabww+ 1
)ww1 2
,ww2 3
gameObjectInfoxx &
,xx& '
installerTypexx( 5
,xx5 6
BindInfoxx7 ?
.xx? @
	Argumentsxx@ I
)xxI J
,xxJ K
falsexxL Q
)xxQ R
;xxR S
returnzz 
newzz E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderzz P
(zzP Q
BindInfozzQ Y
,zzY Z
gameObjectInfozz[ i
)zzi j
;zzj k
}{{ 	
public}} E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder}} H(
ByNewPrefabResourceInstaller}}I e
<}}e f

TInstaller}}f p
>}}p q
(}}q r
string~~ 
resourcePath~~ 
)~~  
where 

TInstaller 
: 
InstallerBase ,
{
ÄÄ 	
return
ÅÅ *
ByNewPrefabResourceInstaller
ÅÅ /
(
ÅÅ/ 0
resourcePath
ÅÅ0 <
,
ÅÅ< =
typeof
ÅÅ> D
(
ÅÅD E

TInstaller
ÅÅE O
)
ÅÅO P
)
ÅÅP Q
;
ÅÅQ R
}
ÇÇ 	
public
ÑÑ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÑÑ H*
ByNewPrefabResourceInstaller
ÑÑI e
(
ÑÑe f
string
ÖÖ 
resourcePath
ÖÖ 
,
ÖÖ  
Type
ÖÖ! %
installerType
ÖÖ& 3
)
ÖÖ3 4
{
ÜÜ 	
BindingUtil
áá 
.
áá '
AssertIsValidResourcePath
áá 1
(
áá1 2
resourcePath
áá2 >
)
áá> ?
;
áá? @
Assert
àà 
.
àà 
That
àà 
(
àà 
installerType
àà %
.
àà% &
DerivesFrom
àà& 1
<
àà1 2
InstallerBase
àà2 ?
>
àà? @
(
àà@ A
)
ààA B
,
ààB C
$str
ââ u
,
ââu v
installerTypeââw Ñ
)ââÑ Ö
;ââÖ Ü
var
ãã 
gameObjectInfo
ãã 
=
ãã  
new
ãã! $*
GameObjectCreationParameters
ãã% A
(
ããA B
)
ããB C
;
ããC D
ProviderFunc
çç 
=
çç 
(
éé 
	container
éé 
)
éé 
=>
éé 
new
éé ",
SubContainerDependencyProvider
éé# A
(
ééA B
ContractType
èè  
,
èè  !
SubIdentifier
èè" /
,
èè/ 0
new
êê 5
'SubContainerCreatorByNewPrefabInstaller
êê ?
(
êê? @
	container
ëë !
,
ëë! "
new
íí $
PrefabProviderResource
íí 2
(
íí2 3
resourcePath
íí3 ?
)
íí? @
,
íí@ A
gameObjectInfo
ìì &
,
ìì& '
installerType
ìì( 5
,
ìì5 6
BindInfo
ìì7 ?
.
ìì? @
	Arguments
ìì@ I
)
ììI J
,
ììJ K
false
ììL Q
)
ììQ R
;
ììR S
return
ïï 
new
ïï G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ïï P
(
ïïP Q
BindInfo
ïïQ Y
,
ïïY Z
gameObjectInfo
ïï[ i
)
ïïi j
;
ïïj k
}
ññ 	
}
òò 
}ôô ÷<
hC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\Decorator\DecoratorProvider.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
public 

	interface 
IDecoratorProvider '
{ 
void		 
GetAllInstances		 
(		 
	IProvider

 
provider

 
,

 
InjectContext

  -
context

. 5
,

5 6
List

7 ;
<

; <
object

< B
>

B C
buffer

D J
)

J K
;

K L
} 
[ 
NoReflectionBaking 
] 
public 

class 
DecoratorProvider "
<" #
	TContract# ,
>, -
:. /
IDecoratorProvider0 B
{ 
readonly 

Dictionary 
< 
	IProvider %
,% &
List' +
<+ ,
object, 2
>2 3
>3 4
_cachedInstances5 E
=F G
new 

Dictionary 
< 
	IProvider $
,$ %
List& *
<* +
object+ 1
>1 2
>2 3
(3 4
)4 5
;5 6
readonly 
DiContainer 

_container '
;' (
readonly 
List 
< 
Guid 
> 
_factoryBindIds +
=, -
new. 1
List2 6
<6 7
Guid7 ;
>; <
(< =
)= >
;> ?
List 
< 
IFactory 
< 
	TContract 
,  
	TContract! *
>* +
>+ ,
_decoratorFactories- @
;@ A
public 
DecoratorProvider  
(  !
DiContainer! ,
	container- 6
)6 7
{ 	

_container 
= 
	container "
;" #
} 	
public!! 
void!! 
AddFactoryId!!  
(!!  !
Guid!!! %
factoryBindId!!& 3
)!!3 4
{"" 	
_factoryBindIds## 
.## 
Add## 
(##  
factoryBindId##  -
)##- .
;##. /
}$$ 	
void&& ,
 LazyInitializeDecoratorFactories&& -
(&&- .
)&&. /
{'' 	
if(( 
((( 
_decoratorFactories(( #
==(($ &
null((' +
)((+ ,
{)) 
_decoratorFactories** #
=**$ %
new**& )
List*** .
<**. /
IFactory**/ 7
<**7 8
	TContract**8 A
,**A B
	TContract**C L
>**L M
>**M N
(**N O
)**O P
;**P Q
for,, 
(,, 
int,, 
i,, 
=,, 
$num,, 
;,, 
i,,  !
<,," #
_factoryBindIds,,$ 3
.,,3 4
Count,,4 9
;,,9 :
i,,; <
++,,< >
),,> ?
{-- 
var.. 
bindId.. 
=..  
_factoryBindIds..! 0
[..0 1
i..1 2
]..2 3
;..3 4
var// 
factory// 
=//  !

_container//" ,
.//, -
	ResolveId//- 6
<//6 7
IFactory//7 ?
<//? @
	TContract//@ I
,//I J
	TContract//K T
>//T U
>//U V
(//V W
bindId//W ]
)//] ^
;//^ _
_decoratorFactories00 '
.00' (
Add00( +
(00+ ,
factory00, 3
)003 4
;004 5
}11 
}22 
}33 	
public55 
void55 
GetAllInstances55 #
(55# $
	IProvider66 
provider66 
,66 
InjectContext66  -
context66. 5
,665 6
List667 ;
<66; <
object66< B
>66B C
buffer66D J
)66J K
{77 	
if88 
(88 
provider88 
.88 
IsCached88 !
)88! "
{99 
List:: 
<:: 
object:: 
>:: 
	instances:: &
;::& '
{?? 
if@@ 
(@@ 
!@@ 
_cachedInstances@@ )
.@@) *
TryGetValue@@* 5
(@@5 6
provider@@6 >
,@@> ?
out@@@ C
	instances@@D M
)@@M N
)@@N O
{AA 
	instancesBB !
=BB" #
newBB$ '
ListBB( ,
<BB, -
objectBB- 3
>BB3 4
(BB4 5
)BB5 6
;BB6 7!
WrapProviderInstancesCC -
(CC- .
providerCC. 6
,CC6 7
contextCC8 ?
,CC? @
	instancesCCA J
)CCJ K
;CCK L
_cachedInstancesDD (
.DD( )
AddDD) ,
(DD, -
providerDD- 5
,DD5 6
	instancesDD7 @
)DD@ A
;DDA B
}EE 
}FF 
bufferHH 
.HH 
AllocFreeAddRangeHH (
(HH( )
	instancesHH) 2
)HH2 3
;HH3 4
}II 
elseJJ 
{KK !
WrapProviderInstancesLL %
(LL% &
providerLL& .
,LL. /
contextLL0 7
,LL7 8
bufferLL9 ?
)LL? @
;LL@ A
}MM 
}NN 	
voidPP !
WrapProviderInstancesPP "
(PP" #
	IProviderPP# ,
providerPP- 5
,PP5 6
InjectContextPP7 D
contextPPE L
,PPL M
ListPPN R
<PPR S
objectPPS Y
>PPY Z
bufferPP[ a
)PPa b
{QQ 	,
 LazyInitializeDecoratorFactoriesRR ,
(RR, -
)RR- .
;RR. /
providerTT 
.TT 
GetAllInstancesTT $
(TT$ %
contextTT% ,
,TT, -
bufferTT. 4
)TT4 5
;TT5 6
forVV 
(VV 
intVV 
iVV 
=VV 
$numVV 
;VV 
iVV 
<VV 
bufferVV  &
.VV& '
CountVV' ,
;VV, -
iVV. /
++VV/ 1
)VV1 2
{WW 
bufferXX 
[XX 
iXX 
]XX 
=XX 
DecorateInstanceXX ,
(XX, -
bufferXX- 3
[XX3 4
iXX4 5
]XX5 6
,XX6 7
contextXX8 ?
)XX? @
;XX@ A
}YY 
}ZZ 	
object\\ 
DecorateInstance\\ 
(\\  
object\\  &
instance\\' /
,\\/ 0
InjectContext\\1 >
context\\? F
)\\F G
{]] 	
for^^ 
(^^ 
int^^ 
i^^ 
=^^ 
$num^^ 
;^^ 
i^^ 
<^^ 
_decoratorFactories^^  3
.^^3 4
Count^^4 9
;^^9 :
i^^; <
++^^< >
)^^> ?
{__ 
instance`` 
=`` 
_decoratorFactories`` .
[``. /
i``/ 0
]``0 1
.``1 2
Create``2 8
(``8 9
contextaa 
.aa 
	Containeraa %
.aa% &
IsValidatingaa& 2
?aa3 4
defaultaa5 <
(aa< =
	TContractaa= F
)aaF G
:aaH I
(aaJ K
	TContractaaK T
)aaT U
instanceaaU ]
)aa] ^
;aa^ _
}bb 
returndd 
instancedd 
;dd 
}ee 	
}ff 
}gg è\
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\FromBinders\FromBinderGeneric.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
FromBinderGeneric "
<" #
	TContract# ,
>, -
:. /

FromBinder0 :
{ 
public 
FromBinderGeneric  
(  !
DiContainer 
bindContainer %
,% &
BindInfo 
bindInfo 
, 
BindStatement 
bindStatement '
)' (
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
bindStatement, 9
)9 :
{ 	
BindingUtil 
. $
AssertIsDerivedFromTypes 0
(0 1
typeof1 7
(7 8
	TContract8 A
)A B
,B C
BindInfoD L
.L M
ContractTypesM Z
)Z [
;[ \
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
FromFactory< G
<G H
TFactoryH P
>P Q
(Q R
)R S
where 
TFactory 
: 
IFactory %
<% &
	TContract& /
>/ 0
{ 	
return 
FromIFactory 
(  
x  !
=>" $
x% &
.& '
To' )
<) *
TFactory* 2
>2 3
(3 4
)4 5
.5 6
AsCached6 >
(> ?
)? @
)@ A
;A B
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
FromIFactory< H
(H I
Action   
<   !
ConcreteBinderGeneric   (
<  ( )
IFactory  ) 1
<  1 2
	TContract  2 ;
>  ; <
>  < =
>  = > 
factoryBindGenerator  ? S
)  S T
{!! 	
return"" 
FromIFactoryBase"" #
<""# $
	TContract""$ -
>""- .
("". / 
factoryBindGenerator""/ C
)""C D
;""D E
}## 	
public%% 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder%% ;

FromMethod%%< F
(%%F G
Func%%G K
<%%K L
	TContract%%L U
>%%U V
method%%W ]
)%%] ^
{&& 	
return'' 
FromMethodBase'' !
<''! "
	TContract''" +
>''+ ,
('', -
ctx''- 0
=>''1 3
method''4 :
('': ;
)''; <
)''< =
;''= >
}(( 	
public** 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder** ;

FromMethod**< F
(**F G
Func**G K
<**K L
InjectContext**L Y
,**Y Z
	TContract**[ d
>**d e
method**f l
)**l m
{++ 	
return,, 
FromMethodBase,, !
<,,! "
	TContract,," +
>,,+ ,
(,,, -
method,,- 3
),,3 4
;,,4 5
}-- 	
public// 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder// ;
FromMethodMultiple//< N
(//N O
Func//O S
<//S T
InjectContext//T a
,//a b
IEnumerable//c n
<//n o
	TContract//o x
>//x y
>//y z
method	//{ Å
)
//Å Ç
{00 	
BindingUtil11 
.11 $
AssertIsDerivedFromTypes11 0
(110 1
typeof111 7
(117 8
	TContract118 A
)11A B
,11B C
AllParentTypes11D R
)11R S
;11S T
return22 "
FromMethodMultipleBase22 )
<22) *
	TContract22* 3
>223 4
(224 5
method225 ;
)22; <
;22< =
}33 	
public55 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder55 ;
FromResolveGetter55< M
<55M N
TObj55N R
>55R S
(55S T
Func55T X
<55X Y
TObj55Y ]
,55] ^
	TContract55_ h
>55h i
method55j p
)55p q
{66 	
return77 
FromResolveGetter77 $
<77$ %
TObj77% )
>77) *
(77* +
null77+ /
,77/ 0
method771 7
)777 8
;778 9
}88 	
public:: 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder:: ;
FromResolveGetter::< M
<::M N
TObj::N R
>::R S
(::S T
object::T Z

identifier::[ e
,::e f
Func::g k
<::k l
TObj::l p
,::p q
	TContract::r {
>::{ |
method	::} É
)
::É Ñ
{;; 	
return<< 
FromResolveGetter<< $
<<<$ %
TObj<<% )
><<) *
(<<* +

identifier<<+ 5
,<<5 6
method<<7 =
,<<= >
InjectSources<<? L
.<<L M
Any<<M P
)<<P Q
;<<Q R
}== 	
public?? 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder?? ;
FromResolveGetter??< M
<??M N
TObj??N R
>??R S
(??S T
object??T Z

identifier??[ e
,??e f
Func??g k
<??k l
TObj??l p
,??p q
	TContract??r {
>??{ |
method	??} É
,
??É Ñ
InjectSources
??Ö í
source
??ì ô
)
??ô ö
{@@ 	
returnAA !
FromResolveGetterBaseAA (
<AA( )
TObjAA) -
,AA- .
	TContractAA/ 8
>AA8 9
(AA9 :

identifierAA: D
,AAD E
methodAAF L
,AAL M
sourceAAN T
,AAT U
falseAAV [
)AA[ \
;AA\ ]
}BB 	
publicDD 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderDD ; 
FromResolveAllGetterDD< P
<DDP Q
TObjDDQ U
>DDU V
(DDV W
FuncDDW [
<DD[ \
TObjDD\ `
,DD` a
	TContractDDb k
>DDk l
methodDDm s
)DDs t
{EE 	
returnFF  
FromResolveAllGetterFF '
<FF' (
TObjFF( ,
>FF, -
(FF- .
nullFF. 2
,FF2 3
methodFF4 :
)FF: ;
;FF; <
}GG 	
publicII 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderII ; 
FromResolveAllGetterII< P
<IIP Q
TObjIIQ U
>IIU V
(IIV W
objectIIW ]

identifierII^ h
,IIh i
FuncIIj n
<IIn o
TObjIIo s
,IIs t
	TContractIIu ~
>II~ 
method
IIÄ Ü
)
IIÜ á
{JJ 	
returnKK  
FromResolveAllGetterKK '
<KK' (
TObjKK( ,
>KK, -
(KK- .

identifierKK. 8
,KK8 9
methodKK: @
,KK@ A
InjectSourcesKKB O
.KKO P
AnyKKP S
)KKS T
;KKT U
}LL 	
publicNN 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderNN ; 
FromResolveAllGetterNN< P
<NNP Q
TObjNNQ U
>NNU V
(NNV W
objectNNW ]

identifierNN^ h
,NNh i
FuncNNj n
<NNn o
TObjNNo s
,NNs t
	TContractNNu ~
>NN~ 
method
NNÄ Ü
,
NNÜ á
InjectSources
NNà ï
source
NNñ ú
)
NNú ù
{OO 	
returnPP !
FromResolveGetterBasePP (
<PP( )
TObjPP) -
,PP- .
	TContractPP/ 8
>PP8 9
(PP9 :

identifierPP: D
,PPD E
methodPPF L
,PPL M
sourcePPN T
,PPT U
truePPV Z
)PPZ [
;PP[ \
}QQ 	
publicSS 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderSS ;
FromInstanceSS< H
(SSH I
	TContractSSI R
instanceSSS [
)SS[ \
{TT 	
returnUU 
FromInstanceBaseUU #
(UU# $
instanceUU$ ,
)UU, -
;UU- .
}VV 	
publicZZ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderZZ ;$
FromComponentsInChildrenZZ< T
(ZZT U
Func[[ 
<[[ 
	TContract[[ 
,[[ 
bool[[  
>[[  !
	predicate[[" +
,[[+ ,
bool[[- 1
includeInactive[[2 A
=[[B C
true[[D H
)[[H I
{\\ 	
return]] $
FromComponentsInChildren]] +
(]]+ ,
false]], 1
,]]1 2
	predicate]]3 <
,]]< =
includeInactive]]> M
)]]M N
;]]N O
}^^ 	
public`` 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder`` ;$
FromComponentsInChildren``< T
(``T U
boolaa 
excludeSelfaa 
=aa 
falseaa $
,aa$ %
Funcaa& *
<aa* +
	TContractaa+ 4
,aa4 5
boolaa6 :
>aa: ;
	predicateaa< E
=aaF G
nullaaH L
,aaL M
boolaaN R
includeInactiveaaS b
=aac d
trueaae i
)aai j
{bb 	
Funccc 
<cc 
	Componentcc 
,cc 
boolcc  
>cc  !
subPredicatecc" .
;cc. /
ifee 
(ee 
	predicateee 
!=ee 
nullee !
)ee! "
{ff 
subPredicategg 
=gg 
	componentgg (
=>gg) +
	predicategg, 5
(gg5 6
(gg6 7
	TContractgg7 @
)gg@ A
(ggA B
objectggB H
)ggH I
	componentggI R
)ggR S
;ggS T
}hh 
elseii 
{jj 
subPredicatekk 
=kk 
nullkk #
;kk# $
}ll 
returnnn (
FromComponentsInChildrenBasenn /
(nn/ 0
excludeSelfoo 
,oo 
subPredicateoo )
,oo) *
includeInactiveoo+ :
)oo: ;
;oo; <
}pp 	
publicrr 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderrr ;%
FromComponentsInHierarchyrr< U
(rrU V
Funcss 
<ss 
	TContractss 
,ss 
boolss  
>ss  !
	predicatess" +
=ss, -
nullss. 2
,ss2 3
boolss4 8
includeInactivess9 H
=ssI J
truessK O
)ssO P
{tt 	
Funcuu 
<uu 
	Componentuu 
,uu 
booluu  
>uu  !
subPredicateuu" .
;uu. /
ifww 
(ww 
	predicateww 
!=ww 
nullww !
)ww! "
{xx 
subPredicateyy 
=yy 
	componentyy (
=>yy) +
	predicateyy, 5
(yy5 6
(yy6 7
	TContractyy7 @
)yy@ A
(yyA B
objectyyB H
)yyH I
	componentyyI R
)yyR S
;yyS T
}zz 
else{{ 
{|| 
subPredicate}} 
=}} 
null}} #
;}}# $
}~~ 
return
ÄÄ +
FromComponentsInHierarchyBase
ÄÄ 0
(
ÄÄ0 1
subPredicate
ÄÄ1 =
,
ÄÄ= >
includeInactive
ÄÄ? N
)
ÄÄN O
;
ÄÄO P
}
ÅÅ 	
}
ÉÉ 
}ÑÑ Ä<
TC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Installer.cs
	namespace 	
Zenject
 
{ 
public		 

abstract		 
class		 
	Installer		 #
:		$ %
InstallerBase		& 3
{

 
} 
public 

abstract 
class 
	Installer #
<# $
TDerived$ ,
>, -
:. /
InstallerBase0 =
where 
TDerived 
: 
	Installer "
<" #
TDerived# +
>+ ,
{ 
public 
static 
void 
Install "
(" #
DiContainer# .
	container/ 8
)8 9
{ 	
	container 
. 
Instantiate !
<! "
TDerived" *
>* +
(+ ,
), -
.- .
InstallBindings. =
(= >
)> ?
;? @
} 	
} 
public 

abstract 
class 
	Installer #
<# $
TParam1$ +
,+ ,
TDerived- 5
>5 6
:7 8
InstallerBase9 F
where 
TDerived 
: 
	Installer "
<" #
TParam1# *
,* +
TDerived, 4
>4 5
{ 
public 
static 
void 
Install "
(" #
DiContainer# .
	container/ 8
,8 9
TParam1: A
p1B D
)D E
{   	
	container!! 
.!! 
InstantiateExplicit!! )
<!!) *
TDerived!!* 2
>!!2 3
(!!3 4

InjectUtil"" 
."" !
CreateArgListExplicit"" 0
(""0 1
p1""1 3
)""3 4
)""4 5
.""5 6
InstallBindings""6 E
(""E F
)""F G
;""G H
}## 	
}$$ 
public&& 

abstract&& 
class&& 
	Installer&& #
<&&# $
TParam1&&$ +
,&&+ ,
TParam2&&- 4
,&&4 5
TDerived&&6 >
>&&> ?
:&&@ A
InstallerBase&&B O
where'' 
TDerived'' 
:'' 
	Installer'' "
<''" #
TParam1''# *
,''* +
TParam2'', 3
,''3 4
TDerived''5 =
>''= >
{(( 
public)) 
static)) 
void)) 
Install)) "
())" #
DiContainer))# .
	container))/ 8
,))8 9
TParam1)): A
p1))B D
,))D E
TParam2))F M
p2))N P
)))P Q
{** 	
	container++ 
.++ 
InstantiateExplicit++ )
<++) *
TDerived++* 2
>++2 3
(++3 4

InjectUtil,, 
.,, !
CreateArgListExplicit,, 0
(,,0 1
p1,,1 3
,,,3 4
p2,,5 7
),,7 8
),,8 9
.,,9 :
InstallBindings,,: I
(,,I J
),,J K
;,,K L
}-- 	
}.. 
public00 

abstract00 
class00 
	Installer00 #
<00# $
TParam100$ +
,00+ ,
TParam200- 4
,004 5
TParam3006 =
,00= >
TDerived00? G
>00G H
:00I J
InstallerBase00K X
where11 
TDerived11 
:11 
	Installer11 "
<11" #
TParam111# *
,11* +
TParam211, 3
,113 4
TParam3115 <
,11< =
TDerived11> F
>11F G
{22 
public33 
static33 
void33 
Install33 "
(33" #
DiContainer33# .
	container33/ 8
,338 9
TParam133: A
p133B D
,33D E
TParam233F M
p233N P
,33P Q
TParam333R Y
p333Z \
)33\ ]
{44 	
	container55 
.55 
InstantiateExplicit55 )
<55) *
TDerived55* 2
>552 3
(553 4

InjectUtil66 
.66 !
CreateArgListExplicit66 0
(660 1
p1661 3
,663 4
p2665 7
,667 8
p3669 ;
)66; <
)66< =
.66= >
InstallBindings66> M
(66M N
)66N O
;66O P
}77 	
}88 
public:: 

abstract:: 
class:: 
	Installer:: #
<::# $
TParam1::$ +
,::+ ,
TParam2::- 4
,::4 5
TParam3::6 =
,::= >
TParam4::? F
,::F G
TDerived::H P
>::P Q
:::R S
InstallerBase::T a
where;; 
TDerived;; 
:;; 
	Installer;; "
<;;" #
TParam1;;# *
,;;* +
TParam2;;, 3
,;;3 4
TParam3;;5 <
,;;< =
TParam4;;> E
,;;E F
TDerived;;G O
>;;O P
{<< 
public== 
static== 
void== 
Install== "
(==" #
DiContainer==# .
	container==/ 8
,==8 9
TParam1==: A
p1==B D
,==D E
TParam2==F M
p2==N P
,==P Q
TParam3==R Y
p3==Z \
,==\ ]
TParam4==^ e
p4==f h
)==h i
{>> 	
	container?? 
.?? 
InstantiateExplicit?? )
<??) *
TDerived??* 2
>??2 3
(??3 4

InjectUtil@@ 
.@@ !
CreateArgListExplicit@@ 0
(@@0 1
p1@@1 3
,@@3 4
p2@@5 7
,@@7 8
p3@@9 ;
,@@; <
p4@@= ?
)@@? @
)@@@ A
.@@A B
InstallBindings@@B Q
(@@Q R
)@@R S
;@@S T
}AA 	
}BB 
publicDD 

abstractDD 
classDD 
	InstallerDD #
<DD# $
TParam1DD$ +
,DD+ ,
TParam2DD- 4
,DD4 5
TParam3DD6 =
,DD= >
TParam4DD? F
,DDF G
TParam5DDH O
,DDO P
TDerivedDDQ Y
>DDY Z
:DD[ \
InstallerBaseDD] j
whereEE 
TDerivedEE 
:EE 
	InstallerEE "
<EE" #
TParam1EE# *
,EE* +
TParam2EE, 3
,EE3 4
TParam3EE5 <
,EE< =
TParam4EE> E
,EEE F
TParam5EEG N
,EEN O
TDerivedEEP X
>EEX Y
{FF 
publicGG 
staticGG 
voidGG 
InstallGG "
(GG" #
DiContainerGG# .
	containerGG/ 8
,GG8 9
TParam1GG: A
p1GGB D
,GGD E
TParam2GGF M
p2GGN P
,GGP Q
TParam3GGR Y
p3GGZ \
,GG\ ]
TParam4GG^ e
p4GGf h
,GGh i
TParam5GGj q
p5GGr t
)GGt u
{HH 	
	containerII 
.II 
InstantiateExplicitII )
<II) *
TDerivedII* 2
>II2 3
(II3 4

InjectUtilJJ 
.JJ !
CreateArgListExplicitJJ 0
(JJ0 1
p1JJ1 3
,JJ3 4
p2JJ5 7
,JJ7 8
p3JJ9 ;
,JJ; <
p4JJ= ?
,JJ? @
p5JJA C
)JJC D
)JJD E
.JJE F
InstallBindingsJJF U
(JJU V
)JJV W
;JJW X
}KK 	
}LL 
}MM ˆœ
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\PlaceholderFactory.cs
	namespace 	
Zenject
 
{ 
public

 

class

 
PlaceholderFactory

 #
<

# $
TValue

$ *
>

* +
:

, -"
PlaceholderFactoryBase

. D
<

D E
TValue

E K
>

K L
,

L M
IFactory

N V
<

V W
TValue

W ]
>

] ^
{ 
[ 	
NotNull	 
] 
public 
virtual 
TValue 
Create $
($ %
)% &
{ 	
return 
CreateInternal !
(! "
new" %
List& *
<* +
TypeValuePair+ 8
>8 9
(9 :
): ;
); <
;< =
} 	
	protected 
sealed 
override !
IEnumerable" -
<- .
Type. 2
>2 3

ParamTypes4 >
{ 	
get 
{ 
yield 
break 
; 
}  
} 	
} 
[ 
Obsolete 
( 
$str {
){ |
]| }
public 

class 
Factory 
< 
TValue 
>  
:! "
PlaceholderFactory# 5
<5 6
TValue6 <
>< =
{ 
} 
public"" 

class"" 
PlaceholderFactory"" #
<""# $
TParam1""$ +
,""+ ,
TValue""- 3
>""3 4
:## 	"
PlaceholderFactoryBase##
  
<##  !
TValue##! '
>##' (
,##( )
IFactory##* 2
<##2 3
TParam1##3 :
,##: ;
TValue##< B
>##B C
{$$ 
[(( 	
NotNull((	 
](( 
public** 
virtual** 
TValue** 
Create** $
(**$ %
TParam1**% ,
param**- 2
)**2 3
{++ 	
return,, 
CreateInternal,, !
(,,! "
new-- 
List-- 
<-- 
TypeValuePair-- &
>--& '
{.. 

InjectUtil// 
.// 
CreateTypePair// -
(//- .
param//. 3
)//3 4
}00 
)00 
;00 
}11 	
	protected33 
sealed33 
override33 !
IEnumerable33" -
<33- .
Type33. 2
>332 3

ParamTypes334 >
{44 	
get55 
{55 
yield55 
return55 
typeof55 %
(55% &
TParam155& -
)55- .
;55. /
}550 1
}66 	
}77 
[99 
Obsolete99 
(99 
$str99 {
)99{ |
]99| }
public:: 

class:: 
Factory:: 
<:: 
TParam1::  
,::  !
TValue::" (
>::( )
:::* +
PlaceholderFactory::, >
<::> ?
TParam1::? F
,::F G
TValue::H N
>::N O
{;; 
}<< 
public?? 

class?? 
PlaceholderFactory?? #
<??# $
TParam1??$ +
,??+ ,
TParam2??- 4
,??4 5
TValue??6 <
>??< =
:@@ 	"
PlaceholderFactoryBase@@
  
<@@  !
TValue@@! '
>@@' (
,@@( )
IFactory@@* 2
<@@2 3
TParam1@@3 :
,@@: ;
TParam2@@< C
,@@C D
TValue@@E K
>@@K L
{AA 
[EE 	
NotNullEE	 
]EE 
publicGG 
virtualGG 
TValueGG 
CreateGG $
(GG$ %
TParam1GG% ,
param1GG- 3
,GG3 4
TParam2GG5 <
param2GG= C
)GGC D
{HH 	
returnII 
CreateInternalII !
(II! "
newJJ 
ListJJ 
<JJ 
TypeValuePairJJ &
>JJ& '
{KK 

InjectUtilLL 
.LL 
CreateTypePairLL -
(LL- .
param1LL. 4
)LL4 5
,LL5 6

InjectUtilMM 
.MM 
CreateTypePairMM -
(MM- .
param2MM. 4
)MM4 5
}NN 
)NN 
;NN 
}OO 	
	protectedQQ 
sealedQQ 
overrideQQ !
IEnumerableQQ" -
<QQ- .
TypeQQ. 2
>QQ2 3

ParamTypesQQ4 >
{RR 	
getSS 
{TT 
yieldUU 
returnUU 
typeofUU #
(UU# $
TParam1UU$ +
)UU+ ,
;UU, -
yieldVV 
returnVV 
typeofVV #
(VV# $
TParam2VV$ +
)VV+ ,
;VV, -
}WW 
}XX 	
}YY 
[[[ 
Obsolete[[ 
([[ 
$str[[ {
)[[{ |
][[| }
public\\ 

class\\ 
Factory\\ 
<\\ 
TParam1\\  
,\\  !
TParam2\\" )
,\\) *
TValue\\+ 1
>\\1 2
:\\3 4
PlaceholderFactory\\5 G
<\\G H
TParam1\\H O
,\\O P
TParam2\\Q X
,\\X Y
TValue\\Z `
>\\` a
{]] 
}^^ 
publicaa 

classaa 
PlaceholderFactoryaa #
<aa# $
TParam1aa$ +
,aa+ ,
TParam2aa- 4
,aa4 5
TParam3aa6 =
,aa= >
TValueaa? E
>aaE F
:bb 	"
PlaceholderFactoryBasebb
  
<bb  !
TValuebb! '
>bb' (
,bb( )
IFactorybb* 2
<bb2 3
TParam1bb3 :
,bb: ;
TParam2bb< C
,bbC D
TParam3bbE L
,bbL M
TValuebbN T
>bbT U
{cc 
[gg 	
NotNullgg	 
]gg 
publicii 
virtualii 
TValueii 
Createii $
(ii$ %
TParam1ii% ,
param1ii- 3
,ii3 4
TParam2ii5 <
param2ii= C
,iiC D
TParam3iiE L
param3iiM S
)iiS T
{jj 	
returnkk 
CreateInternalkk !
(kk! "
newll 
Listll 
<ll 
TypeValuePairll &
>ll& '
{mm 

InjectUtilnn 
.nn 
CreateTypePairnn -
(nn- .
param1nn. 4
)nn4 5
,nn5 6

InjectUtiloo 
.oo 
CreateTypePairoo -
(oo- .
param2oo. 4
)oo4 5
,oo5 6

InjectUtilpp 
.pp 
CreateTypePairpp -
(pp- .
param3pp. 4
)pp4 5
}qq 
)qq 
;qq 
}rr 	
	protectedtt 
sealedtt 
overridett !
IEnumerablett" -
<tt- .
Typett. 2
>tt2 3

ParamTypestt4 >
{uu 	
getvv 
{ww 
yieldxx 
returnxx 
typeofxx #
(xx# $
TParam1xx$ +
)xx+ ,
;xx, -
yieldyy 
returnyy 
typeofyy #
(yy# $
TParam2yy$ +
)yy+ ,
;yy, -
yieldzz 
returnzz 
typeofzz #
(zz# $
TParam3zz$ +
)zz+ ,
;zz, -
}{{ 
}|| 	
}}} 
[ 
Obsolete 
( 
$str {
){ |
]| }
public
ÄÄ 

class
ÄÄ 
Factory
ÄÄ 
<
ÄÄ 
TParam1
ÄÄ  
,
ÄÄ  !
TParam2
ÄÄ" )
,
ÄÄ) *
TParam3
ÄÄ+ 2
,
ÄÄ2 3
TValue
ÄÄ4 :
>
ÄÄ: ;
:
ÄÄ< = 
PlaceholderFactory
ÄÄ> P
<
ÄÄP Q
TParam1
ÄÄQ X
,
ÄÄX Y
TParam2
ÄÄZ a
,
ÄÄa b
TParam3
ÄÄc j
,
ÄÄj k
TValue
ÄÄl r
>
ÄÄr s
{
ÅÅ 
}
ÇÇ 
public
ÖÖ 

class
ÖÖ  
PlaceholderFactory
ÖÖ #
<
ÖÖ# $
TParam1
ÖÖ$ +
,
ÖÖ+ ,
TParam2
ÖÖ- 4
,
ÖÖ4 5
TParam3
ÖÖ6 =
,
ÖÖ= >
TParam4
ÖÖ? F
,
ÖÖF G
TValue
ÖÖH N
>
ÖÖN O
:
ÜÜ 	$
PlaceholderFactoryBase
ÜÜ
  
<
ÜÜ  !
TValue
ÜÜ! '
>
ÜÜ' (
,
ÜÜ( )
IFactory
ÜÜ* 2
<
ÜÜ2 3
TParam1
ÜÜ3 :
,
ÜÜ: ;
TParam2
ÜÜ< C
,
ÜÜC D
TParam3
ÜÜE L
,
ÜÜL M
TParam4
ÜÜN U
,
ÜÜU V
TValue
ÜÜW ]
>
ÜÜ] ^
{
áá 
[
ãã 	
NotNull
ãã	 
]
ãã 
public
çç 
virtual
çç 
TValue
çç 
Create
çç $
(
çç$ %
TParam1
çç% ,
param1
çç- 3
,
çç3 4
TParam2
çç5 <
param2
çç= C
,
ççC D
TParam3
ççE L
param3
ççM S
,
ççS T
TParam4
ççU \
param4
çç] c
)
ççc d
{
éé 	
return
èè 
CreateInternal
èè !
(
èè! "
new
êê 
List
êê 
<
êê 
TypeValuePair
êê &
>
êê& '
{
ëë 

InjectUtil
íí 
.
íí 
CreateTypePair
íí -
(
íí- .
param1
íí. 4
)
íí4 5
,
íí5 6

InjectUtil
ìì 
.
ìì 
CreateTypePair
ìì -
(
ìì- .
param2
ìì. 4
)
ìì4 5
,
ìì5 6

InjectUtil
îî 
.
îî 
CreateTypePair
îî -
(
îî- .
param3
îî. 4
)
îî4 5
,
îî5 6

InjectUtil
ïï 
.
ïï 
CreateTypePair
ïï -
(
ïï- .
param4
ïï. 4
)
ïï4 5
}
ññ 
)
ññ 
;
ññ 
}
óó 	
	protected
ôô 
sealed
ôô 
override
ôô !
IEnumerable
ôô" -
<
ôô- .
Type
ôô. 2
>
ôô2 3

ParamTypes
ôô4 >
{
öö 	
get
õõ 
{
úú 
yield
ùù 
return
ùù 
typeof
ùù #
(
ùù# $
TParam1
ùù$ +
)
ùù+ ,
;
ùù, -
yield
ûû 
return
ûû 
typeof
ûû #
(
ûû# $
TParam2
ûû$ +
)
ûû+ ,
;
ûû, -
yield
üü 
return
üü 
typeof
üü #
(
üü# $
TParam3
üü$ +
)
üü+ ,
;
üü, -
yield
†† 
return
†† 
typeof
†† #
(
††# $
TParam4
††$ +
)
††+ ,
;
††, -
}
°° 
}
¢¢ 	
}
££ 
[
•• 
Obsolete
•• 
(
•• 
$str
•• {
)
••{ |
]
••| }
public
¶¶ 

class
¶¶ 
Factory
¶¶ 
<
¶¶ 
TParam1
¶¶  
,
¶¶  !
TParam2
¶¶" )
,
¶¶) *
TParam3
¶¶+ 2
,
¶¶2 3
TParam4
¶¶4 ;
,
¶¶; <
TValue
¶¶= C
>
¶¶C D
:
ßß 	 
PlaceholderFactory
ßß
 
<
ßß 
TParam1
ßß $
,
ßß$ %
TParam2
ßß& -
,
ßß- .
TParam3
ßß/ 6
,
ßß6 7
TParam4
ßß8 ?
,
ßß? @
TValue
ßßA G
>
ßßG H
{
®® 
}
©© 
public
¨¨ 

class
¨¨  
PlaceholderFactory
¨¨ #
<
¨¨# $
TParam1
¨¨$ +
,
¨¨+ ,
TParam2
¨¨- 4
,
¨¨4 5
TParam3
¨¨6 =
,
¨¨= >
TParam4
¨¨? F
,
¨¨F G
TParam5
¨¨H O
,
¨¨O P
TValue
¨¨Q W
>
¨¨W X
:
≠≠ 	$
PlaceholderFactoryBase
≠≠
  
<
≠≠  !
TValue
≠≠! '
>
≠≠' (
,
≠≠( )
IFactory
≠≠* 2
<
≠≠2 3
TParam1
≠≠3 :
,
≠≠: ;
TParam2
≠≠< C
,
≠≠C D
TParam3
≠≠E L
,
≠≠L M
TParam4
≠≠N U
,
≠≠U V
TParam5
≠≠W ^
,
≠≠^ _
TValue
≠≠` f
>
≠≠f g
{
ÆÆ 
[
≤≤ 	
NotNull
≤≤	 
]
≤≤ 
public
¥¥ 
virtual
¥¥ 
TValue
¥¥ 
Create
¥¥ $
(
¥¥$ %
TParam1
¥¥% ,
param1
¥¥- 3
,
¥¥3 4
TParam2
¥¥5 <
param2
¥¥= C
,
¥¥C D
TParam3
¥¥E L
param3
¥¥M S
,
¥¥S T
TParam4
¥¥U \
param4
¥¥] c
,
¥¥c d
TParam5
¥¥e l
param5
¥¥m s
)
¥¥s t
{
µµ 	
return
∂∂ 
CreateInternal
∂∂ !
(
∂∂! "
new
∑∑ 
List
∑∑ 
<
∑∑ 
TypeValuePair
∑∑ &
>
∑∑& '
{
∏∏ 

InjectUtil
ππ 
.
ππ 
CreateTypePair
ππ -
(
ππ- .
param1
ππ. 4
)
ππ4 5
,
ππ5 6

InjectUtil
∫∫ 
.
∫∫ 
CreateTypePair
∫∫ -
(
∫∫- .
param2
∫∫. 4
)
∫∫4 5
,
∫∫5 6

InjectUtil
ªª 
.
ªª 
CreateTypePair
ªª -
(
ªª- .
param3
ªª. 4
)
ªª4 5
,
ªª5 6

InjectUtil
ºº 
.
ºº 
CreateTypePair
ºº -
(
ºº- .
param4
ºº. 4
)
ºº4 5
,
ºº5 6

InjectUtil
ΩΩ 
.
ΩΩ 
CreateTypePair
ΩΩ -
(
ΩΩ- .
param5
ΩΩ. 4
)
ΩΩ4 5
}
ææ 
)
ææ 
;
ææ 
}
øø 	
	protected
¡¡ 
sealed
¡¡ 
override
¡¡ !
IEnumerable
¡¡" -
<
¡¡- .
Type
¡¡. 2
>
¡¡2 3

ParamTypes
¡¡4 >
{
¬¬ 	
get
√√ 
{
ƒƒ 
yield
≈≈ 
return
≈≈ 
typeof
≈≈ #
(
≈≈# $
TParam1
≈≈$ +
)
≈≈+ ,
;
≈≈, -
yield
∆∆ 
return
∆∆ 
typeof
∆∆ #
(
∆∆# $
TParam2
∆∆$ +
)
∆∆+ ,
;
∆∆, -
yield
«« 
return
«« 
typeof
«« #
(
««# $
TParam3
««$ +
)
««+ ,
;
««, -
yield
»» 
return
»» 
typeof
»» #
(
»»# $
TParam4
»»$ +
)
»»+ ,
;
»», -
yield
…… 
return
…… 
typeof
…… #
(
……# $
TParam5
……$ +
)
……+ ,
;
……, -
}
   
}
ÀÀ 	
}
ÃÃ 
[
ŒŒ 
Obsolete
ŒŒ 
(
ŒŒ 
$str
ŒŒ {
)
ŒŒ{ |
]
ŒŒ| }
public
œœ 

class
œœ 
Factory
œœ 
<
œœ 
TParam1
œœ  
,
œœ  !
TParam2
œœ" )
,
œœ) *
TParam3
œœ+ 2
,
œœ2 3
TParam4
œœ4 ;
,
œœ; <
TParam5
œœ= D
,
œœD E
TValue
œœF L
>
œœL M
:
–– 	 
PlaceholderFactory
––
 
<
–– 
TParam1
–– $
,
––$ %
TParam2
––& -
,
––- .
TParam3
––/ 6
,
––6 7
TParam4
––8 ?
,
––? @
TParam5
––A H
,
––H I
TValue
––J P
>
––P Q
{
—— 
}
““ 
public
’’ 

class
’’  
PlaceholderFactory
’’ #
<
’’# $
TParam1
’’$ +
,
’’+ ,
TParam2
’’- 4
,
’’4 5
TParam3
’’6 =
,
’’= >
TParam4
’’? F
,
’’F G
TParam5
’’H O
,
’’O P
TParam6
’’Q X
,
’’X Y
TValue
’’Z `
>
’’` a
:
÷÷ 	$
PlaceholderFactoryBase
÷÷
  
<
÷÷  !
TValue
÷÷! '
>
÷÷' (
,
÷÷( )
IFactory
÷÷* 2
<
÷÷2 3
TParam1
÷÷3 :
,
÷÷: ;
TParam2
÷÷< C
,
÷÷C D
TParam3
÷÷E L
,
÷÷L M
TParam4
÷÷N U
,
÷÷U V
TParam5
÷÷W ^
,
÷÷^ _
TParam6
÷÷` g
,
÷÷g h
TValue
÷÷i o
>
÷÷o p
{
◊◊ 
[
€€ 	
NotNull
€€	 
]
€€ 
public
›› 
virtual
›› 
TValue
›› 
Create
›› $
(
››$ %
TParam1
››% ,
param1
››- 3
,
››3 4
TParam2
››5 <
param2
››= C
,
››C D
TParam3
››E L
param3
››M S
,
››S T
TParam4
››U \
param4
››] c
,
››c d
TParam5
››e l
param5
››m s
,
››s t
TParam6
››u |
param6››} É
)››É Ñ
{
ﬁﬁ 	
return
ﬂﬂ 
CreateInternal
ﬂﬂ !
(
ﬂﬂ! "
new
‡‡ 
List
‡‡ 
<
‡‡ 
TypeValuePair
‡‡ &
>
‡‡& '
{
·· 

InjectUtil
‚‚ 
.
‚‚ 
CreateTypePair
‚‚ -
(
‚‚- .
param1
‚‚. 4
)
‚‚4 5
,
‚‚5 6

InjectUtil
„„ 
.
„„ 
CreateTypePair
„„ -
(
„„- .
param2
„„. 4
)
„„4 5
,
„„5 6

InjectUtil
‰‰ 
.
‰‰ 
CreateTypePair
‰‰ -
(
‰‰- .
param3
‰‰. 4
)
‰‰4 5
,
‰‰5 6

InjectUtil
ÂÂ 
.
ÂÂ 
CreateTypePair
ÂÂ -
(
ÂÂ- .
param4
ÂÂ. 4
)
ÂÂ4 5
,
ÂÂ5 6

InjectUtil
ÊÊ 
.
ÊÊ 
CreateTypePair
ÊÊ -
(
ÊÊ- .
param5
ÊÊ. 4
)
ÊÊ4 5
,
ÊÊ5 6

InjectUtil
ÁÁ 
.
ÁÁ 
CreateTypePair
ÁÁ -
(
ÁÁ- .
param6
ÁÁ. 4
)
ÁÁ4 5
}
ËË 
)
ËË 
;
ËË 
}
ÈÈ 	
	protected
ÎÎ 
sealed
ÎÎ 
override
ÎÎ !
IEnumerable
ÎÎ" -
<
ÎÎ- .
Type
ÎÎ. 2
>
ÎÎ2 3

ParamTypes
ÎÎ4 >
{
ÏÏ 	
get
ÌÌ 
{
ÓÓ 
yield
ÔÔ 
return
ÔÔ 
typeof
ÔÔ #
(
ÔÔ# $
TParam1
ÔÔ$ +
)
ÔÔ+ ,
;
ÔÔ, -
yield
 
return
 
typeof
 #
(
# $
TParam2
$ +
)
+ ,
;
, -
yield
ÒÒ 
return
ÒÒ 
typeof
ÒÒ #
(
ÒÒ# $
TParam3
ÒÒ$ +
)
ÒÒ+ ,
;
ÒÒ, -
yield
ÚÚ 
return
ÚÚ 
typeof
ÚÚ #
(
ÚÚ# $
TParam4
ÚÚ$ +
)
ÚÚ+ ,
;
ÚÚ, -
yield
ÛÛ 
return
ÛÛ 
typeof
ÛÛ #
(
ÛÛ# $
TParam5
ÛÛ$ +
)
ÛÛ+ ,
;
ÛÛ, -
yield
ÙÙ 
return
ÙÙ 
typeof
ÙÙ #
(
ÙÙ# $
TParam6
ÙÙ$ +
)
ÙÙ+ ,
;
ÙÙ, -
}
ıı 
}
ˆˆ 	
}
˜˜ 
[
˘˘ 
Obsolete
˘˘ 
(
˘˘ 
$str
˘˘ {
)
˘˘{ |
]
˘˘| }
public
˙˙ 

class
˙˙ 
Factory
˙˙ 
<
˙˙ 
TParam1
˙˙  
,
˙˙  !
TParam2
˙˙" )
,
˙˙) *
TParam3
˙˙+ 2
,
˙˙2 3
TParam4
˙˙4 ;
,
˙˙; <
TParam5
˙˙= D
,
˙˙D E
TParam6
˙˙F M
,
˙˙M N
TValue
˙˙O U
>
˙˙U V
:
˚˚ 	 
PlaceholderFactory
˚˚
 
<
˚˚ 
TParam1
˚˚ $
,
˚˚$ %
TParam2
˚˚& -
,
˚˚- .
TParam3
˚˚/ 6
,
˚˚6 7
TParam4
˚˚8 ?
,
˚˚? @
TParam5
˚˚A H
,
˚˚H I
TParam6
˚˚J Q
,
˚˚Q R
TValue
˚˚S Y
>
˚˚Y Z
{
¸¸ 
}
˝˝ 
public
ÄÄ 

class
ÄÄ  
PlaceholderFactory
ÄÄ #
<
ÄÄ# $
TParam1
ÄÄ$ +
,
ÄÄ+ ,
TParam2
ÄÄ- 4
,
ÄÄ4 5
TParam3
ÄÄ6 =
,
ÄÄ= >
TParam4
ÄÄ? F
,
ÄÄF G
TParam5
ÄÄH O
,
ÄÄO P
TParam6
ÄÄQ X
,
ÄÄX Y
TParam7
ÄÄZ a
,
ÄÄa b
TParam8
ÄÄc j
,
ÄÄj k
TParam9
ÄÄl s
,
ÄÄs t
TParam10
ÄÄu }
,
ÄÄ} ~
TValueÄÄ Ö
>ÄÄÖ Ü
:
ÅÅ 	$
PlaceholderFactoryBase
ÅÅ
  
<
ÅÅ  !
TValue
ÅÅ! '
>
ÅÅ' (
,
ÅÅ( )
IFactory
ÅÅ* 2
<
ÅÅ2 3
TParam1
ÅÅ3 :
,
ÅÅ: ;
TParam2
ÅÅ< C
,
ÅÅC D
TParam3
ÅÅE L
,
ÅÅL M
TParam4
ÅÅN U
,
ÅÅU V
TParam5
ÅÅW ^
,
ÅÅ^ _
TParam6
ÅÅ` g
,
ÅÅg h
TParam7
ÅÅi p
,
ÅÅp q
TParam8
ÅÅr y
,
ÅÅy z
TParam9ÅÅ{ Ç
,ÅÅÇ É
TParam10ÅÅÑ å
,ÅÅå ç
TValueÅÅé î
>ÅÅî ï
{
ÇÇ 
public
ÑÑ 
virtual
ÑÑ 
TValue
ÑÑ 
Create
ÑÑ $
(
ÑÑ$ %
TParam1
ÑÑ% ,
param1
ÑÑ- 3
,
ÑÑ3 4
TParam2
ÑÑ5 <
param2
ÑÑ= C
,
ÑÑC D
TParam3
ÑÑE L
param3
ÑÑM S
,
ÑÑS T
TParam4
ÑÑU \
param4
ÑÑ] c
,
ÑÑc d
TParam5
ÑÑe l
param5
ÑÑm s
,
ÑÑs t
TParam6
ÑÑu |
param6ÑÑ} É
,ÑÑÉ Ñ
TParam7ÑÑÖ å
param7ÑÑç ì
,ÑÑì î
TParam8ÑÑï ú
param8ÑÑù £
,ÑÑ£ §
TParam9ÑÑ• ¨
param9ÑÑ≠ ≥
,ÑÑ≥ ¥
TParam10ÑÑµ Ω
param10ÑÑæ ≈
)ÑÑ≈ ∆
{
ÖÖ 	
return
ÜÜ 
CreateInternal
ÜÜ !
(
ÜÜ! "
new
áá 
List
áá 
<
áá 
TypeValuePair
áá &
>
áá& '
{
àà 

InjectUtil
ââ 
.
ââ 
CreateTypePair
ââ -
(
ââ- .
param1
ââ. 4
)
ââ4 5
,
ââ5 6

InjectUtil
ää 
.
ää 
CreateTypePair
ää -
(
ää- .
param2
ää. 4
)
ää4 5
,
ää5 6

InjectUtil
ãã 
.
ãã 
CreateTypePair
ãã -
(
ãã- .
param3
ãã. 4
)
ãã4 5
,
ãã5 6

InjectUtil
åå 
.
åå 
CreateTypePair
åå -
(
åå- .
param4
åå. 4
)
åå4 5
,
åå5 6

InjectUtil
çç 
.
çç 
CreateTypePair
çç -
(
çç- .
param5
çç. 4
)
çç4 5
,
çç5 6

InjectUtil
éé 
.
éé 
CreateTypePair
éé -
(
éé- .
param6
éé. 4
)
éé4 5
,
éé5 6

InjectUtil
èè 
.
èè 
CreateTypePair
èè -
(
èè- .
param7
èè. 4
)
èè4 5
,
èè5 6

InjectUtil
êê 
.
êê 
CreateTypePair
êê -
(
êê- .
param8
êê. 4
)
êê4 5
,
êê5 6

InjectUtil
ëë 
.
ëë 
CreateTypePair
ëë -
(
ëë- .
param9
ëë. 4
)
ëë4 5
,
ëë5 6

InjectUtil
íí 
.
íí 
CreateTypePair
íí -
(
íí- .
param10
íí. 5
)
íí5 6
}
ìì 
)
ìì 
;
ìì 
}
îî 	
	protected
ññ 
sealed
ññ 
override
ññ !
IEnumerable
ññ" -
<
ññ- .
Type
ññ. 2
>
ññ2 3

ParamTypes
ññ4 >
{
óó 	
get
òò 
{
ôô 
yield
öö 
return
öö 
typeof
öö #
(
öö# $
TParam1
öö$ +
)
öö+ ,
;
öö, -
yield
õõ 
return
õõ 
typeof
õõ #
(
õõ# $
TParam2
õõ$ +
)
õõ+ ,
;
õõ, -
yield
úú 
return
úú 
typeof
úú #
(
úú# $
TParam3
úú$ +
)
úú+ ,
;
úú, -
yield
ùù 
return
ùù 
typeof
ùù #
(
ùù# $
TParam4
ùù$ +
)
ùù+ ,
;
ùù, -
yield
ûû 
return
ûû 
typeof
ûû #
(
ûû# $
TParam5
ûû$ +
)
ûû+ ,
;
ûû, -
yield
üü 
return
üü 
typeof
üü #
(
üü# $
TParam6
üü$ +
)
üü+ ,
;
üü, -
yield
†† 
return
†† 
typeof
†† #
(
††# $
TParam7
††$ +
)
††+ ,
;
††, -
yield
°° 
return
°° 
typeof
°° #
(
°°# $
TParam8
°°$ +
)
°°+ ,
;
°°, -
yield
¢¢ 
return
¢¢ 
typeof
¢¢ #
(
¢¢# $
TParam9
¢¢$ +
)
¢¢+ ,
;
¢¢, -
yield
££ 
return
££ 
typeof
££ #
(
££# $
TParam10
££$ ,
)
££, -
;
££- .
}
§§ 
}
•• 	
}
¶¶ 
[
®® 
Obsolete
®® 
(
®® 
$str
®® {
)
®®{ |
]
®®| }
public
©© 

class
©© 
Factory
©© 
<
©© 
TParam1
©©  
,
©©  !
TParam2
©©" )
,
©©) *
TParam3
©©+ 2
,
©©2 3
TParam4
©©4 ;
,
©©; <
TParam5
©©= D
,
©©D E
TParam6
©©F M
,
©©M N
TParam7
©©O V
,
©©V W
TParam8
©©X _
,
©©_ `
TParam9
©©a h
,
©©h i
TParam10
©©j r
,
©©r s
TValue
©©t z
>
©©z {
:
™™ 	 
PlaceholderFactory
™™
 
<
™™ 
TParam1
™™ $
,
™™$ %
TParam2
™™& -
,
™™- .
TParam3
™™/ 6
,
™™6 7
TParam4
™™8 ?
,
™™? @
TParam5
™™A H
,
™™H I
TParam6
™™J Q
,
™™Q R
TParam7
™™S Z
,
™™Z [
TParam8
™™\ c
,
™™c d
TParam9
™™e l
,
™™l m
TParam10
™™n v
,
™™v w
TValue
™™x ~
>
™™~ 
{
´´ 
}
¨¨ 
}≠≠ Õ¨
}C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByMethod.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

abstract

 
class

 +
SubContainerCreatorByMethodBase

 9
:

: ; 
ISubContainerCreator

< P
{ 
readonly 
DiContainer 

_container '
;' (
readonly '
SubContainerCreatorBindInfo ,
_containerBindInfo- ?
;? @
public +
SubContainerCreatorByMethodBase .
(. /
DiContainer 
	container !
,! "'
SubContainerCreatorBindInfo# >
containerBindInfo? P
)P Q
{ 	

_container 
= 
	container "
;" #
_containerBindInfo 
=  
containerBindInfo! 2
;2 3
} 	
public 
abstract 
DiContainer #
CreateSubContainer$ 6
(6 7
List 
< 
TypeValuePair 
> 
args  $
,$ %
InjectContext& 3
context4 ;
); <
;< =
	protected 
DiContainer #
CreateEmptySubContainer 5
(5 6
)6 7
{ 	
var 
subContainer 
= 

_container )
.) *
CreateSubContainer* <
(< =
)= >
;> ?#
SubContainerCreatorUtil #
.# $
ApplyBindSettings$ 5
(5 6
_containerBindInfo6 H
,H I
subContainerJ V
)V W
;W X
return 
subContainer 
;  
} 	
} 
[!! 
NoReflectionBaking!! 
]!! 
public"" 

class"" '
SubContainerCreatorByMethod"" ,
:""- .+
SubContainerCreatorByMethodBase""/ N
{## 
readonly$$ 
Action$$ 
<$$ 
DiContainer$$ #
>$$# $
_installMethod$$% 3
;$$3 4
public&& '
SubContainerCreatorByMethod&& *
(&&* +
DiContainer'' 
	container'' !
,''! "'
SubContainerCreatorBindInfo(( '
containerBindInfo((( 9
,((9 :
Action)) 
<)) 
DiContainer)) 
>)) 
installMethod))  -
)))- .
:** 
base** 
(** 
	container** 
,** 
containerBindInfo** /
)**/ 0
{++ 	
_installMethod,, 
=,, 
installMethod,, *
;,,* +
}-- 	
public// 
override// 
DiContainer// #
CreateSubContainer//$ 6
(//6 7
List//7 ;
<//; <
TypeValuePair//< I
>//I J
args//K O
,//O P
InjectContext//Q ^
context//_ f
)//f g
{00 	
Assert11 
.11 
IsEmpty11 
(11 
args11 
)11  
;11  !
var33 
subContainer33 
=33 #
CreateEmptySubContainer33 6
(336 7
)337 8
;338 9
_installMethod55 
(55 
subContainer55 '
)55' (
;55( )
subContainer77 
.77 
ResolveRoots77 %
(77% &
)77& '
;77' (
return99 
subContainer99 
;99  
}:: 	
};; 
[?? 
NoReflectionBaking?? 
]?? 
public@@ 

class@@ '
SubContainerCreatorByMethod@@ ,
<@@, -
TParam1@@- 4
>@@4 5
:@@6 7+
SubContainerCreatorByMethodBase@@8 W
{AA 
readonlyBB 
ActionBB 
<BB 
DiContainerBB #
,BB# $
TParam1BB% ,
>BB, -
_installMethodBB. <
;BB< =
publicDD '
SubContainerCreatorByMethodDD *
(DD* +
DiContainerEE 
	containerEE !
,EE! "'
SubContainerCreatorBindInfoFF '
containerBindInfoFF( 9
,FF9 :
ActionGG 
<GG 
DiContainerGG 
,GG 
TParam1GG  '
>GG' (
installMethodGG) 6
)GG6 7
:HH 
baseHH 
(HH 
	containerHH 
,HH 
containerBindInfoHH /
)HH/ 0
{II 	
_installMethodJJ 
=JJ 
installMethodJJ *
;JJ* +
}KK 	
publicMM 
overrideMM 
DiContainerMM #
CreateSubContainerMM$ 6
(MM6 7
ListMM7 ;
<MM; <
TypeValuePairMM< I
>MMI J
argsMMK O
,MMO P
InjectContextMMQ ^
contextMM_ f
)MMf g
{NN 	
AssertOO 
.OO 
IsEqualOO 
(OO 
argsOO 
.OO  
CountOO  %
,OO% &
$numOO' (
)OO( )
;OO) *
AssertPP 
.PP 
ThatPP 
(PP 
argsPP 
[PP 
$numPP 
]PP 
.PP  
TypePP  $
.PP$ %
DerivesFromOrEqualPP% 7
<PP7 8
TParam1PP8 ?
>PP? @
(PP@ A
)PPA B
)PPB C
;PPC D
varRR 
subContainerRR 
=RR #
CreateEmptySubContainerRR 6
(RR6 7
)RR7 8
;RR8 9
_installMethodTT 
(TT 
subContainerTT '
,TT' (
(TT) *
TParam1TT* 1
)TT1 2
argsTT2 6
[TT6 7
$numTT7 8
]TT8 9
.TT9 :
ValueTT: ?
)TT? @
;TT@ A
subContainerVV 
.VV 
ResolveRootsVV %
(VV% &
)VV& '
;VV' (
returnXX 
subContainerXX 
;XX  
}YY 	
}ZZ 
[^^ 
NoReflectionBaking^^ 
]^^ 
public__ 

class__ '
SubContainerCreatorByMethod__ ,
<__, -
TParam1__- 4
,__4 5
TParam2__6 =
>__= >
:__? @+
SubContainerCreatorByMethodBase__A `
{`` 
readonlyaa 
Actionaa 
<aa 
DiContaineraa #
,aa# $
TParam1aa% ,
,aa, -
TParam2aa. 5
>aa5 6
_installMethodaa7 E
;aaE F
publiccc '
SubContainerCreatorByMethodcc *
(cc* +
DiContainerdd 
	containerdd !
,dd! "'
SubContainerCreatorBindInfoee '
containerBindInfoee( 9
,ee9 :
Actionff 
<ff 
DiContainerff 
,ff 
TParam1ff  '
,ff' (
TParam2ff) 0
>ff0 1
installMethodff2 ?
)ff? @
:gg 
basegg 
(gg 
	containergg 
,gg 
containerBindInfogg /
)gg/ 0
{hh 	
_installMethodii 
=ii 
installMethodii *
;ii* +
}jj 	
publicll 
overridell 
DiContainerll #
CreateSubContainerll$ 6
(ll6 7
Listll7 ;
<ll; <
TypeValuePairll< I
>llI J
argsllK O
,llO P
InjectContextllQ ^
contextll_ f
)llf g
{mm 	
Assertnn 
.nn 
IsEqualnn 
(nn 
argsnn 
.nn  
Countnn  %
,nn% &
$numnn' (
)nn( )
;nn) *
Assertoo 
.oo 
Thatoo 
(oo 
argsoo 
[oo 
$numoo 
]oo 
.oo  
Typeoo  $
.oo$ %
DerivesFromOrEqualoo% 7
<oo7 8
TParam1oo8 ?
>oo? @
(oo@ A
)ooA B
)ooB C
;ooC D
Assertpp 
.pp 
Thatpp 
(pp 
argspp 
[pp 
$numpp 
]pp 
.pp  
Typepp  $
.pp$ %
DerivesFromOrEqualpp% 7
<pp7 8
TParam2pp8 ?
>pp? @
(pp@ A
)ppA B
)ppB C
;ppC D
varrr 
subContainerrr 
=rr #
CreateEmptySubContainerrr 6
(rr6 7
)rr7 8
;rr8 9
_installMethodtt 
(tt 
subContaineruu 
,uu 
(vv 
TParam1vv 
)vv 
argsvv 
[vv 
$numvv 
]vv  
.vv  !
Valuevv! &
,vv& '
(ww 
TParam2ww 
)ww 
argsww 
[ww 
$numww 
]ww  
.ww  !
Valueww! &
)ww& '
;ww' (
subContaineryy 
.yy 
ResolveRootsyy %
(yy% &
)yy& '
;yy' (
return{{ 
subContainer{{ 
;{{  
}|| 	
}}} 
[
ÅÅ  
NoReflectionBaking
ÅÅ 
]
ÅÅ 
public
ÇÇ 

class
ÇÇ )
SubContainerCreatorByMethod
ÇÇ ,
<
ÇÇ, -
TParam1
ÇÇ- 4
,
ÇÇ4 5
TParam2
ÇÇ6 =
,
ÇÇ= >
TParam3
ÇÇ? F
>
ÇÇF G
:
ÇÇH I-
SubContainerCreatorByMethodBase
ÇÇJ i
{
ÉÉ 
readonly
ÑÑ 
Action
ÑÑ 
<
ÑÑ 
DiContainer
ÑÑ #
,
ÑÑ# $
TParam1
ÑÑ% ,
,
ÑÑ, -
TParam2
ÑÑ. 5
,
ÑÑ5 6
TParam3
ÑÑ7 >
>
ÑÑ> ?
_installMethod
ÑÑ@ N
;
ÑÑN O
public
ÜÜ )
SubContainerCreatorByMethod
ÜÜ *
(
ÜÜ* +
DiContainer
áá 
	container
áá !
,
áá! ")
SubContainerCreatorBindInfo
àà '
containerBindInfo
àà( 9
,
àà9 :
Action
ââ 
<
ââ 
DiContainer
ââ 
,
ââ 
TParam1
ââ  '
,
ââ' (
TParam2
ââ) 0
,
ââ0 1
TParam3
ââ2 9
>
ââ9 :
installMethod
ââ; H
)
ââH I
:
ää 
base
ää 
(
ää 
	container
ää 
,
ää 
containerBindInfo
ää /
)
ää/ 0
{
ãã 	
_installMethod
åå 
=
åå 
installMethod
åå *
;
åå* +
}
çç 	
public
èè 
override
èè 
DiContainer
èè # 
CreateSubContainer
èè$ 6
(
èè6 7
List
èè7 ;
<
èè; <
TypeValuePair
èè< I
>
èèI J
args
èèK O
,
èèO P
InjectContext
èèQ ^
context
èè_ f
)
èèf g
{
êê 	
Assert
ëë 
.
ëë 
IsEqual
ëë 
(
ëë 
args
ëë 
.
ëë  
Count
ëë  %
,
ëë% &
$num
ëë' (
)
ëë( )
;
ëë) *
Assert
íí 
.
íí 
That
íí 
(
íí 
args
íí 
[
íí 
$num
íí 
]
íí 
.
íí  
Type
íí  $
.
íí$ % 
DerivesFromOrEqual
íí% 7
<
íí7 8
TParam1
íí8 ?
>
íí? @
(
íí@ A
)
ííA B
)
ííB C
;
ííC D
Assert
ìì 
.
ìì 
That
ìì 
(
ìì 
args
ìì 
[
ìì 
$num
ìì 
]
ìì 
.
ìì  
Type
ìì  $
.
ìì$ % 
DerivesFromOrEqual
ìì% 7
<
ìì7 8
TParam2
ìì8 ?
>
ìì? @
(
ìì@ A
)
ììA B
)
ììB C
;
ììC D
Assert
îî 
.
îî 
That
îî 
(
îî 
args
îî 
[
îî 
$num
îî 
]
îî 
.
îî  
Type
îî  $
.
îî$ % 
DerivesFromOrEqual
îî% 7
<
îî7 8
TParam3
îî8 ?
>
îî? @
(
îî@ A
)
îîA B
)
îîB C
;
îîC D
var
ññ 
subContainer
ññ 
=
ññ %
CreateEmptySubContainer
ññ 6
(
ññ6 7
)
ññ7 8
;
ññ8 9
_installMethod
òò 
(
òò 
subContainer
ôô 
,
ôô 
(
öö 
TParam1
öö 
)
öö 
args
öö 
[
öö 
$num
öö 
]
öö  
.
öö  !
Value
öö! &
,
öö& '
(
õõ 
TParam2
õõ 
)
õõ 
args
õõ 
[
õõ 
$num
õõ 
]
õõ  
.
õõ  !
Value
õõ! &
,
õõ& '
(
úú 
TParam3
úú 
)
úú 
args
úú 
[
úú 
$num
úú 
]
úú  
.
úú  !
Value
úú! &
)
úú& '
;
úú' (
subContainer
ûû 
.
ûû 
ResolveRoots
ûû %
(
ûû% &
)
ûû& '
;
ûû' (
return
†† 
subContainer
†† 
;
††  
}
°° 	
}
¢¢ 
[
¶¶  
NoReflectionBaking
¶¶ 
]
¶¶ 
public
ßß 

class
ßß )
SubContainerCreatorByMethod
ßß ,
<
ßß, -
TParam1
ßß- 4
,
ßß4 5
TParam2
ßß6 =
,
ßß= >
TParam3
ßß? F
,
ßßF G
TParam4
ßßH O
>
ßßO P
:
ßßQ R-
SubContainerCreatorByMethodBase
ßßS r
{
®® 
readonly
©© 
Action
≠≠ 
<
≠≠ 
DiContainer
≠≠ 
,
≠≠ 
TParam1
≠≠  '
,
≠≠' (
TParam2
≠≠) 0
,
≠≠0 1
TParam3
≠≠2 9
,
≠≠9 :
TParam4
≠≠; B
>
≠≠B C
_installMethod
≠≠D R
;
≠≠R S
public
ØØ )
SubContainerCreatorByMethod
ØØ *
(
ØØ* +
DiContainer
∞∞ 
	container
∞∞ !
,
∞∞! ")
SubContainerCreatorBindInfo
±± '
containerBindInfo
±±( 9
,
±±9 :
Action
µµ 
<
µµ 
DiContainer
µµ 
,
µµ 
TParam1
µµ  '
,
µµ' (
TParam2
µµ) 0
,
µµ0 1
TParam3
µµ2 9
,
µµ9 :
TParam4
µµ; B
>
µµB C
installMethod
µµD Q
)
µµQ R
:
∂∂ 
base
∂∂ 
(
∂∂ 
	container
∂∂ 
,
∂∂ 
containerBindInfo
∂∂ /
)
∂∂/ 0
{
∑∑ 	
_installMethod
∏∏ 
=
∏∏ 
installMethod
∏∏ *
;
∏∏* +
}
ππ 	
public
ªª 
override
ªª 
DiContainer
ªª # 
CreateSubContainer
ªª$ 6
(
ªª6 7
List
ªª7 ;
<
ªª; <
TypeValuePair
ªª< I
>
ªªI J
args
ªªK O
,
ªªO P
InjectContext
ªªQ ^
context
ªª_ f
)
ªªf g
{
ºº 	
Assert
ΩΩ 
.
ΩΩ 
IsEqual
ΩΩ 
(
ΩΩ 
args
ΩΩ 
.
ΩΩ  
Count
ΩΩ  %
,
ΩΩ% &
$num
ΩΩ' (
)
ΩΩ( )
;
ΩΩ) *
Assert
ææ 
.
ææ 
That
ææ 
(
ææ 
args
ææ 
[
ææ 
$num
ææ 
]
ææ 
.
ææ  
Type
ææ  $
.
ææ$ % 
DerivesFromOrEqual
ææ% 7
<
ææ7 8
TParam1
ææ8 ?
>
ææ? @
(
ææ@ A
)
ææA B
)
ææB C
;
ææC D
Assert
øø 
.
øø 
That
øø 
(
øø 
args
øø 
[
øø 
$num
øø 
]
øø 
.
øø  
Type
øø  $
.
øø$ % 
DerivesFromOrEqual
øø% 7
<
øø7 8
TParam2
øø8 ?
>
øø? @
(
øø@ A
)
øøA B
)
øøB C
;
øøC D
Assert
¿¿ 
.
¿¿ 
That
¿¿ 
(
¿¿ 
args
¿¿ 
[
¿¿ 
$num
¿¿ 
]
¿¿ 
.
¿¿  
Type
¿¿  $
.
¿¿$ % 
DerivesFromOrEqual
¿¿% 7
<
¿¿7 8
TParam3
¿¿8 ?
>
¿¿? @
(
¿¿@ A
)
¿¿A B
)
¿¿B C
;
¿¿C D
Assert
¡¡ 
.
¡¡ 
That
¡¡ 
(
¡¡ 
args
¡¡ 
[
¡¡ 
$num
¡¡ 
]
¡¡ 
.
¡¡  
Type
¡¡  $
.
¡¡$ % 
DerivesFromOrEqual
¡¡% 7
<
¡¡7 8
TParam4
¡¡8 ?
>
¡¡? @
(
¡¡@ A
)
¡¡A B
)
¡¡B C
;
¡¡C D
var
√√ 
subContainer
√√ 
=
√√ %
CreateEmptySubContainer
√√ 6
(
√√6 7
)
√√7 8
;
√√8 9
_installMethod
≈≈ 
(
≈≈ 
subContainer
∆∆ 
,
∆∆ 
(
«« 
TParam1
«« 
)
«« 
args
«« 
[
«« 
$num
«« 
]
««  
.
««  !
Value
««! &
,
««& '
(
»» 
TParam2
»» 
)
»» 
args
»» 
[
»» 
$num
»» 
]
»»  
.
»»  !
Value
»»! &
,
»»& '
(
…… 
TParam3
…… 
)
…… 
args
…… 
[
…… 
$num
…… 
]
……  
.
……  !
Value
……! &
,
……& '
(
   
TParam4
   
)
   
args
   
[
   
$num
   
]
    
.
    !
Value
  ! &
)
  & '
;
  ' (
subContainer
ÃÃ 
.
ÃÃ 
ResolveRoots
ÃÃ %
(
ÃÃ% &
)
ÃÃ& '
;
ÃÃ' (
return
ŒŒ 
subContainer
ŒŒ 
;
ŒŒ  
}
œœ 	
}
–– 
[
‘‘  
NoReflectionBaking
‘‘ 
]
‘‘ 
public
’’ 

class
’’ )
SubContainerCreatorByMethod
’’ ,
<
’’, -
TParam1
’’- 4
,
’’4 5
TParam2
’’6 =
,
’’= >
TParam3
’’? F
,
’’F G
TParam4
’’H O
,
’’O P
TParam5
’’Q X
>
’’X Y
:
’’Z [-
SubContainerCreatorByMethodBase
’’\ {
{
÷÷ 
readonly
◊◊ 
Action
€€ 
<
€€ 
DiContainer
€€ 
,
€€ 
TParam1
€€  '
,
€€' (
TParam2
€€) 0
,
€€0 1
TParam3
€€2 9
,
€€9 :
TParam4
€€; B
,
€€B C
TParam5
€€D K
>
€€K L
_installMethod
€€M [
;
€€[ \
public
›› )
SubContainerCreatorByMethod
›› *
(
››* +
DiContainer
ﬁﬁ 
	container
ﬁﬁ !
,
ﬁﬁ! ")
SubContainerCreatorBindInfo
ﬂﬂ '
containerBindInfo
ﬂﬂ( 9
,
ﬂﬂ9 :
Action
„„ 
<
„„ 
DiContainer
„„ 
,
„„ 
TParam1
„„  '
,
„„' (
TParam2
„„) 0
,
„„0 1
TParam3
„„2 9
,
„„9 :
TParam4
„„; B
,
„„B C
TParam5
„„D K
>
„„K L
installMethod
„„M Z
)
„„Z [
:
‰‰ 
base
‰‰ 
(
‰‰ 
	container
‰‰ 
,
‰‰ 
containerBindInfo
‰‰ /
)
‰‰/ 0
{
ÂÂ 	
_installMethod
ÊÊ 
=
ÊÊ 
installMethod
ÊÊ *
;
ÊÊ* +
}
ÁÁ 	
public
ÈÈ 
override
ÈÈ 
DiContainer
ÈÈ # 
CreateSubContainer
ÈÈ$ 6
(
ÈÈ6 7
List
ÈÈ7 ;
<
ÈÈ; <
TypeValuePair
ÈÈ< I
>
ÈÈI J
args
ÈÈK O
,
ÈÈO P
InjectContext
ÈÈQ ^
context
ÈÈ_ f
)
ÈÈf g
{
ÍÍ 	
Assert
ÎÎ 
.
ÎÎ 
IsEqual
ÎÎ 
(
ÎÎ 
args
ÎÎ 
.
ÎÎ  
Count
ÎÎ  %
,
ÎÎ% &
$num
ÎÎ' (
)
ÎÎ( )
;
ÎÎ) *
Assert
ÏÏ 
.
ÏÏ 
That
ÏÏ 
(
ÏÏ 
args
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
.
ÏÏ  
Type
ÏÏ  $
.
ÏÏ$ % 
DerivesFromOrEqual
ÏÏ% 7
<
ÏÏ7 8
TParam1
ÏÏ8 ?
>
ÏÏ? @
(
ÏÏ@ A
)
ÏÏA B
)
ÏÏB C
;
ÏÏC D
Assert
ÌÌ 
.
ÌÌ 
That
ÌÌ 
(
ÌÌ 
args
ÌÌ 
[
ÌÌ 
$num
ÌÌ 
]
ÌÌ 
.
ÌÌ  
Type
ÌÌ  $
.
ÌÌ$ % 
DerivesFromOrEqual
ÌÌ% 7
<
ÌÌ7 8
TParam2
ÌÌ8 ?
>
ÌÌ? @
(
ÌÌ@ A
)
ÌÌA B
)
ÌÌB C
;
ÌÌC D
Assert
ÓÓ 
.
ÓÓ 
That
ÓÓ 
(
ÓÓ 
args
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
.
ÓÓ  
Type
ÓÓ  $
.
ÓÓ$ % 
DerivesFromOrEqual
ÓÓ% 7
<
ÓÓ7 8
TParam3
ÓÓ8 ?
>
ÓÓ? @
(
ÓÓ@ A
)
ÓÓA B
)
ÓÓB C
;
ÓÓC D
Assert
ÔÔ 
.
ÔÔ 
That
ÔÔ 
(
ÔÔ 
args
ÔÔ 
[
ÔÔ 
$num
ÔÔ 
]
ÔÔ 
.
ÔÔ  
Type
ÔÔ  $
.
ÔÔ$ % 
DerivesFromOrEqual
ÔÔ% 7
<
ÔÔ7 8
TParam4
ÔÔ8 ?
>
ÔÔ? @
(
ÔÔ@ A
)
ÔÔA B
)
ÔÔB C
;
ÔÔC D
Assert
 
.
 
That
 
(
 
args
 
[
 
$num
 
]
 
.
  
Type
  $
.
$ % 
DerivesFromOrEqual
% 7
<
7 8
TParam5
8 ?
>
? @
(
@ A
)
A B
)
B C
;
C D
var
ÚÚ 
subContainer
ÚÚ 
=
ÚÚ %
CreateEmptySubContainer
ÚÚ 6
(
ÚÚ6 7
)
ÚÚ7 8
;
ÚÚ8 9
_installMethod
ÙÙ 
(
ÙÙ 
subContainer
ıı 
,
ıı 
(
ˆˆ 
TParam1
ˆˆ 
)
ˆˆ 
args
ˆˆ 
[
ˆˆ 
$num
ˆˆ 
]
ˆˆ  
.
ˆˆ  !
Value
ˆˆ! &
,
ˆˆ& '
(
˜˜ 
TParam2
˜˜ 
)
˜˜ 
args
˜˜ 
[
˜˜ 
$num
˜˜ 
]
˜˜  
.
˜˜  !
Value
˜˜! &
,
˜˜& '
(
¯¯ 
TParam3
¯¯ 
)
¯¯ 
args
¯¯ 
[
¯¯ 
$num
¯¯ 
]
¯¯  
.
¯¯  !
Value
¯¯! &
,
¯¯& '
(
˘˘ 
TParam4
˘˘ 
)
˘˘ 
args
˘˘ 
[
˘˘ 
$num
˘˘ 
]
˘˘  
.
˘˘  !
Value
˘˘! &
,
˘˘& '
(
˙˙ 
TParam5
˙˙ 
)
˙˙ 
args
˙˙ 
[
˙˙ 
$num
˙˙ 
]
˙˙  
.
˙˙  !
Value
˙˙! &
)
˙˙& '
;
˙˙' (
subContainer
¸¸ 
.
¸¸ 
ResolveRoots
¸¸ %
(
¸¸% &
)
¸¸& '
;
¸¸' (
return
˛˛ 
subContainer
˛˛ 
;
˛˛  
}
ˇˇ 	
}
ÄÄ 
[
ÑÑ  
NoReflectionBaking
ÑÑ 
]
ÑÑ 
public
ÖÖ 

class
ÖÖ )
SubContainerCreatorByMethod
ÖÖ ,
<
ÖÖ, -
TParam1
ÖÖ- 4
,
ÖÖ4 5
TParam2
ÖÖ6 =
,
ÖÖ= >
TParam3
ÖÖ? F
,
ÖÖF G
TParam4
ÖÖH O
,
ÖÖO P
TParam5
ÖÖQ X
,
ÖÖX Y
TParam6
ÖÖZ a
>
ÖÖa b
:
ÖÖc d.
SubContainerCreatorByMethodBaseÖÖe Ñ
{
ÜÜ 
readonly
áá 
Action
ãã 
<
ãã 
DiContainer
ãã 
,
ãã 
TParam1
ãã  '
,
ãã' (
TParam2
ãã) 0
,
ãã0 1
TParam3
ãã2 9
,
ãã9 :
TParam4
ãã; B
,
ããB C
TParam5
ããD K
,
ããK L
TParam6
ããM T
>
ããT U
_installMethod
ããV d
;
ããd e
public
çç )
SubContainerCreatorByMethod
çç *
(
çç* +
DiContainer
éé 
	container
éé !
,
éé! ")
SubContainerCreatorBindInfo
èè '
containerBindInfo
èè( 9
,
èè9 :
Action
ìì 
<
ìì 
DiContainer
ìì 
,
ìì 
TParam1
ìì  '
,
ìì' (
TParam2
ìì) 0
,
ìì0 1
TParam3
ìì2 9
,
ìì9 :
TParam4
ìì; B
,
ììB C
TParam5
ììD K
,
ììK L
TParam6
ììM T
>
ììT U
installMethod
ììV c
)
ììc d
:
îî 
base
îî 
(
îî 
	container
îî 
,
îî 
containerBindInfo
îî /
)
îî/ 0
{
ïï 	
_installMethod
ññ 
=
ññ 
installMethod
ññ *
;
ññ* +
}
óó 	
public
ôô 
override
ôô 
DiContainer
ôô # 
CreateSubContainer
ôô$ 6
(
ôô6 7
List
ôô7 ;
<
ôô; <
TypeValuePair
ôô< I
>
ôôI J
args
ôôK O
,
ôôO P
InjectContext
ôôQ ^
context
ôô_ f
)
ôôf g
{
öö 	
Assert
õõ 
.
õõ 
IsEqual
õõ 
(
õõ 
args
õõ 
.
õõ  
Count
õõ  %
,
õõ% &
$num
õõ' (
)
õõ( )
;
õõ) *
Assert
úú 
.
úú 
That
úú 
(
úú 
args
úú 
[
úú 
$num
úú 
]
úú 
.
úú  
Type
úú  $
.
úú$ % 
DerivesFromOrEqual
úú% 7
<
úú7 8
TParam1
úú8 ?
>
úú? @
(
úú@ A
)
úúA B
)
úúB C
;
úúC D
Assert
ùù 
.
ùù 
That
ùù 
(
ùù 
args
ùù 
[
ùù 
$num
ùù 
]
ùù 
.
ùù  
Type
ùù  $
.
ùù$ % 
DerivesFromOrEqual
ùù% 7
<
ùù7 8
TParam2
ùù8 ?
>
ùù? @
(
ùù@ A
)
ùùA B
)
ùùB C
;
ùùC D
Assert
ûû 
.
ûû 
That
ûû 
(
ûû 
args
ûû 
[
ûû 
$num
ûû 
]
ûû 
.
ûû  
Type
ûû  $
.
ûû$ % 
DerivesFromOrEqual
ûû% 7
<
ûû7 8
TParam3
ûû8 ?
>
ûû? @
(
ûû@ A
)
ûûA B
)
ûûB C
;
ûûC D
Assert
üü 
.
üü 
That
üü 
(
üü 
args
üü 
[
üü 
$num
üü 
]
üü 
.
üü  
Type
üü  $
.
üü$ % 
DerivesFromOrEqual
üü% 7
<
üü7 8
TParam4
üü8 ?
>
üü? @
(
üü@ A
)
üüA B
)
üüB C
;
üüC D
Assert
†† 
.
†† 
That
†† 
(
†† 
args
†† 
[
†† 
$num
†† 
]
†† 
.
††  
Type
††  $
.
††$ % 
DerivesFromOrEqual
††% 7
<
††7 8
TParam5
††8 ?
>
††? @
(
††@ A
)
††A B
)
††B C
;
††C D
Assert
°° 
.
°° 
That
°° 
(
°° 
args
°° 
[
°° 
$num
°° 
]
°° 
.
°°  
Type
°°  $
.
°°$ % 
DerivesFromOrEqual
°°% 7
<
°°7 8
TParam6
°°8 ?
>
°°? @
(
°°@ A
)
°°A B
)
°°B C
;
°°C D
var
££ 
subContainer
££ 
=
££ %
CreateEmptySubContainer
££ 6
(
££6 7
)
££7 8
;
££8 9
_installMethod
•• 
(
•• 
subContainer
¶¶ 
,
¶¶ 
(
ßß 
TParam1
ßß 
)
ßß 
args
ßß 
[
ßß 
$num
ßß 
]
ßß  
.
ßß  !
Value
ßß! &
,
ßß& '
(
®® 
TParam2
®® 
)
®® 
args
®® 
[
®® 
$num
®® 
]
®®  
.
®®  !
Value
®®! &
,
®®& '
(
©© 
TParam3
©© 
)
©© 
args
©© 
[
©© 
$num
©© 
]
©©  
.
©©  !
Value
©©! &
,
©©& '
(
™™ 
TParam4
™™ 
)
™™ 
args
™™ 
[
™™ 
$num
™™ 
]
™™  
.
™™  !
Value
™™! &
,
™™& '
(
´´ 
TParam5
´´ 
)
´´ 
args
´´ 
[
´´ 
$num
´´ 
]
´´  
.
´´  !
Value
´´! &
,
´´& '
(
¨¨ 
TParam6
¨¨ 
)
¨¨ 
args
¨¨ 
[
¨¨ 
$num
¨¨ 
]
¨¨  
.
¨¨  !
Value
¨¨! &
)
¨¨& '
;
¨¨' (
subContainer
ÆÆ 
.
ÆÆ 
ResolveRoots
ÆÆ %
(
ÆÆ% &
)
ÆÆ& '
;
ÆÆ' (
return
∞∞ 
subContainer
∞∞ 
;
∞∞  
}
±± 	
}
≤≤ 
[
∂∂  
NoReflectionBaking
∂∂ 
]
∂∂ 
public
∑∑ 

class
∑∑ )
SubContainerCreatorByMethod
∑∑ ,
<
∑∑, -
TParam1
∑∑- 4
,
∑∑4 5
TParam2
∑∑6 =
,
∑∑= >
TParam3
∑∑? F
,
∑∑F G
TParam4
∑∑H O
,
∑∑O P
TParam5
∑∑Q X
,
∑∑X Y
TParam6
∑∑Z a
,
∑∑a b
TParam7
∑∑c j
,
∑∑j k
TParam8
∑∑l s
,
∑∑s t
TParam9
∑∑u |
,
∑∑| }
TParam10∑∑~ Ü
>∑∑Ü á
:∑∑à â/
SubContainerCreatorByMethodBase∑∑ä ©
{
∏∏ 
readonly
ππ 
Action
ΩΩ 
<
ΩΩ 
DiContainer
ΩΩ 
,
ΩΩ 
TParam1
ΩΩ  '
,
ΩΩ' (
TParam2
ΩΩ) 0
,
ΩΩ0 1
TParam3
ΩΩ2 9
,
ΩΩ9 :
TParam4
ΩΩ; B
,
ΩΩB C
TParam5
ΩΩD K
,
ΩΩK L
TParam6
ΩΩM T
,
ΩΩT U
TParam7
ΩΩV ]
,
ΩΩ] ^
TParam8
ΩΩ_ f
,
ΩΩf g
TParam9
ΩΩh o
,
ΩΩo p
TParam10
ΩΩq y
>
ΩΩy z
_installMethodΩΩ{ â
;ΩΩâ ä
public
øø )
SubContainerCreatorByMethod
øø *
(
øø* +
DiContainer
¿¿ 
	container
¿¿ !
,
¿¿! ")
SubContainerCreatorBindInfo
¡¡ '
containerBindInfo
¡¡( 9
,
¡¡9 :
Action
≈≈ 
<
≈≈ 
DiContainer
≈≈ 
,
≈≈ 
TParam1
≈≈  '
,
≈≈' (
TParam2
≈≈) 0
,
≈≈0 1
TParam3
≈≈2 9
,
≈≈9 :
TParam4
≈≈; B
,
≈≈B C
TParam5
≈≈D K
,
≈≈K L
TParam6
≈≈M T
,
≈≈T U
TParam7
≈≈V ]
,
≈≈] ^
TParam8
≈≈_ f
,
≈≈f g
TParam9
≈≈h o
,
≈≈o p
TParam10
≈≈q y
>
≈≈y z
installMethod≈≈{ à
)≈≈à â
:
∆∆ 
base
∆∆ 
(
∆∆ 
	container
∆∆ 
,
∆∆ 
containerBindInfo
∆∆ /
)
∆∆/ 0
{
«« 	
_installMethod
»» 
=
»» 
installMethod
»» *
;
»»* +
}
…… 	
public
ÀÀ 
override
ÀÀ 
DiContainer
ÀÀ # 
CreateSubContainer
ÀÀ$ 6
(
ÀÀ6 7
List
ÀÀ7 ;
<
ÀÀ; <
TypeValuePair
ÀÀ< I
>
ÀÀI J
args
ÀÀK O
,
ÀÀO P
InjectContext
ÀÀQ ^
context
ÀÀ_ f
)
ÀÀf g
{
ÃÃ 	
Assert
ÕÕ 
.
ÕÕ 
IsEqual
ÕÕ 
(
ÕÕ 
args
ÕÕ 
.
ÕÕ  
Count
ÕÕ  %
,
ÕÕ% &
$num
ÕÕ' )
)
ÕÕ) *
;
ÕÕ* +
Assert
œœ 
.
œœ 
That
œœ 
(
œœ 
args
œœ 
[
œœ 
$num
œœ 
]
œœ 
.
œœ  
Type
œœ  $
.
œœ$ % 
DerivesFromOrEqual
œœ% 7
<
œœ7 8
TParam1
œœ8 ?
>
œœ? @
(
œœ@ A
)
œœA B
)
œœB C
;
œœC D
Assert
–– 
.
–– 
That
–– 
(
–– 
args
–– 
[
–– 
$num
–– 
]
–– 
.
––  
Type
––  $
.
––$ % 
DerivesFromOrEqual
––% 7
<
––7 8
TParam2
––8 ?
>
––? @
(
––@ A
)
––A B
)
––B C
;
––C D
Assert
—— 
.
—— 
That
—— 
(
—— 
args
—— 
[
—— 
$num
—— 
]
—— 
.
——  
Type
——  $
.
——$ % 
DerivesFromOrEqual
——% 7
<
——7 8
TParam3
——8 ?
>
——? @
(
——@ A
)
——A B
)
——B C
;
——C D
Assert
““ 
.
““ 
That
““ 
(
““ 
args
““ 
[
““ 
$num
““ 
]
““ 
.
““  
Type
““  $
.
““$ % 
DerivesFromOrEqual
““% 7
<
““7 8
TParam4
““8 ?
>
““? @
(
““@ A
)
““A B
)
““B C
;
““C D
Assert
”” 
.
”” 
That
”” 
(
”” 
args
”” 
[
”” 
$num
”” 
]
”” 
.
””  
Type
””  $
.
””$ % 
DerivesFromOrEqual
””% 7
<
””7 8
TParam5
””8 ?
>
””? @
(
””@ A
)
””A B
)
””B C
;
””C D
Assert
‘‘ 
.
‘‘ 
That
‘‘ 
(
‘‘ 
args
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
.
‘‘  
Type
‘‘  $
.
‘‘$ % 
DerivesFromOrEqual
‘‘% 7
<
‘‘7 8
TParam6
‘‘8 ?
>
‘‘? @
(
‘‘@ A
)
‘‘A B
)
‘‘B C
;
‘‘C D
Assert
’’ 
.
’’ 
That
’’ 
(
’’ 
args
’’ 
[
’’ 
$num
’’ 
]
’’ 
.
’’  
Type
’’  $
.
’’$ % 
DerivesFromOrEqual
’’% 7
<
’’7 8
TParam7
’’8 ?
>
’’? @
(
’’@ A
)
’’A B
)
’’B C
;
’’C D
Assert
÷÷ 
.
÷÷ 
That
÷÷ 
(
÷÷ 
args
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
.
÷÷  
Type
÷÷  $
.
÷÷$ % 
DerivesFromOrEqual
÷÷% 7
<
÷÷7 8
TParam8
÷÷8 ?
>
÷÷? @
(
÷÷@ A
)
÷÷A B
)
÷÷B C
;
÷÷C D
Assert
◊◊ 
.
◊◊ 
That
◊◊ 
(
◊◊ 
args
◊◊ 
[
◊◊ 
$num
◊◊ 
]
◊◊ 
.
◊◊  
Type
◊◊  $
.
◊◊$ % 
DerivesFromOrEqual
◊◊% 7
<
◊◊7 8
TParam9
◊◊8 ?
>
◊◊? @
(
◊◊@ A
)
◊◊A B
)
◊◊B C
;
◊◊C D
Assert
ÿÿ 
.
ÿÿ 
That
ÿÿ 
(
ÿÿ 
args
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
.
ÿÿ  
Type
ÿÿ  $
.
ÿÿ$ % 
DerivesFromOrEqual
ÿÿ% 7
<
ÿÿ7 8
TParam10
ÿÿ8 @
>
ÿÿ@ A
(
ÿÿA B
)
ÿÿB C
)
ÿÿC D
;
ÿÿD E
var
⁄⁄ 
subContainer
⁄⁄ 
=
⁄⁄ %
CreateEmptySubContainer
⁄⁄ 6
(
⁄⁄6 7
)
⁄⁄7 8
;
⁄⁄8 9
_installMethod
‹‹ 
(
‹‹ 
subContainer
›› 
,
›› 
(
ﬁﬁ 
TParam1
ﬁﬁ 
)
ﬁﬁ 
args
ﬁﬁ 
[
ﬁﬁ 
$num
ﬁﬁ 
]
ﬁﬁ  
.
ﬁﬁ  !
Value
ﬁﬁ! &
,
ﬁﬁ& '
(
ﬂﬂ 
TParam2
ﬂﬂ 
)
ﬂﬂ 
args
ﬂﬂ 
[
ﬂﬂ 
$num
ﬂﬂ 
]
ﬂﬂ  
.
ﬂﬂ  !
Value
ﬂﬂ! &
,
ﬂﬂ& '
(
‡‡ 
TParam3
‡‡ 
)
‡‡ 
args
‡‡ 
[
‡‡ 
$num
‡‡ 
]
‡‡  
.
‡‡  !
Value
‡‡! &
,
‡‡& '
(
·· 
TParam4
·· 
)
·· 
args
·· 
[
·· 
$num
·· 
]
··  
.
··  !
Value
··! &
,
··& '
(
‚‚ 
TParam5
‚‚ 
)
‚‚ 
args
‚‚ 
[
‚‚ 
$num
‚‚ 
]
‚‚  
.
‚‚  !
Value
‚‚! &
,
‚‚& '
(
„„ 
TParam6
„„ 
)
„„ 
args
„„ 
[
„„ 
$num
„„ 
]
„„  
.
„„  !
Value
„„! &
,
„„& '
(
‰‰ 
TParam7
‰‰ 
)
‰‰ 
args
‰‰ 
[
‰‰ 
$num
‰‰ 
]
‰‰  
.
‰‰  !
Value
‰‰! &
,
‰‰& '
(
ÂÂ 
TParam8
ÂÂ 
)
ÂÂ 
args
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ  
.
ÂÂ  !
Value
ÂÂ! &
,
ÂÂ& '
(
ÊÊ 
TParam9
ÊÊ 
)
ÊÊ 
args
ÊÊ 
[
ÊÊ 
$num
ÊÊ 
]
ÊÊ  
.
ÊÊ  !
Value
ÊÊ! &
,
ÊÊ& '
(
ÁÁ 
TParam10
ÁÁ 
)
ÁÁ 
args
ÁÁ 
[
ÁÁ 
$num
ÁÁ  
]
ÁÁ  !
.
ÁÁ! "
Value
ÁÁ" '
)
ÁÁ' (
;
ÁÁ( )
subContainer
ÈÈ 
.
ÈÈ 
ResolveRoots
ÈÈ %
(
ÈÈ% &
)
ÈÈ& '
;
ÈÈ' (
return
ÎÎ 
subContainer
ÎÎ 
;
ÎÎ  
}
ÏÏ 	
}
ÌÌ 
}ÓÓ Á
XC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenjectException.cs
	namespace 	
Zenject
 
{ 
[ 
DebuggerStepThrough 
] 
[ 
NoReflectionBaking 
] 
public 

class 
ZenjectException !
:" #
	Exception$ -
{		 
public

 
ZenjectException

 
(

  
string

  &
message

' .
)

. /
: 
base 
( 
message 
) 
{ 	
} 	
public 
ZenjectException 
(  
string 
message 
, 
	Exception %
innerException& 4
)4 5
: 
base 
( 
message 
, 
innerException *
)* +
{ 	
} 	
} 
} ·
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\ZenjectManagersInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class $
ZenjectManagersInstaller )
:* +
	Installer, 5
<5 6$
ZenjectManagersInstaller6 N
>N O
{ 
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
	Container 
. 
Bind 
( 
typeof !
(! "
TickableManager" 1
)1 2
,2 3
typeof4 :
(: ; 
InitializableManager; O
)O P
,P Q
typeofR X
(X Y
DisposableManagerY j
)j k
)k l
. 
ToSelf 
( 
) 
. 
AsSingle "
(" #
)# $
.$ %$
CopyIntoAllSubContainers% =
(= >
)> ?
;? @
} 	
} 
} Î
åC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder10.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
TParam7_ f
,f g
TParam8h o
,o p
TParam9q x
,x y
TParam10	z Ç
,
Ç É
	TContract
Ñ ç
>
ç é
: 	*
FactoryArgumentsToChoiceBinder
 (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
TParam7_ f
,f g
TParam8h o
,o p
TParam9q x
,x y
TParam10	z Ç
,
Ç É
	TContract
Ñ ç
>
ç é
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
:		 
base		 
(		 
bindContainer		  
,		  !
bindInfo		" *
,		* +
factoryBindInfo		, ;
)		; <
{

 	
} 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
TParam3@ G
,G H
TParam4I P
,P Q
TParam5R Y
,Y Z
TParam6[ b
,b c
TParam7d k
,k l
TParam8m t
,t u
TParam9v }
,} ~
TParam10	 á
,
á à
	TContract
â í
>
í ì
WithId
î ö
(
ö õ
object
õ °

identifier
¢ ¨
)
¨ ≠
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ò
lC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabProviders\IPrefabProvider.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IPrefabProvider $
{ 
UnityEngine 
. 
Object 
	GetPrefab $
($ %
)% &
;& '
} 
}		 ∏
éC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\BindSignal\SignalCallbackWithLookupWrapper.cs
	namespace 	
Zenject
 
{ 
public 

class +
SignalCallbackWithLookupWrapper 0
:1 2
IDisposable3 >
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
	SignalBus 

_signalBus %
;% &
readonly 
Guid 
	_lookupId 
;  
readonly 
Func 
< 
object 
, 
Action $
<$ %
object% +
>+ ,
>, -
_methodGetter. ;
;; <
readonly 
Type 
_objectType !
;! "
readonly 
Type 
_signalType !
;! "
readonly 
object 
_identifier #
;# $
public +
SignalCallbackWithLookupWrapper .
(. /!
SignalBindingBindInfo !
signalBindInfo" 0
,0 1
Type 

objectType 
, 
Guid 
lookupId 
, 
Func 
< 
object 
, 
Action 
<  
object  &
>& '
>' (
methodGetter) 5
,5 6
	SignalBus 
	signalBus 
,  
DiContainer 
	container !
)! "
{ 	
_objectType 
= 

objectType $
;$ %
_signalType 
= 
signalBindInfo (
.( )

SignalType) 3
;3 4
_identifier 
= 
signalBindInfo (
.( )

Identifier) 3
;3 4

_container 
= 
	container "
;" #
_methodGetter 
= 
methodGetter (
;( )

_signalBus 
= 
	signalBus "
;" #
	_lookupId   
=   
lookupId    
;    !
	signalBus"" 
."" 
SubscribeId"" !
(""! "
signalBindInfo""" 0
.""0 1

SignalType""1 ;
,""; <
_identifier""= H
,""H I
OnSignalFired""J W
)""W X
;""X Y
}## 	
void%% 
OnSignalFired%% 
(%% 
object%% !
signal%%" (
)%%( )
{&& 	
var'' 
objects'' 
='' 

_container'' $
.''$ %
ResolveIdAll''% 1
(''1 2
_objectType''2 =
,''= >
	_lookupId''? H
)''H I
;''I J
for)) 
()) 
int)) 
i)) 
=)) 
$num)) 
;)) 
i)) 
<)) 
objects))  '
.))' (
Count))( -
;))- .
i))/ 0
++))0 2
)))2 3
{** 
_methodGetter++ 
(++ 
objects++ %
[++% &
i++& '
]++' (
)++( )
(++) *
signal++* 0
)++0 1
;++1 2
},, 
}-- 	
public// 
void// 
Dispose// 
(// 
)// 
{00 	

_signalBus11 
.11 
UnsubscribeId11 $
(11$ %
_signalType11% 0
,110 1
_identifier112 =
,11= >
OnSignalFired11? L
)11L M
;11M N
}22 	
}33 
}44 ‰

xC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\AnimatorInterfaces\AnimatorMoveHandlerManager.cs
	namespace 	
Zenject
 
{ 
public 

class &
AnimatorMoveHandlerManager +
:, -
MonoBehaviour. ;
{ 
List 
<  
IAnimatorMoveHandler !
>! "
	_handlers# ,
;, -
[

 	
Inject

	 
]

 
public 
void 
	Construct 
( 
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Local+ 0
)0 1
]1 2
List 
<  
IAnimatorMoveHandler %
>% &
handlers' /
)/ 0
{ 	
	_handlers 
= 
handlers  
;  !
} 	
public 
void 
OnAnimatorMove "
(" #
)# $
{ 	
foreach 
( 
var 
handler  
in! #
	_handlers$ -
)- .
{ 
handler 
. 
OnAnimatorMove &
(& '
)' (
;( )
} 
} 	
} 
} ·
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\RunnableContext.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class 
RunnableContext )
:* +
Context, 3
{		 
[

 	
Tooltip

	 
(

 
$str

 f
)

f g
]

g h
[ 	
SerializeField	 
] 
bool 
_autoRun 
= 
true 
; 
static 
bool 
_staticAutoRun "
=# $
true% )
;) *
public 
bool 
Initialized 
{  !
get" %
;% &
private' .
set/ 2
;2 3
}4 5
	protected 
void 

Initialize !
(! "
)" #
{ 	
if 
( 
_staticAutoRun 
&& !
_autoRun" *
)* +
{ 
Run 
( 
) 
; 
} 
else 
{ 
_staticAutoRun 
=  
true! %
;% &
} 
} 	
public 
void 
Run 
( 
) 
{   	
Assert!! 
.!! 
That!! 
(!! 
!!! 
Initialized!! $
,!!$ %
$str"" ;
)""; <
;""< =
RunInternal$$ 
($$ 
)$$ 
;$$ 
Initialized&& 
=&& 
true&& 
;&& 
}'' 	
	protected)) 
abstract)) 
void)) 
RunInternal))  +
())+ ,
))), -
;))- .
public++ 
static++ 
T++ 
CreateComponent++ '
<++' (
T++( )
>++) *
(++* +

GameObject+++ 5

gameObject++6 @
)++@ A
where++B G
T++H I
:++J K
RunnableContext++L [
{,, 	
_staticAutoRun-- 
=-- 
false-- "
;--" #
var// 
result// 
=// 

gameObject// #
.//# $
AddComponent//$ 0
<//0 1
T//1 2
>//2 3
(//3 4
)//4 5
;//5 6
Assert00 
.00 
That00 
(00 
_staticAutoRun00 &
)00& '
;00' (
return11 
result11 
;11 
}22 	
}33 
}44 √
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ResourceProvider.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
ResourceProvider !
:" #
	IProvider$ -
{ 
readonly 
Type 
_resourceType #
;# $
readonly 
string 
_resourcePath %
;% &
readonly 
bool 
_matchSingle "
;" #
public 
ResourceProvider 
(  
string 
resourcePath 
,  
Type! %
resourceType& 2
,2 3
bool4 8
matchSingle9 D
)D E
{ 	
_resourceType 
= 
resourceType (
;( )
_resourcePath 
= 
resourcePath (
;( )
_matchSingle 
= 
matchSingle &
;& '
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get   
{   
return   
false   
;   
}    !
}!! 	
public## 
Type## 
GetInstanceType## #
(### $
InjectContext##$ 1
context##2 9
)##9 :
{$$ 	
return%% 
_resourceType%%  
;%%  !
}&& 	
public(( 
void(( *
GetAllInstancesWithInjectSplit(( 2
(((2 3
InjectContext)) 
context)) !
,))! "
List))# '
<))' (
TypeValuePair))( 5
>))5 6
args))7 ;
,)); <
out))= @
Action))A G
injectAction))H T
,))T U
List))V Z
<))Z [
object))[ a
>))a b
buffer))c i
)))i j
{** 	
Assert++ 
.++ 
IsEmpty++ 
(++ 
args++ 
)++  
;++  !
Assert-- 
.-- 
	IsNotNull-- 
(-- 
context-- $
)--$ %
;--% &
if// 
(// 
_matchSingle// 
)// 
{00 
var11 
obj11 
=11 
	Resources11 #
.11# $
Load11$ (
(11( )
_resourcePath11) 6
,116 7
_resourceType118 E
)11E F
;11F G
Assert33 
.33 
That33 
(33 
obj33 
!=33  "
null33# '
,33' (
$str44 G
,44G H
_resourcePath44I V
,44V W
_resourceType44X e
)44e f
;44f g
injectAction77 
=77 
null77 #
;77# $
buffer88 
.88 
Add88 
(88 
obj88 
)88 
;88  
return99 
;99 
}:: 
var<< 
objects<< 
=<< 
	Resources<< #
.<<# $
LoadAll<<$ +
(<<+ ,
_resourcePath<<, 9
,<<9 :
_resourceType<<; H
)<<H I
;<<I J
Assert>> 
.>> 
That>> 
(>> 
objects>> 
.>>  
Length>>  &
>>>' (
$num>>) *
,>>* +
$str?? C
,??C D
_resourcePath??E R
,??R S
_resourceType??T a
)??a b
;??b c
injectActionBB 
=BB 
nullBB 
;BB  
bufferDD 
.DD 
AllocFreeAddRangeDD $
(DD$ %
objectsDD% ,
)DD, -
;DD- .
}EE 	
}FF 
}GG ™F
nC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabCreators\PrefabInstantiator.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
PrefabInstantiator #
:$ %
IPrefabInstantiator& 9
{ 
readonly 
IPrefabProvider  
_prefabProvider! 0
;0 1
readonly 
DiContainer 

_container '
;' (
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
readonly 
Type 
_argumentTarget %
;% &
readonly 
List 
< 
Type 
> %
_instantiateCallbackTypes 5
;5 6
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
public 
PrefabInstantiator !
(! "
DiContainer 
	container !
,! "(
GameObjectCreationParameters (
gameObjectBindInfo) ;
,; <
Type 
argumentTarget 
,  
IEnumerable 
< 
Type 
> $
instantiateCallbackTypes 6
,6 7
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6
IPrefabProvider 
prefabProvider *
,* +
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	
_prefabProvider   
=   
prefabProvider   ,
;  , -
_extraArguments!! 
=!! 
extraArguments!! ,
.!!, -
ToList!!- 3
(!!3 4
)!!4 5
;!!5 6

_container"" 
="" 
	container"" "
;""" #
_gameObjectBindInfo## 
=##  !
gameObjectBindInfo##" 4
;##4 5
_argumentTarget$$ 
=$$ 
argumentTarget$$ ,
;$$, -%
_instantiateCallbackTypes%% %
=%%& '$
instantiateCallbackTypes%%( @
.%%@ A
ToList%%A G
(%%G H
)%%H I
;%%I J 
_instantiateCallback&&  
=&&! "
instantiateCallback&&# 6
;&&6 7
}'' 	
public)) (
GameObjectCreationParameters)) +(
GameObjectCreationParameters)), H
{** 	
get++ 
{++ 
return++ 
_gameObjectBindInfo++ ,
;++, -
}++. /
},, 	
public.. 
Type.. 
ArgumentTarget.. "
{// 	
get00 
{00 
return00 
_argumentTarget00 (
;00( )
}00* +
}11 	
public33 
List33 
<33 
TypeValuePair33 !
>33! "
ExtraArguments33# 1
{44 	
get55 
{55 
return55 
_extraArguments55 (
;55( )
}55* +
}66 	
public88 
UnityEngine88 
.88 
Object88 !
	GetPrefab88" +
(88+ ,
)88, -
{99 	
return:: 
_prefabProvider:: "
.::" #
	GetPrefab::# ,
(::, -
)::- .
;::. /
};; 	
public== 

GameObject== 
Instantiate== %
(==% &
InjectContext==& 3
context==4 ;
,==; <
List=== A
<==A B
TypeValuePair==B O
>==O P
args==Q U
,==U V
out==W Z
Action==[ a
injectAction==b n
)==n o
{>> 	
Assert?? 
.?? 
That?? 
(?? 
_argumentTarget?? '
==??( *
null??+ /
||??0 2
_argumentTarget??3 B
.??B C
DerivesFromOrEqual??C U
(??U V
context??V ]
.??] ^

MemberType??^ h
)??h i
)??i j
;??j k
boolAA 
shouldMakeActiveAA !
;AA! "
varBB 

gameObjectBB 
=BB 

_containerBB '
.BB' (!
CreateAndParentPrefabBB( =
(BB= >
	GetPrefabCC 
(CC 
)CC 
,CC 
_gameObjectBindInfoCC 0
,CC0 1
contextCC2 9
,CC9 :
outCC; >
shouldMakeActiveCC? O
)CCO P
;CCP Q
AssertDD 
.DD 
	IsNotNullDD 
(DD 

gameObjectDD '
)DD' (
;DD( )
injectActionFF 
=FF 
(FF 
)FF 
=>FF  
{GG 
varHH 
allArgsHH 
=HH 
ZenPoolsHH &
.HH& '
	SpawnListHH' 0
<HH0 1
TypeValuePairHH1 >
>HH> ?
(HH? @
)HH@ A
;HHA B
allArgsJJ 
.JJ 
AllocFreeAddRangeJJ )
(JJ) *
_extraArgumentsJJ* 9
)JJ9 :
;JJ: ;
allArgsKK 
.KK 
AllocFreeAddRangeKK )
(KK) *
argsKK* .
)KK. /
;KK/ 0
ifMM 
(MM 
_argumentTargetMM #
==MM$ &
nullMM' +
)MM+ ,
{NN 
AssertOO 
.OO 
ThatOO 
(OO  
allArgsPP 
.PP  
IsEmptyPP  '
(PP' (
)PP( )
,PP) *
$str	QQ ù
)
QQù û
;
QQû ü
}RR 
ifTT 
(TT 
_argumentTargetTT #
==TT$ &
nullTT' +
||TT, .
allArgsTT/ 6
.TT6 7
IsEmptyTT7 >
(TT> ?
)TT? @
)TT@ A
{UU 

_containerVV 
.VV 
InjectGameObjectVV /
(VV/ 0

gameObjectVV0 :
)VV: ;
;VV; <
}WW 
elseXX 
{YY 

_containerZZ 
.ZZ 0
$InjectGameObjectForComponentExplicitZZ C
(ZZC D

gameObject[[ "
,[[" #
_argumentTarget[[$ 3
,[[3 4
allArgs[[5 <
,[[< =
context[[> E
,[[E F
null[[G K
)[[K L
;[[L M
Assert]] 
.]] 
That]] 
(]]  
allArgs]]  '
.]]' (
Count]]( -
==]]. 0
$num]]1 2
)]]2 3
;]]3 4
}^^ 
ZenPools`` 
.`` 
DespawnList`` $
<``$ %
TypeValuePair``% 2
>``2 3
(``3 4
allArgs``4 ;
)``; <
;``< =
ifbb 
(bb 
shouldMakeActivebb $
&&bb% '
!bb( )

_containerbb) 3
.bb3 4
IsValidatingbb4 @
)bb@ A
{cc 
{gg 

gameObjecthh "
.hh" #
	SetActivehh# ,
(hh, -
truehh- 1
)hh1 2
;hh2 3
}ii 
}jj 
ifll 
(ll  
_instantiateCallbackll (
!=ll) +
nullll, 0
)ll0 1
{mm 
varnn 
callbackObjectsnn '
=nn( )
ZenPoolsnn* 2
.nn2 3
SpawnHashSetnn3 ?
<nn? @
objectnn@ F
>nnF G
(nnG H
)nnH I
;nnI J
foreachpp 
(pp 
varpp  
typepp! %
inpp& (%
_instantiateCallbackTypespp) B
)ppB C
{qq 
varrr 
objrr 
=rr  !

gameObjectrr" ,
.rr, -"
GetComponentInChildrenrr- C
(rrC D
typerrD H
)rrH I
;rrI J
iftt 
(tt 
objtt 
!=tt  "
nulltt# '
)tt' (
{uu 
callbackObjectsvv +
.vv+ ,
Addvv, /
(vv/ 0
objvv0 3
)vv3 4
;vv4 5
}ww 
}xx 
foreachzz 
(zz 
varzz  
objzz! $
inzz% '
callbackObjectszz( 7
)zz7 8
{{{  
_instantiateCallback|| ,
(||, -
context||- 4
,||4 5
obj||6 9
)||9 :
;||: ;
}}} 
ZenPools 
. 
DespawnHashSet +
(+ ,
callbackObjects, ;
); <
;< =
}
ÄÄ 
}
ÅÅ 
;
ÅÅ 
return
ÉÉ 

gameObject
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
}ÜÜ Í$
àC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\GetFromGameObjectGetterComponentProvider.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 4
(GetFromGameObjectGetterComponentProvider 9
:: ;
	IProvider< E
{ 
readonly 
Func 
< 
InjectContext #
,# $

GameObject% /
>/ 0
_gameObjectGetter1 B
;B C
readonly 
Type 
_componentType $
;$ %
readonly 
bool 
_matchSingle "
;" #
public 4
(GetFromGameObjectGetterComponentProvider 7
(7 8
Type 
componentType 
, 
Func  $
<$ %
InjectContext% 2
,2 3

GameObject4 >
>> ?
gameObjectGetter@ P
,P Q
boolR V
matchSingleW b
)b c
{ 	
_componentType 
= 
componentType *
;* +
_matchSingle 
= 
matchSingle &
;& '
_gameObjectGetter 
= 
gameObjectGetter  0
;0 1
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{   	
get!! 
{!! 
return!! 
false!! 
;!! 
}!!  !
}"" 	
public$$ 
Type$$ 
GetInstanceType$$ #
($$# $
InjectContext$$$ 1
context$$2 9
)$$9 :
{%% 	
return&& 
_componentType&& !
;&&! "
}'' 	
public)) 
void)) *
GetAllInstancesWithInjectSplit)) 2
())2 3
InjectContext** 
context** !
,**! "
List**# '
<**' (
TypeValuePair**( 5
>**5 6
args**7 ;
,**; <
out**= @
Action**A G
injectAction**H T
,**T U
List**V Z
<**Z [
object**[ a
>**a b
buffer**c i
)**i j
{++ 	
Assert,, 
.,, 
	IsNotNull,, 
(,, 
context,, $
),,$ %
;,,% &
injectAction.. 
=.. 
null.. 
;..  
if00 
(00 
context00 
.00 
	Container00 !
.00! "
IsValidating00" .
)00. /
{11 
buffer22 
.22 
Add22 
(22 
new22 
ValidationMarker22 /
(22/ 0
_componentType220 >
)22> ?
)22? @
;22@ A
}33 
else44 
{55 
var66 

gameObject66 
=66  
_gameObjectGetter66! 2
(662 3
context663 :
)66: ;
;66; <
if88 
(88 
_matchSingle88  
)88  !
{99 
var:: 
match:: 
=:: 

gameObject::  *
.::* +
GetComponent::+ 7
(::7 8
_componentType::8 F
)::F G
;::G H
Assert<< 
.<< 
	IsNotNull<< $
(<<$ %
match<<% *
,<<* +
$str<<, k
,<<k l
_componentType== "
,==" #

gameObject==$ .
.==. /
name==/ 3
)==3 4
;==4 5
buffer?? 
.?? 
Add?? 
(?? 
match?? $
)??$ %
;??% &
return@@ 
;@@ 
}AA 
varCC 
allComponentsCC !
=CC" #

gameObjectCC$ .
.CC. /
GetComponentsCC/ <
(CC< =
_componentTypeCC= K
)CCK L
;CCL M
AssertEE 
.EE 
ThatEE 
(EE 
allComponentsEE )
.EE) *
LengthEE* 0
>=EE1 3
$numEE4 5
,EE5 6
$strFF Y
,FFY Z
_componentTypeGG 
,GG 

gameObjectGG  *
.GG* +
nameGG+ /
)GG/ 0
;GG0 1
bufferII 
.II 
AllocFreeAddRangeII (
(II( )
allComponentsII) 6
)II6 7
;II7 8
}JJ 
}KK 	
}LL 
}MM œ
ÅC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class :
.IdScopeConcreteIdArgConditionCopyNonLazyBinder ?
:@ A8
,ScopeConcreteIdArgConditionCopyNonLazyBinderB n
{ 
public :
.IdScopeConcreteIdArgConditionCopyNonLazyBinder =
(= >
BindInfo> F
bindInfoG O
)O P
: 
base 
( 
bindInfo 
) 
{ 	
}		 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
WithId< B
(B C
objectC I

identifierJ T
)T U
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} é
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\GuiRenderer.cs
	namespace 	
Zenject
 
{ 
public 

class 
GuiRenderer 
: 
MonoBehaviour ,
{  
GuiRenderableManager 
_renderableManager /
;/ 0
[		 	
Inject			 
]		 
void

 
	Construct

 
(

  
GuiRenderableManager

 +
renderableManager

, =
)

= >
{ 	
_renderableManager 
=  
renderableManager! 2
;2 3
} 	
public 
void 
OnGUI 
( 
) 
{ 	
_renderableManager 
. 
OnGui $
($ %
)% &
;& '
} 	
} 
} Ûw
TC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\TypeAnalyzer.cs
	namespace		 	
Zenject		
 
{

 
public 

delegate 
InjectTypeInfo "
ZenTypeInfoGetter# 4
(4 5
)5 6
;6 7
public 

enum )
ReflectionBakingCoverageModes -
{ &
FallbackToDirectReflection "
," #%
NoCheckAssumeFullCoverage !
,! "1
%FallbackToDirectReflectionWithWarning -
} 
public 

static 
class 
TypeAnalyzer $
{ 
static 

Dictionary 
< 
Type 
, 
InjectTypeInfo  .
>. /
	_typeInfo0 9
=: ;
new< ?

Dictionary@ J
<J K
TypeK O
,O P
InjectTypeInfoQ _
>_ `
(` a
)a b
;b c
static 

Dictionary 
< 
Type 
, 
bool  $
>$ %"
_allowDuringValidation& <
== >
new? B

DictionaryC M
<M N
TypeN R
,R S
boolT X
>X Y
(Y Z
)Z [
;[ \
public 
const 
string 3
'ReflectionBakingGetInjectInfoMethodName C
=D E
$strF a
;a b
public   
const   
string   -
!ReflectionBakingFactoryMethodName   =
=  > ?
$str  @ M
;  M N
public!! 
const!! 
string!! .
"ReflectionBakingInjectMethodPrefix!! >
=!!? @
$str!!A T
;!!T U
public"" 
const"" 
string"" -
!ReflectionBakingFieldSetterPrefix"" =
=""> ?
$str""@ R
;""R S
public## 
const## 
string## 0
$ReflectionBakingPropertySetterPrefix## @
=##A B
$str##C X
;##X Y
public%% 
static%% )
ReflectionBakingCoverageModes%% 3(
ReflectionBakingCoverageMode%%4 P
{&& 	
get'' 
;'' 
set'' 
;'' 
}(( 	
public** 
static** 
bool** '
ShouldAllowDuringValidation** 6
<**6 7
T**7 8
>**8 9
(**9 :
)**: ;
{++ 	
return,, '
ShouldAllowDuringValidation,, .
(,,. /
typeof,,/ 5
(,,5 6
T,,6 7
),,7 8
),,8 9
;,,9 :
}-- 	
public// 
static// 
bool// '
ShouldAllowDuringValidation// 6
(//6 7
Type//7 ;
type//< @
)//@ A
{00 	
bool11 
shouldAllow11 
;11 
if33 
(33 
!33 "
_allowDuringValidation33 '
.33' (
TryGetValue33( 3
(333 4
type334 8
,338 9
out33: =
shouldAllow33> I
)33I J
)33J K
{44 
shouldAllow55 
=55 /
#ShouldAllowDuringValidationInternal55 A
(55A B
type55B F
)55F G
;55G H"
_allowDuringValidation66 &
.66& '
Add66' *
(66* +
type66+ /
,66/ 0
shouldAllow661 <
)66< =
;66= >
}77 
return99 
shouldAllow99 
;99 
}:: 	
static<< 
bool<< /
#ShouldAllowDuringValidationInternal<< 7
(<<7 8
Type<<8 <
type<<= A
)<<A B
{== 	
ifCC 
(CC 
typeCC 
.CC 
DerivesFromCC  
<CC  !

IInstallerCC! +
>CC+ ,
(CC, -
)CC- .
||CC/ 1
typeCC2 6
.CC6 7
DerivesFromCC7 B
<CCB C
IValidatableCCC O
>CCO P
(CCP Q
)CCQ R
)CCR S
{DD 
returnEE 
trueEE 
;EE 
}FF 
ifII 
(II 
typeII 
.II 
DerivesFromII  
<II  !
ContextII! (
>II( )
(II) *
)II* +
)II+ ,
{JJ 
returnKK 
trueKK 
;KK 
}LL 
returnRR 
typeRR 
.RR 
HasAttributeRR $
<RR$ %1
%ZenjectAllowDuringValidationAttributeRR% J
>RRJ K
(RRK L
)RRL M
;RRM N
}TT 	
publicVV 
staticVV 
boolVV 
HasInfoVV "
<VV" #
TVV# $
>VV$ %
(VV% &
)VV& '
{WW 	
returnXX 
HasInfoXX 
(XX 
typeofXX !
(XX! "
TXX" #
)XX# $
)XX$ %
;XX% &
}YY 	
public[[ 
static[[ 
bool[[ 
HasInfo[[ "
([[" #
Type[[# '
type[[( ,
)[[, -
{\\ 	
return]] 

TryGetInfo]] 
(]] 
type]] "
)]]" #
!=]]$ &
null]]' +
;]]+ ,
}^^ 	
public`` 
static`` 
InjectTypeInfo`` $
GetInfo``% ,
<``, -
T``- .
>``. /
(``/ 0
)``0 1
{aa 	
returnbb 
GetInfobb 
(bb 
typeofbb !
(bb! "
Tbb" #
)bb# $
)bb$ %
;bb% &
}cc 	
publicee 
staticee 
InjectTypeInfoee $
GetInfoee% ,
(ee, -
Typeee- 1
typeee2 6
)ee6 7
{ff 	
vargg 
infogg 
=gg 

TryGetInfogg !
(gg! "
typegg" &
)gg& '
;gg' (
Asserthh 
.hh 
	IsNotNullhh 
(hh 
infohh !
,hh! "
$strhh# K
,hhK L
typehhM Q
)hhQ R
;hhR S
returnii 
infoii 
;ii 
}jj 	
publicll 
staticll 
InjectTypeInfoll $

TryGetInfoll% /
<ll/ 0
Tll0 1
>ll1 2
(ll2 3
)ll3 4
{mm 	
returnnn 

TryGetInfonn 
(nn 
typeofnn $
(nn$ %
Tnn% &
)nn& '
)nn' (
;nn( )
}oo 	
publicqq 
staticqq 
InjectTypeInfoqq $

TryGetInfoqq% /
(qq/ 0
Typeqq0 4
typeqq5 9
)qq9 :
{rr 	
InjectTypeInfoss 
infoss 
;ss  
{xx 
ifyy 
(yy 
	_typeInfoyy 
.yy 
TryGetValueyy )
(yy) *
typeyy* .
,yy. /
outyy0 3
infoyy4 8
)yy8 9
)yy9 :
{zz 
return{{ 
info{{ 
;{{  
}|| 
}}} 
using
ÄÄ 
(
ÄÄ 
ProfileBlock
ÄÄ 
.
ÄÄ  
Start
ÄÄ  %
(
ÄÄ% &
$str
ÄÄ& :
)
ÄÄ: ;
)
ÄÄ; <
{
ÇÇ 
info
ÉÉ 
=
ÉÉ 
GetInfoInternal
ÉÉ &
(
ÉÉ& '
type
ÉÉ' +
)
ÉÉ+ ,
;
ÉÉ, -
}
ÑÑ 
if
ÜÜ 
(
ÜÜ 
info
ÜÜ 
!=
ÜÜ 
null
ÜÜ 
)
ÜÜ 
{
áá 
Assert
àà 
.
àà 
IsEqual
àà 
(
àà 
info
àà #
.
àà# $
Type
àà$ (
,
àà( )
type
àà* .
)
àà. /
;
àà/ 0
Assert
ââ 
.
ââ 
IsNull
ââ 
(
ââ 
info
ââ "
.
ââ" #
BaseTypeInfo
ââ# /
)
ââ/ 0
;
ââ0 1
var
ãã 
baseType
ãã 
=
ãã 
type
ãã #
.
ãã# $
BaseType
ãã$ ,
(
ãã, -
)
ãã- .
;
ãã. /
if
çç 
(
çç 
baseType
çç 
!=
çç 
null
çç  $
&&
çç% '
!
çç( )$
ShouldSkipTypeAnalysis
çç) ?
(
çç? @
baseType
çç@ H
)
ççH I
)
ççI J
{
éé 
info
èè 
.
èè 
BaseTypeInfo
èè %
=
èè& '

TryGetInfo
èè( 2
(
èè2 3
baseType
èè3 ;
)
èè; <
;
èè< =
}
êê 
}
ëë 
{
ññ 
	_typeInfo
óó 
.
óó 
Add
óó 
(
óó 
type
óó "
,
óó" #
info
óó$ (
)
óó( )
;
óó) *
}
òò 
return
öö 
info
öö 
;
öö 
}
õõ 	
static
ùù 
InjectTypeInfo
ùù 
GetInfoInternal
ùù -
(
ùù- .
Type
ùù. 2
type
ùù3 7
)
ùù7 8
{
ûû 	
if
üü 
(
üü $
ShouldSkipTypeAnalysis
üü &
(
üü& '
type
üü' +
)
üü+ ,
)
üü, -
{
†† 
return
°° 
null
°° 
;
°° 
}
¢¢ 
{
ØØ 
var
∞∞ 
getInfoMethod
∞∞ !
=
∞∞" #
type
∞∞$ (
.
∞∞( )
	GetMethod
∞∞) 2
(
∞∞2 35
'ReflectionBakingGetInjectInfoMethodName
±± ;
,
±±; <
BindingFlags
≤≤  
.
≤≤  !
Static
≤≤! '
|
≤≤( )
BindingFlags
≤≤* 6
.
≤≤6 7
	NonPublic
≤≤7 @
|
≤≤A B
BindingFlags
≤≤C O
.
≤≤O P
Public
≤≤P V
)
≤≤V W
;
≤≤W X
if
¥¥ 
(
¥¥ 
getInfoMethod
¥¥ !
!=
¥¥" $
null
¥¥% )
)
¥¥) *
{
µµ 
var
∫∫ 

infoGetter
∫∫ "
=
∫∫# $
(
∫∫% &
(
∫∫& '
ZenTypeInfoGetter
∫∫' 8
)
∫∫8 9
Delegate
∫∫9 A
.
∫∫A B
CreateDelegate
∫∫B P
(
∫∫P Q
typeof
ªª 
(
ªª 
ZenTypeInfoGetter
ªª 0
)
ªª0 1
,
ªª1 2
getInfoMethod
ªª3 @
)
ªª@ A
)
ªªA B
;
ªªB C
return
ææ 

infoGetter
ææ %
(
ææ% &
)
ææ& '
;
ææ' (
}
øø 
}
¿¿ 
if
¬¬ 
(
¬¬ *
ReflectionBakingCoverageMode
¬¬ ,
==
¬¬- /+
ReflectionBakingCoverageModes
¬¬0 M
.
¬¬M N'
NoCheckAssumeFullCoverage
¬¬N g
)
¬¬g h
{
√√ 
return
«« 
null
«« 
;
«« 
}
»» 
if
ÀÀ 
(
ÀÀ *
ReflectionBakingCoverageMode
ÀÀ ,
==
ÀÀ- /+
ReflectionBakingCoverageModes
ÀÀ0 M
.
ÀÀM N3
%FallbackToDirectReflectionWithWarning
ÀÀN s
)
ÀÀs t
{
ÃÃ 
Log
ÕÕ 
.
ÕÕ 
Warn
ÕÕ 
(
ÕÕ 
$str
ÕÕ ~
,
ÕÕ~ 
typeÕÕÄ Ñ
)ÕÕÑ Ö
;ÕÕÖ Ü
}
ŒŒ 
{
‘‘ 
return
’’ *
CreateTypeInfoFromReflection
’’ 3
(
’’3 4
type
’’4 8
)
’’8 9
;
’’9 :
}
÷÷ 
}
◊◊ 	
public
ŸŸ 
static
ŸŸ 
bool
ŸŸ $
ShouldSkipTypeAnalysis
ŸŸ 1
(
ŸŸ1 2
Type
ŸŸ2 6
type
ŸŸ7 ;
)
ŸŸ; <
{
⁄⁄ 	
return
€€ 
type
€€ 
==
€€ 
null
€€ 
||
€€  "
type
€€# '
.
€€' (
IsEnum
€€( .
(
€€. /
)
€€/ 0
||
€€1 3
type
€€4 8
.
€€8 9
IsArray
€€9 @
||
€€A C
type
€€D H
.
€€H I
IsInterface
€€I T
(
€€T U
)
€€U V
||
‹‹ 
type
‹‹ 
.
‹‹ '
ContainsGenericParameters
‹‹ 1
(
‹‹1 2
)
‹‹2 3
||
‹‹4 6
IsStaticType
‹‹7 C
(
‹‹C D
type
‹‹D H
)
‹‹H I
||
›› 
type
›› 
==
›› 
typeof
›› !
(
››! "
object
››" (
)
››( )
;
››) *
}
ﬁﬁ 	
static
‡‡ 
bool
‡‡ 
IsStaticType
‡‡  
(
‡‡  !
Type
‡‡! %
type
‡‡& *
)
‡‡* +
{
·· 	
return
„„ 
type
„„ 
.
„„ 

IsAbstract
„„ "
(
„„" #
)
„„# $
&&
„„% '
type
„„( ,
.
„„, -
IsSealed
„„- 5
(
„„5 6
)
„„6 7
;
„„7 8
}
‰‰ 	
static
ÊÊ 
InjectTypeInfo
ÊÊ *
CreateTypeInfoFromReflection
ÊÊ :
(
ÊÊ: ;
Type
ÊÊ; ?
type
ÊÊ@ D
)
ÊÊD E
{
ÁÁ 	
var
ËË 
reflectionInfo
ËË 
=
ËË  $
ReflectionTypeAnalyzer
ËË! 7
.
ËË7 8
GetReflectionInfo
ËË8 I
(
ËËI J
type
ËËJ N
)
ËËN O
;
ËËO P
var
ÍÍ 
injectConstructor
ÍÍ !
=
ÍÍ" #-
ReflectionInfoTypeInfoConverter
ÍÍ$ C
.
ÍÍC D 
ConvertConstructor
ÍÍD V
(
ÍÍV W
reflectionInfo
ÎÎ 
.
ÎÎ 
InjectConstructor
ÎÎ 0
,
ÎÎ0 1
type
ÎÎ2 6
)
ÎÎ6 7
;
ÎÎ7 8
var
ÌÌ 
injectMethods
ÌÌ 
=
ÌÌ 
reflectionInfo
ÌÌ  .
.
ÌÌ. /
InjectMethods
ÌÌ/ <
.
ÌÌ< =
Select
ÌÌ= C
(
ÌÌC D-
ReflectionInfoTypeInfoConverter
ÓÓ /
.
ÓÓ/ 0
ConvertMethod
ÓÓ0 =
)
ÓÓ= >
.
ÓÓ> ?
ToArray
ÓÓ? F
(
ÓÓF G
)
ÓÓG H
;
ÓÓH I
var
 
memberInfos
 
=
 
reflectionInfo
 ,
.
, -
InjectFields
- 9
.
9 :
Select
: @
(
@ A
x
ÒÒ 
=>
ÒÒ -
ReflectionInfoTypeInfoConverter
ÒÒ 4
.
ÒÒ4 5
ConvertField
ÒÒ5 A
(
ÒÒA B
type
ÒÒB F
,
ÒÒF G
x
ÒÒH I
)
ÒÒI J
)
ÒÒJ K
.
ÒÒK L
Concat
ÒÒL R
(
ÒÒR S
reflectionInfo
ÚÚ "
.
ÚÚ" #
InjectProperties
ÚÚ# 3
.
ÚÚ3 4
Select
ÚÚ4 :
(
ÚÚ: ;
x
ÛÛ 
=>
ÛÛ -
ReflectionInfoTypeInfoConverter
ÛÛ <
.
ÛÛ< =
ConvertProperty
ÛÛ= L
(
ÛÛL M
type
ÛÛM Q
,
ÛÛQ R
x
ÛÛS T
)
ÛÛT U
)
ÛÛU V
)
ÛÛV W
.
ÛÛW X
ToArray
ÛÛX _
(
ÛÛ_ `
)
ÛÛ` a
;
ÛÛa b
return
ıı 
new
ıı 
InjectTypeInfo
ıı %
(
ıı% &
type
ˆˆ 
,
ˆˆ 
injectConstructor
ˆˆ '
,
ˆˆ' (
injectMethods
ˆˆ) 6
,
ˆˆ6 7
memberInfos
ˆˆ8 C
)
ˆˆC D
;
ˆˆD E
}
˜˜ 	
}
¯¯ 
}˘˘ ˇM
õC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder10.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
TParam3= D
,D E
TParam4F M
,M N
TParam5O V
,V W
TParam6X _
,_ `
TParam7a h
,h i
TParam8j q
,q r
TParam9s z
,z {
TParam10	| Ñ
,
Ñ Ö
	TContract
Ü è
>
è ê
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
,0 1
TParam32 9
,9 :
TParam4; B
,B C
TParam5D K
,K L
TParam6M T
,T U
TParam7V ]
,] ^
TParam8_ f
,f g
TParam9h o
,o p
TParam10q y
>y z
installerMethod	{ ä
)
ä ã
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
,D E
TParam3F M
,M N
TParam4O V
,V W
TParam5X _
,_ `
TParam6a h
,h i
TParam7j q
,q r
TParam8s z
,z {
TParam9	| É
,
É Ñ
TParam10
Ö ç
>
ç é
(
é è
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public"" E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder"" H!
ByNewGameObjectMethod""I ^
(""^ _
Action&& 
<&& 
DiContainer&& 
,&& 
TParam1&&  '
,&&' (
TParam2&&) 0
,&&0 1
TParam3&&2 9
,&&9 :
TParam4&&; B
,&&B C
TParam5&&D K
,&&K L
TParam6&&M T
,&&T U
TParam7&&V ]
,&&] ^
TParam8&&_ f
,&&f g
TParam9&&h o
,&&o p
TParam10&&q y
>&&y z
installerMethod	&&{ ä
)
&&ä ã
{'' 	
var(( 
gameObjectInfo(( 
=((  
new((! $(
GameObjectCreationParameters((% A
(((A B
)((B C
;((C D
ProviderFunc** 
=** 
(++ 
	container++ 
)++ 
=>++ 
new++ "*
SubContainerDependencyProvider++# A
(++A B
ContractType,,  
,,,  !
SubIdentifier,," /
,,,/ 0
new-- 4
(SubContainerCreatorByNewGameObjectMethod-- @
<--@ A
TParam1--A H
,--H I
TParam2--J Q
,--Q R
TParam3--S Z
,--Z [
TParam4--\ c
,--c d
TParam5--e l
,--l m
TParam6--n u
,--u v
TParam7--w ~
,--~ 
TParam8
--Ä á
,
--á à
TParam9
--â ê
,
--ê ë
TParam10
--í ö
>
--ö õ
(
--õ ú
	container
--ù ¶
,
--¶ ß
gameObjectInfo.. &
,..& '
installerMethod..( 7
)..7 8
,..8 9
false..: ?
)..? @
;..@ A
return00 
new00 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder00 P
(00P Q
BindInfo00Q Y
,00Y Z
gameObjectInfo00[ i
)00i j
;00j k
}11 	
public33 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder33 H
ByNewPrefabMethod33I Z
(33Z [
UnityEngine44 
.44 
Object44 
prefab44 %
,44% &
Action88 
<88 
DiContainer88 
,88 
TParam188  '
,88' (
TParam288) 0
,880 1
TParam3882 9
,889 :
TParam488; B
,88B C
TParam588D K
,88K L
TParam688M T
,88T U
TParam788V ]
,88] ^
TParam888_ f
,88f g
TParam988h o
,88o p
TParam1088q y
>88y z
installerMethod	88{ ä
)
88ä ã
{99 	
BindingUtil:: 
.:: 
AssertIsValidPrefab:: +
(::+ ,
prefab::, 2
)::2 3
;::3 4
var<< 
gameObjectInfo<< 
=<<  
new<<! $(
GameObjectCreationParameters<<% A
(<<A B
)<<B C
;<<C D
ProviderFunc>> 
=>> 
(?? 
	container?? 
)?? 
=>?? 
new?? "*
SubContainerDependencyProvider??# A
(??A B
ContractType@@  
,@@  !
SubIdentifier@@" /
,@@/ 0
newAA 0
$SubContainerCreatorByNewPrefabMethodAA <
<AA< =
TParam1AA= D
,AAD E
TParam2AAF M
,AAM N
TParam3AAO V
,AAV W
TParam4AAX _
,AA_ `
TParam5AAa h
,AAh i
TParam6AAj q
,AAq r
TParam7AAs z
,AAz {
TParam8	AA| É
,
AAÉ Ñ
TParam9
AAÖ å
,
AAå ç
TParam10
AAé ñ
>
AAñ ó
(
AAó ò
	container
AAô ¢
,
AA¢ £
newBB 
PrefabProviderBB *
(BB* +
prefabBB+ 1
)BB1 2
,BB2 3
gameObjectInfoCC &
,CC& '
installerMethodCC( 7
)CC7 8
,CC8 9
falseCC: ?
)CC? @
;CC@ A
returnEE 
newEE E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderEE P
(EEP Q
BindInfoEEQ Y
,EEY Z
gameObjectInfoEE[ i
)EEi j
;EEj k
}FF 	
publicHH E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderHH H%
ByNewPrefabResourceMethodHHI b
(HHb c
stringII 
resourcePathII 
,II  
ActionMM 
<MM 
DiContainerMM 
,MM 
TParam1MM  '
,MM' (
TParam2MM) 0
,MM0 1
TParam3MM2 9
,MM9 :
TParam4MM; B
,MMB C
TParam5MMD K
,MMK L
TParam6MMM T
,MMT U
TParam7MMV ]
,MM] ^
TParam8MM_ f
,MMf g
TParam9MMh o
,MMo p
TParam10MMq y
>MMy z
installerMethod	MM{ ä
)
MMä ã
{NN 	
BindingUtilOO 
.OO %
AssertIsValidResourcePathOO 1
(OO1 2
resourcePathOO2 >
)OO> ?
;OO? @
varQQ 
gameObjectInfoQQ 
=QQ  
newQQ! $(
GameObjectCreationParametersQQ% A
(QQA B
)QQB C
;QQC D
ProviderFuncSS 
=SS 
(TT 
	containerTT 
)TT 
=>TT 
newTT "*
SubContainerDependencyProviderTT# A
(TTA B
ContractTypeUU  
,UU  !
SubIdentifierUU" /
,UU/ 0
newVV 0
$SubContainerCreatorByNewPrefabMethodVV <
<VV< =
TParam1VV= D
,VVD E
TParam2VVF M
,VVM N
TParam3VVO V
,VVV W
TParam4VVX _
,VV_ `
TParam5VVa h
,VVh i
TParam6VVj q
,VVq r
TParam7VVs z
,VVz {
TParam8	VV| É
,
VVÉ Ñ
TParam9
VVÖ å
,
VVå ç
TParam10
VVé ñ
>
VVñ ó
(
VVó ò
	container
VVô ¢
,
VV¢ £
newWW "
PrefabProviderResourceWW 2
(WW2 3
resourcePathWW3 ?
)WW? @
,WW@ A
gameObjectInfoXX &
,XX& '
installerMethodXX( 7
)XX7 8
,XX8 9
falseXX: ?
)XX? @
;XX@ A
returnZZ 
newZZ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderZZ P
(ZZP Q
BindInfoZZQ Y
,ZZY Z
gameObjectInfoZZ[ i
)ZZi j
;ZZj k
}[[ 	
}]] 
}^^ ¯
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\AnimatorInterfaces\IAnimatorIkHandler.cs
	namespace 	
Zenject
 
{ 
public 

	interface 
IAnimatorIkHandler '
{ 
void 
OnAnimatorIk 
( 
) 
; 
} 
} ãŒ
ZC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\TypeExtensions.cs
	namespace 	

ModestTree
 
{ 
public		 

static		 
class		 
TypeExtensions		 &
{

 
static 
readonly 

Dictionary "
<" #
Type# '
,' (
bool) -
>- . 
_isClosedGenericType/ C
=D E
newF I

DictionaryJ T
<T U
TypeU Y
,Y Z
bool[ _
>_ `
(` a
)a b
;b c
static 
readonly 

Dictionary "
<" #
Type# '
,' (
bool) -
>- .
_isOpenGenericType/ A
=B C
newD G

DictionaryH R
<R S
TypeS W
,W X
boolY ]
>] ^
(^ _
)_ `
;` a
static 
readonly 

Dictionary "
<" #
Type# '
,' (
bool) -
>- .
_isValueType/ ;
=< =
new> A

DictionaryB L
<L M
TypeM Q
,Q R
boolS W
>W X
(X Y
)Y Z
;Z [
static 
readonly 

Dictionary "
<" #
Type# '
,' (
Type) -
[- .
]. /
>/ 0
_interfaces1 <
== >
new? B

DictionaryC M
<M N
TypeN R
,R S
TypeT X
[X Y
]Y Z
>Z [
([ \
)\ ]
;] ^
public 
static 
bool 
DerivesFrom &
<& '
T' (
>( )
() *
this* .
Type/ 3
a4 5
)5 6
{ 	
return 
DerivesFrom 
( 
a  
,  !
typeof" (
(( )
T) *
)* +
)+ ,
;, -
} 	
public 
static 
bool 
DerivesFrom &
(& '
this' +
Type, 0
a1 2
,2 3
Type4 8
b9 :
): ;
{ 	
return 
b 
!= 
a 
&& 
a 
. 
DerivesFromOrEqual 1
(1 2
b2 3
)3 4
;4 5
} 	
public 
static 
bool 
DerivesFromOrEqual -
<- .
T. /
>/ 0
(0 1
this1 5
Type6 :
a; <
)< =
{ 	
return 
DerivesFromOrEqual %
(% &
a& '
,' (
typeof) /
(/ 0
T0 1
)1 2
)2 3
;3 4
} 	
public   
static   
bool   
DerivesFromOrEqual   -
(  - .
this  . 2
Type  3 7
a  8 9
,  9 :
Type  ; ?
b  @ A
)  A B
{!! 	
return%% 
b%% 
==%% 
a%% 
||%% 
b%% 
.%% 
IsAssignableFrom%% /
(%%/ 0
a%%0 1
)%%1 2
;%%2 3
}'' 	
public++ 
static++ 
bool++ %
IsAssignableToGenericType++ 4
(++4 5
Type++5 9
	givenType++: C
,++C D
Type++E I
genericType++J U
)++U V
{,, 	
var-- 
interfaceTypes-- 
=--  
	givenType--! *
.--* +

Interfaces--+ 5
(--5 6
)--6 7
;--7 8
foreach// 
(// 
var// 
it// 
in// 
interfaceTypes// -
)//- .
{00 
if11 
(11 
it11 
.11 
IsGenericType11 $
&&11% '
it11( *
.11* +$
GetGenericTypeDefinition11+ C
(11C D
)11D E
==11F H
genericType11I T
)11T U
{22 
return33 
true33 
;33  
}44 
}55 
if77 
(77 
	givenType77 
.77 
IsGenericType77 '
&&77( *
	givenType77+ 4
.774 5$
GetGenericTypeDefinition775 M
(77M N
)77N O
==77P R
genericType77S ^
)77^ _
{88 
return99 
true99 
;99 
}:: 
Type<< 
baseType<< 
=<< 
	givenType<< %
.<<% &
BaseType<<& .
;<<. /
if>> 
(>> 
baseType>> 
==>> 
null>>  
)>>  !
{?? 
return@@ 
false@@ 
;@@ 
}AA 
returnCC %
IsAssignableToGenericTypeCC ,
(CC, -
baseTypeCC- 5
,CC5 6
genericTypeCC7 B
)CCB C
;CCC D
}DD 	
publicGG 
staticGG 
boolGG 
IsEnumGG !
(GG! "
thisGG" &
TypeGG' +
typeGG, 0
)GG0 1
{HH 	
returnLL 
typeLL 
.LL 
IsEnumLL 
;LL 
}NN 	
publicPP 
staticPP 
boolPP 
IsValueTypePP &
(PP& '
thisPP' +
TypePP, 0
typePP1 5
)PP5 6
{QQ 	
boolRR 
resultRR 
;RR 
ifSS 
(SS 
!SS 
_isValueTypeSS 
.SS 
TryGetValueSS )
(SS) *
typeSS* .
,SS. /
outSS0 3
resultSS4 :
)SS: ;
)SS; <
{TT 
resultXX 
=XX 
typeXX 
.XX 
IsValueTypeXX )
;XX) *
_isValueTypeZZ 
[ZZ 
typeZZ !
]ZZ! "
=ZZ# $
resultZZ% +
;ZZ+ ,
}[[ 
return\\ 
result\\ 
;\\ 
}]] 	
public__ 
static__ 

MethodInfo__  
[__  !
]__! "#
DeclaredInstanceMethods__# :
(__: ;
this__; ?
Type__@ D
type__E I
)__I J
{`` 	
returnee 
typeee 
.ee 

GetMethodsee "
(ee" #
BindingFlagsff 
.ff 
Publicff #
|ff$ %
BindingFlagsff& 2
.ff2 3
	NonPublicff3 <
|ff= >
BindingFlagsff? K
.ffK L
InstanceffL T
|ffU V
BindingFlagsffW c
.ffc d
DeclaredOnlyffd p
)ffp q
;ffq r
}hh 	
publicjj 
staticjj 
PropertyInfojj "
[jj" #
]jj# $&
DeclaredInstancePropertiesjj% ?
(jj? @
thisjj@ D
TypejjE I
typejjJ N
)jjN O
{kk 	
returnqq 
typeqq 
.qq 
GetPropertiesqq %
(qq% &
BindingFlagsrr 
.rr 
Publicrr #
|rr$ %
BindingFlagsrr& 2
.rr2 3
	NonPublicrr3 <
|rr= >
BindingFlagsrr? K
.rrK L
InstancerrL T
|rrU V
BindingFlagsrrW c
.rrc d
DeclaredOnlyrrd p
)rrp q
;rrq r
}tt 	
publicvv 
staticvv 
	FieldInfovv 
[vv  
]vv  !"
DeclaredInstanceFieldsvv" 8
(vv8 9
thisvv9 =
Typevv> B
typevvC G
)vvG H
{ww 	
return|| 
type|| 
.|| 
	GetFields|| !
(||! "
BindingFlags}} 
.}} 
Public}} #
|}}$ %
BindingFlags}}& 2
.}}2 3
	NonPublic}}3 <
|}}= >
BindingFlags}}? K
.}}K L
Instance}}L T
|}}U V
BindingFlags}}W c
.}}c d
DeclaredOnly}}d p
)}}p q
;}}q r
} 	
public
àà 
static
àà 
Type
àà 
BaseType
àà #
(
àà# $
this
àà$ (
Type
àà) -
type
àà. 2
)
àà2 3
{
ââ 	
return
çç 
type
çç 
.
çç 
BaseType
çç  
;
çç  !
}
èè 	
public
ëë 
static
ëë 
bool
ëë 
IsGenericType
ëë (
(
ëë( )
this
ëë) -
Type
ëë. 2
type
ëë3 7
)
ëë7 8
{
íí 	
return
ññ 
type
ññ 
.
ññ 
IsGenericType
ññ %
;
ññ% &
}
òò 	
public
ôô 
static
ôô 
bool
ôô %
IsGenericTypeDefinition
ôô 2
(
ôô2 3
this
ôô3 7
Type
ôô8 <
type
ôô= A
)
ôôA B
{
öö 	
return
ûû 
type
ûû 
.
ûû %
IsGenericTypeDefinition
ûû /
;
ûû/ 0
}
†† 	
public
¢¢ 
static
¢¢ 
bool
¢¢ 
IsPrimitive
¢¢ &
(
¢¢& '
this
¢¢' +
Type
¢¢, 0
type
¢¢1 5
)
¢¢5 6
{
££ 	
return
ßß 
type
ßß 
.
ßß 
IsPrimitive
ßß #
;
ßß# $
}
©© 	
public
´´ 
static
´´ 
bool
´´ 
IsInterface
´´ &
(
´´& '
this
´´' +
Type
´´, 0
type
´´1 5
)
´´5 6
{
¨¨ 	
return
∞∞ 
type
∞∞ 
.
∞∞ 
IsInterface
∞∞ #
;
∞∞# $
}
≤≤ 	
public
¥¥ 
static
¥¥ 
bool
¥¥ '
ContainsGenericParameters
¥¥ 4
(
¥¥4 5
this
¥¥5 9
Type
¥¥: >
type
¥¥? C
)
¥¥C D
{
µµ 	
return
ππ 
type
ππ 
.
ππ '
ContainsGenericParameters
ππ 1
;
ππ1 2
}
ªª 	
public
ΩΩ 
static
ΩΩ 
bool
ΩΩ 

IsAbstract
ΩΩ %
(
ΩΩ% &
this
ΩΩ& *
Type
ΩΩ+ /
type
ΩΩ0 4
)
ΩΩ4 5
{
ææ 	
return
¬¬ 
type
¬¬ 
.
¬¬ 

IsAbstract
¬¬ "
;
¬¬" #
}
ƒƒ 	
public
∆∆ 
static
∆∆ 
bool
∆∆ 
IsSealed
∆∆ #
(
∆∆# $
this
∆∆$ (
Type
∆∆) -
type
∆∆. 2
)
∆∆2 3
{
«« 	
return
ÀÀ 
type
ÀÀ 
.
ÀÀ 
IsSealed
ÀÀ  
;
ÀÀ  !
}
ÕÕ 	
public
œœ 
static
œœ 

MethodInfo
œœ  
Method
œœ! '
(
œœ' (
this
œœ( ,
Delegate
œœ- 5
del
œœ6 9
)
œœ9 :
{
–– 	
return
‘‘ 
del
‘‘ 
.
‘‘ 
Method
‘‘ 
;
‘‘ 
}
÷÷ 	
public
ÿÿ 
static
ÿÿ 
Type
ÿÿ 
[
ÿÿ 
]
ÿÿ 
GenericArguments
ÿÿ -
(
ÿÿ- .
this
ÿÿ. 2
Type
ÿÿ3 7
type
ÿÿ8 <
)
ÿÿ< =
{
ŸŸ 	
return
›› 
type
›› 
.
›› !
GetGenericArguments
›› +
(
››+ ,
)
››, -
;
››- .
}
ﬂﬂ 	
public
·· 
static
·· 
Type
·· 
[
·· 
]
·· 

Interfaces
·· '
(
··' (
this
··( ,
Type
··- 1
type
··2 6
)
··6 7
{
‚‚ 	
Type
„„ 
[
„„ 
]
„„ 
result
„„ 
;
„„ 
if
‰‰ 
(
‰‰ 
!
‰‰ 
_interfaces
‰‰ 
.
‰‰ 
TryGetValue
‰‰ (
(
‰‰( )
type
‰‰) -
,
‰‰- .
out
‰‰/ 2
result
‰‰3 9
)
‰‰9 :
)
‰‰: ;
{
ÂÂ 
result
ÈÈ 
=
ÈÈ 
type
ÈÈ 
.
ÈÈ 
GetInterfaces
ÈÈ +
(
ÈÈ+ ,
)
ÈÈ, -
;
ÈÈ- .
_interfaces
ÎÎ 
.
ÎÎ 
Add
ÎÎ 
(
ÎÎ  
type
ÎÎ  $
,
ÎÎ$ %
result
ÎÎ& ,
)
ÎÎ, -
;
ÎÎ- .
}
ÏÏ 
return
ÌÌ 
result
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
public
 
static
 
ConstructorInfo
 %
[
% &
]
& '
Constructors
( 4
(
4 5
this
5 9
Type
: >
type
? C
)
C D
{
ÒÒ 	
return
ıı 
type
ıı 
.
ıı 
GetConstructors
ıı '
(
ıı' (
BindingFlags
ˆˆ 
.
ˆˆ 
Public
ˆˆ #
|
ˆˆ$ %
BindingFlags
ˆˆ& 2
.
ˆˆ2 3
	NonPublic
ˆˆ3 <
|
ˆˆ= >
BindingFlags
ˆˆ? K
.
ˆˆK L
Instance
ˆˆL T
)
ˆˆT U
;
ˆˆU V
}
¯¯ 	
public
˙˙ 
static
˙˙ 
object
˙˙ 
GetDefaultValue
˙˙ ,
(
˙˙, -
this
˙˙- 1
Type
˙˙2 6
type
˙˙7 ;
)
˙˙; <
{
˚˚ 	
if
¸¸ 
(
¸¸ 
type
¸¸ 
.
¸¸ 
IsValueType
¸¸  
(
¸¸  !
)
¸¸! "
)
¸¸" #
{
˝˝ 
return
˛˛ 
	Activator
˛˛  
.
˛˛  !
CreateInstance
˛˛! /
(
˛˛/ 0
type
˛˛0 4
)
˛˛4 5
;
˛˛5 6
}
ˇˇ 
return
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
static
ÑÑ 
bool
ÑÑ !
IsClosedGenericType
ÑÑ .
(
ÑÑ. /
this
ÑÑ/ 3
Type
ÑÑ4 8
type
ÑÑ9 =
)
ÑÑ= >
{
ÖÖ 	
bool
ÜÜ 
result
ÜÜ 
;
ÜÜ 
if
áá 
(
áá 
!
áá "
_isClosedGenericType
áá %
.
áá% &
TryGetValue
áá& 1
(
áá1 2
type
áá2 6
,
áá6 7
out
áá8 ;
result
áá< B
)
ááB C
)
ááC D
{
àà 
result
ââ 
=
ââ 
type
ââ 
.
ââ 
IsGenericType
ââ +
(
ââ+ ,
)
ââ, -
&&
ââ. 0
type
ââ1 5
!=
ââ6 8
type
ââ9 =
.
ââ= >&
GetGenericTypeDefinition
ââ> V
(
ââV W
)
ââW X
;
ââX Y"
_isClosedGenericType
ää $
[
ää$ %
type
ää% )
]
ää) *
=
ää+ ,
result
ää- 3
;
ää3 4
}
ãã 
return
åå 
result
åå 
;
åå 
}
çç 	
public
èè 
static
èè 
IEnumerable
èè !
<
èè! "
Type
èè" &
>
èè& '
GetParentTypes
èè( 6
(
èè6 7
this
èè7 ;
Type
èè< @
type
èèA E
)
èèE F
{
êê 	
if
ëë 
(
ëë 
type
ëë 
==
ëë 
null
ëë 
||
ëë 
type
ëë  $
.
ëë$ %
BaseType
ëë% -
(
ëë- .
)
ëë. /
==
ëë0 2
null
ëë3 7
||
ëë8 :
type
ëë; ?
==
ëë@ B
typeof
ëëC I
(
ëëI J
object
ëëJ P
)
ëëP Q
||
ëëR T
type
ëëU Y
.
ëëY Z
BaseType
ëëZ b
(
ëëb c
)
ëëc d
==
ëëe g
typeof
ëëh n
(
ëën o
object
ëëo u
)
ëëu v
)
ëëv w
{
íí 
yield
ìì 
break
ìì 
;
ìì 
}
îî 
yield
ññ 
return
ññ 
type
ññ 
.
ññ 
BaseType
ññ &
(
ññ& '
)
ññ' (
;
ññ( )
foreach
òò 
(
òò 
var
òò 
ancestor
òò !
in
òò" $
type
òò% )
.
òò) *
BaseType
òò* 2
(
òò2 3
)
òò3 4
.
òò4 5
GetParentTypes
òò5 C
(
òòC D
)
òòD E
)
òòE F
{
ôô 
yield
öö 
return
öö 
ancestor
öö %
;
öö% &
}
õõ 
}
úú 	
public
ûû 
static
ûû 
bool
ûû 
IsOpenGenericType
ûû ,
(
ûû, -
this
ûû- 1
Type
ûû2 6
type
ûû7 ;
)
ûû; <
{
üü 	
bool
†† 
result
†† 
;
†† 
if
°° 
(
°° 
!
°°  
_isOpenGenericType
°° #
.
°°# $
TryGetValue
°°$ /
(
°°/ 0
type
°°0 4
,
°°4 5
out
°°6 9
result
°°: @
)
°°@ A
)
°°A B
{
¢¢ 
result
££ 
=
££ 
type
££ 
.
££ 
IsGenericType
££ +
(
££+ ,
)
££, -
&&
££. 0
type
££1 5
==
££6 8
type
££9 =
.
££= >&
GetGenericTypeDefinition
££> V
(
££V W
)
££W X
;
££X Y 
_isOpenGenericType
§§ "
[
§§" #
type
§§# '
]
§§' (
=
§§) *
result
§§+ 1
;
§§1 2
}
•• 
return
¶¶ 
result
¶¶ 
;
¶¶ 
}
ßß 	
public
©© 
static
©© 
T
©© 
GetAttribute
©© $
<
©©$ %
T
©©% &
>
©©& '
(
©©' (
this
©©( ,

MemberInfo
©©- 7
provider
©©8 @
)
©©@ A
where
™™ 
T
™™ 
:
™™ 
	Attribute
™™ 
{
´´ 	
return
¨¨ 
provider
¨¨ 
.
¨¨ 
AllAttributes
¨¨ )
<
¨¨) *
T
¨¨* +
>
¨¨+ ,
(
¨¨, -
)
¨¨- .
.
¨¨. /
Single
¨¨/ 5
(
¨¨5 6
)
¨¨6 7
;
¨¨7 8
}
≠≠ 	
public
ØØ 
static
ØØ 
T
ØØ 
TryGetAttribute
ØØ '
<
ØØ' (
T
ØØ( )
>
ØØ) *
(
ØØ* +
this
ØØ+ /

MemberInfo
ØØ0 :
provider
ØØ; C
)
ØØC D
where
∞∞ 
T
∞∞ 
:
∞∞ 
	Attribute
∞∞ 
{
±± 	
return
≤≤ 
provider
≤≤ 
.
≤≤ 
AllAttributes
≤≤ )
<
≤≤) *
T
≤≤* +
>
≤≤+ ,
(
≤≤, -
)
≤≤- .
.
≤≤. /
OnlyOrDefault
≤≤/ <
(
≤≤< =
)
≤≤= >
;
≤≤> ?
}
≥≥ 	
public
µµ 
static
µµ 
bool
µµ 
HasAttribute
µµ '
(
µµ' (
this
∂∂ 

MemberInfo
∂∂ 
provider
∂∂ $
,
∂∂$ %
params
∂∂& ,
Type
∂∂- 1
[
∂∂1 2
]
∂∂2 3
attributeTypes
∂∂4 B
)
∂∂B C
{
∑∑ 	
return
∏∏ 
provider
∏∏ 
.
∏∏ 
AllAttributes
∏∏ )
(
∏∏) *
attributeTypes
∏∏* 8
)
∏∏8 9
.
∏∏9 :
Any
∏∏: =
(
∏∏= >
)
∏∏> ?
;
∏∏? @
}
ππ 	
public
ªª 
static
ªª 
bool
ªª 
HasAttribute
ªª '
<
ªª' (
T
ªª( )
>
ªª) *
(
ªª* +
this
ªª+ /

MemberInfo
ªª0 :
provider
ªª; C
)
ªªC D
where
ºº 
T
ºº 
:
ºº 
	Attribute
ºº 
{
ΩΩ 	
return
ææ 
provider
ææ 
.
ææ 
AllAttributes
ææ )
(
ææ) *
typeof
ææ* 0
(
ææ0 1
T
ææ1 2
)
ææ2 3
)
ææ3 4
.
ææ4 5
Any
ææ5 8
(
ææ8 9
)
ææ9 :
;
ææ: ;
}
øø 	
public
¡¡ 
static
¡¡ 
IEnumerable
¡¡ !
<
¡¡! "
T
¡¡" #
>
¡¡# $
AllAttributes
¡¡% 2
<
¡¡2 3
T
¡¡3 4
>
¡¡4 5
(
¡¡5 6
this
¬¬ 

MemberInfo
¬¬ 
provider
¬¬ $
)
¬¬$ %
where
√√ 
T
√√ 
:
√√ 
	Attribute
√√ 
{
ƒƒ 	
return
≈≈ 
provider
≈≈ 
.
≈≈ 
AllAttributes
≈≈ )
(
≈≈) *
typeof
≈≈* 0
(
≈≈0 1
T
≈≈1 2
)
≈≈2 3
)
≈≈3 4
.
≈≈4 5
Cast
≈≈5 9
<
≈≈9 :
T
≈≈: ;
>
≈≈; <
(
≈≈< =
)
≈≈= >
;
≈≈> ?
}
∆∆ 	
public
»» 
static
»» 
IEnumerable
»» !
<
»»! "
	Attribute
»»" +
>
»»+ ,
AllAttributes
»»- :
(
»»: ;
this
…… 

MemberInfo
…… 
provider
…… $
,
……$ %
params
……& ,
Type
……- 1
[
……1 2
]
……2 3
attributeTypes
……4 B
)
……B C
{
   	
	Attribute
ÀÀ 
[
ÀÀ 
]
ÀÀ 
allAttributes
ÀÀ %
;
ÀÀ% &
allAttributes
œœ 
=
œœ 
System
œœ "
.
œœ" #
	Attribute
œœ# ,
.
œœ, -!
GetCustomAttributes
œœ- @
(
œœ@ A
provider
œœA I
,
œœI J
typeof
œœK Q
(
œœQ R
	Attribute
œœR [
)
œœ[ \
,
œœ\ ]
true
œœ^ b
)
œœb c
;
œœc d
if
—— 
(
—— 
attributeTypes
—— 
.
—— 
Length
—— %
==
——& (
$num
——) *
)
——* +
{
““ 
return
”” 
allAttributes
”” $
;
””$ %
}
‘‘ 
return
÷÷ 
allAttributes
÷÷  
.
÷÷  !
Where
÷÷! &
(
÷÷& '
a
÷÷' (
=>
÷÷) +
attributeTypes
÷÷, :
.
÷÷: ;
Any
÷÷; >
(
÷÷> ?
x
÷÷? @
=>
÷÷A C
a
÷÷D E
.
÷÷E F
GetType
÷÷F M
(
÷÷M N
)
÷÷N O
.
÷÷O P 
DerivesFromOrEqual
÷÷P b
(
÷÷b c
x
÷÷c d
)
÷÷d e
)
÷÷e f
)
÷÷f g
;
÷÷g h
}
◊◊ 	
public
€€ 
static
€€ 
bool
€€ 
HasAttribute
€€ '
(
€€' (
this
‹‹ 
ParameterInfo
‹‹ 
provider
‹‹ '
,
‹‹' (
params
‹‹) /
Type
‹‹0 4
[
‹‹4 5
]
‹‹5 6
attributeTypes
‹‹7 E
)
‹‹E F
{
›› 	
return
ﬁﬁ 
provider
ﬁﬁ 
.
ﬁﬁ 
AllAttributes
ﬁﬁ )
(
ﬁﬁ) *
attributeTypes
ﬁﬁ* 8
)
ﬁﬁ8 9
.
ﬁﬁ9 :
Any
ﬁﬁ: =
(
ﬁﬁ= >
)
ﬁﬁ> ?
;
ﬁﬁ? @
}
ﬂﬂ 	
public
·· 
static
·· 
bool
·· 
HasAttribute
·· '
<
··' (
T
··( )
>
··) *
(
··* +
this
··+ /
ParameterInfo
··0 =
provider
··> F
)
··F G
where
‚‚ 
T
‚‚ 
:
‚‚ 
	Attribute
‚‚ 
{
„„ 	
return
‰‰ 
provider
‰‰ 
.
‰‰ 
AllAttributes
‰‰ )
(
‰‰) *
typeof
‰‰* 0
(
‰‰0 1
T
‰‰1 2
)
‰‰2 3
)
‰‰3 4
.
‰‰4 5
Any
‰‰5 8
(
‰‰8 9
)
‰‰9 :
;
‰‰: ;
}
ÂÂ 	
public
ÁÁ 
static
ÁÁ 
IEnumerable
ÁÁ !
<
ÁÁ! "
T
ÁÁ" #
>
ÁÁ# $
AllAttributes
ÁÁ% 2
<
ÁÁ2 3
T
ÁÁ3 4
>
ÁÁ4 5
(
ÁÁ5 6
this
ËË 
ParameterInfo
ËË 
provider
ËË '
)
ËË' (
where
ÈÈ 
T
ÈÈ 
:
ÈÈ 
	Attribute
ÈÈ 
{
ÍÍ 	
return
ÎÎ 
provider
ÎÎ 
.
ÎÎ 
AllAttributes
ÎÎ )
(
ÎÎ) *
typeof
ÎÎ* 0
(
ÎÎ0 1
T
ÎÎ1 2
)
ÎÎ2 3
)
ÎÎ3 4
.
ÎÎ4 5
Cast
ÎÎ5 9
<
ÎÎ9 :
T
ÎÎ: ;
>
ÎÎ; <
(
ÎÎ< =
)
ÎÎ= >
;
ÎÎ> ?
}
ÏÏ 	
public
ÓÓ 
static
ÓÓ 
IEnumerable
ÓÓ !
<
ÓÓ! "
	Attribute
ÓÓ" +
>
ÓÓ+ ,
AllAttributes
ÓÓ- :
(
ÓÓ: ;
this
ÔÔ 
ParameterInfo
ÔÔ 
provider
ÔÔ '
,
ÔÔ' (
params
ÔÔ) /
Type
ÔÔ0 4
[
ÔÔ4 5
]
ÔÔ5 6
attributeTypes
ÔÔ7 E
)
ÔÔE F
{
 	
	Attribute
ÒÒ 
[
ÒÒ 
]
ÒÒ 
allAttributes
ÒÒ %
;
ÒÒ% &
allAttributes
ıı 
=
ıı 
System
ıı "
.
ıı" #
	Attribute
ıı# ,
.
ıı, -!
GetCustomAttributes
ıı- @
(
ıı@ A
provider
ııA I
,
ııI J
typeof
ııK Q
(
ııQ R
	Attribute
ııR [
)
ıı[ \
,
ıı\ ]
true
ıı^ b
)
ııb c
;
ııc d
if
˜˜ 
(
˜˜ 
attributeTypes
˜˜ 
.
˜˜ 
Length
˜˜ %
==
˜˜& (
$num
˜˜) *
)
˜˜* +
{
¯¯ 
return
˘˘ 
allAttributes
˘˘ $
;
˘˘$ %
}
˙˙ 
return
¸¸ 
allAttributes
¸¸  
.
¸¸  !
Where
¸¸! &
(
¸¸& '
a
¸¸' (
=>
¸¸) +
attributeTypes
¸¸, :
.
¸¸: ;
Any
¸¸; >
(
¸¸> ?
x
¸¸? @
=>
¸¸A C
a
¸¸D E
.
¸¸E F
GetType
¸¸F M
(
¸¸M N
)
¸¸N O
.
¸¸O P 
DerivesFromOrEqual
¸¸P b
(
¸¸b c
x
¸¸c d
)
¸¸d e
)
¸¸e f
)
¸¸f g
;
¸¸g h
}
˝˝ 	
}
˛˛ 
}ˇˇ â∫
gC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PoolableMemoryPoolProvider.cs
	namespace 	
Zenject
 
{ 
public 

abstract 
class *
PoolableMemoryPoolProviderBase 8
<8 9
	TContract9 B
>B C
:D E
	IProviderF O
{ 
public		 *
PoolableMemoryPoolProviderBase		 -
(		- .
DiContainer

 
	container

 !
,

! "
Guid

# '
poolId

( .
)

. /
{ 	
	Container 
= 
	container !
;! "
PoolId 
= 
poolId 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
	protected 
Guid 
PoolId 
{ 	
get 
; 
private 
set 
; 
} 	
	protected 
DiContainer 
	Container '
{ 	
get 
; 
private 
set 
; 
} 	
public!! 
bool!! '
TypeVariesBasedOnMemberType!! /
{"" 	
get## 
{## 
return## 
false## 
;## 
}##  !
}$$ 	
public&& 
Type&& 
GetInstanceType&& #
(&&# $
InjectContext&&$ 1
context&&2 9
)&&9 :
{'' 	
return(( 
typeof(( 
((( 
	TContract(( #
)((# $
;(($ %
})) 	
public++ 
abstract++ 
void++ *
GetAllInstancesWithInjectSplit++ ;
(++; <
InjectContext,, 
context,, !
,,,! "
List,,# '
<,,' (
TypeValuePair,,( 5
>,,5 6
args,,7 ;
,,,; <
out,,= @
Action,,A G
injectAction,,H T
,,,T U
List,,V Z
<,,Z [
object,,[ a
>,,a b
buffer,,c i
),,i j
;,,j k
}-- 
[11 
NoReflectionBaking11 
]11 
public22 

class22 &
PoolableMemoryPoolProvider22 +
<22+ ,
	TContract22, 5
,225 6
TMemoryPool227 B
>22B C
:22D E*
PoolableMemoryPoolProviderBase22F d
<22d e
	TContract22e n
>22n o
,22o p
IValidatable22q }
where33 
	TContract33 
:33 
	IPoolable33 #
<33# $
IMemoryPool33$ /
>33/ 0
where44 
TMemoryPool44 
:44 

MemoryPool44 &
<44& '
IMemoryPool44' 2
,442 3
	TContract444 =
>44= >
{55 
TMemoryPool66 
_pool66 
;66 
public88 &
PoolableMemoryPoolProvider88 )
(88) *
DiContainer99 
	container99 !
,99! "
Guid99# '
poolId99( .
)99. /
::: 
base:: 
(:: 
	container:: 
,:: 
poolId:: $
)::$ %
{;; 	
}<< 	
public>> 
void>> 
Validate>> 
(>> 
)>> 
{?? 	
	Container@@ 
.@@ 
	ResolveId@@ 
<@@  
TMemoryPool@@  +
>@@+ ,
(@@, -
PoolId@@- 3
)@@3 4
;@@4 5
}AA 	
publicCC 
overrideCC 
voidCC *
GetAllInstancesWithInjectSplitCC ;
(CC; <
InjectContextDD 
contextDD !
,DD! "
ListDD# '
<DD' (
TypeValuePairDD( 5
>DD5 6
argsDD7 ;
,DD; <
outDD= @
ActionDDA G
injectActionDDH T
,DDT U
ListDDV Z
<DDZ [
objectDD[ a
>DDa b
bufferDDc i
)DDi j
{EE 	
AssertFF 
.FF 
ThatFF 
(FF 
argsFF 
.FF 
IsEmptyFF $
(FF$ %
)FF% &
)FF& '
;FF' (
AssertHH 
.HH 
	IsNotNullHH 
(HH 
contextHH $
)HH$ %
;HH% &
AssertJJ 
.JJ 
ThatJJ 
(JJ 
typeofJJ 
(JJ 
	TContractJJ (
)JJ( )
.JJ) *
DerivesFromOrEqualJJ* <
(JJ< =
contextJJ= D
.JJD E

MemberTypeJJE O
)JJO P
)JJP Q
;JJQ R
injectActionLL 
=LL 
nullLL 
;LL  
ifNN 
(NN 
_poolNN 
==NN 
nullNN 
)NN 
{OO 
_poolPP 
=PP 
	ContainerPP !
.PP! "
	ResolveIdPP" +
<PP+ ,
TMemoryPoolPP, 7
>PP7 8
(PP8 9
PoolIdPP9 ?
)PP? @
;PP@ A
}QQ 
bufferSS 
.SS 
AddSS 
(SS 
_poolSS 
.SS 
SpawnSS "
(SS" #
_poolSS# (
)SS( )
)SS) *
;SS* +
}TT 	
}UU 
[YY 
NoReflectionBakingYY 
]YY 
publicZZ 

classZZ &
PoolableMemoryPoolProviderZZ +
<ZZ+ ,
TParam1ZZ, 3
,ZZ3 4
	TContractZZ5 >
,ZZ> ?
TMemoryPoolZZ@ K
>ZZK L
:ZZM N*
PoolableMemoryPoolProviderBaseZZO m
<ZZm n
	TContractZZn w
>ZZw x
,ZZx y
IValidatable	ZZz Ü
where[[ 
	TContract[[ 
:[[ 
	IPoolable[[ #
<[[# $
TParam1[[$ +
,[[+ ,
IMemoryPool[[- 8
>[[8 9
where\\ 
TMemoryPool\\ 
:\\ 

MemoryPool\\ &
<\\& '
TParam1\\' .
,\\. /
IMemoryPool\\0 ;
,\\; <
	TContract\\= F
>\\F G
{]] 
TMemoryPool^^ 
_pool^^ 
;^^ 
public`` &
PoolableMemoryPoolProvider`` )
(``) *
DiContaineraa 
	containeraa !
,aa! "
Guidaa# '
poolIdaa( .
)aa. /
:bb 
basebb 
(bb 
	containerbb 
,bb 
poolIdbb $
)bb$ %
{cc 	
}dd 	
publicff 
voidff 
Validateff 
(ff 
)ff 
{gg 	
	Containerhh 
.hh 
	ResolveIdhh 
<hh  
TMemoryPoolhh  +
>hh+ ,
(hh, -
PoolIdhh- 3
)hh3 4
;hh4 5
}ii 	
publickk 
overridekk 
voidkk *
GetAllInstancesWithInjectSplitkk ;
(kk; <
InjectContextll 
contextll !
,ll! "
Listll# '
<ll' (
TypeValuePairll( 5
>ll5 6
argsll7 ;
,ll; <
outll= @
ActionllA G
injectActionllH T
,llT U
ListllV Z
<llZ [
objectll[ a
>lla b
bufferllc i
)lli j
{mm 	
Assertnn 
.nn 
IsEqualnn 
(nn 
argsnn 
.nn  
Countnn  %
,nn% &
$numnn' (
)nn( )
;nn) *
Assertoo 
.oo 
	IsNotNulloo 
(oo 
contextoo $
)oo$ %
;oo% &
Assertqq 
.qq 
Thatqq 
(qq 
typeofqq 
(qq 
	TContractqq (
)qq( )
.qq) *
DerivesFromOrEqualqq* <
(qq< =
contextqq= D
.qqD E

MemberTypeqqE O
)qqO P
)qqP Q
;qqQ R
Assertrr 
.rr 
Thatrr 
(rr 
argsrr 
[rr 
$numrr 
]rr 
.rr  
Typerr  $
.rr$ %
DerivesFromOrEqualrr% 7
<rr7 8
TParam1rr8 ?
>rr? @
(rr@ A
)rrA B
)rrB C
;rrC D
injectActiontt 
=tt 
nulltt 
;tt  
ifvv 
(vv 
_poolvv 
==vv 
nullvv 
)vv 
{ww 
_poolxx 
=xx 
	Containerxx !
.xx! "
	ResolveIdxx" +
<xx+ ,
TMemoryPoolxx, 7
>xx7 8
(xx8 9
PoolIdxx9 ?
)xx? @
;xx@ A
}yy 
buffer{{ 
.{{ 
Add{{ 
({{ 
_pool{{ 
.{{ 
Spawn{{ "
({{" #
({{# $
TParam1{{$ +
){{+ ,
args{{, 0
[{{0 1
$num{{1 2
]{{2 3
.{{3 4
Value{{4 9
,{{9 :
_pool{{; @
){{@ A
){{A B
;{{B C
}|| 	
}}} 
[
ÅÅ  
NoReflectionBaking
ÅÅ 
]
ÅÅ 
public
ÇÇ 

class
ÇÇ (
PoolableMemoryPoolProvider
ÇÇ +
<
ÇÇ+ ,
TParam1
ÇÇ, 3
,
ÇÇ3 4
TParam2
ÇÇ5 <
,
ÇÇ< =
	TContract
ÇÇ> G
,
ÇÇG H
TMemoryPool
ÇÇI T
>
ÇÇT U
:
ÇÇV W,
PoolableMemoryPoolProviderBase
ÇÇX v
<
ÇÇv w
	TContractÇÇw Ä
>ÇÇÄ Å
,ÇÇÅ Ç
IValidatableÇÇÉ è
where
ÉÉ 
	TContract
ÉÉ 
:
ÉÉ 
	IPoolable
ÉÉ #
<
ÉÉ# $
TParam1
ÉÉ$ +
,
ÉÉ+ ,
TParam2
ÉÉ- 4
,
ÉÉ4 5
IMemoryPool
ÉÉ6 A
>
ÉÉA B
where
ÑÑ 
TMemoryPool
ÑÑ 
:
ÑÑ 

MemoryPool
ÑÑ &
<
ÑÑ& '
TParam1
ÑÑ' .
,
ÑÑ. /
TParam2
ÑÑ0 7
,
ÑÑ7 8
IMemoryPool
ÑÑ9 D
,
ÑÑD E
	TContract
ÑÑF O
>
ÑÑO P
{
ÖÖ 
TMemoryPool
ÜÜ 
_pool
ÜÜ 
;
ÜÜ 
public
àà (
PoolableMemoryPoolProvider
àà )
(
àà) *
DiContainer
ââ 
	container
ââ !
,
ââ! "
Guid
ââ# '
poolId
ââ( .
)
ââ. /
:
ää 
base
ää 
(
ää 
	container
ää 
,
ää 
poolId
ää $
)
ää$ %
{
ãã 	
}
åå 	
public
éé 
void
éé 
Validate
éé 
(
éé 
)
éé 
{
èè 	
	Container
êê 
.
êê 
	ResolveId
êê 
<
êê  
TMemoryPool
êê  +
>
êê+ ,
(
êê, -
PoolId
êê- 3
)
êê3 4
;
êê4 5
}
ëë 	
public
ìì 
override
ìì 
void
ìì ,
GetAllInstancesWithInjectSplit
ìì ;
(
ìì; <
InjectContext
îî 
context
îî !
,
îî! "
List
îî# '
<
îî' (
TypeValuePair
îî( 5
>
îî5 6
args
îî7 ;
,
îî; <
out
îî= @
Action
îîA G
injectAction
îîH T
,
îîT U
List
îîV Z
<
îîZ [
object
îî[ a
>
îîa b
buffer
îîc i
)
îîi j
{
ïï 	
Assert
ññ 
.
ññ 
IsEqual
ññ 
(
ññ 
args
ññ 
.
ññ  
Count
ññ  %
,
ññ% &
$num
ññ' (
)
ññ( )
;
ññ) *
Assert
óó 
.
óó 
	IsNotNull
óó 
(
óó 
context
óó $
)
óó$ %
;
óó% &
Assert
ôô 
.
ôô 
That
ôô 
(
ôô 
typeof
ôô 
(
ôô 
	TContract
ôô (
)
ôô( )
.
ôô) * 
DerivesFromOrEqual
ôô* <
(
ôô< =
context
ôô= D
.
ôôD E

MemberType
ôôE O
)
ôôO P
)
ôôP Q
;
ôôQ R
Assert
öö 
.
öö 
That
öö 
(
öö 
args
öö 
[
öö 
$num
öö 
]
öö 
.
öö  
Type
öö  $
.
öö$ % 
DerivesFromOrEqual
öö% 7
<
öö7 8
TParam1
öö8 ?
>
öö? @
(
öö@ A
)
ööA B
)
ööB C
;
ööC D
Assert
õõ 
.
õõ 
That
õõ 
(
õõ 
args
õõ 
[
õõ 
$num
õõ 
]
õõ 
.
õõ  
Type
õõ  $
.
õõ$ % 
DerivesFromOrEqual
õõ% 7
<
õõ7 8
TParam2
õõ8 ?
>
õõ? @
(
õõ@ A
)
õõA B
)
õõB C
;
õõC D
injectAction
ùù 
=
ùù 
null
ùù 
;
ùù  
if
üü 
(
üü 
_pool
üü 
==
üü 
null
üü 
)
üü 
{
†† 
_pool
°° 
=
°° 
	Container
°° !
.
°°! "
	ResolveId
°°" +
<
°°+ ,
TMemoryPool
°°, 7
>
°°7 8
(
°°8 9
PoolId
°°9 ?
)
°°? @
;
°°@ A
}
¢¢ 
buffer
§§ 
.
§§ 
Add
§§ 
(
§§ 
_pool
§§ 
.
§§ 
Spawn
§§ "
(
§§" #
(
•• 
TParam1
•• 
)
•• 
args
•• 
[
•• 
$num
•• 
]
••  
.
••  !
Value
••! &
,
••& '
(
¶¶ 
TParam2
¶¶ 
)
¶¶ 
args
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶  
.
¶¶  !
Value
¶¶! &
,
¶¶& '
_pool
ßß 
)
ßß 
)
ßß 
;
ßß 
}
®® 	
}
©© 
[
≠≠  
NoReflectionBaking
≠≠ 
]
≠≠ 
public
ÆÆ 

class
ÆÆ (
PoolableMemoryPoolProvider
ÆÆ +
<
ÆÆ+ ,
TParam1
ÆÆ, 3
,
ÆÆ3 4
TParam2
ÆÆ5 <
,
ÆÆ< =
TParam3
ÆÆ> E
,
ÆÆE F
	TContract
ÆÆG P
,
ÆÆP Q
TMemoryPool
ÆÆR ]
>
ÆÆ] ^
:
ÆÆ_ `,
PoolableMemoryPoolProviderBase
ÆÆa 
<ÆÆ Ä
	TContractÆÆÄ â
>ÆÆâ ä
,ÆÆä ã
IValidatableÆÆå ò
where
ØØ 
	TContract
ØØ 
:
ØØ 
	IPoolable
ØØ #
<
ØØ# $
TParam1
ØØ$ +
,
ØØ+ ,
TParam2
ØØ- 4
,
ØØ4 5
TParam3
ØØ6 =
,
ØØ= >
IMemoryPool
ØØ? J
>
ØØJ K
where
∞∞ 
TMemoryPool
∞∞ 
:
∞∞ 

MemoryPool
∞∞ &
<
∞∞& '
TParam1
∞∞' .
,
∞∞. /
TParam2
∞∞0 7
,
∞∞7 8
TParam3
∞∞9 @
,
∞∞@ A
IMemoryPool
∞∞B M
,
∞∞M N
	TContract
∞∞O X
>
∞∞X Y
{
±± 
TMemoryPool
≤≤ 
_pool
≤≤ 
;
≤≤ 
public
¥¥ (
PoolableMemoryPoolProvider
¥¥ )
(
¥¥) *
DiContainer
µµ 
	container
µµ !
,
µµ! "
Guid
µµ# '
poolId
µµ( .
)
µµ. /
:
∂∂ 
base
∂∂ 
(
∂∂ 
	container
∂∂ 
,
∂∂ 
poolId
∂∂ $
)
∂∂$ %
{
∑∑ 	
}
∏∏ 	
public
∫∫ 
void
∫∫ 
Validate
∫∫ 
(
∫∫ 
)
∫∫ 
{
ªª 	
	Container
ºº 
.
ºº 
	ResolveId
ºº 
<
ºº  
TMemoryPool
ºº  +
>
ºº+ ,
(
ºº, -
PoolId
ºº- 3
)
ºº3 4
;
ºº4 5
}
ΩΩ 	
public
øø 
override
øø 
void
øø ,
GetAllInstancesWithInjectSplit
øø ;
(
øø; <
InjectContext
¿¿ 
context
¿¿ !
,
¿¿! "
List
¿¿# '
<
¿¿' (
TypeValuePair
¿¿( 5
>
¿¿5 6
args
¿¿7 ;
,
¿¿; <
out
¿¿= @
Action
¿¿A G
injectAction
¿¿H T
,
¿¿T U
List
¿¿V Z
<
¿¿Z [
object
¿¿[ a
>
¿¿a b
buffer
¿¿c i
)
¿¿i j
{
¡¡ 	
Assert
¬¬ 
.
¬¬ 
IsEqual
¬¬ 
(
¬¬ 
args
¬¬ 
.
¬¬  
Count
¬¬  %
,
¬¬% &
$num
¬¬' (
)
¬¬( )
;
¬¬) *
Assert
√√ 
.
√√ 
	IsNotNull
√√ 
(
√√ 
context
√√ $
)
√√$ %
;
√√% &
Assert
≈≈ 
.
≈≈ 
That
≈≈ 
(
≈≈ 
typeof
≈≈ 
(
≈≈ 
	TContract
≈≈ (
)
≈≈( )
.
≈≈) * 
DerivesFromOrEqual
≈≈* <
(
≈≈< =
context
≈≈= D
.
≈≈D E

MemberType
≈≈E O
)
≈≈O P
)
≈≈P Q
;
≈≈Q R
Assert
∆∆ 
.
∆∆ 
That
∆∆ 
(
∆∆ 
args
∆∆ 
[
∆∆ 
$num
∆∆ 
]
∆∆ 
.
∆∆  
Type
∆∆  $
.
∆∆$ % 
DerivesFromOrEqual
∆∆% 7
<
∆∆7 8
TParam1
∆∆8 ?
>
∆∆? @
(
∆∆@ A
)
∆∆A B
)
∆∆B C
;
∆∆C D
Assert
«« 
.
«« 
That
«« 
(
«« 
args
«« 
[
«« 
$num
«« 
]
«« 
.
««  
Type
««  $
.
««$ % 
DerivesFromOrEqual
««% 7
<
««7 8
TParam2
««8 ?
>
««? @
(
««@ A
)
««A B
)
««B C
;
««C D
Assert
»» 
.
»» 
That
»» 
(
»» 
args
»» 
[
»» 
$num
»» 
]
»» 
.
»»  
Type
»»  $
.
»»$ % 
DerivesFromOrEqual
»»% 7
<
»»7 8
TParam3
»»8 ?
>
»»? @
(
»»@ A
)
»»A B
)
»»B C
;
»»C D
injectAction
   
=
   
null
   
;
    
if
ÃÃ 
(
ÃÃ 
_pool
ÃÃ 
==
ÃÃ 
null
ÃÃ 
)
ÃÃ 
{
ÕÕ 
_pool
ŒŒ 
=
ŒŒ 
	Container
ŒŒ !
.
ŒŒ! "
	ResolveId
ŒŒ" +
<
ŒŒ+ ,
TMemoryPool
ŒŒ, 7
>
ŒŒ7 8
(
ŒŒ8 9
PoolId
ŒŒ9 ?
)
ŒŒ? @
;
ŒŒ@ A
}
œœ 
buffer
—— 
.
—— 
Add
—— 
(
—— 
_pool
—— 
.
—— 
Spawn
—— "
(
——" #
(
““ 
TParam1
““ 
)
““ 
args
““ 
[
““ 
$num
““ 
]
““  
.
““  !
Value
““! &
,
““& '
(
”” 
TParam2
”” 
)
”” 
args
”” 
[
”” 
$num
”” 
]
””  
.
””  !
Value
””! &
,
””& '
(
‘‘ 
TParam3
‘‘ 
)
‘‘ 
args
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘  
.
‘‘  !
Value
‘‘! &
,
‘‘& '
_pool
’’ 
)
’’ 
)
’’ 
;
’’ 
}
÷÷ 	
}
◊◊ 
[
€€  
NoReflectionBaking
€€ 
]
€€ 
public
‹‹ 

class
‹‹ (
PoolableMemoryPoolProvider
‹‹ +
<
‹‹+ ,
TParam1
‹‹, 3
,
‹‹3 4
TParam2
‹‹5 <
,
‹‹< =
TParam3
‹‹> E
,
‹‹E F
TParam4
‹‹G N
,
‹‹N O
	TContract
‹‹P Y
,
‹‹Y Z
TMemoryPool
‹‹[ f
>
‹‹f g
:
‹‹h i-
PoolableMemoryPoolProviderBase‹‹j à
<‹‹à â
	TContract‹‹â í
>‹‹í ì
,‹‹ì î
IValidatable‹‹ï °
where
›› 
	TContract
›› 
:
›› 
	IPoolable
›› #
<
››# $
TParam1
››$ +
,
››+ ,
TParam2
››- 4
,
››4 5
TParam3
››6 =
,
››= >
TParam4
››? F
,
››F G
IMemoryPool
››H S
>
››S T
where
ﬁﬁ 
TMemoryPool
ﬁﬁ 
:
ﬁﬁ 

MemoryPool
ﬁﬁ &
<
ﬁﬁ& '
TParam1
ﬁﬁ' .
,
ﬁﬁ. /
TParam2
ﬁﬁ0 7
,
ﬁﬁ7 8
TParam3
ﬁﬁ9 @
,
ﬁﬁ@ A
TParam4
ﬁﬁB I
,
ﬁﬁI J
IMemoryPool
ﬁﬁK V
,
ﬁﬁV W
	TContract
ﬁﬁX a
>
ﬁﬁa b
{
ﬂﬂ 
TMemoryPool
‡‡ 
_pool
‡‡ 
;
‡‡ 
public
‚‚ (
PoolableMemoryPoolProvider
‚‚ )
(
‚‚) *
DiContainer
„„ 
	container
„„ !
,
„„! "
Guid
„„# '
poolId
„„( .
)
„„. /
:
‰‰ 
base
‰‰ 
(
‰‰ 
	container
‰‰ 
,
‰‰ 
poolId
‰‰ $
)
‰‰$ %
{
ÂÂ 	
}
ÊÊ 	
public
ËË 
void
ËË 
Validate
ËË 
(
ËË 
)
ËË 
{
ÈÈ 	
	Container
ÍÍ 
.
ÍÍ 
	ResolveId
ÍÍ 
<
ÍÍ  
TMemoryPool
ÍÍ  +
>
ÍÍ+ ,
(
ÍÍ, -
PoolId
ÍÍ- 3
)
ÍÍ3 4
;
ÍÍ4 5
}
ÎÎ 	
public
ÌÌ 
override
ÌÌ 
void
ÌÌ ,
GetAllInstancesWithInjectSplit
ÌÌ ;
(
ÌÌ; <
InjectContext
ÓÓ 
context
ÓÓ !
,
ÓÓ! "
List
ÓÓ# '
<
ÓÓ' (
TypeValuePair
ÓÓ( 5
>
ÓÓ5 6
args
ÓÓ7 ;
,
ÓÓ; <
out
ÓÓ= @
Action
ÓÓA G
injectAction
ÓÓH T
,
ÓÓT U
List
ÓÓV Z
<
ÓÓZ [
object
ÓÓ[ a
>
ÓÓa b
buffer
ÓÓc i
)
ÓÓi j
{
ÔÔ 	
Assert
 
.
 
IsEqual
 
(
 
args
 
.
  
Count
  %
,
% &
$num
' (
)
( )
;
) *
Assert
ÒÒ 
.
ÒÒ 
	IsNotNull
ÒÒ 
(
ÒÒ 
context
ÒÒ $
)
ÒÒ$ %
;
ÒÒ% &
Assert
ÛÛ 
.
ÛÛ 
That
ÛÛ 
(
ÛÛ 
typeof
ÛÛ 
(
ÛÛ 
	TContract
ÛÛ (
)
ÛÛ( )
.
ÛÛ) * 
DerivesFromOrEqual
ÛÛ* <
(
ÛÛ< =
context
ÛÛ= D
.
ÛÛD E

MemberType
ÛÛE O
)
ÛÛO P
)
ÛÛP Q
;
ÛÛQ R
Assert
ÙÙ 
.
ÙÙ 
That
ÙÙ 
(
ÙÙ 
args
ÙÙ 
[
ÙÙ 
$num
ÙÙ 
]
ÙÙ 
.
ÙÙ  
Type
ÙÙ  $
.
ÙÙ$ % 
DerivesFromOrEqual
ÙÙ% 7
<
ÙÙ7 8
TParam1
ÙÙ8 ?
>
ÙÙ? @
(
ÙÙ@ A
)
ÙÙA B
)
ÙÙB C
;
ÙÙC D
Assert
ıı 
.
ıı 
That
ıı 
(
ıı 
args
ıı 
[
ıı 
$num
ıı 
]
ıı 
.
ıı  
Type
ıı  $
.
ıı$ % 
DerivesFromOrEqual
ıı% 7
<
ıı7 8
TParam2
ıı8 ?
>
ıı? @
(
ıı@ A
)
ııA B
)
ııB C
;
ııC D
Assert
ˆˆ 
.
ˆˆ 
That
ˆˆ 
(
ˆˆ 
args
ˆˆ 
[
ˆˆ 
$num
ˆˆ 
]
ˆˆ 
.
ˆˆ  
Type
ˆˆ  $
.
ˆˆ$ % 
DerivesFromOrEqual
ˆˆ% 7
<
ˆˆ7 8
TParam3
ˆˆ8 ?
>
ˆˆ? @
(
ˆˆ@ A
)
ˆˆA B
)
ˆˆB C
;
ˆˆC D
Assert
˜˜ 
.
˜˜ 
That
˜˜ 
(
˜˜ 
args
˜˜ 
[
˜˜ 
$num
˜˜ 
]
˜˜ 
.
˜˜  
Type
˜˜  $
.
˜˜$ % 
DerivesFromOrEqual
˜˜% 7
<
˜˜7 8
TParam4
˜˜8 ?
>
˜˜? @
(
˜˜@ A
)
˜˜A B
)
˜˜B C
;
˜˜C D
injectAction
˘˘ 
=
˘˘ 
null
˘˘ 
;
˘˘  
if
˚˚ 
(
˚˚ 
_pool
˚˚ 
==
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
_pool
˝˝ 
=
˝˝ 
	Container
˝˝ !
.
˝˝! "
	ResolveId
˝˝" +
<
˝˝+ ,
TMemoryPool
˝˝, 7
>
˝˝7 8
(
˝˝8 9
PoolId
˝˝9 ?
)
˝˝? @
;
˝˝@ A
}
˛˛ 
buffer
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
_pool
ÄÄ 
.
ÄÄ 
Spawn
ÄÄ "
(
ÄÄ" #
(
ÅÅ 
TParam1
ÅÅ 
)
ÅÅ 
args
ÅÅ 
[
ÅÅ 
$num
ÅÅ 
]
ÅÅ  
.
ÅÅ  !
Value
ÅÅ! &
,
ÅÅ& '
(
ÇÇ 
TParam2
ÇÇ 
)
ÇÇ 
args
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ  
.
ÇÇ  !
Value
ÇÇ! &
,
ÇÇ& '
(
ÉÉ 
TParam3
ÉÉ 
)
ÉÉ 
args
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ  
.
ÉÉ  !
Value
ÉÉ! &
,
ÉÉ& '
(
ÑÑ 
TParam4
ÑÑ 
)
ÑÑ 
args
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ  
.
ÑÑ  !
Value
ÑÑ! &
,
ÑÑ& '
_pool
ÖÖ 
)
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
}
áá 
[
ãã  
NoReflectionBaking
ãã 
]
ãã 
public
åå 

class
åå (
PoolableMemoryPoolProvider
åå +
<
åå+ ,
TParam1
åå, 3
,
åå3 4
TParam2
åå5 <
,
åå< =
TParam3
åå> E
,
ååE F
TParam4
ååG N
,
ååN O
TParam5
ååP W
,
ååW X
	TContract
ååY b
,
ååb c
TMemoryPool
ååd o
>
ååo p
:
ååq r-
PoolableMemoryPoolProviderBaseåås ë
<ååë í
	TContractååí õ
>ååõ ú
,ååú ù
IValidatableååû ™
where
çç 
	TContract
çç 
:
çç 
	IPoolable
çç #
<
çç# $
TParam1
çç$ +
,
çç+ ,
TParam2
çç- 4
,
çç4 5
TParam3
çç6 =
,
çç= >
TParam4
çç? F
,
ççF G
TParam5
ççH O
,
ççO P
IMemoryPool
ççQ \
>
çç\ ]
where
éé 
TMemoryPool
éé 
:
éé 

MemoryPool
éé &
<
éé& '
TParam1
éé' .
,
éé. /
TParam2
éé0 7
,
éé7 8
TParam3
éé9 @
,
éé@ A
TParam4
ééB I
,
ééI J
TParam5
ééK R
,
ééR S
IMemoryPool
ééT _
,
éé_ `
	TContract
ééa j
>
ééj k
{
èè 
TMemoryPool
êê 
_pool
êê 
;
êê 
public
íí (
PoolableMemoryPoolProvider
íí )
(
íí) *
DiContainer
ìì 
	container
ìì !
,
ìì! "
Guid
ìì# '
poolId
ìì( .
)
ìì. /
:
îî 
base
îî 
(
îî 
	container
îî 
,
îî 
poolId
îî $
)
îî$ %
{
ïï 	
}
ññ 	
public
òò 
void
òò 
Validate
òò 
(
òò 
)
òò 
{
ôô 	
	Container
öö 
.
öö 
	ResolveId
öö 
<
öö  
TMemoryPool
öö  +
>
öö+ ,
(
öö, -
PoolId
öö- 3
)
öö3 4
;
öö4 5
}
õõ 	
public
ùù 
override
ùù 
void
ùù ,
GetAllInstancesWithInjectSplit
ùù ;
(
ùù; <
InjectContext
ûû 
context
ûû !
,
ûû! "
List
ûû# '
<
ûû' (
TypeValuePair
ûû( 5
>
ûû5 6
args
ûû7 ;
,
ûû; <
out
ûû= @
Action
ûûA G
injectAction
ûûH T
,
ûûT U
List
ûûV Z
<
ûûZ [
object
ûû[ a
>
ûûa b
buffer
ûûc i
)
ûûi j
{
üü 	
Assert
†† 
.
†† 
IsEqual
†† 
(
†† 
args
†† 
.
††  
Count
††  %
,
††% &
$num
††' (
)
††( )
;
††) *
Assert
°° 
.
°° 
	IsNotNull
°° 
(
°° 
context
°° $
)
°°$ %
;
°°% &
Assert
££ 
.
££ 
That
££ 
(
££ 
typeof
££ 
(
££ 
	TContract
££ (
)
££( )
.
££) * 
DerivesFromOrEqual
££* <
(
££< =
context
££= D
.
££D E

MemberType
££E O
)
££O P
)
££P Q
;
££Q R
Assert
§§ 
.
§§ 
That
§§ 
(
§§ 
args
§§ 
[
§§ 
$num
§§ 
]
§§ 
.
§§  
Type
§§  $
.
§§$ % 
DerivesFromOrEqual
§§% 7
<
§§7 8
TParam1
§§8 ?
>
§§? @
(
§§@ A
)
§§A B
)
§§B C
;
§§C D
Assert
•• 
.
•• 
That
•• 
(
•• 
args
•• 
[
•• 
$num
•• 
]
•• 
.
••  
Type
••  $
.
••$ % 
DerivesFromOrEqual
••% 7
<
••7 8
TParam2
••8 ?
>
••? @
(
••@ A
)
••A B
)
••B C
;
••C D
Assert
¶¶ 
.
¶¶ 
That
¶¶ 
(
¶¶ 
args
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
.
¶¶  
Type
¶¶  $
.
¶¶$ % 
DerivesFromOrEqual
¶¶% 7
<
¶¶7 8
TParam3
¶¶8 ?
>
¶¶? @
(
¶¶@ A
)
¶¶A B
)
¶¶B C
;
¶¶C D
Assert
ßß 
.
ßß 
That
ßß 
(
ßß 
args
ßß 
[
ßß 
$num
ßß 
]
ßß 
.
ßß  
Type
ßß  $
.
ßß$ % 
DerivesFromOrEqual
ßß% 7
<
ßß7 8
TParam4
ßß8 ?
>
ßß? @
(
ßß@ A
)
ßßA B
)
ßßB C
;
ßßC D
Assert
®® 
.
®® 
That
®® 
(
®® 
args
®® 
[
®® 
$num
®® 
]
®® 
.
®®  
Type
®®  $
.
®®$ % 
DerivesFromOrEqual
®®% 7
<
®®7 8
TParam5
®®8 ?
>
®®? @
(
®®@ A
)
®®A B
)
®®B C
;
®®C D
injectAction
™™ 
=
™™ 
null
™™ 
;
™™  
if
¨¨ 
(
¨¨ 
_pool
¨¨ 
==
¨¨ 
null
¨¨ 
)
¨¨ 
{
≠≠ 
_pool
ÆÆ 
=
ÆÆ 
	Container
ÆÆ !
.
ÆÆ! "
	ResolveId
ÆÆ" +
<
ÆÆ+ ,
TMemoryPool
ÆÆ, 7
>
ÆÆ7 8
(
ÆÆ8 9
PoolId
ÆÆ9 ?
)
ÆÆ? @
;
ÆÆ@ A
}
ØØ 
buffer
±± 
.
±± 
Add
±± 
(
±± 
_pool
±± 
.
±± 
Spawn
±± "
(
±±" #
(
≤≤ 
TParam1
≤≤ 
)
≤≤ 
args
≤≤ 
[
≤≤ 
$num
≤≤ 
]
≤≤  
.
≤≤  !
Value
≤≤! &
,
≤≤& '
(
≥≥ 
TParam2
≥≥ 
)
≥≥ 
args
≥≥ 
[
≥≥ 
$num
≥≥ 
]
≥≥  
.
≥≥  !
Value
≥≥! &
,
≥≥& '
(
¥¥ 
TParam3
¥¥ 
)
¥¥ 
args
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥  
.
¥¥  !
Value
¥¥! &
,
¥¥& '
(
µµ 
TParam4
µµ 
)
µµ 
args
µµ 
[
µµ 
$num
µµ 
]
µµ  
.
µµ  !
Value
µµ! &
,
µµ& '
(
∂∂ 
TParam5
∂∂ 
)
∂∂ 
args
∂∂ 
[
∂∂ 
$num
∂∂ 
]
∂∂  
.
∂∂  !
Value
∂∂! &
,
∂∂& '
_pool
∑∑ 
)
∑∑ 
)
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ππ 
[
ΩΩ  
NoReflectionBaking
ΩΩ 
]
ΩΩ 
public
ææ 

class
ææ (
PoolableMemoryPoolProvider
ææ +
<
ææ+ ,
TParam1
ææ, 3
,
ææ3 4
TParam2
ææ5 <
,
ææ< =
TParam3
ææ> E
,
ææE F
TParam4
ææG N
,
ææN O
TParam5
ææP W
,
ææW X
TParam6
ææY `
,
ææ` a
	TContract
ææb k
,
ææk l
TMemoryPool
ææm x
>
ææx y
:
ææz {-
PoolableMemoryPoolProviderBaseææ| ö
<ææö õ
	TContractææõ §
>ææ§ •
,ææ• ¶
IValidatableææß ≥
where
øø 
	TContract
øø 
:
øø 
	IPoolable
øø #
<
øø# $
TParam1
øø$ +
,
øø+ ,
TParam2
øø- 4
,
øø4 5
TParam3
øø6 =
,
øø= >
TParam4
øø? F
,
øøF G
TParam5
øøH O
,
øøO P
TParam6
øøQ X
,
øøX Y
IMemoryPool
øøZ e
>
øøe f
where
¿¿ 
TMemoryPool
¿¿ 
:
¿¿ 

MemoryPool
¿¿ &
<
¿¿& '
TParam1
¿¿' .
,
¿¿. /
TParam2
¿¿0 7
,
¿¿7 8
TParam3
¿¿9 @
,
¿¿@ A
TParam4
¿¿B I
,
¿¿I J
TParam5
¿¿K R
,
¿¿R S
TParam6
¿¿T [
,
¿¿[ \
IMemoryPool
¿¿] h
,
¿¿h i
	TContract
¿¿j s
>
¿¿s t
{
¡¡ 
TMemoryPool
¬¬ 
_pool
¬¬ 
;
¬¬ 
public
ƒƒ (
PoolableMemoryPoolProvider
ƒƒ )
(
ƒƒ) *
DiContainer
≈≈ 
	container
≈≈ !
,
≈≈! "
Guid
≈≈# '
poolId
≈≈( .
)
≈≈. /
:
∆∆ 
base
∆∆ 
(
∆∆ 
	container
∆∆ 
,
∆∆ 
poolId
∆∆ $
)
∆∆$ %
{
«« 	
}
»» 	
public
   
void
   
Validate
   
(
   
)
   
{
ÀÀ 	
	Container
ÃÃ 
.
ÃÃ 
	ResolveId
ÃÃ 
<
ÃÃ  
TMemoryPool
ÃÃ  +
>
ÃÃ+ ,
(
ÃÃ, -
PoolId
ÃÃ- 3
)
ÃÃ3 4
;
ÃÃ4 5
}
ÕÕ 	
public
œœ 
override
œœ 
void
œœ ,
GetAllInstancesWithInjectSplit
œœ ;
(
œœ; <
InjectContext
–– 
context
–– !
,
––! "
List
––# '
<
––' (
TypeValuePair
––( 5
>
––5 6
args
––7 ;
,
––; <
out
––= @
Action
––A G
injectAction
––H T
,
––T U
List
––V Z
<
––Z [
object
––[ a
>
––a b
buffer
––c i
)
––i j
{
—— 	
Assert
““ 
.
““ 
IsEqual
““ 
(
““ 
args
““ 
.
““  
Count
““  %
,
““% &
$num
““' (
)
““( )
;
““) *
Assert
”” 
.
”” 
	IsNotNull
”” 
(
”” 
context
”” $
)
””$ %
;
””% &
Assert
’’ 
.
’’ 
That
’’ 
(
’’ 
typeof
’’ 
(
’’ 
	TContract
’’ (
)
’’( )
.
’’) * 
DerivesFromOrEqual
’’* <
(
’’< =
context
’’= D
.
’’D E

MemberType
’’E O
)
’’O P
)
’’P Q
;
’’Q R
Assert
÷÷ 
.
÷÷ 
That
÷÷ 
(
÷÷ 
args
÷÷ 
[
÷÷ 
$num
÷÷ 
]
÷÷ 
.
÷÷  
Type
÷÷  $
.
÷÷$ % 
DerivesFromOrEqual
÷÷% 7
<
÷÷7 8
TParam1
÷÷8 ?
>
÷÷? @
(
÷÷@ A
)
÷÷A B
)
÷÷B C
;
÷÷C D
Assert
◊◊ 
.
◊◊ 
That
◊◊ 
(
◊◊ 
args
◊◊ 
[
◊◊ 
$num
◊◊ 
]
◊◊ 
.
◊◊  
Type
◊◊  $
.
◊◊$ % 
DerivesFromOrEqual
◊◊% 7
<
◊◊7 8
TParam2
◊◊8 ?
>
◊◊? @
(
◊◊@ A
)
◊◊A B
)
◊◊B C
;
◊◊C D
Assert
ÿÿ 
.
ÿÿ 
That
ÿÿ 
(
ÿÿ 
args
ÿÿ 
[
ÿÿ 
$num
ÿÿ 
]
ÿÿ 
.
ÿÿ  
Type
ÿÿ  $
.
ÿÿ$ % 
DerivesFromOrEqual
ÿÿ% 7
<
ÿÿ7 8
TParam3
ÿÿ8 ?
>
ÿÿ? @
(
ÿÿ@ A
)
ÿÿA B
)
ÿÿB C
;
ÿÿC D
Assert
ŸŸ 
.
ŸŸ 
That
ŸŸ 
(
ŸŸ 
args
ŸŸ 
[
ŸŸ 
$num
ŸŸ 
]
ŸŸ 
.
ŸŸ  
Type
ŸŸ  $
.
ŸŸ$ % 
DerivesFromOrEqual
ŸŸ% 7
<
ŸŸ7 8
TParam4
ŸŸ8 ?
>
ŸŸ? @
(
ŸŸ@ A
)
ŸŸA B
)
ŸŸB C
;
ŸŸC D
Assert
⁄⁄ 
.
⁄⁄ 
That
⁄⁄ 
(
⁄⁄ 
args
⁄⁄ 
[
⁄⁄ 
$num
⁄⁄ 
]
⁄⁄ 
.
⁄⁄  
Type
⁄⁄  $
.
⁄⁄$ % 
DerivesFromOrEqual
⁄⁄% 7
<
⁄⁄7 8
TParam5
⁄⁄8 ?
>
⁄⁄? @
(
⁄⁄@ A
)
⁄⁄A B
)
⁄⁄B C
;
⁄⁄C D
Assert
€€ 
.
€€ 
That
€€ 
(
€€ 
args
€€ 
[
€€ 
$num
€€ 
]
€€ 
.
€€  
Type
€€  $
.
€€$ % 
DerivesFromOrEqual
€€% 7
<
€€7 8
TParam6
€€8 ?
>
€€? @
(
€€@ A
)
€€A B
)
€€B C
;
€€C D
injectAction
›› 
=
›› 
null
›› 
;
››  
if
ﬂﬂ 
(
ﬂﬂ 
_pool
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
_pool
·· 
=
·· 
	Container
·· !
.
··! "
	ResolveId
··" +
<
··+ ,
TMemoryPool
··, 7
>
··7 8
(
··8 9
PoolId
··9 ?
)
··? @
;
··@ A
}
‚‚ 
buffer
‰‰ 
.
‰‰ 
Add
‰‰ 
(
‰‰ 
_pool
‰‰ 
.
‰‰ 
Spawn
‰‰ "
(
‰‰" #
(
ÂÂ 
TParam1
ÂÂ 
)
ÂÂ 
args
ÂÂ 
[
ÂÂ 
$num
ÂÂ 
]
ÂÂ  
.
ÂÂ  !
Value
ÂÂ! &
,
ÂÂ& '
(
ÊÊ 
TParam2
ÊÊ 
)
ÊÊ 
args
ÊÊ 
[
ÊÊ 
$num
ÊÊ 
]
ÊÊ  
.
ÊÊ  !
Value
ÊÊ! &
,
ÊÊ& '
(
ÁÁ 
TParam3
ÁÁ 
)
ÁÁ 
args
ÁÁ 
[
ÁÁ 
$num
ÁÁ 
]
ÁÁ  
.
ÁÁ  !
Value
ÁÁ! &
,
ÁÁ& '
(
ËË 
TParam4
ËË 
)
ËË 
args
ËË 
[
ËË 
$num
ËË 
]
ËË  
.
ËË  !
Value
ËË! &
,
ËË& '
(
ÈÈ 
TParam5
ÈÈ 
)
ÈÈ 
args
ÈÈ 
[
ÈÈ 
$num
ÈÈ 
]
ÈÈ  
.
ÈÈ  !
Value
ÈÈ! &
,
ÈÈ& '
(
ÍÍ 
TParam6
ÍÍ 
)
ÍÍ 
args
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ  
.
ÍÍ  !
Value
ÍÍ! &
,
ÍÍ& '
_pool
ÎÎ 
)
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÌÌ 
}ÓÓ ”
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\SingleProviderBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
SingleProviderBindingFinalizer /
:0 1$
ProviderBindingFinalizer2 J
{ 
readonly		 
Func		 
<		 
DiContainer		 !
,		! "
Type		# '
,		' (
	IProvider		) 2
>		2 3
_providerFactory		4 D
;		D E
public *
SingleProviderBindingFinalizer -
(- .
BindInfo 
bindInfo 
, 
Func #
<# $
DiContainer$ /
,/ 0
Type1 5
,5 6
	IProvider7 @
>@ A
providerFactoryB Q
)Q R
: 
base 
( 
bindInfo 
) 
{ 	
_providerFactory 
= 
providerFactory .
;. /
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert 
. 
IsEmpty 
( 
BindInfo '
.' (
ToTypes( /
)/ 0
;0 1'
RegisterProviderPerContract +
(+ ,
	container, 5
,5 6
_providerFactory7 G
)G H
;H I
} 
else 
{ 
if 
( 
! 
BindInfo 
. 
ToTypes %
.% &
IsEmpty& -
(- .
). /
)/ 0
{ ;
/RegisterProvidersForAllContractsPerConcreteType C
(C D
	container   !
,  ! "
BindInfo  # +
.  + ,
ToTypes  , 3
,  3 4
_providerFactory  5 E
)  E F
;  F G
}!! 
}"" 
}## 	
}$$ 
}%% ¸

sC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\PrefabProviders\PrefabProviderResource.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public		 

class		 "
PrefabProviderResource		 '
:		( )
IPrefabProvider		* 9
{

 
readonly 
string 
_resourcePath %
;% &
public "
PrefabProviderResource %
(% &
string& ,
resourcePath- 9
)9 :
{ 	
_resourcePath 
= 
resourcePath (
;( )
} 	
public 
UnityEngine 
. 
Object !
	GetPrefab" +
(+ ,
), -
{ 	
var 
prefab 
= 
( 

GameObject $
)$ %
	Resources% .
.. /
Load/ 3
(3 4
_resourcePath4 A
)A B
;B C
Assert 
. 
That 
( 
prefab 
!= !
null" &
,& '
$str @
,@ A
_resourcePathB O
)O P
;P Q
return 
prefab 
; 
} 	
} 
} Ê

zC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\ConcreteBinders\ConcreteIdBinderGeneric.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
ConcreteIdBinderGeneric (
<( )
	TContract) 2
>2 3
:4 5!
ConcreteBinderGeneric6 K
<K L
	TContractL U
>U V
{ 
public #
ConcreteIdBinderGeneric &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
:		 
base		 
(		 
bindContainer		  
,		  !
bindInfo		" *
,		* +
bindStatement		, 9
)		9 :
{

 	
} 	
public !
ConcreteBinderGeneric $
<$ %
	TContract% .
>. /
WithId0 6
(6 7
object7 =

identifier> H
)H I
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ·

cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindInfo\FactoryBindInfo.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
FactoryBindInfo  
{ 
public		 
FactoryBindInfo		 
(		 
Type		 #
factoryType		$ /
)		/ 0
{

 	
FactoryType 
= 
factoryType %
;% &
	Arguments 
= 
new 
List  
<  !
TypeValuePair! .
>. /
(/ 0
)0 1
;1 2
} 	
public 
Type 
FactoryType 
{ 	
get 
; 
private 
set 
; 
} 	
public 
Func 
< 
DiContainer 
,  
	IProvider! *
>* +
ProviderFunc, 8
{ 	
get 
; 
set 
; 
} 	
public 
List 
< 
TypeValuePair !
>! "
	Arguments# ,
{ 	
get 
; 
set 
; 
} 	
} 
} ¡

^C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Validation\ValidationMarker.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
ValidationMarker !
{ 
public 
ValidationMarker 
(  
Type		 

markedType		 
,		 
bool		 !
instantiateFailed		" 3
)		3 4
{

 	

MarkedType 
= 

markedType #
;# $
InstantiateFailed 
= 
instantiateFailed  1
;1 2
} 	
public 
ValidationMarker 
(  
Type  $

markedType% /
)/ 0
: 
this 
( 

markedType 
, 
false $
)$ %
{ 	
} 	
public 
bool 
InstantiateFailed %
{ 	
get 
; 
private 
set 
; 
} 	
public 
Type 

MarkedType 
{ 	
get 
; 
private 
set 
; 
} 	
} 
}   ˛¥
eC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\SubContainerBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
SubContainerBinder #
{ 
readonly		 
BindInfo		 
	_bindInfo		 #
;		# $
readonly

 
BindStatement

 
_bindStatement

 -
;

- .
readonly 
object 
_subIdentifier &
;& '
readonly 
bool 
_resolveAll !
;! "
public 
SubContainerBinder !
(! "
BindInfo 
bindInfo 
, 
BindStatement 
bindStatement '
,' (
object 
subIdentifier  
,  !
bool" &

resolveAll' 1
)1 2
{ 	
	_bindInfo 
= 
bindInfo  
;  !
_bindStatement 
= 
bindStatement *
;* +
_subIdentifier 
= 
subIdentifier *
;* +
_resolveAll 
= 

resolveAll $
;$ %
bindStatement 
. 
SetFinalizer &
(& '
null' +
)+ ,
;, -
} 	
	protected 
IBindingFinalizer #
SubFinalizer$ 0
{ 	
set 
{ 
_bindStatement  
.  !
SetFinalizer! -
(- .
value. 3
)3 4
;4 5
}6 7
} 	
public!! 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder!! ;

ByInstance!!< F
(!!F G
DiContainer!!G R
subContainer!!S _
)!!_ `
{"" 	
SubFinalizer## 
=## 
new## (
SubContainerBindingFinalizer## ;
(##; <
	_bindInfo$$ 
,$$ 
_subIdentifier$$ )
,$$) *
_resolveAll$$+ 6
,$$6 7
(%% 
_%% 
)%% 
=>%% 
new%% )
SubContainerCreatorByInstance%% 8
(%%8 9
subContainer%%9 E
)%%E F
)%%F G
;%%G H
return'' 
new'' 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder'' C
(''C D
	_bindInfo''D M
)''M N
;''N O
}(( 	
public** 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder** ;
ByInstanceGetter**< L
(**L M
Func++ 
<++ 
InjectContext++ 
,++ 
DiContainer++  +
>+++ ,
subContainerGetter++- ?
)++? @
{,, 	
SubFinalizer-- 
=-- 
new-- (
SubContainerBindingFinalizer-- ;
(--; <
	_bindInfo.. 
,.. 
_subIdentifier.. )
,..) *
_resolveAll..+ 6
,..6 7
(// 
_// 
)// 
=>// 
new// /
#SubContainerCreatorByInstanceGetter// >
(//> ?
subContainerGetter//? Q
)//Q R
)//R S
;//S T
return11 
new11 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder11 C
(11C D
	_bindInfo11D M
)11M N
;11N O
}22 	
public44 O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder88 O
ByInstaller:: 
<:: 

TInstaller:: "
>::" #
(::# $
)::$ %
where;; 

TInstaller;; 
:;; 
InstallerBase;; ,
{<< 	
return== 
ByInstaller== 
(== 
typeof== %
(==% &

TInstaller==& 0
)==0 1
)==1 2
;==2 3
}>> 	
public@@ O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinderDD O
ByInstallerFF 
(FF 
TypeFF 
installerTypeFF *
)FF* +
{GG 	
AssertHH 
.HH 
ThatHH 
(HH 
installerTypeHH %
.HH% &
DerivesFromHH& 1
<HH1 2
InstallerBaseHH2 ?
>HH? @
(HH@ A
)HHA B
,HHB C
$strII u
,IIu v
installerType	IIw Ñ
)
IIÑ Ö
;
IIÖ Ü
varKK  
subContainerBindInfoKK $
=KK% &
newKK' *'
SubContainerCreatorBindInfoKK+ F
(KKF G
)KKG H
;KKH I
SubFinalizerMM 
=MM 
newMM (
SubContainerBindingFinalizerMM ;
(MM; <
	_bindInfoNN 
,NN 
_subIdentifierNN )
,NN) *
_resolveAllNN+ 6
,NN6 7
(OO 
	containerOO 
)OO 
=>OO 
newOO "*
SubContainerCreatorByInstallerOO# A
(OOA B
	containerOOB K
,OOK L 
subContainerBindInfoOOM a
,OOa b
installerTypeOOc p
)OOp q
)OOq r
;OOr s
returnQQ 
newQQ O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinderUU S
(WW  
subContainerBindInfoWW %
,WW% &
	_bindInfoWW' 0
)WW0 1
;WW1 2
}XX 	
publicZZ O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder^^ O
ByMethod`` 
(`` 
Action`` 
<`` 
DiContainer`` '
>``' (
installerMethod``) 8
)``8 9
{aa 	
varbb  
subContainerBindInfobb $
=bb% &
newbb' *'
SubContainerCreatorBindInfobb+ F
(bbF G
)bbG H
;bbH I
SubFinalizerdd 
=dd 
newdd (
SubContainerBindingFinalizerdd ;
(dd; <
	_bindInfoee 
,ee 
_subIdentifieree )
,ee) *
_resolveAllee+ 6
,ee6 7
(ff 
	containerff 
)ff 
=>ff 
newff "'
SubContainerCreatorByMethodff# >
(ff> ?
	containerff? H
,ffH I 
subContainerBindInfoffJ ^
,ff^ _
installerMethodff` o
)ffo p
)ffp q
;ffq r
returnhh 
newhh O
CWithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinderll S
(nn  
subContainerBindInfonn %
,nn% &
	_bindInfonn' 0
)nn0 1
;nn1 2
}oo 	
publicss E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderss H!
ByNewGameObjectMethodssI ^
(ss^ _
Actiontt 
<tt 
DiContainertt 
>tt 
installerMethodtt  /
)tt/ 0
{uu 	
varvv 
gameObjectInfovv 
=vv  
newvv! $(
GameObjectCreationParametersvv% A
(vvA B
)vvB C
;vvC D
SubFinalizerxx 
=xx 
newxx .
"SubContainerPrefabBindingFinalizerxx A
(xxA B
	_bindInfoyy 
,yy 
_subIdentifieryy )
,yy) *
_resolveAllyy+ 6
,yy6 7
(zz 
	containerzz 
)zz 
=>zz 
newzz "4
(SubContainerCreatorByNewGameObjectMethodzz# K
(zzK L
	container{{ 
,{{ 
gameObjectInfo{{ -
,{{- .
installerMethod{{/ >
){{> ?
){{? @
;{{@ A
return}} 
new}} E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder}} P
(}}P Q
	_bindInfo}}Q Z
,}}Z [
gameObjectInfo}}\ j
)}}j k
;}}k l
}~~ 	
public
ÄÄ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÄÄ H
ByNewPrefabMethod
ÄÄI Z
(
ÄÄZ [
UnityEngine
ÅÅ 
.
ÅÅ 
Object
ÅÅ 
prefab
ÅÅ %
,
ÅÅ% &
Action
ÅÅ' -
<
ÅÅ- .
DiContainer
ÅÅ. 9
>
ÅÅ9 :
installerMethod
ÅÅ; J
)
ÅÅJ K
{
ÇÇ 	
BindingUtil
ÉÉ 
.
ÉÉ !
AssertIsValidPrefab
ÉÉ +
(
ÉÉ+ ,
prefab
ÉÉ, 2
)
ÉÉ2 3
;
ÉÉ3 4
var
ÖÖ 
gameObjectInfo
ÖÖ 
=
ÖÖ  
new
ÖÖ! $*
GameObjectCreationParameters
ÖÖ% A
(
ÖÖA B
)
ÖÖB C
;
ÖÖC D
SubFinalizer
áá 
=
áá 
new
áá 0
"SubContainerPrefabBindingFinalizer
áá A
(
ááA B
	_bindInfo
àà 
,
àà 
_subIdentifier
àà )
,
àà) *
_resolveAll
àà+ 6
,
àà6 7
(
ââ 
	container
ââ 
)
ââ 
=>
ââ 
new
ââ "2
$SubContainerCreatorByNewPrefabMethod
ââ# G
(
ââG H
	container
ää 
,
ää 
new
ãã 
PrefabProvider
ãã &
(
ãã& '
prefab
ãã' -
)
ãã- .
,
ãã. /
gameObjectInfo
åå "
,
åå" #
installerMethod
åå$ 3
)
åå3 4
)
åå4 5
;
åå5 6
return
éé 
new
éé G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
éé P
(
ééP Q
	_bindInfo
ééQ Z
,
ééZ [
gameObjectInfo
éé\ j
)
ééj k
;
éék l
}
èè 	
public
ëë G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ëë H&
ByNewGameObjectInstaller
ëëI a
<
ëëa b

TInstaller
ëëb l
>
ëël m
(
ëëm n
)
ëën o
where
íí 

TInstaller
íí 
:
íí 
InstallerBase
íí ,
{
ìì 	
return
îî &
ByNewGameObjectInstaller
îî +
(
îî+ ,
typeof
îî, 2
(
îî2 3

TInstaller
îî3 =
)
îî= >
)
îî> ?
;
îî? @
}
ïï 	
public
óó G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
óó H&
ByNewGameObjectInstaller
óóI a
(
óóa b
Type
óób f
installerType
óóg t
)
óót u
{
òò 	
Assert
ôô 
.
ôô 
That
ôô 
(
ôô 
installerType
ôô %
.
ôô% &
DerivesFrom
ôô& 1
<
ôô1 2
InstallerBase
ôô2 ?
>
ôô? @
(
ôô@ A
)
ôôA B
,
ôôB C
$str
öö u
,
ööu v
installerTypeööw Ñ
)ööÑ Ö
;ööÖ Ü
var
úú 
gameObjectInfo
úú 
=
úú  
new
úú! $*
GameObjectCreationParameters
úú% A
(
úúA B
)
úúB C
;
úúC D
SubFinalizer
ûû 
=
ûû 
new
ûû 0
"SubContainerPrefabBindingFinalizer
ûû A
(
ûûA B
	_bindInfo
üü 
,
üü 
_subIdentifier
üü )
,
üü) *
_resolveAll
üü+ 6
,
üü6 7
(
†† 
	container
†† 
)
†† 
=>
†† 
new
†† "9
+SubContainerCreatorByNewGameObjectInstaller
††# N
(
††N O
	container
°° 
,
°° 
gameObjectInfo
°° -
,
°°- .
installerType
°°/ <
,
°°< =
	_bindInfo
°°> G
.
°°G H
	Arguments
°°H Q
)
°°Q R
)
°°R S
;
°°S T
return
££ 
new
££ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
££ P
(
££P Q
	_bindInfo
££Q Z
,
££Z [
gameObjectInfo
££\ j
)
££j k
;
££k l
}
§§ 	
public
¶¶ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¶¶ H"
ByNewPrefabInstaller
¶¶I ]
<
¶¶] ^

TInstaller
¶¶^ h
>
¶¶h i
(
¶¶i j
UnityEngine
ßß 
.
ßß 
Object
ßß 
prefab
ßß %
)
ßß% &
where
®® 

TInstaller
®® 
:
®® 
InstallerBase
®® ,
{
©© 	
return
™™ "
ByNewPrefabInstaller
™™ '
(
™™' (
prefab
™™( .
,
™™. /
typeof
™™0 6
(
™™6 7

TInstaller
™™7 A
)
™™A B
)
™™B C
;
™™C D
}
´´ 	
public
≠≠ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
≠≠ H"
ByNewPrefabInstaller
≠≠I ]
(
≠≠] ^
UnityEngine
ÆÆ 
.
ÆÆ 
Object
ÆÆ 
prefab
ÆÆ %
,
ÆÆ% &
Type
ÆÆ' +
installerType
ÆÆ, 9
)
ÆÆ9 :
{
ØØ 	
Assert
∞∞ 
.
∞∞ 
That
∞∞ 
(
∞∞ 
installerType
∞∞ %
.
∞∞% &
DerivesFrom
∞∞& 1
<
∞∞1 2
InstallerBase
∞∞2 ?
>
∞∞? @
(
∞∞@ A
)
∞∞A B
,
∞∞B C
$str
±± u
,
±±u v
installerType±±w Ñ
)±±Ñ Ö
;±±Ö Ü
var
≥≥ 
gameObjectInfo
≥≥ 
=
≥≥  
new
≥≥! $*
GameObjectCreationParameters
≥≥% A
(
≥≥A B
)
≥≥B C
;
≥≥C D
SubFinalizer
µµ 
=
µµ 
new
µµ 0
"SubContainerPrefabBindingFinalizer
µµ A
(
µµA B
	_bindInfo
∂∂ 
,
∂∂ 
_subIdentifier
∂∂ )
,
∂∂) *
_resolveAll
∂∂+ 6
,
∂∂6 7
(
∑∑ 
	container
∑∑ 
)
∑∑ 
=>
∑∑ 
new
∑∑ "5
'SubContainerCreatorByNewPrefabInstaller
∑∑# J
(
∑∑J K
	container
∏∏ 
,
∏∏ 
new
ππ 
PrefabProvider
ππ &
(
ππ& '
prefab
ππ' -
)
ππ- .
,
ππ. /
gameObjectInfo
∫∫ "
,
∫∫" #
installerType
∫∫$ 1
,
∫∫1 2
	_bindInfo
∫∫3 <
.
∫∫< =
	Arguments
∫∫= F
)
∫∫F G
)
∫∫G H
;
∫∫H I
return
ºº 
new
ºº G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ºº P
(
ººP Q
	_bindInfo
ººQ Z
,
ººZ [
gameObjectInfo
ºº\ j
)
ººj k
;
ººk l
}
ΩΩ 	
public
¿¿ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¿¿ H'
ByNewPrefabResourceMethod
¿¿I b
(
¿¿b c
string
¡¡ 
resourcePath
¡¡ 
,
¡¡  
Action
¡¡! '
<
¡¡' (
DiContainer
¡¡( 3
>
¡¡3 4
installerMethod
¡¡5 D
)
¡¡D E
{
¬¬ 	
BindingUtil
√√ 
.
√√ '
AssertIsValidResourcePath
√√ 1
(
√√1 2
resourcePath
√√2 >
)
√√> ?
;
√√? @
var
≈≈ 
gameObjectInfo
≈≈ 
=
≈≈  
new
≈≈! $*
GameObjectCreationParameters
≈≈% A
(
≈≈A B
)
≈≈B C
;
≈≈C D
SubFinalizer
«« 
=
«« 
new
«« 0
"SubContainerPrefabBindingFinalizer
«« A
(
««A B
	_bindInfo
»» 
,
»» 
_subIdentifier
»» )
,
»») *
_resolveAll
»»+ 6
,
»»6 7
(
…… 
	container
…… 
)
…… 
=>
…… 
new
…… "2
$SubContainerCreatorByNewPrefabMethod
……# G
(
……G H
	container
   
,
   
new
ÀÀ $
PrefabProviderResource
ÀÀ .
(
ÀÀ. /
resourcePath
ÀÀ/ ;
)
ÀÀ; <
,
ÀÀ< =
gameObjectInfo
ÃÃ "
,
ÃÃ" #
installerMethod
ÃÃ$ 3
)
ÃÃ3 4
)
ÃÃ4 5
;
ÃÃ5 6
return
ŒŒ 
new
ŒŒ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ŒŒ P
(
ŒŒP Q
	_bindInfo
ŒŒQ Z
,
ŒŒZ [
gameObjectInfo
ŒŒ\ j
)
ŒŒj k
;
ŒŒk l
}
œœ 	
public
—— G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
—— H*
ByNewPrefabResourceInstaller
——I e
<
——e f

TInstaller
——f p
>
——p q
(
——q r
string
““ 
resourcePath
““ 
)
““  
where
”” 

TInstaller
”” 
:
”” 
InstallerBase
”” ,
{
‘‘ 	
return
’’ *
ByNewPrefabResourceInstaller
’’ /
(
’’/ 0
resourcePath
’’0 <
,
’’< =
typeof
’’> D
(
’’D E

TInstaller
’’E O
)
’’O P
)
’’P Q
;
’’Q R
}
÷÷ 	
public
ÿÿ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÿÿ H*
ByNewPrefabResourceInstaller
ÿÿI e
(
ÿÿe f
string
ŸŸ 
resourcePath
ŸŸ 
,
ŸŸ  
Type
ŸŸ! %
installerType
ŸŸ& 3
)
ŸŸ3 4
{
⁄⁄ 	
BindingUtil
€€ 
.
€€ '
AssertIsValidResourcePath
€€ 1
(
€€1 2
resourcePath
€€2 >
)
€€> ?
;
€€? @
Assert
‹‹ 
.
‹‹ 
That
‹‹ 
(
‹‹ 
installerType
‹‹ %
.
‹‹% &
DerivesFrom
‹‹& 1
<
‹‹1 2
InstallerBase
‹‹2 ?
>
‹‹? @
(
‹‹@ A
)
‹‹A B
,
‹‹B C
$str
›› u
,
››u v
installerType››w Ñ
)››Ñ Ö
;››Ö Ü
var
ﬂﬂ 
gameObjectInfo
ﬂﬂ 
=
ﬂﬂ  
new
ﬂﬂ! $*
GameObjectCreationParameters
ﬂﬂ% A
(
ﬂﬂA B
)
ﬂﬂB C
;
ﬂﬂC D
SubFinalizer
·· 
=
·· 
new
·· 0
"SubContainerPrefabBindingFinalizer
·· A
(
··A B
	_bindInfo
‚‚ 
,
‚‚ 
_subIdentifier
‚‚ )
,
‚‚) *
_resolveAll
‚‚+ 6
,
‚‚6 7
(
„„ 
	container
„„ 
)
„„ 
=>
„„ 
new
„„ "5
'SubContainerCreatorByNewPrefabInstaller
„„# J
(
„„J K
	container
‰‰ 
,
‰‰ 
new
ÂÂ $
PrefabProviderResource
ÂÂ .
(
ÂÂ. /
resourcePath
ÂÂ/ ;
)
ÂÂ; <
,
ÂÂ< =
gameObjectInfo
ÊÊ "
,
ÊÊ" #
installerType
ÊÊ$ 1
,
ÊÊ1 2
	_bindInfo
ÊÊ3 <
.
ÊÊ< =
	Arguments
ÊÊ= F
)
ÊÊF G
)
ÊÊG H
;
ÊÊH I
return
ËË 
new
ËË G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ËË P
(
ËËP Q
	_bindInfo
ËËQ Z
,
ËËZ [
gameObjectInfo
ËË\ j
)
ËËj k
;
ËËk l
}
ÈÈ 	
[
ÎÎ 	
System
ÎÎ	 
.
ÎÎ 
Obsolete
ÎÎ 
(
ÎÎ 
$strÎÎ ê
)ÎÎê ë
]ÎÎë í
public
ÏÏ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÏÏ H
ByNewPrefab
ÏÏI T
(
ÏÏT U
UnityEngine
ÏÏU `
.
ÏÏ` a
Object
ÏÏa g
prefab
ÏÏh n
)
ÏÏn o
{
ÌÌ 	
return
ÓÓ  
ByNewContextPrefab
ÓÓ %
(
ÓÓ% &
prefab
ÓÓ& ,
)
ÓÓ, -
;
ÓÓ- .
}
ÔÔ 	
public
ÒÒ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÒÒ H 
ByNewContextPrefab
ÒÒI [
(
ÒÒ[ \
UnityEngine
ÒÒ\ g
.
ÒÒg h
Object
ÒÒh n
prefab
ÒÒo u
)
ÒÒu v
{
ÚÚ 	
BindingUtil
ÛÛ 
.
ÛÛ !
AssertIsValidPrefab
ÛÛ +
(
ÛÛ+ ,
prefab
ÛÛ, 2
)
ÛÛ2 3
;
ÛÛ3 4
var
ıı 
gameObjectInfo
ıı 
=
ıı  
new
ıı! $*
GameObjectCreationParameters
ıı% A
(
ııA B
)
ııB C
;
ııC D
SubFinalizer
˜˜ 
=
˜˜ 
new
˜˜ 0
"SubContainerPrefabBindingFinalizer
˜˜ A
(
˜˜A B
	_bindInfo
¯¯ 
,
¯¯ 
_subIdentifier
¯¯ )
,
¯¯) *
_resolveAll
¯¯+ 6
,
¯¯6 7
(
˘˘ 
	container
˘˘ 
)
˘˘ 
=>
˘˘ 
new
˘˘ ",
SubContainerCreatorByNewPrefab
˘˘# A
(
˘˘A B
	container
˙˙ 
,
˙˙ 
new
˙˙ "
PrefabProvider
˙˙# 1
(
˙˙1 2
prefab
˙˙2 8
)
˙˙8 9
,
˙˙9 :
gameObjectInfo
˙˙; I
)
˙˙I J
)
˙˙J K
;
˙˙K L
return
¸¸ 
new
¸¸ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
¸¸ P
(
¸¸P Q
	_bindInfo
¸¸Q Z
,
¸¸Z [
gameObjectInfo
¸¸\ j
)
¸¸j k
;
¸¸k l
}
˝˝ 	
[
ˇˇ 	
System
ˇˇ	 
.
ˇˇ 
Obsolete
ˇˇ 
(
ˇˇ 
$strˇˇ ∞
)ˇˇ∞ ±
]ˇˇ± ≤
public
ÄÄ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÄÄ H!
ByNewPrefabResource
ÄÄI \
(
ÄÄ\ ]
string
ÄÄ] c
resourcePath
ÄÄd p
)
ÄÄp q
{
ÅÅ 	
return
ÇÇ (
ByNewContextPrefabResource
ÇÇ -
(
ÇÇ- .
resourcePath
ÇÇ. :
)
ÇÇ: ;
;
ÇÇ; <
}
ÉÉ 	
public
ÖÖ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÖÖ H(
ByNewContextPrefabResource
ÖÖI c
(
ÖÖc d
string
ÖÖd j
resourcePath
ÖÖk w
)
ÖÖw x
{
ÜÜ 	
BindingUtil
áá 
.
áá '
AssertIsValidResourcePath
áá 1
(
áá1 2
resourcePath
áá2 >
)
áá> ?
;
áá? @
var
ââ 
gameObjectInfo
ââ 
=
ââ  
new
ââ! $*
GameObjectCreationParameters
ââ% A
(
ââA B
)
ââB C
;
ââC D
SubFinalizer
ãã 
=
ãã 
new
ãã 0
"SubContainerPrefabBindingFinalizer
ãã A
(
ããA B
	_bindInfo
åå 
,
åå 
_subIdentifier
åå )
,
åå) *
_resolveAll
åå+ 6
,
åå6 7
(
çç 
	container
çç 
)
çç 
=>
çç 
new
çç ",
SubContainerCreatorByNewPrefab
çç# A
(
ççA B
	container
éé 
,
éé 
new
éé "$
PrefabProviderResource
éé# 9
(
éé9 :
resourcePath
éé: F
)
ééF G
,
ééG H
gameObjectInfo
ééI W
)
ééW X
)
ééX Y
;
ééY Z
return
êê 
new
êê G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
êê P
(
êêP Q
	_bindInfo
êêQ Z
,
êêZ [
gameObjectInfo
êê\ j
)
êêj k
;
êêk l
}
ëë 	
}
ìì 
}îî Æ
OC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\Log.cs
	namespace 	

ModestTree
 
{ 
public 

static 
class 
Log 
{ 
[

 	
Conditional

	 
(

 
$str

 #
)

# $
]

$ %
public 
static 
void 
Debug  
(  !
string! '
message( /
,/ 0
params1 7
object8 >
[> ?
]? @
argsA E
)E F
{ 	
} 	
public 
static 
void 
Info 
(  
string  &
message' .
,. /
params0 6
object7 =
[= >
]> ?
args@ D
)D E
{ 	
UnityEngine 
. 
Debug 
. 
Log !
(! "
message" )
.) *
Fmt* -
(- .
args. 2
)2 3
)3 4
;4 5
} 	
public!! 
static!! 
void!! 
Warn!! 
(!!  
string!!  &
message!!' .
,!!. /
params!!0 6
object!!7 =
[!!= >
]!!> ?
args!!@ D
)!!D E
{"" 	
UnityEngine&& 
.&& 
Debug&& 
.&& 

LogWarning&& (
(&&( )
message&&) 0
.&&0 1
Fmt&&1 4
(&&4 5
args&&5 9
)&&9 :
)&&: ;
;&&; <
}(( 	
public,, 
static,, 
void,, 
Trace,,  
(,,  !
string,,! '
message,,( /
,,,/ 0
params,,1 7
object,,8 >
[,,> ?
],,? @
args,,A E
),,E F
{-- 	
UnityEngine11 
.11 
Debug11 
.11 
Log11 !
(11! "
message11" )
.11) *
Fmt11* -
(11- .
args11. 2
)112 3
)113 4
;114 5
}33 	
public77 
static77 
void77 
ErrorException77 )
(77) *
	Exception77* 3
e774 5
)775 6
{88 	
UnityEngine<< 
.<< 
Debug<< 
.<< 
LogException<< *
(<<* +
e<<+ ,
)<<, -
;<<- .
}>> 	
public@@ 
static@@ 
void@@ 
ErrorException@@ )
(@@) *
string@@* 0
message@@1 8
,@@8 9
	Exception@@: C
e@@D E
)@@E F
{AA 	
UnityEngineEE 
.EE 
DebugEE 
.EE 
LogErrorEE &
(EE& '
messageEE' .
)EE. /
;EE/ 0
UnityEngineFF 
.FF 
DebugFF 
.FF 
LogExceptionFF *
(FF* +
eFF+ ,
)FF, -
;FF- .
}HH 	
publicJJ 
staticJJ 
voidJJ 
ErrorJJ  
(JJ  !
stringJJ! '
messageJJ( /
,JJ/ 0
paramsJJ1 7
objectJJ8 >
[JJ> ?
]JJ? @
argsJJA E
)JJE F
{KK 	
UnityEngineOO 
.OO 
DebugOO 
.OO 
LogErrorOO &
(OO& '
messageOO' .
.OO. /
FmtOO/ 2
(OO2 3
argsOO3 7
)OO7 8
)OO8 9
;OO9 :
}QQ 	
}RR 
}SS R
PC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\Func.csà7
xC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\SubContainerPrefabBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 .
"SubContainerPrefabBindingFinalizer

 3
:

4 5$
ProviderBindingFinalizer

6 N
{ 
readonly 
object 
_subIdentifier &
;& '
readonly 
bool 
_resolveAll !
;! "
readonly 
Func 
< 
DiContainer !
,! " 
ISubContainerCreator# 7
>7 8'
_subContainerCreatorFactory9 T
;T U
public .
"SubContainerPrefabBindingFinalizer 1
(1 2
BindInfo 
bindInfo 
, 
object 
subIdentifier  
,  !
bool" &

resolveAll' 1
,1 2
Func 
< 
DiContainer 
,  
ISubContainerCreator 2
>2 3&
subContainerCreatorFactory4 N
)N O
: 
base 
( 
bindInfo 
) 
{ 	
_subIdentifier 
= 
subIdentifier *
;* +
_resolveAll 
= 

resolveAll $
;$ %'
_subContainerCreatorFactory '
=( )&
subContainerCreatorFactory* D
;D E
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert 
. 
IsEmpty 
( 
BindInfo '
.' (
ToTypes( /
)/ 0
;0 1
FinalizeBindingSelf   #
(  # $
	container  $ -
)  - .
;  . /
}!! 
else"" 
{## #
FinalizeBindingConcrete$$ '
($$' (
	container$$( 1
,$$1 2
BindInfo$$3 ;
.$$; <
ToTypes$$< C
)$$C D
;$$D E
}%% 
}&& 	
void(( #
FinalizeBindingConcrete(( $
((($ %
DiContainer((% 0
	container((1 :
,((: ;
List((< @
<((@ A
Type((A E
>((E F
concreteTypes((G T
)((T U
{)) 	
var** 
scope** 
=** 
GetScope**  
(**  !
)**! "
;**" #
switch,, 
(,, 
scope,, 
),, 
{-- 
case.. 

ScopeTypes.. 
...  
	Transient..  )
:..) *
{// ;
/RegisterProvidersForAllContractsPerConcreteType00 C
(00C D
	container11 !
,11! "
concreteTypes22 %
,22% &
(33 
_33 
,33 
concreteType33 (
)33( )
=>33* ,
new33- 0*
SubContainerDependencyProvider331 O
(33O P
concreteType44 (
,44( )
_subIdentifier44* 8
,448 9'
_subContainerCreatorFactory55 7
(557 8
	container558 A
)55A B
,55B C
_resolveAll55D O
)55O P
)55P Q
;55Q R
break66 
;66 
}77 
case88 

ScopeTypes88 
.88  
	Singleton88  )
:88) *
{99 
var:: 
containerCreator:: (
=::) *
new::+ .%
SubContainerCreatorCached::/ H
(::H I'
_subContainerCreatorFactory;; 3
(;;3 4
	container;;4 =
);;= >
);;> ?
;;;? @;
/RegisterProvidersForAllContractsPerConcreteType== C
(==C D
	container>> !
,>>! "
concreteTypes?? %
,??% &
(@@ 
_@@ 
,@@ 
concreteType@@ (
)@@( )
=>@@* ,
newAA *
SubContainerDependencyProviderAA :
(AA: ;
concreteTypeBB (
,BB( )
_subIdentifierBB* 8
,BB8 9
containerCreatorBB: J
,BBJ K
_resolveAllBBL W
)BBW X
)BBX Y
;BBY Z
breakCC 
;CC 
}DD 
defaultEE 
:EE 
{FF 
throwGG 
AssertGG  
.GG  !
CreateExceptionGG! 0
(GG0 1
)GG1 2
;GG2 3
}HH 
}II 
}JJ 	
voidLL 
FinalizeBindingSelfLL  
(LL  !
DiContainerLL! ,
	containerLL- 6
)LL6 7
{MM 	
varNN 
scopeNN 
=NN 
GetScopeNN  
(NN  !
)NN! "
;NN" #
switchPP 
(PP 
scopePP 
)PP 
{QQ 
caseRR 

ScopeTypesRR 
.RR  
	TransientRR  )
:RR) *
{SS '
RegisterProviderPerContractTT /
(TT/ 0
	containerUU !
,UU! "
(VV 
_VV 
,VV 
contractTypeVV (
)VV( )
=>VV* ,
newVV- 0*
SubContainerDependencyProviderVV1 O
(VVO P
contractTypeWW (
,WW( )
_subIdentifierWW* 8
,WW8 9'
_subContainerCreatorFactoryXX 7
(XX7 8
	containerXX8 A
)XXA B
,XXB C
_resolveAllXXD O
)XXO P
)XXP Q
;XXQ R
breakYY 
;YY 
}ZZ 
case[[ 

ScopeTypes[[ 
.[[  
	Singleton[[  )
:[[) *
{\\ 
var]] 
containerCreator]] (
=]]) *
new]]+ .%
SubContainerCreatorCached]]/ H
(]]H I'
_subContainerCreatorFactory^^ 3
(^^3 4
	container^^4 =
)^^= >
)^^> ?
;^^? @'
RegisterProviderPerContract`` /
(``/ 0
	containeraa !
,aa! "
(bb 
_bb 
,bb 
contractTypebb (
)bb( )
=>bb* ,
newcc *
SubContainerDependencyProvidercc :
(cc: ;
contractTypedd (
,dd( )
_subIdentifierdd* 8
,dd8 9
containerCreatordd: J
,ddJ K
_resolveAllddL W
)ddW X
)ddX Y
;ddY Z
breakee 
;ee 
}ff 
defaultgg 
:gg 
{hh 
throwii 
Assertii  
.ii  !
CreateExceptionii! 0
(ii0 1
)ii1 2
;ii2 3
}jj 
}kk 
}ll 	
}mm 
}nn û
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\SingletonMarkRegistry.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
SingletonMarkRegistry &
{		 
readonly

 
HashSet

 
<

 
Type

 
>

 
_boundSingletons

 /
=

0 1
new

2 5
HashSet

6 =
<

= >
Type

> B
>

B C
(

C D
)

D E
;

E F
readonly 
HashSet 
< 
Type 
> 
_boundNonSingletons 2
=3 4
new5 8
HashSet9 @
<@ A
TypeA E
>E F
(F G
)G H
;H I
public 
void 
MarkNonSingleton $
($ %
Type% )
type* .
). /
{ 	
Assert 
. 
That 
( 
! 
_boundSingletons )
.) *
Contains* 2
(2 3
type3 7
)7 8
,8 9
$str	 ‘
,
‘ ’
type
÷ ⁄
)
⁄ €
;
€ ‹
_boundNonSingletons 
.  
Add  #
(# $
type$ (
)( )
;) *
} 	
public 
void 
MarkSingleton !
(! "
Type" &
type' +
)+ ,
{ 	
bool 
added 
= 
_boundSingletons )
.) *
Add* -
(- .
type. 2
)2 3
;3 4
Assert 
. 
That 
( 
added 
, 
$str	 ﬂ
,
ﬂ ‡
type
· Â
)
Â Ê
;
Ê Á
Assert 
. 
That 
( 
! 
_boundNonSingletons ,
., -
Contains- 5
(5 6
type6 :
): ;
,; <
$str	 ‘
,
‘ ’
type
÷ ⁄
)
⁄ €
;
€ ‹
} 	
} 
} õS
bC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\PrefabResourceFactory.cs
	namespace 	
Zenject
 
{ 
public 

class !
PrefabResourceFactory &
<& '
T' (
>( )
:* +
IFactory, 4
<4 5
string5 ;
,; <
T= >
>> ?
{ 
[ 	
Inject	 
] 
readonly 
DiContainer 

_container '
=( )
null* .
;. /
public 
DiContainer 
	Container $
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
public 
virtual 
T 
Create 
(  
string  &
prefabResourceName' 9
)9 :
{ 	
Assert 
. 
That 
( 
! 
string 
.  
IsNullOrEmpty  -
(- .
prefabResourceName. @
)@ A
,A B
$str |
,| }
typeof	~ Ñ
(
Ñ Ö
T
Ö Ü
)
Ü á
)
á à
;
à â
var 
prefab 
= 
( 

GameObject $
)$ %
	Resources% .
.. /
Load/ 3
(3 4
prefabResourceName4 F
)F G
;G H
return 

_container 
. )
InstantiatePrefabForComponent ;
<; <
T< =
>= >
(> ?
prefab? E
)E F
;F G
} 	
}## 
public&& 

class&& !
PrefabResourceFactory&& &
<&&& '
P1&&' )
,&&) *
T&&+ ,
>&&, -
:&&. /
IFactory&&0 8
<&&8 9
string&&9 ?
,&&? @
P1&&A C
,&&C D
T&&E F
>&&F G
{(( 
[)) 	
Inject))	 
])) 
readonly** 
DiContainer** 

_container** '
=**( )
null*** .
;**. /
public,, 
DiContainer,, 
	Container,, $
{-- 	
get.. 
{.. 
return.. 

_container.. #
;..# $
}..% &
}// 	
public11 
virtual11 
T11 
Create11 
(11  
string11  &
prefabResourceName11' 9
,119 :
P111; =
param11> C
)11C D
{22 	
Assert33 
.33 
That33 
(33 
!33 
string33 
.33  
IsNullOrEmpty33  -
(33- .
prefabResourceName33. @
)33@ A
,33A B
$str44 |
,44| }
typeof	44~ Ñ
(
44Ñ Ö
T
44Ö Ü
)
44Ü á
)
44á à
;
44à â
var66 
prefab66 
=66 
(66 

GameObject66 $
)66$ %
	Resources66% .
.66. /
Load66/ 3
(663 4
prefabResourceName664 F
)66F G
;66G H
return77 
(77 
T77 
)77 

_container77  
.77  !1
%InstantiatePrefabForComponentExplicit77! F
(77F G
typeof88 
(88 
T88 
)88 
,88 
prefab88 !
,88! "

InjectUtil88# -
.88- .!
CreateArgListExplicit88. C
(88C D
param88D I
)88I J
)88J K
;88K L
}99 	
}:: 
public== 

class== !
PrefabResourceFactory== &
<==& '
P1==' )
,==) *
P2==+ -
,==- .
T==/ 0
>==0 1
:==2 3
IFactory==4 <
<==< =
string=== C
,==C D
P1==E G
,==G H
P2==I K
,==K L
T==M N
>==N O
{?? 
[@@ 	
Inject@@	 
]@@ 
readonlyAA 
DiContainerAA 

_containerAA '
=AA( )
nullAA* .
;AA. /
publicCC 
DiContainerCC 
	ContainerCC $
{DD 	
getEE 
{EE 
returnEE 

_containerEE #
;EE# $
}EE% &
}FF 	
publicHH 
virtualHH 
THH 
CreateHH 
(HH  
stringHH  &
prefabResourceNameHH' 9
,HH9 :
P1HH; =
paramHH> C
,HHC D
P2HHE G
param2HHH N
)HHN O
{II 	
AssertJJ 
.JJ 
ThatJJ 
(JJ 
!JJ 
stringJJ 
.JJ  
IsNullOrEmptyJJ  -
(JJ- .
prefabResourceNameJJ. @
)JJ@ A
,JJA B
$strKK |
,KK| }
typeof	KK~ Ñ
(
KKÑ Ö
T
KKÖ Ü
)
KKÜ á
)
KKá à
;
KKà â
varMM 
prefabMM 
=MM 
(MM 

GameObjectMM $
)MM$ %
	ResourcesMM% .
.MM. /
LoadMM/ 3
(MM3 4
prefabResourceNameMM4 F
)MMF G
;MMG H
returnOO 
(OO 
TOO 
)OO 

_containerOO  
.OO  !1
%InstantiatePrefabForComponentExplicitOO! F
(OOF G
typeofPP 
(PP 
TPP 
)PP 
,PP 
prefabPP !
,PP! "

InjectUtilPP# -
.PP- .!
CreateArgListExplicitPP. C
(PPC D
paramPPD I
,PPI J
param2PPK Q
)PPQ R
)PPR S
;PPS T
}QQ 	
}RR 
publicUU 

classUU !
PrefabResourceFactoryUU &
<UU& '
P1UU' )
,UU) *
P2UU+ -
,UU- .
P3UU/ 1
,UU1 2
TUU3 4
>UU4 5
:UU6 7
IFactoryUU8 @
<UU@ A
stringUUA G
,UUG H
P1UUI K
,UUK L
P2UUM O
,UUO P
P3UUQ S
,UUS T
TUUU V
>UUV W
{WW 
[XX 	
InjectXX	 
]XX 
readonlyYY 
DiContainerYY 

_containerYY '
=YY( )
nullYY* .
;YY. /
public[[ 
DiContainer[[ 
	Container[[ $
{\\ 	
get]] 
{]] 
return]] 

_container]] #
;]]# $
}]]% &
}^^ 	
public`` 
virtual`` 
T`` 
Create`` 
(``  
string``  &
prefabResourceName``' 9
,``9 :
P1``; =
param``> C
,``C D
P2``E G
param2``H N
,``N O
P3``P R
param3``S Y
)``Y Z
{aa 	
Assertbb 
.bb 
Thatbb 
(bb 
!bb 
stringbb 
.bb  
IsNullOrEmptybb  -
(bb- .
prefabResourceNamebb. @
)bb@ A
,bbA B
$strcc |
,cc| }
typeof	cc~ Ñ
(
ccÑ Ö
T
ccÖ Ü
)
ccÜ á
)
ccá à
;
ccà â
varee 
prefabee 
=ee 
(ee 

GameObjectee $
)ee$ %
	Resourcesee% .
.ee. /
Loadee/ 3
(ee3 4
prefabResourceNameee4 F
)eeF G
;eeG H
returngg 
(gg 
Tgg 
)gg 

_containergg  
.gg  !1
%InstantiatePrefabForComponentExplicitgg! F
(ggF G
typeofhh 
(hh 
Thh 
)hh 
,hh 
prefabhh !
,hh! "

InjectUtilhh# -
.hh- .!
CreateArgListExplicithh. C
(hhC D
paramhhD I
,hhI J
param2hhK Q
,hhQ R
param3hhS Y
)hhY Z
)hhZ [
;hh[ \
}ii 	
}jj 
publicmm 

classmm !
PrefabResourceFactorymm &
<mm& '
P1mm' )
,mm) *
P2mm+ -
,mm- .
P3mm/ 1
,mm1 2
P4mm3 5
,mm5 6
Tmm7 8
>mm8 9
:mm: ;
IFactorymm< D
<mmD E
stringmmE K
,mmK L
P1mmM O
,mmO P
P2mmQ S
,mmS T
P3mmU W
,mmW X
P4mmY [
,mm[ \
Tmm] ^
>mm^ _
{oo 
[pp 	
Injectpp	 
]pp 
readonlyqq 
DiContainerqq 

_containerqq '
=qq( )
nullqq* .
;qq. /
publicss 
DiContainerss 
	Containerss $
{tt 	
getuu 
{uu 
returnuu 

_containeruu #
;uu# $
}uu% &
}vv 	
publicxx 
virtualxx 
Txx 
Createxx 
(xx  
stringxx  &
prefabResourceNamexx' 9
,xx9 :
P1xx; =
paramxx> C
,xxC D
P2xxE G
param2xxH N
,xxN O
P3xxP R
param3xxS Y
,xxY Z
P4xx[ ]
param4xx^ d
)xxd e
{yy 	
Assertzz 
.zz 
Thatzz 
(zz 
!zz 
stringzz 
.zz  
IsNullOrEmptyzz  -
(zz- .
prefabResourceNamezz. @
)zz@ A
,zzA B
$str{{ |
,{{| }
typeof	{{~ Ñ
(
{{Ñ Ö
T
{{Ö Ü
)
{{Ü á
)
{{á à
;
{{à â
var}} 
prefab}} 
=}} 
(}} 

GameObject}} $
)}}$ %
	Resources}}% .
.}}. /
Load}}/ 3
(}}3 4
prefabResourceName}}4 F
)}}F G
;}}G H
return 
( 
T 
) 

_container  
.  !1
%InstantiatePrefabForComponentExplicit! F
(F G
typeof
ÄÄ 
(
ÄÄ 
T
ÄÄ 
)
ÄÄ 
,
ÄÄ 
prefab
ÄÄ !
,
ÄÄ! "

InjectUtil
ÄÄ# -
.
ÄÄ- .#
CreateArgListExplicit
ÄÄ. C
(
ÄÄC D
param
ÄÄD I
,
ÄÄI J
param2
ÄÄK Q
,
ÄÄQ R
param3
ÄÄS Y
,
ÄÄY Z
param4
ÄÄ[ a
)
ÄÄa b
)
ÄÄb c
;
ÄÄc d
}
ÅÅ 	
}
ÇÇ 
}ÉÉ öï
aC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Main\SignalBus.cs
	namespace		 	
Zenject		
 
{

 
public 

class 
	SignalBus 
: 
ILateDisposable ,
{ 
readonly 
SignalSubscription #
.# $
Pool$ (
_subscriptionPool) :
;: ;
readonly 

Dictionary 
< 
	BindingId %
,% &
SignalDeclaration' 8
>8 9 
_localDeclarationMap: N
;N O
readonly 
	SignalBus 

_parentBus %
;% &
readonly 

Dictionary 
<  
SignalSubscriptionId 0
,0 1
SignalSubscription2 D
>D E
_subscriptionMapF V
=W X
newY \

Dictionary] g
<g h 
SignalSubscriptionIdh |
,| }
SignalSubscription	~ ê
>
ê ë
(
ë í
)
í ì
;
ì î
readonly 
ZenjectSettings  
.  !
SignalSettings! /
	_settings0 9
;9 :
readonly 
SignalDeclaration "
." #
Factory# *%
_signalDeclarationFactory+ D
;D E
readonly 
DiContainer 

_container '
;' (
public 
	SignalBus 
( 
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Local+ 0
)0 1
]1 2
List 
< 
SignalDeclaration "
>" #
signalDeclarations$ 6
,6 7
[ 
Inject 
( 
Source 
= 
InjectSources *
.* +
Parent+ 1
,1 2
Optional3 ;
=< =
true> B
)B C
]C D
	SignalBus 
	parentBus 
,  
[ 
InjectOptional 
] 
ZenjectSettings 
zenjectSettings +
,+ ,
SignalSubscription 
. 
Pool #
subscriptionPool$ 4
,4 5
SignalDeclaration 
. 
Factory %$
signalDeclarationFactory& >
,> ?
DiContainer 
	container !
)! "
{ 	
_subscriptionPool   
=   
subscriptionPool    0
;  0 1
zenjectSettings!! 
=!! 
zenjectSettings!! -
??!!. 0
ZenjectSettings!!1 @
.!!@ A
Default!!A H
;!!H I
	_settings"" 
="" 
zenjectSettings"" '
.""' (
Signals""( /
??""0 2
ZenjectSettings""3 B
.""B C
SignalSettings""C Q
.""Q R
Default""R Y
;""Y Z%
_signalDeclarationFactory## %
=##& '$
signalDeclarationFactory##( @
;##@ A

_container$$ 
=$$ 
	container$$ "
;$$" # 
_localDeclarationMap&&  
=&&! "
signalDeclarations&&# 5
.&&5 6
ToDictionary&&6 B
(&&B C
x&&C D
=>&&E G
x&&H I
.&&I J
	BindingId&&J S
,&&S T
x&&U V
=>&&W Y
x&&Z [
)&&[ \
;&&\ ]

_parentBus'' 
='' 
	parentBus'' "
;''" #
}(( 	
public** 
	SignalBus** 
	ParentBus** "
{++ 	
get,, 
{,, 
return,, 

_parentBus,, #
;,,# $
},,% &
}-- 	
public// 
int// 
NumSubscribers// !
{00 	
get11 
{11 
return11 
_subscriptionMap11 )
.11) *
Count11* /
;11/ 0
}111 2
}22 	
public44 
void44 
LateDispose44 
(44  
)44  !
{55 	
if66 
(66 
	_settings66 
.66 $
RequireStrictUnsubscribe66 2
)662 3
{77 
if88 
(88 
!88 
_subscriptionMap88 %
.88% &
IsEmpty88& -
(88- .
)88. /
)88/ 0
{99 
throw:: 
Assert::  
.::  !
CreateException::! 0
(::0 1
$str	;; µ
,
;;µ ∂
_subscriptionMap<< (
.<<( )
Values<<) /
.<</ 0
Select<<0 6
(<<6 7
x<<7 8
=><<9 ;
x<<< =
.<<= >
SignalId<<> F
.<<F G
ToString<<G O
(<<O P
)<<P Q
)<<Q R
.<<R S
Join<<S W
(<<W X
$str<<X \
)<<\ ]
)<<] ^
;<<^ _
}== 
}>> 
else?? 
{@@ 
foreachAA 
(AA 
varAA 
subscriptionAA )
inAA* ,
_subscriptionMapAA- =
.AA= >
ValuesAA> D
)AAD E
{BB 
subscriptionCC  
.CC  !
DisposeCC! (
(CC( )
)CC) *
;CC* +
}DD 
}EE 
foreachGG 
(GG 
varGG 
declarationGG $
inGG% ' 
_localDeclarationMapGG( <
.GG< =
ValuesGG= C
)GGC D
{HH 
declarationII 
.II 
DisposeII #
(II# $
)II$ %
;II% &
}JJ 
}KK 	
publicMM 
voidMM 
FireIdMM 
<MM 
TSignalMM "
>MM" #
(MM# $
objectMM$ *

identifierMM+ 5
,MM5 6
TSignalMM7 >
signalMM? E
)MME F
{NN 	
varPP 
declarationPP 
=PP 
GetDeclarationPP ,
(PP, -
typeofPP- 3
(PP3 4
TSignalPP4 ;
)PP; <
,PP< =

identifierPP> H
,PPH I
truePPJ N
)PPN O
;PPO P
declarationRR 
.RR 
FireRR 
(RR 
signalRR #
)RR# $
;RR$ %
}SS 	
publicUU 
voidUU 
FireUU 
<UU 
TSignalUU  
>UU  !
(UU! "
TSignalUU" )
signalUU* 0
)UU0 1
{VV 	
FireIdWW 
<WW 
TSignalWW 
>WW 
(WW 
nullWW  
,WW  !
signalWW" (
)WW( )
;WW) *
}XX 	
publicZZ 
voidZZ 
FireIdZZ 
<ZZ 
TSignalZZ "
>ZZ" #
(ZZ# $
objectZZ$ *

identifierZZ+ 5
)ZZ5 6
{[[ 	
var]] 
declaration]] 
=]] 
GetDeclaration]] ,
(]], -
typeof]]- 3
(]]3 4
TSignal]]4 ;
)]]; <
,]]< =

identifier]]> H
,]]H I
true]]J N
)]]N O
;]]O P
declaration__ 
.__ 
Fire__ 
(__ 
(`` 
TSignal`` 
)`` 
	Activator`` "
.``" #
CreateInstance``# 1
(``1 2
typeof``2 8
(``8 9
TSignal``9 @
)``@ A
)``A B
)``B C
;``C D
}aa 	
publiccc 
voidcc 
Firecc 
<cc 
TSignalcc  
>cc  !
(cc! "
)cc" #
{dd 	
FireIdee 
<ee 
TSignalee 
>ee 
(ee 
nullee  
)ee  !
;ee! "
}ff 	
publichh 
voidhh 
FireIdhh 
(hh 
objecthh !

identifierhh" ,
,hh, -
objecthh. 4
signalhh5 ;
)hh; <
{ii 	
GetDeclarationjj 
(jj 
signaljj !
.jj! "
GetTypejj" )
(jj) *
)jj* +
,jj+ ,

identifierjj- 7
,jj7 8
truejj9 =
)jj= >
.jj> ?
Firejj? C
(jjC D
signaljjD J
)jjJ K
;jjK L
}kk 	
publicmm 
voidmm 
Firemm 
(mm 
objectmm 
signalmm  &
)mm& '
{nn 	
FireIdoo 
(oo 
nulloo 
,oo 
signaloo 
)oo  
;oo  !
}pp 	
publicrr 
voidrr 
	TryFireIdrr 
<rr 
TSignalrr %
>rr% &
(rr& '
objectrr' -

identifierrr. 8
,rr8 9
TSignalrr: A
signalrrB H
)rrH I
{ss 	
vartt 
declarationtt 
=tt 
GetDeclarationtt ,
(tt, -
typeoftt- 3
(tt3 4
TSignaltt4 ;
)tt; <
,tt< =

identifiertt> H
,ttH I
falsettJ O
)ttO P
;ttP Q
ifuu 
(uu 
declarationuu 
!=uu 
nulluu #
)uu# $
{vv 
declarationww 
.ww 
Fireww  
(ww  !
signalww! '
)ww' (
;ww( )
}xx 
}yy 	
public{{ 
void{{ 
TryFire{{ 
<{{ 
TSignal{{ #
>{{# $
({{$ %
TSignal{{% ,
signal{{- 3
){{3 4
{|| 	
	TryFireId}} 
<}} 
TSignal}} 
>}} 
(}} 
null}} #
,}}# $
signal}}% +
)}}+ ,
;}}, -
}~~ 	
public
ÄÄ 
void
ÄÄ 
	TryFireId
ÄÄ 
<
ÄÄ 
TSignal
ÄÄ %
>
ÄÄ% &
(
ÄÄ& '
object
ÄÄ' -

identifier
ÄÄ. 8
)
ÄÄ8 9
{
ÅÅ 	
var
ÇÇ 
declaration
ÇÇ 
=
ÇÇ 
GetDeclaration
ÇÇ ,
(
ÇÇ, -
typeof
ÇÇ- 3
(
ÇÇ3 4
TSignal
ÇÇ4 ;
)
ÇÇ; <
,
ÇÇ< =

identifier
ÇÇ> H
,
ÇÇH I
false
ÇÇJ O
)
ÇÇO P
;
ÇÇP Q
if
ÉÉ 
(
ÉÉ 
declaration
ÉÉ 
!=
ÉÉ 
null
ÉÉ #
)
ÉÉ# $
{
ÑÑ 
declaration
ÖÖ 
.
ÖÖ 
Fire
ÖÖ  
(
ÖÖ  !
(
ÜÜ 
TSignal
ÜÜ 
)
ÜÜ 
	Activator
ÜÜ &
.
ÜÜ& '
CreateInstance
ÜÜ' 5
(
ÜÜ5 6
typeof
ÜÜ6 <
(
ÜÜ< =
TSignal
ÜÜ= D
)
ÜÜD E
)
ÜÜE F
)
ÜÜF G
;
ÜÜG H
}
áá 
}
àà 	
public
ää 
void
ää 
TryFire
ää 
<
ää 
TSignal
ää #
>
ää# $
(
ää$ %
)
ää% &
{
ãã 	
	TryFireId
åå 
<
åå 
TSignal
åå 
>
åå 
(
åå 
null
åå #
)
åå# $
;
åå$ %
}
çç 	
public
èè 
void
èè 
	TryFireId
èè 
(
èè 
object
èè $

identifier
èè% /
,
èè/ 0
object
èè1 7
signal
èè8 >
)
èè> ?
{
êê 	
var
ëë 
declaration
ëë 
=
ëë 
GetDeclaration
ëë ,
(
ëë, -
signal
ëë- 3
.
ëë3 4
GetType
ëë4 ;
(
ëë; <
)
ëë< =
,
ëë= >

identifier
ëë? I
,
ëëI J
false
ëëK P
)
ëëP Q
;
ëëQ R
if
íí 
(
íí 
declaration
íí 
!=
íí 
null
íí #
)
íí# $
{
ìì 
declaration
îî 
.
îî 
Fire
îî  
(
îî  !
signal
îî! '
)
îî' (
;
îî( )
}
ïï 
}
ññ 	
public
òò 
void
òò 
TryFire
òò 
(
òò 
object
òò "
signal
òò# )
)
òò) *
{
ôô 	
	TryFireId
öö 
(
öö 
null
öö 
,
öö 
signal
öö "
)
öö" #
;
öö# $
}
õõ 	
public
≥≥ 
void
≥≥ 
SubscribeId
≥≥ 
<
≥≥  
TSignal
≥≥  '
>
≥≥' (
(
≥≥( )
object
≥≥) /

identifier
≥≥0 :
,
≥≥: ;
Action
≥≥< B
callback
≥≥C K
)
≥≥K L
{
¥¥ 	
Action
µµ 
<
µµ 
object
µµ 
>
µµ 
wrapperCallback
µµ *
=
µµ+ ,
args
µµ- 1
=>
µµ2 4
callback
µµ5 =
(
µµ= >
)
µµ> ?
;
µµ? @
SubscribeInternal
∂∂ 
(
∂∂ 
typeof
∂∂ $
(
∂∂$ %
TSignal
∂∂% ,
)
∂∂, -
,
∂∂- .

identifier
∂∂/ 9
,
∂∂9 :
callback
∂∂; C
,
∂∂C D
wrapperCallback
∂∂E T
)
∂∂T U
;
∂∂U V
}
∑∑ 	
public
ππ 
void
ππ 
	Subscribe
ππ 
<
ππ 
TSignal
ππ %
>
ππ% &
(
ππ& '
Action
ππ' -
callback
ππ. 6
)
ππ6 7
{
∫∫ 	
SubscribeId
ªª 
<
ªª 
TSignal
ªª 
>
ªª  
(
ªª  !
null
ªª! %
,
ªª% &
callback
ªª' /
)
ªª/ 0
;
ªª0 1
}
ºº 	
public
ææ 
void
ææ 
SubscribeId
ææ 
<
ææ  
TSignal
ææ  '
>
ææ' (
(
ææ( )
object
ææ) /

identifier
ææ0 :
,
ææ: ;
Action
ææ< B
<
ææB C
TSignal
ææC J
>
ææJ K
callback
ææL T
)
ææT U
{
øø 	
Action
¿¿ 
<
¿¿ 
object
¿¿ 
>
¿¿ 
wrapperCallback
¿¿ *
=
¿¿+ ,
args
¿¿- 1
=>
¿¿2 4
callback
¿¿5 =
(
¿¿= >
(
¿¿> ?
TSignal
¿¿? F
)
¿¿F G
args
¿¿G K
)
¿¿K L
;
¿¿L M
SubscribeInternal
¡¡ 
(
¡¡ 
typeof
¡¡ $
(
¡¡$ %
TSignal
¡¡% ,
)
¡¡, -
,
¡¡- .

identifier
¡¡/ 9
,
¡¡9 :
callback
¡¡; C
,
¡¡C D
wrapperCallback
¡¡E T
)
¡¡T U
;
¡¡U V
}
¬¬ 	
public
ƒƒ 
void
ƒƒ 
	Subscribe
ƒƒ 
<
ƒƒ 
TSignal
ƒƒ %
>
ƒƒ% &
(
ƒƒ& '
Action
ƒƒ' -
<
ƒƒ- .
TSignal
ƒƒ. 5
>
ƒƒ5 6
callback
ƒƒ7 ?
)
ƒƒ? @
{
≈≈ 	
SubscribeId
∆∆ 
<
∆∆ 
TSignal
∆∆ 
>
∆∆  
(
∆∆  !
null
∆∆! %
,
∆∆% &
callback
∆∆' /
)
∆∆/ 0
;
∆∆0 1
}
«« 	
public
…… 
void
…… 
SubscribeId
…… 
(
……  
Type
……  $

signalType
……% /
,
……/ 0
object
……1 7

identifier
……8 B
,
……B C
Action
……D J
<
……J K
object
……K Q
>
……Q R
callback
……S [
)
……[ \
{
   	
SubscribeInternal
ÀÀ 
(
ÀÀ 

signalType
ÀÀ (
,
ÀÀ( )

identifier
ÀÀ* 4
,
ÀÀ4 5
callback
ÀÀ6 >
,
ÀÀ> ?
callback
ÀÀ@ H
)
ÀÀH I
;
ÀÀI J
}
ÃÃ 	
public
ŒŒ 
void
ŒŒ 
	Subscribe
ŒŒ 
(
ŒŒ 
Type
ŒŒ "

signalType
ŒŒ# -
,
ŒŒ- .
Action
ŒŒ/ 5
<
ŒŒ5 6
object
ŒŒ6 <
>
ŒŒ< =
callback
ŒŒ> F
)
ŒŒF G
{
œœ 	
SubscribeId
–– 
(
–– 

signalType
–– "
,
––" #
null
––$ (
,
––( )
callback
––* 2
)
––2 3
;
––3 4
}
—— 	
public
”” 
void
”” 
UnsubscribeId
”” !
<
””! "
TSignal
””" )
>
””) *
(
””* +
object
””+ 1

identifier
””2 <
,
””< =
Action
””> D
callback
””E M
)
””M N
{
‘‘ 	
UnsubscribeId
’’ 
(
’’ 
typeof
’’  
(
’’  !
TSignal
’’! (
)
’’( )
,
’’) *

identifier
’’+ 5
,
’’5 6
callback
’’7 ?
)
’’? @
;
’’@ A
}
÷÷ 	
public
ÿÿ 
void
ÿÿ 
Unsubscribe
ÿÿ 
<
ÿÿ  
TSignal
ÿÿ  '
>
ÿÿ' (
(
ÿÿ( )
Action
ÿÿ) /
callback
ÿÿ0 8
)
ÿÿ8 9
{
ŸŸ 	
UnsubscribeId
⁄⁄ 
<
⁄⁄ 
TSignal
⁄⁄ !
>
⁄⁄! "
(
⁄⁄" #
null
⁄⁄# '
,
⁄⁄' (
callback
⁄⁄) 1
)
⁄⁄1 2
;
⁄⁄2 3
}
€€ 	
public
›› 
void
›› 
UnsubscribeId
›› !
(
››! "
Type
››" &

signalType
››' 1
,
››1 2
object
››3 9

identifier
››: D
,
››D E
Action
››F L
callback
››M U
)
››U V
{
ﬁﬁ 	!
UnsubscribeInternal
ﬂﬂ 
(
ﬂﬂ  

signalType
ﬂﬂ  *
,
ﬂﬂ* +

identifier
ﬂﬂ, 6
,
ﬂﬂ6 7
callback
ﬂﬂ8 @
,
ﬂﬂ@ A
true
ﬂﬂB F
)
ﬂﬂF G
;
ﬂﬂG H
}
‡‡ 	
public
‚‚ 
void
‚‚ 
Unsubscribe
‚‚ 
(
‚‚  
Type
‚‚  $

signalType
‚‚% /
,
‚‚/ 0
Action
‚‚1 7
callback
‚‚8 @
)
‚‚@ A
{
„„ 	
UnsubscribeId
‰‰ 
(
‰‰ 

signalType
‰‰ $
,
‰‰$ %
null
‰‰& *
,
‰‰* +
callback
‰‰, 4
)
‰‰4 5
;
‰‰5 6
}
ÂÂ 	
public
ÁÁ 
void
ÁÁ 
UnsubscribeId
ÁÁ !
(
ÁÁ! "
Type
ÁÁ" &

signalType
ÁÁ' 1
,
ÁÁ1 2
object
ÁÁ3 9

identifier
ÁÁ: D
,
ÁÁD E
Action
ÁÁF L
<
ÁÁL M
object
ÁÁM S
>
ÁÁS T
callback
ÁÁU ]
)
ÁÁ] ^
{
ËË 	!
UnsubscribeInternal
ÈÈ 
(
ÈÈ  

signalType
ÈÈ  *
,
ÈÈ* +

identifier
ÈÈ, 6
,
ÈÈ6 7
callback
ÈÈ8 @
,
ÈÈ@ A
true
ÈÈB F
)
ÈÈF G
;
ÈÈG H
}
ÍÍ 	
public
ÏÏ 
void
ÏÏ 
Unsubscribe
ÏÏ 
(
ÏÏ  
Type
ÏÏ  $

signalType
ÏÏ% /
,
ÏÏ/ 0
Action
ÏÏ1 7
<
ÏÏ7 8
object
ÏÏ8 >
>
ÏÏ> ?
callback
ÏÏ@ H
)
ÏÏH I
{
ÌÌ 	
UnsubscribeId
ÓÓ 
(
ÓÓ 

signalType
ÓÓ $
,
ÓÓ$ %
null
ÓÓ& *
,
ÓÓ* +
callback
ÓÓ, 4
)
ÓÓ4 5
;
ÓÓ5 6
}
ÔÔ 	
public
ÒÒ 
void
ÒÒ 
UnsubscribeId
ÒÒ !
<
ÒÒ! "
TSignal
ÒÒ" )
>
ÒÒ) *
(
ÒÒ* +
object
ÒÒ+ 1

identifier
ÒÒ2 <
,
ÒÒ< =
Action
ÒÒ> D
<
ÒÒD E
TSignal
ÒÒE L
>
ÒÒL M
callback
ÒÒN V
)
ÒÒV W
{
ÚÚ 	!
UnsubscribeInternal
ÛÛ 
(
ÛÛ  
typeof
ÛÛ  &
(
ÛÛ& '
TSignal
ÛÛ' .
)
ÛÛ. /
,
ÛÛ/ 0

identifier
ÛÛ1 ;
,
ÛÛ; <
callback
ÛÛ= E
,
ÛÛE F
true
ÛÛG K
)
ÛÛK L
;
ÛÛL M
}
ÙÙ 	
public
ˆˆ 
void
ˆˆ 
Unsubscribe
ˆˆ 
<
ˆˆ  
TSignal
ˆˆ  '
>
ˆˆ' (
(
ˆˆ( )
Action
ˆˆ) /
<
ˆˆ/ 0
TSignal
ˆˆ0 7
>
ˆˆ7 8
callback
ˆˆ9 A
)
ˆˆA B
{
˜˜ 	
UnsubscribeId
¯¯ 
<
¯¯ 
TSignal
¯¯ !
>
¯¯! "
(
¯¯" #
null
¯¯# '
,
¯¯' (
callback
¯¯) 1
)
¯¯1 2
;
¯¯2 3
}
˘˘ 	
public
˚˚ 
void
˚˚ 
TryUnsubscribeId
˚˚ $
<
˚˚$ %
TSignal
˚˚% ,
>
˚˚, -
(
˚˚- .
object
˚˚. 4

identifier
˚˚5 ?
,
˚˚? @
Action
˚˚A G
callback
˚˚H P
)
˚˚P Q
{
¸¸ 	!
UnsubscribeInternal
˝˝ 
(
˝˝  
typeof
˝˝  &
(
˝˝& '
TSignal
˝˝' .
)
˝˝. /
,
˝˝/ 0

identifier
˝˝1 ;
,
˝˝; <
callback
˝˝= E
,
˝˝E F
false
˝˝G L
)
˝˝L M
;
˝˝M N
}
˛˛ 	
public
ÄÄ 
void
ÄÄ 
TryUnsubscribe
ÄÄ "
<
ÄÄ" #
TSignal
ÄÄ# *
>
ÄÄ* +
(
ÄÄ+ ,
Action
ÄÄ, 2
callback
ÄÄ3 ;
)
ÄÄ; <
{
ÅÅ 	
TryUnsubscribeId
ÇÇ 
<
ÇÇ 
TSignal
ÇÇ $
>
ÇÇ$ %
(
ÇÇ% &
null
ÇÇ& *
,
ÇÇ* +
callback
ÇÇ, 4
)
ÇÇ4 5
;
ÇÇ5 6
}
ÉÉ 	
public
ÖÖ 
void
ÖÖ 
TryUnsubscribeId
ÖÖ $
(
ÖÖ$ %
Type
ÖÖ% )

signalType
ÖÖ* 4
,
ÖÖ4 5
object
ÖÖ6 <

identifier
ÖÖ= G
,
ÖÖG H
Action
ÖÖI O
callback
ÖÖP X
)
ÖÖX Y
{
ÜÜ 	!
UnsubscribeInternal
áá 
(
áá  

signalType
áá  *
,
áá* +

identifier
áá, 6
,
áá6 7
callback
áá8 @
,
áá@ A
false
ááB G
)
ááG H
;
ááH I
}
àà 	
public
ää 
void
ää 
TryUnsubscribe
ää "
(
ää" #
Type
ää# '

signalType
ää( 2
,
ää2 3
Action
ää4 :
callback
ää; C
)
ääC D
{
ãã 	
TryUnsubscribeId
åå 
(
åå 

signalType
åå '
,
åå' (
null
åå) -
,
åå- .
callback
åå/ 7
)
åå7 8
;
åå8 9
}
çç 	
public
èè 
void
èè 
TryUnsubscribeId
èè $
(
èè$ %
Type
èè% )

signalType
èè* 4
,
èè4 5
object
èè6 <

identifier
èè= G
,
èèG H
Action
èèI O
<
èèO P
object
èèP V
>
èèV W
callback
èèX `
)
èè` a
{
êê 	!
UnsubscribeInternal
ëë 
(
ëë  

signalType
ëë  *
,
ëë* +

identifier
ëë, 6
,
ëë6 7
callback
ëë8 @
,
ëë@ A
false
ëëB G
)
ëëG H
;
ëëH I
}
íí 	
public
îî 
void
îî 
TryUnsubscribe
îî "
(
îî" #
Type
îî# '

signalType
îî( 2
,
îî2 3
Action
îî4 :
<
îî: ;
object
îî; A
>
îîA B
callback
îîC K
)
îîK L
{
ïï 	
TryUnsubscribeId
ññ 
(
ññ 

signalType
ññ '
,
ññ' (
null
ññ) -
,
ññ- .
callback
ññ/ 7
)
ññ7 8
;
ññ8 9
}
óó 	
public
ôô 
void
ôô 
TryUnsubscribeId
ôô $
<
ôô$ %
TSignal
ôô% ,
>
ôô, -
(
ôô- .
object
ôô. 4

identifier
ôô5 ?
,
ôô? @
Action
ôôA G
<
ôôG H
TSignal
ôôH O
>
ôôO P
callback
ôôQ Y
)
ôôY Z
{
öö 	!
UnsubscribeInternal
õõ 
(
õõ  
typeof
õõ  &
(
õõ& '
TSignal
õõ' .
)
õõ. /
,
õõ/ 0

identifier
õõ1 ;
,
õõ; <
callback
õõ= E
,
õõE F
false
õõG L
)
õõL M
;
õõM N
}
úú 	
public
ûû 
void
ûû 
TryUnsubscribe
ûû "
<
ûû" #
TSignal
ûû# *
>
ûû* +
(
ûû+ ,
Action
ûû, 2
<
ûû2 3
TSignal
ûû3 :
>
ûû: ;
callback
ûû< D
)
ûûD E
{
üü 	
TryUnsubscribeId
†† 
<
†† 
TSignal
†† $
>
††$ %
(
††% &
null
††& *
,
††* +
callback
††, 4
)
††4 5
;
††5 6
}
°° 	
void
££ !
UnsubscribeInternal
££  
(
££  !
Type
££! %

signalType
££& 0
,
££0 1
object
££2 8

identifier
££9 C
,
££C D
object
££E K
token
££L Q
,
££Q R
bool
££S W
throwIfMissing
££X f
)
££f g
{
§§ 	!
UnsubscribeInternal
•• 
(
••  
new
••  #
	BindingId
••$ -
(
••- .

signalType
••. 8
,
••8 9

identifier
••: D
)
••D E
,
••E F
token
••G L
,
••L M
throwIfMissing
••N \
)
••\ ]
;
••] ^
}
¶¶ 	
void
®® !
UnsubscribeInternal
®®  
(
®®  !
	BindingId
®®! *
signalId
®®+ 3
,
®®3 4
object
®®5 ;
token
®®< A
,
®®A B
bool
®®C G
throwIfMissing
®®H V
)
®®V W
{
©© 	!
UnsubscribeInternal
™™ 
(
™™  
new
´´ "
SignalSubscriptionId
´´ (
(
´´( )
signalId
´´) 1
,
´´1 2
token
´´3 8
)
´´8 9
,
´´9 :
throwIfMissing
´´; I
)
´´I J
;
´´J K
}
¨¨ 	
void
ÆÆ !
UnsubscribeInternal
ÆÆ  
(
ÆÆ  !"
SignalSubscriptionId
ÆÆ! 5
id
ÆÆ6 8
,
ÆÆ8 9
bool
ÆÆ: >
throwIfMissing
ÆÆ? M
)
ÆÆM N
{
ØØ 	 
SignalSubscription
∞∞ 
subscription
∞∞ +
;
∞∞+ ,
if
≤≤ 
(
≤≤ 
_subscriptionMap
≤≤  
.
≤≤  !
TryGetValue
≤≤! ,
(
≤≤, -
id
≤≤- /
,
≤≤/ 0
out
≤≤1 4
subscription
≤≤5 A
)
≤≤A B
)
≤≤B C
{
≥≥ 
_subscriptionMap
¥¥  
.
¥¥  !
RemoveWithConfirm
¥¥! 2
(
¥¥2 3
id
¥¥3 5
)
¥¥5 6
;
¥¥6 7
subscription
µµ 
.
µµ 
Dispose
µµ $
(
µµ$ %
)
µµ% &
;
µµ& '
}
∂∂ 
else
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 
throwIfMissing
ππ "
)
ππ" #
{
∫∫ 
throw
ªª 
Assert
ªª  
.
ªª  !
CreateException
ªª! 0
(
ªª0 1
$strºº ü
)ººü †
;ºº† °
}
ΩΩ 
}
ææ 
}
øø 	
void
¡¡ 
SubscribeInternal
¡¡ 
(
¡¡ 
Type
¡¡ #

signalType
¡¡$ .
,
¡¡. /
object
¡¡0 6

identifier
¡¡7 A
,
¡¡A B
object
¡¡C I
token
¡¡J O
,
¡¡O P
Action
¡¡Q W
<
¡¡W X
object
¡¡X ^
>
¡¡^ _
callback
¡¡` h
)
¡¡h i
{
¬¬ 	
SubscribeInternal
√√ 
(
√√ 
new
√√ !
	BindingId
√√" +
(
√√+ ,

signalType
√√, 6
,
√√6 7

identifier
√√8 B
)
√√B C
,
√√C D
token
√√E J
,
√√J K
callback
√√L T
)
√√T U
;
√√U V
}
ƒƒ 	
void
∆∆ 
SubscribeInternal
∆∆ 
(
∆∆ 
	BindingId
∆∆ (
signalId
∆∆) 1
,
∆∆1 2
object
∆∆3 9
token
∆∆: ?
,
∆∆? @
Action
∆∆A G
<
∆∆G H
object
∆∆H N
>
∆∆N O
callback
∆∆P X
)
∆∆X Y
{
«« 	
SubscribeInternal
»» 
(
»» 
new
…… "
SignalSubscriptionId
…… (
(
……( )
signalId
……) 1
,
……1 2
token
……3 8
)
……8 9
,
……9 :
callback
……; C
)
……C D
;
……D E
}
   	
void
ÃÃ 
SubscribeInternal
ÃÃ 
(
ÃÃ "
SignalSubscriptionId
ÃÃ 3
id
ÃÃ4 6
,
ÃÃ6 7
Action
ÃÃ8 >
<
ÃÃ> ?
object
ÃÃ? E
>
ÃÃE F
callback
ÃÃG O
)
ÃÃO P
{
ÕÕ 	
Assert
ŒŒ 
.
ŒŒ 
That
ŒŒ 
(
ŒŒ 
!
ŒŒ 
_subscriptionMap
ŒŒ )
.
ŒŒ) *
ContainsKey
ŒŒ* 5
(
ŒŒ5 6
id
ŒŒ6 8
)
ŒŒ8 9
,
ŒŒ9 :
$str
œœ b
)
œœb c
;
œœc d
var
—— 
declaration
—— 
=
—— 
GetDeclaration
—— ,
(
——, -
id
——- /
.
——/ 0
SignalId
——0 8
,
——8 9
true
——: >
)
——> ?
;
——? @
var
““ 
subscription
““ 
=
““ 
_subscriptionPool
““ 0
.
““0 1
Spawn
““1 6
(
““6 7
callback
““7 ?
,
““? @
declaration
““A L
)
““L M
;
““M N
_subscriptionMap
‘‘ 
.
‘‘ 
Add
‘‘  
(
‘‘  !
id
‘‘! #
,
‘‘# $
subscription
‘‘% 1
)
‘‘1 2
;
‘‘2 3
}
’’ 	
public
◊◊ 
void
◊◊ 
DeclareSignal
◊◊ !
<
◊◊! "
T
◊◊" #
>
◊◊# $
(
◊◊$ %
object
ÿÿ 

identifier
ÿÿ 
=
ÿÿ 
null
ÿÿ  $
,
ÿÿ$ %+
SignalMissingHandlerResponses
ÿÿ& C
?
ÿÿC D$
missingHandlerResponse
ÿÿE [
=
ÿÿ\ ]
null
ÿÿ^ b
,
ÿÿb c
bool
ÿÿd h
?
ÿÿh i

forceAsync
ÿÿj t
=
ÿÿu v
null
ÿÿw {
,
ÿÿ{ |
intÿÿ} Ä
?ÿÿÄ Å!
asyncTickPriorityÿÿÇ ì
=ÿÿî ï
nullÿÿñ ö
)ÿÿö õ
{
ŸŸ 	
DeclareSignal
⁄⁄ 
(
⁄⁄ 
typeof
⁄⁄  
(
⁄⁄  !
T
⁄⁄! "
)
⁄⁄" #
,
⁄⁄# $

identifier
⁄⁄% /
,
⁄⁄/ 0$
missingHandlerResponse
⁄⁄1 G
,
⁄⁄G H

forceAsync
⁄⁄I S
,
⁄⁄S T
asyncTickPriority
⁄⁄U f
)
⁄⁄f g
;
⁄⁄g h
}
€€ 	
public
›› 
void
›› 
DeclareSignal
›› !
(
››! "
Type
ﬁﬁ 

signalType
ﬁﬁ 
,
ﬁﬁ 
object
ﬁﬁ #

identifier
ﬁﬁ$ .
=
ﬁﬁ/ 0
null
ﬁﬁ1 5
,
ﬁﬁ5 6+
SignalMissingHandlerResponses
ﬁﬁ7 T
?
ﬁﬁT U$
missingHandlerResponse
ﬁﬁV l
=
ﬁﬁm n
null
ﬁﬁo s
,
ﬁﬁs t
bool
ﬁﬁu y
?
ﬁﬁy z

forceAsyncﬁﬁ{ Ö
=ﬁﬁÜ á
nullﬁﬁà å
,ﬁﬁå ç
intﬁﬁé ë
?ﬁﬁë í!
asyncTickPriorityﬁﬁì §
=ﬁﬁ• ¶
nullﬁﬁß ´
)ﬁﬁ´ ¨
{
ﬂﬂ 	
var
‡‡ 
bindInfo
‡‡ 
=
‡‡ 
SignalExtensions
‡‡ +
.
‡‡+ ,4
&CreateDefaultSignalDeclarationBindInfo
‡‡, R
(
‡‡R S

_container
‡‡S ]
,
‡‡] ^

signalType
‡‡_ i
)
‡‡i j
;
‡‡j k
bindInfo
‚‚ 
.
‚‚ 

Identifier
‚‚ 
=
‚‚  !

identifier
‚‚" ,
;
‚‚, -
if
‰‰ 
(
‰‰ $
missingHandlerResponse
‰‰ &
.
‰‰& '
HasValue
‰‰' /
)
‰‰/ 0
{
ÂÂ 
bindInfo
ÊÊ 
.
ÊÊ 

Identifier
ÊÊ #
=
ÊÊ$ %$
missingHandlerResponse
ÊÊ& <
.
ÊÊ< =
Value
ÊÊ= B
;
ÊÊB C
}
ÁÁ 
if
ÈÈ 
(
ÈÈ 

forceAsync
ÈÈ 
.
ÈÈ 
HasValue
ÈÈ #
)
ÈÈ# $
{
ÍÍ 
bindInfo
ÎÎ 
.
ÎÎ 
RunAsync
ÎÎ !
=
ÎÎ" #

forceAsync
ÎÎ$ .
.
ÎÎ. /
Value
ÎÎ/ 4
;
ÎÎ4 5
}
ÏÏ 
if
ÓÓ 
(
ÓÓ 
asyncTickPriority
ÓÓ !
.
ÓÓ! "
HasValue
ÓÓ" *
)
ÓÓ* +
{
ÔÔ 
bindInfo
 
.
 
TickPriority
 %
=
& '
asyncTickPriority
( 9
.
9 :
Value
: ?
;
? @
}
ÒÒ 
var
ÛÛ 
declaration
ÛÛ 
=
ÛÛ '
_signalDeclarationFactory
ÛÛ 7
.
ÛÛ7 8
Create
ÛÛ8 >
(
ÛÛ> ?
bindInfo
ÛÛ? G
)
ÛÛG H
;
ÛÛH I"
_localDeclarationMap
ıı  
.
ıı  !
Add
ıı! $
(
ıı$ %
declaration
ıı% 0
.
ıı0 1
	BindingId
ıı1 :
,
ıı: ;
declaration
ıı< G
)
ııG H
;
ııH I
}
ˆˆ 	
SignalDeclaration
¯¯ 
GetDeclaration
¯¯ (
(
¯¯( )
Type
¯¯) -

signalType
¯¯. 8
,
¯¯8 9
object
¯¯: @

identifier
¯¯A K
,
¯¯K L
bool
¯¯M Q 
requireDeclaration
¯¯R d
)
¯¯d e
{
˘˘ 	
return
˙˙ 
GetDeclaration
˙˙ !
(
˙˙! "
new
˙˙" %
	BindingId
˙˙& /
(
˙˙/ 0

signalType
˙˙0 :
,
˙˙: ;

identifier
˙˙< F
)
˙˙F G
,
˙˙G H 
requireDeclaration
˙˙I [
)
˙˙[ \
;
˙˙\ ]
}
˚˚ 	
SignalDeclaration
˝˝ 
GetDeclaration
˝˝ (
(
˝˝( )
	BindingId
˝˝) 2
signalId
˝˝3 ;
,
˝˝; <
bool
˝˝= A 
requireDeclaration
˝˝B T
)
˝˝T U
{
˛˛ 	
SignalDeclaration
ˇˇ 
handler
ˇˇ %
;
ˇˇ% &
if
ÅÅ 
(
ÅÅ "
_localDeclarationMap
ÅÅ $
.
ÅÅ$ %
TryGetValue
ÅÅ% 0
(
ÅÅ0 1
signalId
ÅÅ1 9
,
ÅÅ9 :
out
ÅÅ; >
handler
ÅÅ? F
)
ÅÅF G
)
ÅÅG H
{
ÇÇ 
return
ÉÉ 
handler
ÉÉ 
;
ÉÉ 
}
ÑÑ 
if
ÜÜ 
(
ÜÜ 

_parentBus
ÜÜ 
!=
ÜÜ 
null
ÜÜ "
)
ÜÜ" #
{
áá 
return
àà 

_parentBus
àà !
.
àà! "
GetDeclaration
àà" 0
(
àà0 1
signalId
àà1 9
,
àà9 : 
requireDeclaration
àà; M
)
ààM N
;
ààN O
}
ââ 
if
ãã 
(
ãã  
requireDeclaration
ãã "
)
ãã" #
{
åå 
throw
çç 
Assert
çç 
.
çç 
CreateException
çç ,
(
çç, -
$str
çç- M
,
ççM N
signalId
ççO W
)
ççW X
;
ççX Y
}
éé 
return
êê 
null
êê 
;
êê 
}
ëë 	
}
íí 
}ìì æ"
™C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\AddToGameObjectComponentProviders\AddToExistingGameObjectComponentProvider.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 4
(AddToExistingGameObjectComponentProvider 9
:: ;0
$AddToGameObjectComponentProviderBase< `
{ 
readonly 

GameObject 
_gameObject '
;' (
public 4
(AddToExistingGameObjectComponentProvider 7
(7 8

GameObject 

gameObject !
,! "
DiContainer# .
	container/ 8
,8 9
Type: >
componentType? L
,L M
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6
object7 =
concreteIdentifier> P
,P Q
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
: 
base 
( 
	container 
, 
componentType +
,+ ,
extraArguments- ;
,; <
concreteIdentifier= O
,O P
instantiateCallbackQ d
)d e
{ 	
_gameObject 
= 

gameObject $
;$ %
} 	
	protected 
override 
bool 
ShouldToggleActive  2
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
	protected   
override   

GameObject   %
GetGameObject  & 3
(  3 4
InjectContext  4 A
context  B I
)  I J
{!! 	
return"" 
_gameObject"" 
;"" 
}## 	
}$$ 
[&& 
NoReflectionBaking&& 
]&& 
public'' 

class'' :
.AddToExistingGameObjectComponentProviderGetter'' ?
:''@ A0
$AddToGameObjectComponentProviderBase''B f
{(( 
readonly)) 
Func)) 
<)) 
InjectContext)) #
,))# $

GameObject))% /
>))/ 0
_gameObjectGetter))1 B
;))B C
public++ :
.AddToExistingGameObjectComponentProviderGetter++ =
(++= >
Func,, 
<,, 
InjectContext,, 
,,, 

GameObject,,  *
>,,* +
gameObjectGetter,,, <
,,,< =
DiContainer,,> I
	container,,J S
,,,S T
Type,,U Y
componentType,,Z g
,,,g h
List-- 
<-- 
TypeValuePair-- 
>-- 
extraArguments--  .
,--. /
object--0 6
concreteIdentifier--7 I
,--I J
Action.. 
<.. 
InjectContext..  
,..  !
object.." (
>..( )
instantiateCallback..* =
)..= >
:// 
base// 
(// 
	container// 
,// 
componentType// +
,//+ ,
extraArguments//- ;
,//; <
concreteIdentifier//= O
,//O P
instantiateCallback//Q d
)//d e
{00 	
_gameObjectGetter11 
=11 
gameObjectGetter11  0
;110 1
}22 	
	protected77 
override77 
bool77 
ShouldToggleActive77  2
{88 	
get99 
{99 
return99 
false99 
;99 
}99  !
}:: 	
	protected<< 
override<< 

GameObject<< %
GetGameObject<<& 3
(<<3 4
InjectContext<<4 A
context<<B I
)<<I J
{== 	
var>> 
gameObj>> 
=>> 
_gameObjectGetter>> +
(>>+ ,
context>>, 3
)>>3 4
;>>4 5
Assert?? 
.?? 
	IsNotNull?? 
(?? 
gameObj?? $
,??$ %
$str	??& è
)
??è ê
;
??ê ë
return@@ 
gameObj@@ 
;@@ 
}AA 	
}BB 
}CC ‰
dC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\CopyNonLazyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
CopyNonLazyBinder "
:# $
NonLazyBinder% 2
{ 
List 
< 
BindInfo 
> 
_secondaryBindInfos *
;* +
public

 
CopyNonLazyBinder

  
(

  !
BindInfo

! )
bindInfo

* 2
)

2 3
: 
base 
( 
bindInfo 
) 
{ 	
} 	
internal 
void $
AddSecondaryCopyBindInfo .
(. /
BindInfo/ 7
bindInfo8 @
)@ A
{ 	
if 
( 
_secondaryBindInfos #
==$ &
null' +
)+ ,
{ 
_secondaryBindInfos #
=$ %
new& )
List* .
<. /
BindInfo/ 7
>7 8
(8 9
)9 :
;: ;
} 
_secondaryBindInfos 
.  
Add  #
(# $
bindInfo$ ,
), -
;- .
} 	
public 
NonLazyBinder $
CopyIntoAllSubContainers 5
(5 6
)6 7
{ 	 
SetInheritanceMethod  
(  !%
BindingInheritanceMethods! :
.: ;
CopyIntoAll; F
)F G
;G H
return 
this 
; 
} 	
public!! 
NonLazyBinder!! '
CopyIntoDirectSubContainers!! 8
(!!8 9
)!!9 :
{"" 	 
SetInheritanceMethod##  
(##  !%
BindingInheritanceMethods##! :
.##: ;
CopyDirectOnly##; I
)##I J
;##J K
return$$ 
this$$ 
;$$ 
}%% 	
public(( 
NonLazyBinder(( $
MoveIntoAllSubContainers(( 5
(((5 6
)((6 7
{)) 	 
SetInheritanceMethod**  
(**  !%
BindingInheritanceMethods**! :
.**: ;
MoveIntoAll**; F
)**F G
;**G H
return++ 
this++ 
;++ 
},, 	
public// 
NonLazyBinder// '
MoveIntoDirectSubContainers// 8
(//8 9
)//9 :
{00 	 
SetInheritanceMethod11  
(11  !%
BindingInheritanceMethods11! :
.11: ;
MoveDirectOnly11; I
)11I J
;11J K
return22 
this22 
;22 
}33 	
void55  
SetInheritanceMethod55 !
(55! "%
BindingInheritanceMethods55" ;
method55< B
)55B C
{66 	
BindInfo77 
.77 $
BindingInheritanceMethod77 -
=77. /
method770 6
;776 7
if99 
(99 
_secondaryBindInfos99 #
!=99$ &
null99' +
)99+ ,
{:: 
foreach;; 
(;; 
var;; 
secondaryBindInfo;; .
in;;/ 1
_secondaryBindInfos;;2 E
);;E F
{<< 
secondaryBindInfo== %
.==% &$
BindingInheritanceMethod==& >
===? @
method==A G
;==G H
}>> 
}?? 
}@@ 	
}AA 
}BB â
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ActionInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class 
ActionInstaller  
:! "
	Installer# ,
<, -
ActionInstaller- <
>< =
{ 
readonly 
Action 
< 
DiContainer #
># $
_installMethod% 3
;3 4
public		 
ActionInstaller		 
(		 
Action		 %
<		% &
DiContainer		& 1
>		1 2
installMethod		3 @
)		@ A
{

 	
_installMethod 
= 
installMethod *
;* +
} 	
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
_installMethod 
( 
	Container $
)$ %
;% &
} 	
} 
} »

fC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\BindInfo\MemoryPoolBindInfo.cs
	namespace 	
Zenject
 
{ 
public 

enum 
PoolExpandMethods !
{ 

OneAtATime 
, 
Double 
, 
Disabled 
} 
[

 
NoReflectionBaking

 
]

 
public 

class 
MemoryPoolBindInfo #
{ 
public 
MemoryPoolBindInfo !
(! "
)" #
{ 	
ExpandMethod 
= 
PoolExpandMethods ,
., -

OneAtATime- 7
;7 8
MaxSize 
= 
int 
. 
MaxValue "
;" #
} 	
public 
PoolExpandMethods  
ExpandMethod! -
{ 	
get 
; 
set 
; 
} 	
public 
int 
InitialSize 
{ 	
get 
; 
set 
; 
} 	
public 
int 
MaxSize 
{ 	
get 
; 
set 
; 
}   	
}!! 
}"" É
_C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ExecutionOrderInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class #
ExecutionOrderInstaller (
:) *
	Installer+ 4
<4 5
List5 9
<9 :
Type: >
>> ?
,? @#
ExecutionOrderInstallerA X
>X Y
{ 
List 
< 
Type 
> 

_typeOrder 
; 
public

 #
ExecutionOrderInstaller

 &
(

& '
List

' +
<

+ ,
Type

, 0
>

0 1
	typeOrder

2 ;
)

; <
{ 	

_typeOrder 
= 
	typeOrder "
;" #
} 	
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
int 
order 
= 
- 
$num 
* 

_typeOrder '
.' (
Count( -
;- .
foreach 
( 
var 
type 
in  

_typeOrder! +
)+ ,
{ 
	Container 
. 
BindExecutionOrder ,
(, -
type- 1
,1 2
order3 8
)8 9
;9 :
order 
++ 
; 
} 
} 	
} 
} ¡6
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder1.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
	TContract4 =
>= >
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
ActionE K
<K L
DiContainerL W
,W X
TParam1Y `
>` a
installerMethodb q
)q r
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
>; <
(< =
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H!
ByNewGameObjectMethodI ^
(^ _
Action 
< 
DiContainer 
, 
TParam1  '
>' (
installerMethod) 8
)8 9
{   	
var!! 
gameObjectInfo!! 
=!!  
new!!! $(
GameObjectCreationParameters!!% A
(!!A B
)!!B C
;!!C D
ProviderFunc## 
=## 
($$ 
	container$$ 
)$$ 
=>$$ 
new$$ "*
SubContainerDependencyProvider$$# A
($$A B
ContractType%%  
,%%  !
SubIdentifier%%" /
,%%/ 0
new&& 4
(SubContainerCreatorByNewGameObjectMethod&& @
<&&@ A
TParam1&&A H
>&&H I
(&&I J
	container'' !
,''! "
gameObjectInfo''# 1
,''1 2
installerMethod''3 B
)''B C
,''C D
false''E J
)''J K
;''K L
return)) 
new)) E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder)) P
())P Q
BindInfo))Q Y
,))Y Z
gameObjectInfo))[ i
)))i j
;))j k
}** 	
public,, E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder,, H
ByNewPrefabMethod,,I Z
(,,Z [
UnityEngine-- 
.-- 
Object-- 
prefab-- %
,--% &
Action--' -
<--- .
DiContainer--. 9
,--9 :
TParam1--; B
>--B C
installerMethod--D S
)--S T
{.. 	
BindingUtil// 
.// 
AssertIsValidPrefab// +
(//+ ,
prefab//, 2
)//2 3
;//3 4
var11 
gameObjectInfo11 
=11  
new11! $(
GameObjectCreationParameters11% A
(11A B
)11B C
;11C D
ProviderFunc33 
=33 
(44 
	container44 
)44 
=>44 
new44 "*
SubContainerDependencyProvider44# A
(44A B
ContractType55  
,55  !
SubIdentifier55" /
,55/ 0
new66 0
$SubContainerCreatorByNewPrefabMethod66 <
<66< =
TParam166= D
>66D E
(66E F
	container77 !
,77! "
new88 
PrefabProvider88 *
(88* +
prefab88+ 1
)881 2
,882 3
gameObjectInfo99 &
,99& '
installerMethod99( 7
)997 8
,998 9
false99: ?
)99? @
;99@ A
return;; 
new;; E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder;; P
(;;P Q
BindInfo;;Q Y
,;;Y Z
gameObjectInfo;;[ i
);;i j
;;;j k
}<< 	
public>> E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder>> H%
ByNewPrefabResourceMethod>>I b
(>>b c
string?? 
resourcePath?? 
,??  
Action??! '
<??' (
DiContainer??( 3
,??3 4
TParam1??5 <
>??< =
installerMethod??> M
)??M N
{@@ 	
BindingUtilAA 
.AA %
AssertIsValidResourcePathAA 1
(AA1 2
resourcePathAA2 >
)AA> ?
;AA? @
varCC 
gameObjectInfoCC 
=CC  
newCC! $(
GameObjectCreationParametersCC% A
(CCA B
)CCB C
;CCC D
ProviderFuncEE 
=EE 
(FF 
	containerFF 
)FF 
=>FF 
newFF "*
SubContainerDependencyProviderFF# A
(FFA B
ContractTypeGG  
,GG  !
SubIdentifierGG" /
,GG/ 0
newHH 0
$SubContainerCreatorByNewPrefabMethodHH <
<HH< =
TParam1HH= D
>HHD E
(HHE F
	containerII !
,II! "
newJJ "
PrefabProviderResourceJJ 2
(JJ2 3
resourcePathJJ3 ?
)JJ? @
,JJ@ A
gameObjectInfoKK &
,KK& '
installerMethodKK( 7
)KK7 8
,KK8 9
falseKK: ?
)KK? @
;KK@ A
returnMM 
newMM E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderMM P
(MMP Q
BindInfoMMQ Y
,MMY Z
gameObjectInfoMM[ i
)MMi j
;MMj k
}NN 	
}PP 
}QQ ∏N
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Injection\InjectUtil.cs
	namespace 	
Zenject
 
{ 
[		 
DebuggerStepThrough		 
]		 
public

 

struct

 
TypeValuePair

 
{ 
public 
Type 
Type 
; 
public 
object 
Value 
; 
public 
TypeValuePair 
( 
Type !
type" &
,& '
object( .
value/ 4
)4 5
{ 	
Type 
= 
type 
; 
Value 
= 
value 
; 
} 	
} 
[ 
DebuggerStepThrough 
] 
public 

static 
class 

InjectUtil "
{ 
public 
static 
List 
< 
TypeValuePair (
>( )
CreateArgList* 7
(7 8
IEnumerable8 C
<C D
objectD J
>J K
argsL P
)P Q
{ 	
Assert 
. 
That 
( 
! 
args 
. 
ContainsItem *
(* +
null+ /
)/ 0
,0 1
$str	 »
)
» …
;
…  
return 
args 
. 
Select 
( 
x  
=>! #
new$ '
TypeValuePair( 5
(5 6
x6 7
.7 8
GetType8 ?
(? @
)@ A
,A B
xC D
)D E
)E F
.F G
ToListG M
(M N
)N O
;O P
} 	
public   
static   
TypeValuePair   #
CreateTypePair  $ 2
<  2 3
T  3 4
>  4 5
(  5 6
T  6 7
param  8 =
)  = >
{!! 	
return## 
new## 
TypeValuePair## $
(##$ %
param$$ 
==$$ 
null$$ 
?$$ 
typeof$$  &
($$& '
T$$' (
)$$( )
:$$* +
param$$, 1
.$$1 2
GetType$$2 9
($$9 :
)$$: ;
,$$; <
param$$= B
)$$B C
;$$C D
}%% 	
public'' 
static'' 
List'' 
<'' 
TypeValuePair'' (
>''( )!
CreateArgListExplicit''* ?
<''? @
T''@ A
>''A B
(''B C
T''C D
param''E J
)''J K
{(( 	
return)) 
new)) 
List)) 
<)) 
TypeValuePair)) )
>))) *
{** 
CreateTypePair++ 
(++ 
param++ $
)++$ %
},, 
;,, 
}-- 	
public// 
static// 
List// 
<// 
TypeValuePair// (
>//( )!
CreateArgListExplicit//* ?
<//? @
TParam1//@ G
,//G H
TParam2//I P
>//P Q
(//Q R
TParam1//R Y
param1//Z `
,//` a
TParam2//b i
param2//j p
)//p q
{00 	
return11 
new11 
List11 
<11 
TypeValuePair11 )
>11) *
{22 
CreateTypePair33 
(33 
param133 %
)33% &
,33& '
CreateTypePair44 
(44 
param244 %
)44% &
}55 
;55 
}66 	
public88 
static88 
List88 
<88 
TypeValuePair88 (
>88( )!
CreateArgListExplicit88* ?
<88? @
TParam188@ G
,88G H
TParam288I P
,88P Q
TParam388R Y
>88Y Z
(88Z [
TParam199 
param199 
,99 
TParam299 #
param299$ *
,99* +
TParam399, 3
param3994 :
)99: ;
{:: 	
return;; 
new;; 
List;; 
<;; 
TypeValuePair;; )
>;;) *
{<< 
CreateTypePair== 
(== 
param1== %
)==% &
,==& '
CreateTypePair>> 
(>> 
param2>> %
)>>% &
,>>& '
CreateTypePair?? 
(?? 
param3?? %
)??% &
}@@ 
;@@ 
}AA 	
publicCC 
staticCC 
ListCC 
<CC 
TypeValuePairCC (
>CC( )!
CreateArgListExplicitCC* ?
<CC? @
TParam1CC@ G
,CCG H
TParam2CCI P
,CCP Q
TParam3CCR Y
,CCY Z
TParam4CC[ b
>CCb c
(CCc d
TParam1DD 
param1DD 
,DD 
TParam2DD #
param2DD$ *
,DD* +
TParam3DD, 3
param3DD4 :
,DD: ;
TParam4DD< C
param4DDD J
)DDJ K
{EE 	
returnFF 
newFF 
ListFF 
<FF 
TypeValuePairFF )
>FF) *
{GG 
CreateTypePairHH 
(HH 
param1HH %
)HH% &
,HH& '
CreateTypePairII 
(II 
param2II %
)II% &
,II& '
CreateTypePairJJ 
(JJ 
param3JJ %
)JJ% &
,JJ& '
CreateTypePairKK 
(KK 
param4KK %
)KK% &
}LL 
;LL 
}MM 	
publicOO 
staticOO 
ListOO 
<OO 
TypeValuePairOO (
>OO( )!
CreateArgListExplicitOO* ?
<OO? @
TParam1OO@ G
,OOG H
TParam2OOI P
,OOP Q
TParam3OOR Y
,OOY Z
TParam4OO[ b
,OOb c
TParam5OOd k
>OOk l
(OOl m
TParam1PP 
param1PP 
,PP 
TParam2PP #
param2PP$ *
,PP* +
TParam3PP, 3
param3PP4 :
,PP: ;
TParam4PP< C
param4PPD J
,PPJ K
TParam5PPL S
param5PPT Z
)PPZ [
{QQ 	
returnRR 
newRR 
ListRR 
<RR 
TypeValuePairRR )
>RR) *
{SS 
CreateTypePairTT 
(TT 
param1TT %
)TT% &
,TT& '
CreateTypePairUU 
(UU 
param2UU %
)UU% &
,UU& '
CreateTypePairVV 
(VV 
param3VV %
)VV% &
,VV& '
CreateTypePairWW 
(WW 
param4WW %
)WW% &
,WW& '
CreateTypePairXX 
(XX 
param5XX %
)XX% &
}YY 
;YY 
}ZZ 	
public\\ 
static\\ 
List\\ 
<\\ 
TypeValuePair\\ (
>\\( )!
CreateArgListExplicit\\* ?
<\\? @
TParam1\\@ G
,\\G H
TParam2\\I P
,\\P Q
TParam3\\R Y
,\\Y Z
TParam4\\[ b
,\\b c
TParam5\\d k
,\\k l
TParam6\\m t
>\\t u
(\\u v
TParam1]] 
param1]] 
,]] 
TParam2]] #
param2]]$ *
,]]* +
TParam3]], 3
param3]]4 :
,]]: ;
TParam4]]< C
param4]]D J
,]]J K
TParam5]]L S
param5]]T Z
,]]Z [
TParam6]]\ c
param6]]d j
)]]j k
{^^ 	
return__ 
new__ 
List__ 
<__ 
TypeValuePair__ )
>__) *
{`` 
CreateTypePairaa 
(aa 
param1aa %
)aa% &
,aa& '
CreateTypePairbb 
(bb 
param2bb %
)bb% &
,bb& '
CreateTypePaircc 
(cc 
param3cc %
)cc% &
,cc& '
CreateTypePairdd 
(dd 
param4dd %
)dd% &
,dd& '
CreateTypePairee 
(ee 
param5ee %
)ee% &
,ee& '
CreateTypePairff 
(ff 
param6ff %
)ff% &
}gg 
;gg 
}hh 	
publicll 
staticll 
boolll 
PopValueWithTypell +
(ll+ ,
Listmm 
<mm 
TypeValuePairmm 
>mm 
extraArgMapmm  +
,mm+ ,
Typemm- 1
injectedFieldTypemm2 C
,mmC D
outmmE H
objectmmI O
valuemmP U
)mmU V
{nn 	
foroo 
(oo 
intoo 
ioo 
=oo 
$numoo 
;oo 
ioo 
<oo 
extraArgMapoo  +
.oo+ ,
Countoo, 1
;oo1 2
ioo3 4
++oo4 6
)oo6 7
{pp 
varqq 
argqq 
=qq 
extraArgMapqq %
[qq% &
iqq& '
]qq' (
;qq( )
ifss 
(ss 
argss 
.ss 
Typess 
.ss 
DerivesFromOrEqualss /
(ss/ 0
injectedFieldTypess0 A
)ssA B
)ssB C
{tt 
valueuu 
=uu 
arguu 
.uu  
Valueuu  %
;uu% &
extraArgMapvv 
.vv  
RemoveAtvv  (
(vv( )
ivv) *
)vv* +
;vv+ ,
returnww 
trueww 
;ww  
}xx 
}yy 
value{{ 
={{ 
injectedFieldType{{ %
.{{% &
GetDefaultValue{{& 5
({{5 6
){{6 7
;{{7 8
return|| 
false|| 
;|| 
}}} 	
}~~ 
} ÷
oC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\AnimatorInterfaces\AnimatorInstaller.cs
	namespace 	
Zenject
 
{ 
public 

class 
AnimatorInstaller "
:# $
	Installer% .
<. /
Animator/ 7
,7 8
AnimatorInstaller9 J
>J K
{ 
readonly 
Animator 
	_animator #
;# $
public		 
AnimatorInstaller		  
(		  !
Animator		! )
animator		* 2
)		2 3
{

 	
	_animator 
= 
animator  
;  !
} 	
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
	Container 
. 
Bind 
< $
AnimatorIkHandlerManager 3
>3 4
(4 5
)5 6
.6 7
FromNewComponentOn7 I
(I J
	_animatorJ S
.S T

gameObjectT ^
)^ _
;_ `
	Container 
. 
Bind 
< $
AnimatorIkHandlerManager 3
>3 4
(4 5
)5 6
.6 7
FromNewComponentOn7 I
(I J
	_animatorJ S
.S T

gameObjectT ^
)^ _
;_ `
} 	
} 
} ¶
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenAutoInjecter.cs
	namespace 	
Zenject
 
{ 
public 

class 
ZenAutoInjecter  
:! "
MonoBehaviour# 0
{ 
[ 	
SerializeField	 
] 
ContainerSources		 
_containerSource		 )
=		* +
ContainerSources		, <
.		< =
SearchHierarchy		= L
;		L M
bool 
_hasInjected 
; 
public 
ContainerSources 
ContainerSource  /
{ 	
get 
{ 
return 
_containerSource )
;) *
}+ ,
set 
{ 
_containerSource "
=# $
value% *
;* +
}, -
} 	
[ 	
Inject	 
] 
public 
void 
	Construct 
( 
) 
{ 	
if 
( 
! 
_hasInjected 
) 
{ 
throw 
Assert 
. 
CreateException ,
(, -
$str	 Ø
)
Ø ∞
;
∞ ±
} 
} 	
public 
void 
Awake 
( 
) 
{ 	
_hasInjected   
=   
true   
;    
LookupContainer!! 
(!! 
)!! 
.!! 
InjectGameObject!! .
(!!. /

gameObject!!/ 9
)!!9 :
;!!: ;
}"" 	
DiContainer$$ 
LookupContainer$$ #
($$# $
)$$$ %
{%% 	
if&& 
(&& 
_containerSource&&  
==&&! #
ContainerSources&&$ 4
.&&4 5
ProjectContext&&5 C
)&&C D
{'' 
return(( 
ProjectContext(( %
.((% &
Instance((& .
.((. /
	Container((/ 8
;((8 9
})) 
if++ 
(++ 
_containerSource++  
==++! #
ContainerSources++$ 4
.++4 5
SceneContext++5 A
)++A B
{,, 
return-- '
GetContainerForCurrentScene-- 2
(--2 3
)--3 4
;--4 5
}.. 
Assert00 
.00 
IsEqual00 
(00 
_containerSource00 +
,00+ ,
ContainerSources00- =
.00= >
SearchHierarchy00> M
)00M N
;00N O
var22 
parentContext22 
=22 
	transform22  )
.22) * 
GetComponentInParent22* >
<22> ?
Context22? F
>22F G
(22G H
)22H I
;22I J
if44 
(44 
parentContext44 
!=44  
null44! %
)44% &
{55 
return66 
parentContext66 $
.66$ %
	Container66% .
;66. /
}77 
return99 '
GetContainerForCurrentScene99 .
(99. /
)99/ 0
;990 1
}:: 	
DiContainer<< '
GetContainerForCurrentScene<< /
(<</ 0
)<<0 1
{== 	
return>> 
ProjectContext>> !
.>>! "
Instance>>" *
.>>* +
	Container>>+ 4
.>>4 5
Resolve>>5 <
<>>< = 
SceneContextRegistry>>= Q
>>>Q R
(>>R S
)>>S T
.??  
GetContainerForScene?? %
(??% &

gameObject??& 0
.??0 1
scene??1 6
)??6 7
;??7 8
}@@ 	
publicBB 
enumBB 
ContainerSourcesBB $
{CC 	
SceneContextDD 
,DD 
ProjectContextEE 
,EE 
SearchHierarchyFF 
}GG 	
}HH 
}II ÇQ
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder0.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
	TContract+ 4
>4 5
: 	)
FactorySubContainerBinderBase
 '
<' (
	TContract( 1
>1 2
{		 
public

 %
FactorySubContainerBinder

 (
(

( )
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
,Y Z
object[ a
subIdentifierb o
)o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
ActionE K
<K L
DiContainerL W
>W X
installerMethodY h
)h i
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
(3 4
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H!
ByNewGameObjectMethodI ^
(^ _
Action_ e
<e f
DiContainerf q
>q r
installerMethod	s Ç
)
Ç É
{   	
var!! 
gameObjectInfo!! 
=!!  
new!!! $(
GameObjectCreationParameters!!% A
(!!A B
)!!B C
;!!C D
ProviderFunc## 
=## 
($$ 
	container$$ 
)$$ 
=>$$ 
new$$ "*
SubContainerDependencyProvider$$# A
($$A B
ContractType%%  
,%%  !
SubIdentifier%%" /
,%%/ 0
new&& 4
(SubContainerCreatorByNewGameObjectMethod&& @
(&&@ A
	container'' !
,''! "
gameObjectInfo''# 1
,''1 2
installerMethod''3 B
)''B C
,''C D
false''E J
)''J K
;''K L
return)) 
new)) E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder)) P
())P Q
BindInfo))Q Y
,))Y Z
gameObjectInfo))[ i
)))i j
;))j k
}** 	
public,, E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder,, H
ByNewPrefabMethod,,I Z
(,,Z [
UnityEngine-- 
.-- 
Object-- 
prefab-- %
,--% &
Action--' -
<--- .
DiContainer--. 9
>--9 :
installerMethod--; J
)--J K
{.. 	
BindingUtil// 
.// 
AssertIsValidPrefab// +
(//+ ,
prefab//, 2
)//2 3
;//3 4
var11 
gameObjectInfo11 
=11  
new11! $(
GameObjectCreationParameters11% A
(11A B
)11B C
;11C D
ProviderFunc33 
=33 
(44 
	container44 
)44 
=>44 
new44 "*
SubContainerDependencyProvider44# A
(44A B
ContractType55  
,55  !
SubIdentifier55" /
,55/ 0
new66 0
$SubContainerCreatorByNewPrefabMethod66 <
(66< =
	container77 !
,77! "
new88 
PrefabProvider88 *
(88* +
prefab88+ 1
)881 2
,882 3
gameObjectInfo99 &
,99& '
installerMethod99( 7
)997 8
,998 9
false99: ?
)99? @
;99@ A
return;; 
new;; E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder;; P
(;;P Q
BindInfo;;Q Y
,;;Y Z
gameObjectInfo;;[ i
);;i j
;;;j k
}<< 	
public>> E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder>> H%
ByNewPrefabResourceMethod>>I b
(>>b c
string?? 
resourcePath?? 
,??  
Action??! '
<??' (
DiContainer??( 3
>??3 4
installerMethod??5 D
)??D E
{@@ 	
BindingUtilAA 
.AA %
AssertIsValidResourcePathAA 1
(AA1 2
resourcePathAA2 >
)AA> ?
;AA? @
varCC 
gameObjectInfoCC 
=CC  
newCC! $(
GameObjectCreationParametersCC% A
(CCA B
)CCB C
;CCC D
ProviderFuncEE 
=EE 
(FF 
	containerFF 
)FF 
=>FF 
newFF "*
SubContainerDependencyProviderFF# A
(FFA B
ContractTypeGG  
,GG  !
SubIdentifierGG" /
,GG/ 0
newHH 0
$SubContainerCreatorByNewPrefabMethodHH <
(HH< =
	containerII !
,II! "
newJJ "
PrefabProviderResourceJJ 2
(JJ2 3
resourcePathJJ3 ?
)JJ? @
,JJ@ A
gameObjectInfoKK &
,KK& '
installerMethodKK( 7
)KK7 8
,KK8 9
falseKK: ?
)KK? @
;KK@ A
returnMM 
newMM E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderMM P
(MMP Q
BindInfoMMQ Y
,MMY Z
gameObjectInfoMM[ i
)MMi j
;MMj k
}NN 	
[PP 	
SystemPP	 
.PP 
ObsoletePP 
(PP 
$str	PP ê
)
PPê ë
]
PPë í
publicQQ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderQQ H
ByNewPrefabQQI T
(QQT U
UnityEngineQQU `
.QQ` a
ObjectQQa g
prefabQQh n
)QQn o
{RR 	
returnSS 
ByNewContextPrefabSS %
(SS% &
prefabSS& ,
)SS, -
;SS- .
}TT 	
publicVV E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderVV H
ByNewContextPrefabVVI [
(VV[ \
UnityEngineVV\ g
.VVg h
ObjectVVh n
prefabVVo u
)VVu v
{WW 	
BindingUtilXX 
.XX 
AssertIsValidPrefabXX +
(XX+ ,
prefabXX, 2
)XX2 3
;XX3 4
varZZ 
gameObjectInfoZZ 
=ZZ  
newZZ! $(
GameObjectCreationParametersZZ% A
(ZZA B
)ZZB C
;ZZC D
ProviderFunc\\ 
=\\ 
(]] 
	container]] 
)]] 
=>]] 
new]] "*
SubContainerDependencyProvider]]# A
(]]A B
ContractType^^  
,^^  !
SubIdentifier^^" /
,^^/ 0
new__ *
SubContainerCreatorByNewPrefab__ 6
(__6 7
	container`` !
,``! "
newaa 
PrefabProvideraa *
(aa* +
prefabaa+ 1
)aa1 2
,aa2 3
gameObjectInfobb &
)bb& '
,bb' (
falsebb) .
)bb. /
;bb/ 0
returndd 
newdd E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderdd P
(ddP Q
BindInfoddQ Y
,ddY Z
gameObjectInfodd[ i
)ddi j
;ddj k
}ee 	
[gg 	
Systemgg	 
.gg 
Obsoletegg 
(gg 
$str	gg ∞
)
gg∞ ±
]
gg± ≤
publichh E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderhh H
ByNewPrefabResourcehhI \
(hh\ ]
stringhh] c
resourcePathhhd p
)hhp q
{ii 	
returnjj &
ByNewContextPrefabResourcejj -
(jj- .
resourcePathjj. :
)jj: ;
;jj; <
}kk 	
publicmm E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBindermm H&
ByNewContextPrefabResourcemmI c
(mmc d
stringmmd j
resourcePathmmk w
)mmw x
{nn 	
BindingUtiloo 
.oo %
AssertIsValidResourcePathoo 1
(oo1 2
resourcePathoo2 >
)oo> ?
;oo? @
varqq 
gameObjectInfoqq 
=qq  
newqq! $(
GameObjectCreationParametersqq% A
(qqA B
)qqB C
;qqC D
ProviderFuncss 
=ss 
(tt 
	containertt 
)tt 
=>tt 
newtt "*
SubContainerDependencyProvidertt# A
(ttA B
ContractTypeuu  
,uu  !
SubIdentifieruu" /
,uu/ 0
newvv *
SubContainerCreatorByNewPrefabvv 6
(vv6 7
	containerww !
,ww! "
newxx "
PrefabProviderResourcexx 2
(xx2 3
resourcePathxx3 ?
)xx? @
,xx@ A
gameObjectInfoyy &
)yy& '
,yy' (
falseyy) .
)yy. /
;yy/ 0
return{{ 
new{{ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder{{ P
({{P Q
BindInfo{{Q Y
,{{Y Z
gameObjectInfo{{[ i
){{i j
;{{j k
}|| 	
}~~ 
} È
[C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\IdBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
IdBinder 
{ 
BindInfo 
	_bindInfo 
; 
public 
IdBinder 
( 
BindInfo  
bindInfo! )
)) *
{		 	
	_bindInfo

 
=

 
bindInfo

  
;

  !
} 	
public 
void 
WithId 
( 
object !

identifier" ,
), -
{ 	
	_bindInfo 
. 

Identifier  
=! "

identifier# -
;- .
} 	
} 
} ñ
tC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\SignalCopyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
SignalCopyBinder !
{ 
readonly 
List 
< 
BindInfo 
> 

_bindInfos  *
;* +
public

 
SignalCopyBinder

 
(

  
)

  !
{ 	

_bindInfos 
= 
new 
List !
<! "
BindInfo" *
>* +
(+ ,
), -
;- .
} 	
public 
SignalCopyBinder 
(  
BindInfo  (
bindInfo) 1
)1 2
{ 	

_bindInfos 
= 
new 
List !
<! "
BindInfo" *
>* +
{ 
bindInfo 
} 
; 
} 	
public 
void 
AddCopyBindInfo #
(# $
BindInfo$ ,
bindInfo- 5
)5 6
{ 	

_bindInfos 
. 
Add 
( 
bindInfo #
)# $
;$ %
} 	
public 
void $
CopyIntoAllSubContainers ,
(, -
)- .
{ 	 
SetInheritanceMethod    
(    !%
BindingInheritanceMethods  ! :
.  : ;
CopyIntoAll  ; F
)  F G
;  G H
}!! 	
public$$ 
void$$ '
CopyIntoDirectSubContainers$$ /
($$/ 0
)$$0 1
{%% 	 
SetInheritanceMethod&&  
(&&  !%
BindingInheritanceMethods&&! :
.&&: ;
CopyDirectOnly&&; I
)&&I J
;&&J K
}'' 	
public** 
void** $
MoveIntoAllSubContainers** ,
(**, -
)**- .
{++ 	 
SetInheritanceMethod,,  
(,,  !%
BindingInheritanceMethods,,! :
.,,: ;
MoveIntoAll,,; F
),,F G
;,,G H
}-- 	
public00 
void00 '
MoveIntoDirectSubContainers00 /
(00/ 0
)000 1
{11 	 
SetInheritanceMethod22  
(22  !%
BindingInheritanceMethods22! :
.22: ;
MoveDirectOnly22; I
)22I J
;22J K
}33 	
void55  
SetInheritanceMethod55 !
(55! "%
BindingInheritanceMethods55" ;
method55< B
)55B C
{66 	
for77 
(77 
int77 
i77 
=77 
$num77 
;77 
i77 
<77 

_bindInfos77  *
.77* +
Count77+ 0
;770 1
i772 3
++773 5
)775 6
{88 

_bindInfos99 
[99 
i99 
]99 
.99 $
BindingInheritanceMethod99 6
=997 8
method999 ?
;99? @
}:: 
};; 	
}<< 
}== ãb
VC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\TaskUpdater.cs
	namespace 	
Zenject
 
{ 
[		 
DebuggerStepThrough		 
]		 
public

 

abstract

 
class

 
TaskUpdater

 %
<

% &
TTask

& +
>

+ ,
{ 
readonly 

LinkedList 
< 
TaskInfo $
>$ %
_tasks& ,
=- .
new/ 2

LinkedList3 =
<= >
TaskInfo> F
>F G
(G H
)H I
;I J
readonly 
List 
< 
TaskInfo 
> 
_queuedTasks  ,
=- .
new/ 2
List3 7
<7 8
TaskInfo8 @
>@ A
(A B
)B C
;C D
IEnumerable 
< 
TaskInfo 
> 
AllTasks &
{ 	
get 
{ 
return 
ActiveTasks $
.$ %
Concat% +
(+ ,
_queuedTasks, 8
)8 9
;9 :
}; <
} 	
IEnumerable 
< 
TaskInfo 
> 
ActiveTasks )
{ 	
get 
{ 
return 
_tasks 
;  
}! "
} 	
public 
void 
AddTask 
( 
TTask !
task" &
,& '
int( +
priority, 4
)4 5
{ 	
AddTaskInternal 
( 
task  
,  !
priority" *
)* +
;+ ,
} 	
void 
AddTaskInternal 
( 
TTask "
task# '
,' (
int) ,
priority- 5
)5 6
{ 	
Assert   
.   
That   
(   
!   
AllTasks   !
.  ! "
Select  " (
(  ( )
x  ) *
=>  + -
x  . /
.  / 0
Task  0 4
)  4 5
.  5 6
ContainsItem  6 B
(  B C
task  C G
)  G H
,  H I
$str!! D
+!!E F
task!!G K
.!!K L
GetType!!L S
(!!S T
)!!T U
.!!U V
FullName!!V ^
+!!_ `
$str!!a d
)!!d e
;!!e f
_queuedTasks&& 
.&& 
Add&& 
(&& 
new&&  
TaskInfo&&! )
(&&) *
task&&* .
,&&. /
priority&&0 8
)&&8 9
)&&9 :
;&&: ;
}'' 	
public)) 
void)) 

RemoveTask)) 
()) 
TTask)) $
task))% )
)))) *
{** 	
var++ 
info++ 
=++ 
AllTasks++ 
.++  
Where++  %
(++% &
x++& '
=>++( *
ReferenceEquals+++ :
(++: ;
x++; <
.++< =
Task++= A
,++A B
task++C G
)++G H
)++H I
.++I J
SingleOrDefault++J Y
(++Y Z
)++Z [
;++[ \
Assert-- 
.-- 
	IsNotNull-- 
(-- 
info-- !
,--! "
$str--# `
+--a b
task--c g
.--g h
GetType--h o
(--o p
)--p q
.--q r
Name--r v
)--v w
;--w x
Assert// 
.// 
That// 
(// 
!// 
info// 
.// 
	IsRemoved// '
,//' (
$str//) N
+//O P
task//Q U
.//U V
GetType//V ]
(//] ^
)//^ _
.//_ `
Name//` d
)//d e
;//e f
info00 
.00 
	IsRemoved00 
=00 
true00 !
;00! "
}11 	
public33 
void33 
OnFrameStart33  
(33  !
)33! "
{44 	
AddQueuedTasks66 
(66 
)66 
;66 
}77 	
public99 
void99 
	UpdateAll99 
(99 
)99 
{:: 	
UpdateRange;; 
(;; 
int;; 
.;; 
MinValue;; $
,;;$ %
int;;& )
.;;) *
MaxValue;;* 2
);;2 3
;;;3 4
}<< 	
public>> 
void>> 
UpdateRange>> 
(>>  
int>>  #
minPriority>>$ /
,>>/ 0
int>>1 4
maxPriority>>5 @
)>>@ A
{?? 	
var@@ 
node@@ 
=@@ 
_tasks@@ 
.@@ 
First@@ #
;@@# $
whileBB 
(BB 
nodeBB 
!=BB 
nullBB 
)BB  
{CC 
varDD 
nextDD 
=DD 
nodeDD 
.DD  
NextDD  $
;DD$ %
varEE 
taskInfoEE 
=EE 
nodeEE #
.EE# $
ValueEE$ )
;EE) *
ifHH 
(HH 
!HH 
taskInfoHH 
.HH 
	IsRemovedHH '
&&HH( *
taskInfoHH+ 3
.HH3 4
PriorityHH4 <
>=HH= ?
minPriorityHH@ K
&&II 
(II 
maxPriorityII #
==II$ &
intII' *
.II* +
MaxValueII+ 3
||II4 6
taskInfoII7 ?
.II? @
PriorityII@ H
<III J
maxPriorityIIK V
)IIV W
)IIW X
{JJ 

UpdateItemKK 
(KK 
taskInfoKK '
.KK' (
TaskKK( ,
)KK, -
;KK- .
}LL 
nodeNN 
=NN 
nextNN 
;NN 
}OO 
ClearRemovedTasksQQ 
(QQ 
_tasksQQ $
)QQ$ %
;QQ% &
}RR 	
voidTT 
ClearRemovedTasksTT 
(TT 

LinkedListTT )
<TT) *
TaskInfoTT* 2
>TT2 3
tasksTT4 9
)TT9 :
{UU 	
varVV 
nodeVV 
=VV 
tasksVV 
.VV 
FirstVV "
;VV" #
whileXX 
(XX 
nodeXX 
!=XX 
nullXX 
)XX  
{YY 
varZZ 
nextZZ 
=ZZ 
nodeZZ 
.ZZ  
NextZZ  $
;ZZ$ %
var[[ 
info[[ 
=[[ 
node[[ 
.[[  
Value[[  %
;[[% &
if]] 
(]] 
info]] 
.]] 
	IsRemoved]] "
)]]" #
{^^ 
tasks`` 
.`` 
Remove``  
(``  !
node``! %
)``% &
;``& '
}aa 
nodecc 
=cc 
nextcc 
;cc 
}dd 
}ee 	
voidgg 
AddQueuedTasksgg 
(gg 
)gg 
{hh 	
forii 
(ii 
intii 
iii 
=ii 
$numii 
;ii 
iii 
<ii 
_queuedTasksii  ,
.ii, -
Countii- 2
;ii2 3
iii4 5
++ii5 7
)ii7 8
{jj 
varkk 
taskkk 
=kk 
_queuedTaskskk '
[kk' (
ikk( )
]kk) *
;kk* +
ifmm 
(mm 
!mm 
taskmm 
.mm 
	IsRemovedmm #
)mm# $
{nn 
InsertTaskSortedoo $
(oo$ %
taskoo% )
)oo) *
;oo* +
}pp 
}qq 
_queuedTasksrr 
.rr 
Clearrr 
(rr 
)rr  
;rr  !
}ss 	
voiduu 
InsertTaskSorteduu 
(uu 
TaskInfouu &
taskuu' +
)uu+ ,
{vv 	
forww 
(ww 
varww 
currentww 
=ww 
_tasksww %
.ww% &
Firstww& +
;ww+ ,
currentww- 4
!=ww5 7
nullww8 <
;ww< =
currentww> E
=wwF G
currentwwH O
.wwO P
NextwwP T
)wwT U
{xx 
ifyy 
(yy 
currentyy 
.yy 
Valueyy !
.yy! "
Priorityyy" *
>yy+ ,
taskyy- 1
.yy1 2
Priorityyy2 :
)yy: ;
{zz 
_tasks{{ 
.{{ 
	AddBefore{{ $
({{$ %
current{{% ,
,{{, -
task{{. 2
){{2 3
;{{3 4
return|| 
;|| 
}}} 
}~~ 
_tasks
ÄÄ 
.
ÄÄ 
AddLast
ÄÄ 
(
ÄÄ 
task
ÄÄ 
)
ÄÄ  
;
ÄÄ  !
}
ÅÅ 	
	protected
ÉÉ 
abstract
ÉÉ 
void
ÉÉ 

UpdateItem
ÉÉ  *
(
ÉÉ* +
TTask
ÉÉ+ 0
task
ÉÉ1 5
)
ÉÉ5 6
;
ÉÉ6 7
class
ÖÖ 
TaskInfo
ÖÖ 
{
ÜÜ 	
public
áá 
TTask
áá 
Task
áá 
;
áá 
public
àà 
int
àà 
Priority
àà 
;
àà  
public
ââ 
bool
ââ 
	IsRemoved
ââ !
;
ââ! "
public
ãã 
TaskInfo
ãã 
(
ãã 
TTask
ãã !
task
ãã" &
,
ãã& '
int
ãã( +
priority
ãã, 4
)
ãã4 5
{
åå 
Task
çç 
=
çç 
task
çç 
;
çç 
Priority
éé 
=
éé 
priority
éé #
;
éé# $
}
èè 
}
êê 	
}
ëë 
public
ìì 

class
ìì "
TickablesTaskUpdater
ìì %
:
ìì& '
TaskUpdater
ìì( 3
<
ìì3 4
	ITickable
ìì4 =
>
ìì= >
{
îî 
	protected
ïï 
override
ïï 
void
ïï 

UpdateItem
ïï  *
(
ïï* +
	ITickable
ïï+ 4
task
ïï5 9
)
ïï9 :
{
ññ 	
using
õõ 
(
õõ 
ProfileBlock
õõ 
.
õõ  
Start
õõ  %
(
õõ% &
$str
õõ& 2
,
õõ2 3
task
õõ4 8
.
õõ8 9
GetType
õõ9 @
(
õõ@ A
)
õõA B
)
õõB C
)
õõC D
{
ùù 
task
ûû 
.
ûû 
Tick
ûû 
(
ûû 
)
ûû 
;
ûû 
}
üü 
}
†† 	
}
°° 
public
££ 

class
££ &
LateTickablesTaskUpdater
££ )
:
££* +
TaskUpdater
££, 7
<
££7 8
ILateTickable
££8 E
>
££E F
{
§§ 
	protected
•• 
override
•• 
void
•• 

UpdateItem
••  *
(
••* +
ILateTickable
••+ 8
task
••9 =
)
••= >
{
¶¶ 	
using
´´ 
(
´´ 
ProfileBlock
´´ 
.
´´  
Start
´´  %
(
´´% &
$str
´´& 6
,
´´6 7
task
´´8 <
.
´´< =
GetType
´´= D
(
´´D E
)
´´E F
)
´´F G
)
´´G H
{
≠≠ 
task
ÆÆ 
.
ÆÆ 
LateTick
ÆÆ 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ  
}
ØØ 
}
∞∞ 	
}
±± 
public
≥≥ 

class
≥≥ '
FixedTickablesTaskUpdater
≥≥ *
:
≥≥+ ,
TaskUpdater
≥≥- 8
<
≥≥8 9
IFixedTickable
≥≥9 G
>
≥≥G H
{
¥¥ 
	protected
µµ 
override
µµ 
void
µµ 

UpdateItem
µµ  *
(
µµ* +
IFixedTickable
µµ+ 9
task
µµ: >
)
µµ> ?
{
∂∂ 	
using
ªª 
(
ªª 
ProfileBlock
ªª 
.
ªª  
Start
ªª  %
(
ªª% &
$str
ªª& 7
,
ªª7 8
task
ªª9 =
.
ªª= >
GetType
ªª> E
(
ªªE F
)
ªªF G
)
ªªG H
)
ªªH I
{
ΩΩ 
task
ææ 
.
ææ 
	FixedTick
ææ 
(
ææ 
)
ææ  
;
ææ  !
}
øø 
}
¿¿ 	
}
¡¡ 
}¬¬ ¬
aC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodProviderSimple.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class  
MethodProviderSimple %
<% &
TReturn& -
>- .
:/ 0
	IProvider1 :
{		 
readonly

 
Func

 
<

 
TReturn

 
>

 
_method

 &
;

& '
public  
MethodProviderSimple #
(# $
Func$ (
<( )
TReturn) 0
>0 1
method2 8
)8 9
{ 	
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{ 	
return 
typeof 
( 
TReturn !
)! "
;" #
} 	
public   
void   *
GetAllInstancesWithInjectSplit   2
(  2 3
InjectContext!! 
context!! !
,!!! "
List!!# '
<!!' (
TypeValuePair!!( 5
>!!5 6
args!!7 ;
,!!; <
out!!= @
Action!!A G
injectAction!!H T
,!!T U
List!!V Z
<!!Z [
object!![ a
>!!a b
buffer!!c i
)!!i j
{"" 	
Assert## 
.## 
IsEmpty## 
(## 
args## 
)##  
;##  !
Assert$$ 
.$$ 
	IsNotNull$$ 
($$ 
context$$ $
)$$$ %
;$$% &
Assert&& 
.&& 
That&& 
(&& 
typeof&& 
(&& 
TReturn&& &
)&&& '
.&&' (
DerivesFromOrEqual&&( :
(&&: ;
context&&; B
.&&B C

MemberType&&C M
)&&M N
)&&N O
;&&O P
injectAction(( 
=(( 
null(( 
;((  
buffer)) 
.)) 
Add)) 
()) 
_method)) 
()) 
)))  
)))  !
;))! "
}** 	
}++ 
},, ∆
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder0.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

class 
FactoryFromBinder "
<" #
	TContract# ,
>, -
:. /!
FactoryFromBinderBase0 E
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )
FromResolveGetter* ;
<; <
TObj< @
>@ A
(A B
FuncB F
<F G
TObjG K
,K L
	TContractM V
>V W
methodX ^
)^ _
{ 	
return 
FromResolveGetter $
<$ %
TObj% )
>) *
(* +
null+ /
,/ 0
method1 7
)7 8
;8 9
} 	
public &
ConditionCopyNonLazyBinder )
FromResolveGetter* ;
<; <
TObj< @
>@ A
(A B
object 
subIdentifier  
,  !
Func" &
<& '
TObj' +
,+ ,
	TContract- 6
>6 7
method8 >
)> ?
{ 	
return 
FromResolveGetter $
<$ %
TObj% )
>) *
(* +
subIdentifier+ 8
,8 9
method: @
,@ A
InjectSourcesB O
.O P
AnyP S
)S T
;T U
} 	
public &
ConditionCopyNonLazyBinder )
FromResolveGetter* ;
<; <
TObj< @
>@ A
(A B
object   
subIdentifier    
,    !
Func  " &
<  & '
TObj  ' +
,  + ,
	TContract  - 6
>  6 7
method  8 >
,  > ?
InjectSources  @ M
source  N T
)  T U
{!! 	
FactoryBindInfo"" 
."" 
ProviderFunc"" (
="") *
(## 
	container## 
)## 
=>## 
new## "
GetterProvider### 1
<##1 2
TObj##2 6
,##6 7
	TContract##8 A
>##A B
(##B C
subIdentifier##C P
,##P Q
method##R X
,##X Y
	container##Z c
,##c d
source##e k
,##k l
false##m r
)##r s
;##s t
return%% 
this%% 
;%% 
}&& 	
public(( &
ConditionCopyNonLazyBinder(( )

FromMethod((* 4
(((4 5
Func((5 9
<((9 :
DiContainer((: E
,((E F
	TContract((G P
>((P Q
method((R X
)((X Y
{)) 	
ProviderFunc** 
=** 
(++ 
	container++ 
)++ 
=>++ 
new++ "'
MethodProviderWithContainer++# >
<++> ?
	TContract++? H
>++H I
(++I J
method++J P
)++P Q
;++Q R
return-- 
this-- 
;-- 
}.. 	
public11 )
ArgConditionCopyNonLazyBinder11 ,
FromFactory11- 8
<118 9
TSubFactory119 D
>11D E
(11E F
)11F G
where22 
TSubFactory22 
:22 
IFactory22  (
<22( )
	TContract22) 2
>222 3
{33 	
return44 
this44 
.44 
FromIFactory44 $
(44$ %
x44% &
=>44' )
x44* +
.44+ ,
To44, .
<44. /
TSubFactory44/ :
>44: ;
(44; <
)44< =
.44= >
AsCached44> F
(44F G
)44G H
)44H I
;44I J
}55 	
public77 %
FactorySubContainerBinder77 (
<77( )
	TContract77) 2
>772 3#
FromSubContainerResolve774 K
(77K L
)77L M
{88 	
return99 #
FromSubContainerResolve99 *
(99* +
null99+ /
)99/ 0
;990 1
}:: 	
public<< %
FactorySubContainerBinder<< (
<<<( )
	TContract<<) 2
><<2 3#
FromSubContainerResolve<<4 K
(<<K L
object<<L R
subIdentifier<<S `
)<<` a
{== 	
return>> 
new>> %
FactorySubContainerBinder>> 0
<>>0 1
	TContract>>1 :
>>>: ;
(>>; <
BindContainer?? 
,?? 
BindInfo?? '
,??' (
FactoryBindInfo??) 8
,??8 9
subIdentifier??: G
)??G H
;??H I
}@@ 	
publicDD &
ConditionCopyNonLazyBinderDD )$
FromComponentInHierarchyDD* B
(DDB C
boolEE 
includeInactiveEE  
=EE! "
trueEE# '
)EE' (
{FF 	
BindingUtilGG 
.GG (
AssertIsInterfaceOrComponentGG 4
(GG4 5
ContractTypeGG5 A
)GGA B
;GGB C
returnII 

FromMethodII 
(II 
_II 
=>II  "
{JJ 
varKK 
resKK 
=KK 
BindContainerKK +
.KK+ ,
ResolveKK, 3
<KK3 4
ContextKK4 ;
>KK; <
(KK< =
)KK= >
.KK> ?
GetRootGameObjectsKK? Q
(KKQ R
)KKR S
.LL 
SelectLL 
(LL  
xLL  !
=>LL" $
xLL% &
.LL& '"
GetComponentInChildrenLL' =
<LL= >
	TContractLL> G
>LLG H
(LLH I
includeInactiveLLI X
)LLX Y
)LLY Z
.MM 
WhereMM 
(MM 
xMM  
=>MM! #
xMM$ %
!=MM& (
nullMM) -
)MM- .
.MM. /
FirstOrDefaultMM/ =
(MM= >
)MM> ?
;MM? @
AssertOO 
.OO 
	IsNotNullOO $
(OO$ %
resOO% (
,OO( )
$strPP i
,PPi j
typeofPPk q
(PPq r
	TContractPPr {
)PP{ |
)PP| }
;PP} ~
returnRR 
resRR 
;RR 
}SS 
)SS 
;SS 
}TT 	
}VV 
publicZZ 

staticZZ 
classZZ (
FactoryFromBinder0ExtensionsZZ 4
{[[ 
public\\ 
static\\ )
ArgConditionCopyNonLazyBinder\\ 3"
FromPoolableMemoryPool\\4 J
<\\J K
	TContract\\K T
,\\T U
TMemoryPool\\V a
>\\a b
(\\b c
this]] 
FactoryFromBinder]] "
<]]" #
	TContract]]# ,
>]], -

fromBinder]]. 8
,]]8 9
Action^^ 
<^^ .
"MemoryPoolInitialSizeMaxSizeBinder^^ 5
<^^5 6
	TContract^^6 ?
>^^? @
>^^@ A
poolBindGenerator^^B S
)^^S T
whereaa 
	TContractaa 
:aa 
	IPoolableaa '
<aa' (
IMemoryPoolaa( 3
>aa3 4
wherebb 
TMemoryPoolbb 
:bb 

MemoryPoolbb  *
<bb* +
IMemoryPoolbb+ 6
,bb6 7
	TContractbb8 A
>bbA B
{cc 	
varff 
poolIdff 
=ff 
Guidff 
.ff 
NewGuidff %
(ff% &
)ff& '
;ff' (
varii 
binderii 
=ii 

fromBinderii #
.ii# $
BindContainerii$ 1
.ii1 20
$BindMemoryPoolCustomInterfaceNoFlushii2 V
<iiV W
	TContractiiW `
,ii` a
TMemoryPooliib m
,iim n
TMemoryPooliio z
>iiz {
(ii{ |
)ii| }
.ii} ~
WithId	ii~ Ñ
(
iiÑ Ö
poolId
iiÖ ã
)
iiã å
;
iiå ç
binderll 
.ll 
NonLazyll 
(ll 
)ll 
;ll 
poolBindGeneratornn 
(nn 
bindernn $
)nn$ %
;nn% &

fromBinderpp 
.pp 
ProviderFuncpp #
=pp$ %
(qq 
	containerqq 
)qq 
=>qq 
{qq  
returnqq! '
newqq( +&
PoolableMemoryPoolProviderqq, F
<qqF G
	TContractqqG P
,qqP Q
TMemoryPoolqqR ]
>qq] ^
(qq^ _
	containerqq_ h
,qqh i
poolIdqqj p
)qqp q
;qqq r
}qqs t
;qqt u
returnss 
newss )
ArgConditionCopyNonLazyBinderss 4
(ss4 5

fromBinderss5 ?
.ss? @
BindInfoss@ H
)ssH I
;ssI J
}tt 	
publicvv 
staticvv )
ArgConditionCopyNonLazyBindervv 3"
FromPoolableMemoryPoolvv4 J
<vvJ K
	TContractvvK T
>vvT U
(vvU V
thisww 
FactoryFromBinderww "
<ww" #
	TContractww# ,
>ww, -

fromBinderww. 8
)ww8 9
wherezz 
	TContractzz 
:zz 
	IPoolablezz '
<zz' (
IMemoryPoolzz( 3
>zz3 4
{{{ 	
return|| 

fromBinder|| 
.|| "
FromPoolableMemoryPool|| 4
<||4 5
	TContract||5 >
>||> ?
(||? @
x||@ A
=>||B D
{||E F
}||F G
)||G H
;||H I
}}} 	
public 
static )
ArgConditionCopyNonLazyBinder 3"
FromPoolableMemoryPool4 J
<J K
	TContractK T
>T U
(U V
this
ÄÄ 
FactoryFromBinder
ÄÄ "
<
ÄÄ" #
	TContract
ÄÄ# ,
>
ÄÄ, -

fromBinder
ÄÄ. 8
,
ÄÄ8 9
Action
ÅÅ 
<
ÅÅ 0
"MemoryPoolInitialSizeMaxSizeBinder
ÅÅ 5
<
ÅÅ5 6
	TContract
ÅÅ6 ?
>
ÅÅ? @
>
ÅÅ@ A
poolBindGenerator
ÅÅB S
)
ÅÅS T
where
ÑÑ 
	TContract
ÑÑ 
:
ÑÑ 
	IPoolable
ÑÑ '
<
ÑÑ' (
IMemoryPool
ÑÑ( 3
>
ÑÑ3 4
{
ÖÖ 	
return
ÜÜ 

fromBinder
ÜÜ 
.
ÜÜ $
FromPoolableMemoryPool
ÜÜ 4
<
ÜÜ4 5
	TContract
ÜÜ5 >
,
ÜÜ> ? 
PoolableMemoryPool
ÜÜ@ R
<
ÜÜR S
IMemoryPool
ÜÜS ^
,
ÜÜ^ _
	TContract
ÜÜ` i
>
ÜÜi j
>
ÜÜj k
(
ÜÜk l
poolBindGenerator
ÜÜl }
)
ÜÜ} ~
;
ÜÜ~ 
}
áá 	
public
ää 
static
ää +
ArgConditionCopyNonLazyBinder
ää 3(
FromMonoPoolableMemoryPool
ää4 N
<
ääN O
	TContract
ääO X
>
ääX Y
(
ääY Z
this
ãã 
FactoryFromBinder
ãã "
<
ãã" #
	TContract
ãã# ,
>
ãã, -

fromBinder
ãã. 8
)
ãã8 9
where
éé 
	TContract
éé 
:
éé 
	Component
éé '
,
éé' (
	IPoolable
éé) 2
<
éé2 3
IMemoryPool
éé3 >
>
éé> ?
{
èè 	
return
êê 

fromBinder
êê 
.
êê (
FromMonoPoolableMemoryPool
êê 8
<
êê8 9
	TContract
êê9 B
>
êêB C
(
êêC D
x
êêD E
=>
êêF H
{
êêI J
}
êêJ K
)
êêK L
;
êêL M
}
ëë 	
public
ìì 
static
ìì +
ArgConditionCopyNonLazyBinder
ìì 3(
FromMonoPoolableMemoryPool
ìì4 N
<
ììN O
	TContract
ììO X
>
ììX Y
(
ììY Z
this
îî 
FactoryFromBinder
îî "
<
îî" #
	TContract
îî# ,
>
îî, -

fromBinder
îî. 8
,
îî8 9
Action
ïï 
<
ïï 0
"MemoryPoolInitialSizeMaxSizeBinder
ïï 5
<
ïï5 6
	TContract
ïï6 ?
>
ïï? @
>
ïï@ A
poolBindGenerator
ïïB S
)
ïïS T
where
òò 
	TContract
òò 
:
òò 
	Component
òò '
,
òò' (
	IPoolable
òò) 2
<
òò2 3
IMemoryPool
òò3 >
>
òò> ?
{
ôô 	
return
öö 

fromBinder
öö 
.
öö $
FromPoolableMemoryPool
öö 4
<
öö4 5
	TContract
öö5 >
,
öö> ?$
MonoPoolableMemoryPool
öö@ V
<
ööV W
IMemoryPool
ööW b
,
ööb c
	TContract
ööd m
>
ööm n
>
öön o
(
ööo p 
poolBindGeneratorööp Å
)ööÅ Ç
;ööÇ É
}
õõ 	
public
ûû 
static
ûû +
ArgConditionCopyNonLazyBinder
ûû 3$
FromPoolableMemoryPool
ûû4 J
<
ûûJ K
	TContract
ûûK T
,
ûûT U
TMemoryPool
ûûV a
>
ûûa b
(
ûûb c
this
üü 
FactoryFromBinder
üü "
<
üü" #
	TContract
üü# ,
>
üü, -

fromBinder
üü. 8
)
üü8 9
where
¢¢ 
	TContract
¢¢ 
:
¢¢ 
	IPoolable
¢¢ '
<
¢¢' (
IMemoryPool
¢¢( 3
>
¢¢3 4
where
££ 
TMemoryPool
££ 
:
££ 

MemoryPool
££  *
<
££* +
IMemoryPool
££+ 6
,
££6 7
	TContract
££8 A
>
££A B
{
§§ 	
return
•• 

fromBinder
•• 
.
•• $
FromPoolableMemoryPool
•• 4
<
••4 5
	TContract
••5 >
,
••> ?
TMemoryPool
••@ K
>
••K L
(
••L M
x
••M N
=>
••O Q
{
••R S
}
••S T
)
••T U
;
••U V
}
¶¶ 	
public
®® 
static
®® +
ArgConditionCopyNonLazyBinder
®® 3
FromIFactory
®®4 @
<
®®@ A
	TContract
®®A J
>
®®J K
(
®®K L
this
©© 
FactoryFromBinder
©© "
<
©©" #
	TContract
©©# ,
>
©©, -

fromBinder
©©. 8
,
©©8 9
Action
™™ 
<
™™ #
ConcreteBinderGeneric
™™ (
<
™™( )
IFactory
™™) 1
<
™™1 2
	TContract
™™2 ;
>
™™; <
>
™™< =
>
™™= >"
factoryBindGenerator
™™? S
)
™™S T
{
´´ 	
Guid
¨¨ 
	factoryId
¨¨ 
;
¨¨ "
factoryBindGenerator
≠≠  
(
≠≠  !

fromBinder
ÆÆ 
.
ÆÆ "
CreateIFactoryBinder
ÆÆ /
<
ÆÆ/ 0
IFactory
ÆÆ0 8
<
ÆÆ8 9
	TContract
ÆÆ9 B
>
ÆÆB C
>
ÆÆC D
(
ÆÆD E
out
ÆÆE H
	factoryId
ÆÆI R
)
ÆÆR S
)
ÆÆS T
;
ÆÆT U

fromBinder
∞∞ 
.
∞∞ 
ProviderFunc
∞∞ #
=
∞∞$ %
(
±± 
	container
±± 
)
±± 
=>
±± 
{
±±  
return
±±! '
new
±±( +
IFactoryProvider
±±, <
<
±±< =
	TContract
±±= F
>
±±F G
(
±±G H
	container
±±H Q
,
±±Q R
	factoryId
±±S \
)
±±\ ]
;
±±] ^
}
±±_ `
;
±±` a
return
≥≥ 
new
≥≥ +
ArgConditionCopyNonLazyBinder
≥≥ 4
(
≥≥4 5

fromBinder
≥≥5 ?
.
≥≥? @
BindInfo
≥≥@ H
)
≥≥H I
;
≥≥I J
}
¥¥ 	
}
µµ 
}∂∂ ò
eC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Util\HashSetPool.cs
	namespace 	
Zenject
 
{ 
public 

class 
HashSetPool 
< 
T 
> 
:  !
StaticMemoryPool" 2
<2 3
HashSet3 :
<: ;
T; <
>< =
>= >
{ 
static 
HashSetPool 
< 
T 
> 
	_instance '
=( )
new* -
HashSetPool. 9
<9 :
T: ;
>; <
(< =
)= >
;> ?
public

 
HashSetPool

 
(

 
)

 
{ 	
OnSpawnMethod 
= 
	OnSpawned %
;% &
OnDespawnedMethod 
= 
OnDespawned  +
;+ ,
} 	
public 
static 
HashSetPool !
<! "
T" #
># $
Instance% -
{ 	
get 
{ 
return 
	_instance "
;" #
}$ %
} 	
static 
void 
	OnSpawned 
( 
HashSet %
<% &
T& '
>' (
items) .
). /
{ 	
Assert 
. 
That 
( 
items 
. 
IsEmpty %
(% &
)& '
)' (
;( )
} 	
static 
void 
OnDespawned 
(  
HashSet  '
<' (
T( )
>) *
items+ 0
)0 1
{ 	
items 
. 
Clear 
( 
) 
; 
} 	
} 
} Ï?
£C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinderWithParams.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class /
#FactorySubContainerBinderWithParams 4
<4 5
	TContract5 >
>> ?
:@ A)
FactorySubContainerBinderBaseB _
<_ `
	TContract` i
>i j
{ 
public		 /
#FactorySubContainerBinderWithParams		 2
(		2 3
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
[ 	
System	 
. 
Obsolete 
( 
$str	 ê
)
ê ë
]
ë í
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H
ByNewPrefabI T
(T U
TypeU Y
installerTypeZ g
,g h
UnityEnginei t
.t u
Objectu {
prefab	| Ç
)
Ç É
{ 	
return 
ByNewContextPrefab %
(% &
installerType& 3
,3 4
prefab5 ;
); <
;< =
} 	
[ 	
System	 
. 
Obsolete 
( 
$str	 ê
)
ê ë
]
ë í
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H
ByNewPrefabI T
<T U

TInstallerU _
>_ `
(` a
UnityEnginea l
.l m
Objectm s
prefabt z
)z {
where 

TInstaller 
: 

IInstaller )
{ 	
return 
ByNewContextPrefab %
<% &

TInstaller& 0
>0 1
(1 2
prefab2 8
)8 9
;9 :
} 	
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H
ByNewContextPrefabI [
<[ \

TInstaller\ f
>f g
(g h
UnityEngineh s
.s t
Objectt z
prefab	{ Å
)
Å Ç
where 

TInstaller 
: 

IInstaller )
{   	
return!! 
ByNewContextPrefab!! %
(!!% &
typeof!!& ,
(!!, -

TInstaller!!- 7
)!!7 8
,!!8 9
prefab!!: @
)!!@ A
;!!A B
}"" 	
public$$ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder$$ H
ByNewContextPrefab$$I [
($$[ \
Type$$\ `
installerType$$a n
,$$n o
UnityEngine$$p {
.$${ |
Object	$$| Ç
prefab
$$É â
)
$$â ä
{%% 	
BindingUtil&& 
.&& 
AssertIsValidPrefab&& +
(&&+ ,
prefab&&, 2
)&&2 3
;&&3 4
Assert(( 
.(( 
That(( 
((( 
installerType(( %
.((% &
DerivesFrom((& 1
<((1 2
MonoInstaller((2 ?
>((? @
(((@ A
)((A B
,((B C
$str)) w
,))w x
installerType	))y Ü
)
))Ü á
;
))á à
var++ 
gameObjectInfo++ 
=++  
new++! $(
GameObjectCreationParameters++% A
(++A B
)++B C
;++C D
ProviderFunc-- 
=-- 
(.. 
	container.. 
).. 
=>.. 
new.. "*
SubContainerDependencyProvider..# A
(..A B
ContractType//  
,//  !
SubIdentifier//" /
,/// 0
new00 4
(SubContainerCreatorByNewPrefabWithParams00 @
(00@ A
installerType11 %
,11% &
	container22 !
,22! "
new33 
PrefabProvider33 *
(33* +
prefab33+ 1
)331 2
,332 3
gameObjectInfo44 &
)44& '
,44' (
false44) .
)44. /
;44/ 0
return66 
new66 E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder66 P
(66P Q
BindInfo66Q Y
,66Y Z
gameObjectInfo66[ i
)66i j
;66j k
}77 	
[99 	
System99	 
.99 
Obsolete99 
(99 
$str	99 ∞
)
99∞ ±
]
99± ≤
public:: E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder:: H
ByNewPrefabResource::I \
<::\ ]

TInstaller::] g
>::g h
(::h i
string::i o
resourcePath::p |
)::| }
where;; 

TInstaller;; 
:;; 

IInstaller;; )
{<< 	
return== &
ByNewContextPrefabResource== -
<==- .

TInstaller==. 8
>==8 9
(==9 :
resourcePath==: F
)==F G
;==G H
}>> 	
public@@ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder@@ H
ByNewPrefabResource@@I \
(@@\ ]
TypeAA 
installerTypeAA 
,AA 
stringAA  &
resourcePathAA' 3
)AA3 4
{BB 	
returnCC &
ByNewContextPrefabResourceCC -
(CC- .
installerTypeCC. ;
,CC; <
resourcePathCC= I
)CCI J
;CCJ K
}DD 	
publicFF E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderFF H&
ByNewContextPrefabResourceFFI c
<FFc d

TInstallerFFd n
>FFn o
(FFo p
stringFFp v
resourcePath	FFw É
)
FFÉ Ñ
whereGG 

TInstallerGG 
:GG 

IInstallerGG )
{HH 	
returnII &
ByNewContextPrefabResourceII -
(II- .
typeofII. 4
(II4 5

TInstallerII5 ?
)II? @
,II@ A
resourcePathIIB N
)IIN O
;IIO P
}JJ 	
publicLL E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderLL H&
ByNewContextPrefabResourceLLI c
(LLc d
TypeMM 
installerTypeMM 
,MM 
stringMM  &
resourcePathMM' 3
)MM3 4
{NN 	
BindingUtilOO 
.OO %
AssertIsValidResourcePathOO 1
(OO1 2
resourcePathOO2 >
)OO> ?
;OO? @
varQQ 
gameObjectInfoQQ 
=QQ  
newQQ! $(
GameObjectCreationParametersQQ% A
(QQA B
)QQB C
;QQC D
ProviderFuncSS 
=SS 
(TT 
	containerTT 
)TT 
=>TT 
newTT "*
SubContainerDependencyProviderTT# A
(TTA B
ContractTypeUU  
,UU  !
SubIdentifierUU" /
,UU/ 0
newVV 4
(SubContainerCreatorByNewPrefabWithParamsVV @
(VV@ A
installerTypeWW %
,WW% &
	containerXX !
,XX! "
newYY "
PrefabProviderResourceYY 2
(YY2 3
resourcePathYY3 ?
)YY? @
,YY@ A
gameObjectInfoZZ &
)ZZ& '
,ZZ' (
falseZZ) .
)ZZ. /
;ZZ/ 0
return\\ 
new\\ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder\\ P
(\\P Q
BindInfo\\Q Y
,\\Y Z
gameObjectInfo\\[ i
)\\i j
;\\j k
}]] 	
}__ 
}`` §i
\C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\DisposableManager.cs
	namespace 	
Zenject
 
{ 
public		 

class		 
DisposableManager		 "
:		# $
IDisposable		% 0
{

 
readonly 
List 
< 
DisposableInfo $
>$ %
_disposables& 2
=3 4
new5 8
List9 =
<= >
DisposableInfo> L
>L M
(M N
)N O
;O P
readonly 
List 
< 
LateDisposableInfo (
>( )
_lateDisposables* :
=; <
new= @
ListA E
<E F
LateDisposableInfoF X
>X Y
(Y Z
)Z [
;[ \
bool 
	_disposed 
; 
bool 
_lateDisposed 
; 
[ 	
Inject	 
] 
public 
DisposableManager  
(  !
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
IDisposable 
> 
disposables )
,) *
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
	ValuePair 
< 
Type 
,  
int! $
>$ %
>% &

priorities' 1
,1 2
[ 
Inject 
( 
Optional 
= 
true #
,# $
Source% +
=, -
InjectSources. ;
.; <
Local< A
)A B
]B C
List 
< 
ILateDisposable  
>  !
lateDisposables" 1
,1 2
[ 
Inject 
( 
Id 
= 
$str 
,  
Optional! )
=* +
true, 0
,0 1
Source2 8
=9 :
InjectSources; H
.H I
LocalI N
)N O
]O P
List 
< 
	ValuePair 
< 
Type 
,  
int! $
>$ %
>% &
latePriorities' 5
)5 6
{ 	
foreach 
( 
var 

disposable #
in$ &
disposables' 2
)2 3
{ 
var 
match 
= 

priorities &
.& '
Where' ,
(, -
x- .
=>/ 1

disposable2 <
.< =
GetType= D
(D E
)E F
.F G
DerivesFromOrEqualG Y
(Y Z
xZ [
.[ \
First\ a
)a b
)b c
.c d
Selectd j
(j k
xk l
=>m o
(p q
intq t
?t u
)u v
xv w
.w x
Secondx ~
)~ 
.	 Ä
SingleOrDefault
Ä è
(
è ê
)
ê ë
;
ë í
int   
priority   
=   
match   $
.  $ %
HasValue  % -
?  . /
match  0 5
.  5 6
Value  6 ;
:  < =
$num  > ?
;  ? @
_disposables"" 
."" 
Add""  
(""  !
new""! $
DisposableInfo""% 3
(""3 4

disposable""4 >
,""> ?
priority""@ H
)""H I
)""I J
;""J K
}## 
foreach%% 
(%% 
var%% 
lateDisposable%% '
in%%( *
lateDisposables%%+ :
)%%: ;
{&& 
var'' 
match'' 
='' 
latePriorities'' *
.''* +
Where''+ 0
(''0 1
x''1 2
=>''3 5
lateDisposable''6 D
.''D E
GetType''E L
(''L M
)''M N
.''N O
DerivesFromOrEqual''O a
(''a b
x''b c
.''c d
First''d i
)''i j
)''j k
.''k l
Select''l r
(''r s
x''s t
=>''u w
(''x y
int''y |
?''| }
)''} ~
x''~ 
.	'' Ä
Second
''Ä Ü
)
''Ü á
.
''á à
SingleOrDefault
''à ó
(
''ó ò
)
''ò ô
;
''ô ö
int(( 
priority(( 
=(( 
match(( $
.(($ %
HasValue((% -
?((. /
match((0 5
.((5 6
Value((6 ;
:((< =
$num((> ?
;((? @
_lateDisposables**  
.**  !
Add**! $
(**$ %
new**% (
LateDisposableInfo**) ;
(**; <
lateDisposable**< J
,**J K
priority**L T
)**T U
)**U V
;**V W
}++ 
},, 	
public.. 
void.. 
Add.. 
(.. 
IDisposable.. #

disposable..$ .
)... /
{// 	
Add00 
(00 

disposable00 
,00 
$num00 
)00 
;00 
}11 	
public33 
void33 
Add33 
(33 
IDisposable33 #

disposable33$ .
,33. /
int330 3
priority334 <
)33< =
{44 	
_disposables55 
.55 
Add55 
(55 
new66 
DisposableInfo66 "
(66" #

disposable66# -
,66- .
priority66/ 7
)667 8
)668 9
;669 :
}77 	
public99 
void99 
AddLate99 
(99 
ILateDisposable99 +

disposable99, 6
)996 7
{:: 	
AddLate;; 
(;; 

disposable;; 
,;; 
$num;;  !
);;! "
;;;" #
}<< 	
public>> 
void>> 
AddLate>> 
(>> 
ILateDisposable>> +

disposable>>, 6
,>>6 7
int>>8 ;
priority>>< D
)>>D E
{?? 	
_lateDisposables@@ 
.@@ 
Add@@  
(@@  !
newAA 
LateDisposableInfoAA &
(AA& '

disposableAA' 1
,AA1 2
priorityAA3 ;
)AA; <
)AA< =
;AA= >
}BB 	
publicDD 
voidDD 
RemoveDD 
(DD 
IDisposableDD &

disposableDD' 1
)DD1 2
{EE 	
_disposablesFF 
.FF 
RemoveWithConfirmFF *
(FF* +
_disposablesGG 
.GG 
WhereGG "
(GG" #
xGG# $
=>GG% '
ReferenceEqualsGG( 7
(GG7 8
xGG8 9
.GG9 :

DisposableGG: D
,GGD E

disposableGGF P
)GGP Q
)GGQ R
.GGR S
SingleGGS Y
(GGY Z
)GGZ [
)GG[ \
;GG\ ]
}HH 	
publicJJ 
voidJJ 
LateDisposeJJ 
(JJ  
)JJ  !
{KK 	
AssertLL 
.LL 
ThatLL 
(LL 
!LL 
_lateDisposedLL &
,LL& '
$strLL( X
)LLX Y
;LLY Z
_lateDisposedMM 
=MM 
trueMM  
;MM  !
varPP 
disposablesOrderedPP "
=PP# $
_lateDisposablesPP% 5
.PP5 6
OrderByPP6 =
(PP= >
xPP> ?
=>PP@ B
xPPC D
.PPD E
PriorityPPE M
)PPM N
.PPN O
ReversePPO V
(PPV W
)PPW X
.PPX Y
ToListPPY _
(PP_ `
)PP` a
;PPa b
foreachSS 
(SS 
varSS 

disposableSS #
inSS$ &
disposablesOrderedSS' 9
.SS9 :
SelectSS: @
(SS@ A
xSSA B
=>SSC E
xSSF G
.SSG H
LateDisposableSSH V
)SSV W
.SSW X
GetDuplicatesSSX e
(SSe f
)SSf g
)SSg h
{TT 
AssertUU 
.UU 
ThatUU 
(UU 
falseUU !
,UU! "
$strUU# T
.UUT U
FmtUUU X
(UUX Y

disposableUUY c
.UUc d
GetTypeUUd k
(UUk l
)UUl m
)UUm n
)UUn o
;UUo p
}VV 
foreachYY 
(YY 
varYY 

disposableYY #
inYY$ &
disposablesOrderedYY' 9
)YY9 :
{ZZ 
try[[ 
{\\ 

disposable]] 
.]] 
LateDisposable]] -
.]]- .
LateDispose]]. 9
(]]9 :
)]]: ;
;]]; <
}^^ 
catch__ 
(__ 
	Exception__  
e__! "
)__" #
{`` 
throwaa 
Assertaa  
.aa  !
CreateExceptionaa! 0
(aa0 1
ebb 
,bb 
$strbb `
,bb` a

disposablebbb l
.bbl m
LateDisposablebbm {
.bb{ |
GetType	bb| É
(
bbÉ Ñ
)
bbÑ Ö
)
bbÖ Ü
;
bbÜ á
}cc 
}dd 
}ee 	
publicgg 
voidgg 
Disposegg 
(gg 
)gg 
{hh 	
Assertii 
.ii 
Thatii 
(ii 
!ii 
	_disposedii "
,ii" #
$strii$ O
)iiO P
;iiP Q
	_disposedjj 
=jj 
truejj 
;jj 
varmm 
disposablesOrderedmm "
=mm# $
_disposablesmm% 1
.mm1 2
OrderBymm2 9
(mm9 :
xmm: ;
=>mm< >
xmm? @
.mm@ A
PrioritymmA I
)mmI J
.mmJ K
ReversemmK R
(mmR S
)mmS T
.mmT U
ToListmmU [
(mm[ \
)mm\ ]
;mm] ^
foreachpp 
(pp 
varpp 

disposablepp #
inpp$ &
disposablesOrderedpp' 9
.pp9 :
Selectpp: @
(pp@ A
xppA B
=>ppC E
xppF G
.ppG H

DisposableppH R
)ppR S
.ppS T
GetDuplicatesppT a
(ppa b
)ppb c
)ppc d
{qq 
Assertrr 
.rr 
Thatrr 
(rr 
falserr !
,rr! "
$strrr# P
.rrP Q
FmtrrQ T
(rrT U

disposablerrU _
.rr_ `
GetTyperr` g
(rrg h
)rrh i
)rri j
)rrj k
;rrk l
}ss 
foreachvv 
(vv 
varvv 

disposablevv #
invv$ &
disposablesOrderedvv' 9
)vv9 :
{ww 
tryxx 
{yy 

disposablezz 
.zz 

Disposablezz )
.zz) *
Disposezz* 1
(zz1 2
)zz2 3
;zz3 4
}{{ 
catch|| 
(|| 
	Exception||  
e||! "
)||" #
{}} 
throw~~ 
Assert~~  
.~~  !
CreateException~~! 0
(~~0 1
e 
, 
$str W
,W X

disposableY c
.c d

Disposabled n
.n o
GetTypeo v
(v w
)w x
)x y
;y z
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
struct
ÑÑ 
DisposableInfo
ÑÑ 
{
ÖÖ 	
public
ÜÜ 
IDisposable
ÜÜ 

Disposable
ÜÜ )
;
ÜÜ) *
public
áá 
int
áá 
Priority
áá 
;
áá  
public
ââ 
DisposableInfo
ââ !
(
ââ! "
IDisposable
ââ" -

disposable
ââ. 8
,
ââ8 9
int
ââ: =
priority
ââ> F
)
ââF G
{
ää 

Disposable
ãã 
=
ãã 

disposable
ãã '
;
ãã' (
Priority
åå 
=
åå 
priority
åå #
;
åå# $
}
çç 
}
éé 	
class
êê  
LateDisposableInfo
êê  
{
ëë 	
public
íí 
ILateDisposable
íí "
LateDisposable
íí# 1
;
íí1 2
public
ìì 
int
ìì 
Priority
ìì 
;
ìì  
public
ïï  
LateDisposableInfo
ïï %
(
ïï% &
ILateDisposable
ïï& 5
lateDisposable
ïï6 D
,
ïïD E
int
ïïF I
priority
ïïJ R
)
ïïR S
{
ññ 
LateDisposable
óó 
=
óó  
lateDisposable
óó! /
;
óó/ 0
Priority
òò 
=
òò 
priority
òò #
;
òò# $
}
ôô 
}
öö 	
}
õõ 
}úú ˙
yC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\Pooling\MemoryPoolExpandBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class "
MemoryPoolExpandBinder '
<' (
	TContract( 1
>1 2
:3 4*
FactoryArgumentsToChoiceBinder5 S
<S T
	TContractT ]
>] ^
{ 
public "
MemoryPoolExpandBinder %
(% &
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
,Y Z
MemoryPoolBindInfo[ m
poolBindInfon z
)z {
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{		 	
MemoryPoolBindInfo

 
=

  
poolBindInfo

! -
;

- .
ExpandByOneAtATime 
( 
)  
;  !
} 	
	protected 
MemoryPoolBindInfo $
MemoryPoolBindInfo% 7
{ 	
get 
; 
private 
set 
; 
} 	
public *
FactoryArgumentsToChoiceBinder -
<- .
	TContract. 7
>7 8
ExpandByOneAtATime9 K
(K L
)L M
{ 	
MemoryPoolBindInfo 
. 
ExpandMethod +
=, -
PoolExpandMethods. ?
.? @

OneAtATime@ J
;J K
return 
this 
; 
} 	
public *
FactoryArgumentsToChoiceBinder -
<- .
	TContract. 7
>7 8
ExpandByDoubling9 I
(I J
)J K
{ 	
MemoryPoolBindInfo 
. 
ExpandMethod +
=, -
PoolExpandMethods. ?
.? @
Double@ F
;F G
return 
this 
; 
} 	
} 
}   ∞	
hC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\ScriptableObjectInstallerBase.cs
	namespace 	
Zenject
 
{ 
public

 

class

 )
ScriptableObjectInstallerBase

 .
:

/ 0
ScriptableObject

1 A
,

A B

IInstaller

C M
{ 
[ 	
Inject	 
] 
DiContainer 

_container 
=  
null! %
;% &
	protected 
DiContainer 
	Container '
{ 	
get 
{ 
return 

_container #
;# $
}% &
} 	
bool 

IInstaller 
. 
	IsEnabled !
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
virtual 
void 
InstallBindings +
(+ ,
), -
{ 	
throw 
new #
NotImplementedException -
(- .
). /
;/ 0
} 	
} 
} µ¶
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder6.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
TParam2, 3
,3 4
TParam35 <
,< =
TParam4> E
,E F
TParam5G N
,N O
TParam6P W
,W X
	TContractY b
>b c
: 	!
FactoryFromBinderBase
 
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func 
< 
DiContainer 
, 
TParam1 %
,% &
TParam2' .
,. /
TParam30 7
,7 8
TParam49 @
,@ A
TParam5B I
,I J
TParam6K R
,R S
	TContractT ]
>] ^
method_ e
)e f
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
TParam2H O
,O P
TParam3Q X
,X Y
TParam4Z a
,a b
TParam5c j
,j k
TParam6l s
,s t
	TContractu ~
>~ 
(	 Ä
method
Ä Ü
)
Ü á
;
á à
return 
this 
; 
} 	
public!! &
ConditionCopyNonLazyBinder!! )
FromFactory!!* 5
<!!5 6
TSubFactory!!6 A
>!!A B
(!!B C
)!!C D
where"" 
TSubFactory"" 
:"" 
IFactory""  (
<""( )
TParam1"") 0
,""0 1
TParam2""2 9
,""9 :
TParam3""; B
,""B C
TParam4""D K
,""K L
TParam5""M T
,""T U
TParam6""V ]
,""] ^
	TContract""_ h
>""h i
{## 	
return$$ 
this$$ 
.$$ 
FromIFactory$$ $
($$$ %
x$$% &
=>$$' )
x$$* +
.$$+ ,
To$$, .
<$$. /
TSubFactory$$/ :
>$$: ;
($$; <
)$$< =
.$$= >
AsCached$$> F
($$F G
)$$G H
)$$H I
;$$I J
}%% 	
public'' %
FactorySubContainerBinder'' (
<''( )
TParam1'') 0
,''0 1
TParam2''2 9
,''9 :
TParam3''; B
,''B C
TParam4''D K
,''K L
TParam5''M T
,''T U
TParam6''V ]
,''] ^
	TContract''_ h
>''h i$
FromSubContainerResolve	''j Å
(
''Å Ç
)
''Ç É
{(( 	
return)) #
FromSubContainerResolve)) *
())* +
null))+ /
)))/ 0
;))0 1
}** 	
public,, %
FactorySubContainerBinder,, (
<,,( )
TParam1,,) 0
,,,0 1
TParam2,,2 9
,,,9 :
TParam3,,; B
,,,B C
TParam4,,D K
,,,K L
TParam5,,M T
,,,T U
TParam6,,V ]
,,,] ^
	TContract,,_ h
>,,h i$
FromSubContainerResolve	,,j Å
(
,,Å Ç
object
,,Ç à
subIdentifier
,,â ñ
)
,,ñ ó
{-- 	
return.. 
new.. %
FactorySubContainerBinder.. 0
<..0 1
TParam1..1 8
,..8 9
TParam2..: A
,..A B
TParam3..C J
,..J K
TParam4..L S
,..S T
TParam5..U \
,..\ ]
TParam6..^ e
,..e f
	TContract..g p
>..p q
(..q r
BindContainer// 
,// 
BindInfo// '
,//' (
FactoryBindInfo//) 8
,//8 9
subIdentifier//: G
)//G H
;//H I
}00 	
}11 
public55 

static55 
class55 (
FactoryFromBinder6Extensions55 4
{66 
public77 
static77 )
ArgConditionCopyNonLazyBinder77 3
FromIFactory774 @
<77@ A
TParam177A H
,77H I
TParam277J Q
,77Q R
TParam377S Z
,77Z [
TParam477\ c
,77c d
TParam577e l
,77l m
TParam677n u
,77u v
	TContract	77w Ä
>
77Ä Å
(
77Å Ç
this88 
FactoryFromBinder88 "
<88" #
TParam188# *
,88* +
TParam288, 3
,883 4
TParam3885 <
,88< =
TParam488> E
,88E F
TParam588G N
,88N O
TParam688P W
,88W X
	TContract88Y b
>88b c

fromBinder88d n
,88n o
Action99 
<99 !
ConcreteBinderGeneric99 (
<99( )
IFactory99) 1
<991 2
TParam1992 9
,999 :
TParam299; B
,99B C
TParam399D K
,99K L
TParam499M T
,99T U
TParam599V ]
,99] ^
TParam699_ f
,99f g
	TContract99h q
>99q r
>99r s
>99s t!
factoryBindGenerator	99u â
)
99â ä
{:: 	
Guid;; 
	factoryId;; 
;;;  
factoryBindGenerator<<  
(<<  !

fromBinder== 
.==  
CreateIFactoryBinder== /
<==/ 0
IFactory==0 8
<==8 9
TParam1==9 @
,==@ A
TParam2==B I
,==I J
TParam3==K R
,==R S
TParam4==T [
,==[ \
TParam5==] d
,==d e
TParam6==f m
,==m n
	TContract==o x
>==x y
>==y z
(==z {
out=={ ~
	factoryId	== à
)
==à â
)
==â ä
;
==ä ã

fromBinder?? 
.?? 
ProviderFunc?? #
=??$ %
(@@ 
	container@@ 
)@@ 
=>@@ 
{@@  
return@@! '
new@@( +
IFactoryProvider@@, <
<@@< =
TParam1@@= D
,@@D E
TParam2@@F M
,@@M N
TParam3@@O V
,@@V W
TParam4@@X _
,@@_ `
TParam5@@a h
,@@h i
TParam6@@j q
,@@q r
	TContract@@s |
>@@| }
(@@} ~
	container	@@~ á
,
@@á à
	factoryId
@@â í
)
@@í ì
;
@@ì î
}
@@ï ñ
;
@@ñ ó
returnBB 
newBB )
ArgConditionCopyNonLazyBinderBB 4
(BB4 5

fromBinderBB5 ?
.BB? @
BindInfoBB@ H
)BBH I
;BBI J
}CC 	
publicEE 
staticEE )
ArgConditionCopyNonLazyBinderEE 3"
FromPoolableMemoryPoolEE4 J
<EEJ K
TParam1EEK R
,EER S
TParam2EET [
,EE[ \
TParam3EE] d
,EEd e
TParam4EEf m
,EEm n
TParam5EEo v
,EEv w
TParam6EEx 
,	EE Ä
	TContract
EEÅ ä
>
EEä ã
(
EEã å
thisFF 
FactoryFromBinderFF "
<FF" #
TParam1FF# *
,FF* +
TParam2FF, 3
,FF3 4
TParam3FF5 <
,FF< =
TParam4FF> E
,FFE F
TParam5FFG N
,FFN O
TParam6FFP W
,FFW X
	TContractFFY b
>FFb c

fromBinderFFd n
)FFn o
whereII 
	TContractII 
:II 
	IPoolableII '
<II' (
TParam1II( /
,II/ 0
TParam2II1 8
,II8 9
TParam3II: A
,IIA B
TParam4IIC J
,IIJ K
TParam5IIL S
,IIS T
TParam6IIU \
,II\ ]
IMemoryPoolII^ i
>IIi j
{JJ 	
returnKK 

fromBinderKK 
.KK "
FromPoolableMemoryPoolKK 4
<KK4 5
TParam1KK5 <
,KK< =
TParam2KK> E
,KKE F
TParam3KKG N
,KKN O
TParam4KKP W
,KKW X
TParam5KKY `
,KK` a
TParam6KKb i
,KKi j
	TContractKKk t
>KKt u
(KKu v
xKKv w
=>KKx z
{KK{ |
}KK| }
)KK} ~
;KK~ 
}LL 	
publicNN 
staticNN )
ArgConditionCopyNonLazyBinderNN 3"
FromPoolableMemoryPoolNN4 J
<NNJ K
TParam1NNK R
,NNR S
TParam2NNT [
,NN[ \
TParam3NN] d
,NNd e
TParam4NNf m
,NNm n
TParam5NNo v
,NNv w
TParam6NNx 
,	NN Ä
	TContract
NNÅ ä
>
NNä ã
(
NNã å
thisOO 
FactoryFromBinderOO "
<OO" #
TParam1OO# *
,OO* +
TParam2OO, 3
,OO3 4
TParam3OO5 <
,OO< =
TParam4OO> E
,OOE F
TParam5OOG N
,OON O
TParam6OOP W
,OOW X
	TContractOOY b
>OOb c

fromBinderOOd n
,OOn o
ActionPP 
<PP .
"MemoryPoolInitialSizeMaxSizeBinderPP 5
<PP5 6
	TContractPP6 ?
>PP? @
>PP@ A
poolBindGeneratorPPB S
)PPS T
whereSS 
	TContractSS 
:SS 
	IPoolableSS '
<SS' (
TParam1SS( /
,SS/ 0
TParam2SS1 8
,SS8 9
TParam3SS: A
,SSA B
TParam4SSC J
,SSJ K
TParam5SSL S
,SSS T
TParam6SSU \
,SS\ ]
IMemoryPoolSS^ i
>SSi j
{TT 	
returnUU 

fromBinderUU 
.UU "
FromPoolableMemoryPoolUU 4
<UU4 5
TParam1UU5 <
,UU< =
TParam2UU> E
,UUE F
TParam3UUG N
,UUN O
TParam4UUP W
,UUW X
TParam5UUY `
,UU` a
TParam6UUb i
,UUi j
	TContractUUk t
,UUt u
PoolableMemoryPool	UUv à
<
UUà â
TParam1
UUâ ê
,
UUê ë
TParam2
UUí ô
,
UUô ö
TParam3
UUõ ¢
,
UU¢ £
TParam4
UU§ ´
,
UU´ ¨
TParam5
UU≠ ¥
,
UU¥ µ
TParam6
UU∂ Ω
,
UUΩ æ
IMemoryPool
UUø  
,
UU  À
	TContract
UUÃ ’
>
UU’ ÷
>
UU÷ ◊
(
UU◊ ÿ
poolBindGenerator
UUÿ È
)
UUÈ Í
;
UUÍ Î
}VV 	
publicYY 
staticYY )
ArgConditionCopyNonLazyBinderYY 3&
FromMonoPoolableMemoryPoolYY4 N
<YYN O
TParam1YYO V
,YYV W
TParam2YYX _
,YY_ `
TParam3YYa h
,YYh i
TParam4YYj q
,YYq r
TParam5YYs z
,YYz {
TParam6	YY| É
,
YYÉ Ñ
	TContract
YYÖ é
>
YYé è
(
YYè ê
thisZZ 
FactoryFromBinderZZ "
<ZZ" #
TParam1ZZ# *
,ZZ* +
TParam2ZZ, 3
,ZZ3 4
TParam3ZZ5 <
,ZZ< =
TParam4ZZ> E
,ZZE F
TParam5ZZG N
,ZZN O
TParam6ZZP W
,ZZW X
	TContractZZY b
>ZZb c

fromBinderZZd n
)ZZn o
where]] 
	TContract]] 
:]] 
	Component]] '
,]]' (
	IPoolable]]) 2
<]]2 3
TParam1]]3 :
,]]: ;
TParam2]]< C
,]]C D
TParam3]]E L
,]]L M
TParam4]]N U
,]]U V
TParam5]]W ^
,]]^ _
TParam6]]` g
,]]g h
IMemoryPool]]i t
>]]t u
{^^ 	
return__ 

fromBinder__ 
.__ &
FromMonoPoolableMemoryPool__ 8
<__8 9
TParam1__9 @
,__@ A
TParam2__B I
,__I J
TParam3__K R
,__R S
TParam4__T [
,__[ \
TParam5__] d
,__d e
TParam6__f m
,__m n
	TContract__o x
>__x y
(__y z
x__z {
=>__| ~
{	__ Ä
}
__Ä Å
)
__Å Ç
;
__Ç É
}`` 	
publicbb 
staticbb )
ArgConditionCopyNonLazyBinderbb 3&
FromMonoPoolableMemoryPoolbb4 N
<bbN O
TParam1bbO V
,bbV W
TParam2bbX _
,bb_ `
TParam3bba h
,bbh i
TParam4bbj q
,bbq r
TParam5bbs z
,bbz {
TParam6	bb| É
,
bbÉ Ñ
	TContract
bbÖ é
>
bbé è
(
bbè ê
thiscc 
FactoryFromBindercc "
<cc" #
TParam1cc# *
,cc* +
TParam2cc, 3
,cc3 4
TParam3cc5 <
,cc< =
TParam4cc> E
,ccE F
TParam5ccG N
,ccN O
TParam6ccP W
,ccW X
	TContractccY b
>ccb c

fromBinderccd n
,ccn o
Actiondd 
<dd .
"MemoryPoolInitialSizeMaxSizeBinderdd 5
<dd5 6
	TContractdd6 ?
>dd? @
>dd@ A
poolBindGeneratorddB S
)ddS T
wheregg 
	TContractgg 
:gg 
	Componentgg '
,gg' (
	IPoolablegg) 2
<gg2 3
TParam1gg3 :
,gg: ;
TParam2gg< C
,ggC D
TParam3ggE L
,ggL M
TParam4ggN U
,ggU V
TParam5ggW ^
,gg^ _
TParam6gg` g
,ggg h
IMemoryPoolggi t
>ggt u
{hh 	
returnii 

fromBinderii 
.ii "
FromPoolableMemoryPoolii 4
<ii4 5
TParam1ii5 <
,ii< =
TParam2ii> E
,iiE F
TParam3iiG N
,iiN O
TParam4iiP W
,iiW X
TParam5iiY `
,ii` a
TParam6iib i
,iii j
	TContractiik t
,iit u#
MonoPoolableMemoryPool	iiv å
<
iiå ç
TParam1
iiç î
,
iiî ï
TParam2
iiñ ù
,
iiù û
TParam3
iiü ¶
,
ii¶ ß
TParam4
ii® Ø
,
iiØ ∞
TParam5
ii± ∏
,
ii∏ π
TParam6
ii∫ ¡
,
ii¡ ¬
IMemoryPool
ii√ Œ
,
iiŒ œ
	TContract
ii– Ÿ
>
iiŸ ⁄
>
ii⁄ €
(
ii€ ‹
poolBindGenerator
ii‹ Ì
)
iiÌ Ó
;
iiÓ Ô
}jj 	
publicmm 
staticmm )
ArgConditionCopyNonLazyBindermm 3"
FromPoolableMemoryPoolmm4 J
<mmJ K
TParam1mmK R
,mmR S
TParam2mmT [
,mm[ \
TParam3mm] d
,mmd e
TParam4mmf m
,mmm n
TParam5mmo v
,mmv w
TParam6mmx 
,	mm Ä
	TContract
mmÅ ä
,
mmä ã
TMemoryPool
mmå ó
>
mmó ò
(
mmò ô
thisnn 
FactoryFromBindernn "
<nn" #
TParam1nn# *
,nn* +
TParam2nn, 3
,nn3 4
TParam3nn5 <
,nn< =
TParam4nn> E
,nnE F
TParam5nnG N
,nnN O
TParam6nnP W
,nnW X
	TContractnnY b
>nnb c

fromBindernnd n
)nnn o
whereqq 
	TContractqq 
:qq 
	IPoolableqq '
<qq' (
TParam1qq( /
,qq/ 0
TParam2qq1 8
,qq8 9
TParam3qq: A
,qqA B
TParam4qqC J
,qqJ K
TParam5qqL S
,qqS T
TParam6qqU \
,qq\ ]
IMemoryPoolqq^ i
>qqi j
whererr 
TMemoryPoolrr 
:rr 

MemoryPoolrr  *
<rr* +
TParam1rr+ 2
,rr2 3
TParam2rr4 ;
,rr; <
TParam3rr= D
,rrD E
TParam4rrF M
,rrM N
TParam5rrO V
,rrV W
TParam6rrX _
,rr_ `
IMemoryPoolrra l
,rrl m
	TContractrrn w
>rrw x
{ss 	
returntt 

fromBindertt 
.tt "
FromPoolableMemoryPooltt 4
<tt4 5
TParam1tt5 <
,tt< =
TParam2tt> E
,ttE F
TParam3ttG N
,ttN O
TParam4ttP W
,ttW X
TParam5ttY `
,tt` a
TParam6ttb i
,tti j
	TContractttk t
,ttt u
TMemoryPool	ttv Å
>
ttÅ Ç
(
ttÇ É
x
ttÉ Ñ
=>
ttÖ á
{
ttà â
}
ttâ ä
)
ttä ã
;
ttã å
}uu 	
publicww 
staticww )
ArgConditionCopyNonLazyBinderww 3"
FromPoolableMemoryPoolww4 J
<wwJ K
TParam1wwK R
,wwR S
TParam2wwT [
,ww[ \
TParam3ww] d
,wwd e
TParam4wwf m
,wwm n
TParam5wwo v
,wwv w
TParam6wwx 
,	ww Ä
	TContract
wwÅ ä
,
wwä ã
TMemoryPool
wwå ó
>
wwó ò
(
wwò ô
thisxx 
FactoryFromBinderxx "
<xx" #
TParam1xx# *
,xx* +
TParam2xx, 3
,xx3 4
TParam3xx5 <
,xx< =
TParam4xx> E
,xxE F
TParam5xxG N
,xxN O
TParam6xxP W
,xxW X
	TContractxxY b
>xxb c

fromBinderxxd n
,xxn o
Actionyy 
<yy .
"MemoryPoolInitialSizeMaxSizeBinderyy 5
<yy5 6
	TContractyy6 ?
>yy? @
>yy@ A
poolBindGeneratoryyB S
)yyS T
where|| 
	TContract|| 
:|| 
	IPoolable|| '
<||' (
TParam1||( /
,||/ 0
TParam2||1 8
,||8 9
TParam3||: A
,||A B
TParam4||C J
,||J K
TParam5||L S
,||S T
TParam6||U \
,||\ ]
IMemoryPool||^ i
>||i j
where}} 
TMemoryPool}} 
:}} 

MemoryPool}}  *
<}}* +
TParam1}}+ 2
,}}2 3
TParam2}}4 ;
,}}; <
TParam3}}= D
,}}D E
TParam4}}F M
,}}M N
TParam5}}O V
,}}V W
TParam6}}X _
,}}_ `
IMemoryPool}}a l
,}}l m
	TContract}}n w
>}}w x
{~~ 	
Assert 
. 
IsEqual 
( 
typeof !
(! "
	TContract" +
)+ ,
,, -
typeof. 4
(4 5
	TContract5 >
)> ?
)? @
;@ A
var
ÉÉ 
poolId
ÉÉ 
=
ÉÉ 
Guid
ÉÉ 
.
ÉÉ 
NewGuid
ÉÉ %
(
ÉÉ% &
)
ÉÉ& '
;
ÉÉ' (
var
ÜÜ 
binder
ÜÜ 
=
ÜÜ 

fromBinder
ÜÜ #
.
ÜÜ# $
BindContainer
ÜÜ$ 1
.
ÜÜ1 22
$BindMemoryPoolCustomInterfaceNoFlush
ÜÜ2 V
<
ÜÜV W
	TContract
ÜÜW `
,
ÜÜ` a
TMemoryPool
ÜÜb m
,
ÜÜm n
TMemoryPool
ÜÜo z
>
ÜÜz {
(
ÜÜ{ |
)
ÜÜ| }
.
áá 
WithId
áá 
(
áá 
poolId
áá 
)
áá 
;
áá  
binder
ää 
.
ää 
NonLazy
ää 
(
ää 
)
ää 
;
ää 
poolBindGenerator
åå 
(
åå 
binder
åå $
)
åå$ %
;
åå% &

fromBinder
éé 
.
éé 
ProviderFunc
éé #
=
éé$ %
(
èè 
	container
èè 
)
èè 
=>
èè 
{
èè  
return
èè! '
new
èè( +(
PoolableMemoryPoolProvider
èè, F
<
èèF G
TParam1
èèG N
,
èèN O
TParam2
èèP W
,
èèW X
TParam3
èèY `
,
èè` a
TParam4
èèb i
,
èèi j
TParam5
èèk r
,
èèr s
TParam6
èèt {
,
èè{ |
	TContractèè} Ü
,èèÜ á
TMemoryPoolèèà ì
>èèì î
(èèî ï
	containerèèï û
,èèû ü
poolIdèè† ¶
)èè¶ ß
;èèß ®
}èè© ™
;èè™ ´
return
ëë 
new
ëë +
ArgConditionCopyNonLazyBinder
ëë 4
(
ëë4 5

fromBinder
ëë5 ?
.
ëë? @
BindInfo
ëë@ H
)
ëëH I
;
ëëI J
}
íí 	
}
ìì 
}îî å8
mC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ScriptableObjectResourceProvider.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class ,
 ScriptableObjectResourceProvider 1
:2 3
	IProvider4 =
{ 
readonly 
DiContainer 

_container '
;' (
readonly 
Type 
_resourceType #
;# $
readonly 
string 
_resourcePath %
;% &
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly 
bool 

_createNew  
;  !
readonly 
object 
_concreteIdentifier +
;+ ,
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
public ,
 ScriptableObjectResourceProvider /
(/ 0
string 
resourcePath 
,  
Type! %
resourceType& 2
,2 3
DiContainer 
	container !
,! "
IEnumerable# .
<. /
TypeValuePair/ <
>< =
extraArguments> L
,L M
bool 
	createNew 
, 
object "
concreteIdentifier# 5
,5 6
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	

_container 
= 
	container "
;" #
Assert 
. 
DerivesFromOrEqual %
<% &
ScriptableObject& 6
>6 7
(7 8
resourceType8 D
)D E
;E F
_extraArguments   
=   
extraArguments   ,
.  , -
ToList  - 3
(  3 4
)  4 5
;  5 6
_resourceType!! 
=!! 
resourceType!! (
;!!( )
_resourcePath"" 
="" 
resourcePath"" (
;""( )

_createNew## 
=## 
	createNew## "
;##" #
_concreteIdentifier$$ 
=$$  !
concreteIdentifier$$" 4
;$$4 5 
_instantiateCallback%%  
=%%! "
instantiateCallback%%# 6
;%%6 7
}&& 	
public(( 
bool(( 
IsCached(( 
{)) 	
get** 
{** 
return** 
false** 
;** 
}**  !
}++ 	
public-- 
bool-- '
TypeVariesBasedOnMemberType-- /
{.. 	
get// 
{// 
return// 
false// 
;// 
}//  !
}00 	
public22 
Type22 
GetInstanceType22 #
(22# $
InjectContext22$ 1
context222 9
)229 :
{33 	
return44 
_resourceType44  
;44  !
}55 	
public77 
void77 *
GetAllInstancesWithInjectSplit77 2
(772 3
InjectContext88 
context88 !
,88! "
List88# '
<88' (
TypeValuePair88( 5
>885 6
args887 ;
,88; <
out88= @
Action88A G
injectAction88H T
,88T U
List88V Z
<88Z [
object88[ a
>88a b
buffer88c i
)88i j
{99 	
Assert:: 
.:: 
	IsNotNull:: 
(:: 
context:: $
)::$ %
;::% &
if<< 
(<< 

_createNew<< 
)<< 
{== 
var>> 
objects>> 
=>> 
	Resources>> '
.>>' (
LoadAll>>( /
(>>/ 0
_resourcePath>>0 =
,>>= >
_resourceType>>? L
)>>L M
;>>M N
for@@ 
(@@ 
int@@ 
i@@ 
=@@ 
$num@@ 
;@@ 
i@@  !
<@@" #
objects@@$ +
.@@+ ,
Length@@, 2
;@@2 3
i@@4 5
++@@5 7
)@@7 8
{AA 
bufferBB 
.BB 
AddBB 
(BB 
ScriptableObjectBB /
.BB/ 0
InstantiateBB0 ;
(BB; <
objectsBB< C
[BBC D
iBBD E
]BBE F
)BBF G
)BBG H
;BBH I
}CC 
}DD 
elseEE 
{FF 
bufferGG 
.GG 
AllocFreeAddRangeGG (
(GG( )
	ResourcesHH 
.HH 
LoadAllHH %
(HH% &
_resourcePathHH& 3
,HH3 4
_resourceTypeHH5 B
)HHB C
)HHC D
;HHD E
}II 
AssertKK 
.KK 
ThatKK 
(KK 
bufferKK 
.KK 
CountKK $
>KK% &
$numKK' (
,KK( )
$strLL C
,LLC D
_resourcePathLLE R
,LLR S
_resourceTypeLLT a
)LLa b
;LLb c
injectActionNN 
=NN 
(NN 
)NN 
=>NN  
{OO 
forPP 
(PP 
intPP 
iPP 
=PP 
$numPP 
;PP 
iPP  !
<PP" #
bufferPP$ *
.PP* +
CountPP+ 0
;PP0 1
iPP2 3
++PP3 5
)PP5 6
{QQ 
varRR 
objRR 
=RR 
bufferRR $
[RR$ %
iRR% &
]RR& '
;RR' (
varTT 
	extraArgsTT !
=TT" #
ZenPoolsTT$ ,
.TT, -
	SpawnListTT- 6
<TT6 7
TypeValuePairTT7 D
>TTD E
(TTE F
)TTF G
;TTG H
	extraArgsVV 
.VV 
AllocFreeAddRangeVV /
(VV/ 0
_extraArgumentsVV0 ?
)VV? @
;VV@ A
	extraArgsWW 
.WW 
AllocFreeAddRangeWW /
(WW/ 0
argsWW0 4
)WW4 5
;WW5 6

_containerYY 
.YY 
InjectExplicitYY -
(YY- .
objZZ 
,ZZ 
_resourceTypeZZ *
,ZZ* +
	extraArgsZZ, 5
,ZZ5 6
contextZZ7 >
,ZZ> ?
_concreteIdentifierZZ@ S
)ZZS T
;ZZT U
ZenPools\\ 
.\\ 
DespawnList\\ (
(\\( )
	extraArgs\\) 2
)\\2 3
;\\3 4
if^^ 
(^^  
_instantiateCallback^^ ,
!=^^- /
null^^0 4
)^^4 5
{__  
_instantiateCallback`` ,
(``, -
context``- 4
,``4 5
obj``6 9
)``9 :
;``: ;
}aa 
}bb 
}cc 
;cc 
}dd 	
}ee 
}ff Ê
YC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\ZenjectBinding.cs
	namespace 	
Zenject
 
{ 
public 

class 
ZenjectBinding 
:  !
MonoBehaviour" /
{		 
[

 	
Tooltip

	 
(

 
$str

 @
)

@ A
]

A B
[ 	
SerializeField	 
] 
	Component 
[ 
] 
_components 
=  !
null" &
;& '
[ 	
Tooltip	 
( 
$str	 í
)
í ì
]
ì î
[ 	
SerializeField	 
] 
string 
_identifier 
= 
string #
.# $
Empty$ )
;) *
[ 	
Tooltip	 
( 
$str	 Ú
)
Ú Û
]
Û Ù
[ 	
SerializeField	 
] 
bool 
_useSceneContext 
= 
false  %
;% &
[ 	
Tooltip	 
( 
$str	 »
)
» …
]
…  
[ 	
SerializeField	 
] 
[ 	 
FormerlySerializedAs	 
( 
$str 0
)0 1
]1 2
Context 
_context 
= 
null 
;  
[ 	
Tooltip	 
( 
$str	 ø
)
ø ¿
]
¿ ¡
[ 	
SerializeField	 
] 
	BindTypes 
	_bindType 
= 
	BindTypes '
.' (
Self( ,
;, -
public 
bool 
UseSceneContext #
{   	
get!! 
{!! 
return!! 
_useSceneContext!! )
;!!) *
}!!+ ,
}"" 	
public$$ 
Context$$ 
Context$$ 
{%% 	
get&& 
{&& 
return&& 
_context&& !
;&&! "
}&&# $
set'' 
{'' 
_context'' 
='' 
value'' "
;''" #
}''$ %
}(( 	
public** 
	Component** 
[** 
]** 

Components** %
{++ 	
get,, 
{,, 
return,, 
_components,, $
;,,$ %
},,& '
}-- 	
public// 
string// 

Identifier//  
{00 	
get11 
{11 
return11 
_identifier11 $
;11$ %
}11& '
}22 	
public44 
	BindTypes44 
BindType44 !
{55 	
get66 
{66 
return66 
	_bindType66 "
;66" #
}66$ %
}77 	
public99 
void99 
Start99 
(99 
)99 
{:: 	
}<< 	
public>> 
enum>> 
	BindTypes>> 
{?? 	
Self@@ 
,@@ 
AllInterfacesAA 
,AA  
AllInterfacesAndSelfBB  
,BB  !
BaseTypeCC 
}DD 	
}EE 
}FF óP
sC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\FromBinders\FromBinderNonGeneric.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class  
FromBinderNonGeneric %
:& '

FromBinder( 2
{ 
public  
FromBinderNonGeneric #
(# $
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
BindStatement 
bindStatement '
)' (
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
bindStatement, 9
)9 :
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
FromFactory< G
<G H
	TConcreteH Q
,Q R
TFactoryS [
>[ \
(\ ]
)] ^
where 
TFactory 
: 
IFactory %
<% &
	TConcrete& /
>/ 0
{ 	
return 
FromIFactory 
<  
	TConcrete  )
>) *
(* +
x+ ,
=>- /
x0 1
.1 2
To2 4
<4 5
TFactory5 =
>= >
(> ?
)? @
.@ A
AsCachedA I
(I J
)J K
)K L
;L M
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
FromIFactory< H
<H I
	TContractI R
>R S
(S T
Action 
< !
ConcreteBinderGeneric (
<( )
IFactory) 1
<1 2
	TContract2 ;
>; <
>< =
>= > 
factoryBindGenerator? S
)S T
{ 	
return 
FromIFactoryBase #
<# $
	TContract$ -
>- .
(. / 
factoryBindGenerator/ C
)C D
;D E
} 	
public!! 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder!! ;

FromMethod!!< F
<!!F G
	TConcrete!!G P
>!!P Q
(!!Q R
Func!!R V
<!!V W
InjectContext!!W d
,!!d e
	TConcrete!!f o
>!!o p
method!!q w
)!!w x
{"" 	
return## 
FromMethodBase## !
<##! "
	TConcrete##" +
>##+ ,
(##, -
method##- 3
)##3 4
;##4 5
}$$ 	
public&& 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder&& ;
FromMethodMultiple&&< N
<&&N O
	TConcrete&&O X
>&&X Y
(&&Y Z
Func&&Z ^
<&&^ _
InjectContext&&_ l
,&&l m
IEnumerable&&n y
<&&y z
	TConcrete	&&z É
>
&&É Ñ
>
&&Ñ Ö
method
&&Ü å
)
&&å ç
{'' 	
BindingUtil(( 
.(( $
AssertIsDerivedFromTypes(( 0
(((0 1
typeof((1 7
(((7 8
	TConcrete((8 A
)((A B
,((B C
AllParentTypes((D R
)((R S
;((S T
return)) "
FromMethodMultipleBase)) )
<))) *
	TConcrete))* 3
>))3 4
())4 5
method))5 ;
))); <
;))< =
}** 	
public,, 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder,, ;
FromResolveGetter,,< M
<,,M N
TObj,,N R
,,,R S
	TContract,,T ]
>,,] ^
(,,^ _
Func,,_ c
<,,c d
TObj,,d h
,,,h i
	TContract,,j s
>,,s t
method,,u {
),,{ |
{-- 	
return.. 
FromResolveGetter.. $
<..$ %
TObj..% )
,..) *
	TContract..+ 4
>..4 5
(..5 6
null..6 :
,..: ;
method..< B
)..B C
;..C D
}// 	
public11 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder11 ;
FromResolveGetter11< M
<11M N
TObj11N R
,11R S
	TContract11T ]
>11] ^
(11^ _
object11_ e

identifier11f p
,11p q
Func11r v
<11v w
TObj11w {
,11{ |
	TContract	11} Ü
>
11Ü á
method
11à é
)
11é è
{22 	
return33 
FromResolveGetter33 $
<33$ %
TObj33% )
,33) *
	TContract33+ 4
>334 5
(335 6

identifier336 @
,33@ A
method33B H
,33H I
InjectSources33J W
.33W X
Any33X [
)33[ \
;33\ ]
}44 	
public66 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder66 ;
FromResolveGetter66< M
<66M N
TObj66N R
,66R S
	TContract66T ]
>66] ^
(66^ _
object66_ e

identifier66f p
,66p q
Func66r v
<66v w
TObj66w {
,66{ |
	TContract	66} Ü
>
66Ü á
method
66à é
,
66é è
InjectSources
66ê ù
source
66û §
)
66§ •
{77 	
return88 !
FromResolveGetterBase88 (
<88( )
TObj88) -
,88- .
	TContract88/ 8
>888 9
(889 :

identifier88: D
,88D E
method88F L
,88L M
source88N T
,88T U
false88V [
)88[ \
;88\ ]
}99 	
public;; 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder;; ; 
FromResolveAllGetter;;< P
<;;P Q
TObj;;Q U
,;;U V
	TContract;;W `
>;;` a
(;;a b
Func;;b f
<;;f g
TObj;;g k
,;;k l
	TContract;;m v
>;;v w
method;;x ~
);;~ 
{<< 	
return==  
FromResolveAllGetter== '
<==' (
TObj==( ,
,==, -
	TContract==. 7
>==7 8
(==8 9
null==9 =
,=== >
method==? E
)==E F
;==F G
}>> 	
public@@ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder@@ ; 
FromResolveAllGetter@@< P
<@@P Q
TObj@@Q U
,@@U V
	TContract@@W `
>@@` a
(@@a b
object@@b h

identifier@@i s
,@@s t
Func@@u y
<@@y z
TObj@@z ~
,@@~ 
	TContract
@@Ä â
>
@@â ä
method
@@ã ë
)
@@ë í
{AA 	
returnBB  
FromResolveAllGetterBB '
<BB' (
TObjBB( ,
,BB, -
	TContractBB. 7
>BB7 8
(BB8 9

identifierBB9 C
,BBC D
methodBBE K
,BBK L
InjectSourcesBBM Z
.BBZ [
AnyBB[ ^
)BB^ _
;BB_ `
}CC 	
publicEE 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderEE ; 
FromResolveAllGetterEE< P
<EEP Q
TObjEEQ U
,EEU V
	TContractEEW `
>EE` a
(EEa b
objectEEb h

identifierEEi s
,EEs t
FuncEEu y
<EEy z
TObjEEz ~
,EE~ 
	TContract
EEÄ â
>
EEâ ä
method
EEã ë
,
EEë í
InjectSources
EEì †
source
EE° ß
)
EEß ®
{FF 	
returnGG !
FromResolveGetterBaseGG (
<GG( )
TObjGG) -
,GG- .
	TContractGG/ 8
>GG8 9
(GG9 :

identifierGG: D
,GGD E
methodGGF L
,GGL M
sourceGGN T
,GGT U
trueGGV Z
)GGZ [
;GG[ \
}HH 	
publicJJ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderJJ ;
FromInstanceJJ< H
(JJH I
objectJJI O
instanceJJP X
)JJX Y
{KK 	
returnLL 
FromInstanceBaseLL #
(LL# $
instanceLL$ ,
)LL, -
;LL- .
}MM 	
publicQQ 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderQQ ;$
FromComponentsInChildrenQQ< T
(QQT U
FuncRR 
<RR 
	ComponentRR 
,RR 
boolRR  
>RR  !
	predicateRR" +
,RR+ ,
boolRR- 1
includeInactiveRR2 A
=RRB C
trueRRD H
)RRH I
{SS 	
returnTT $
FromComponentsInChildrenTT +
(TT+ ,
falseTT, 1
,TT1 2
	predicateTT3 <
,TT< =
includeInactiveTT> M
)TTM N
;TTN O
}UU 	
publicWW 8
,ScopeConcreteIdArgConditionCopyNonLazyBinderWW ;$
FromComponentsInChildrenWW< T
(WWT U
boolXX 
excludeSelfXX 
=XX 
falseXX $
,XX$ %
FuncXX& *
<XX* +
	ComponentXX+ 4
,XX4 5
boolXX6 :
>XX: ;
	predicateXX< E
=XXF G
nullXXH L
,XXL M
boolXXN R
includeInactiveXXS b
=XXc d
trueXXe i
)XXi j
{YY 	
returnZZ (
FromComponentsInChildrenBaseZZ /
(ZZ/ 0
excludeSelfZZ0 ;
,ZZ; <
	predicateZZ= F
,ZZF G
includeInactiveZZH W
)ZZW X
;ZZX Y
}[[ 	
public]] 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder]] ;%
FromComponentsInHierarchy]]< U
(]]U V
Func^^ 
<^^ 
	Component^^ 
,^^ 
bool^^  
>^^  !
	predicate^^" +
=^^, -
null^^. 2
,^^2 3
bool^^4 8
includeInactive^^9 H
=^^I J
true^^K O
)^^O P
{__ 	
return`` )
FromComponentsInHierarchyBase`` 0
(``0 1
	predicate``1 :
,``: ;
includeInactive``< K
)``K L
;``L M
}aa 	
}cc 
}dd ¸9
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder0.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
	TContract0 9
>9 :
:; <!
FactoryToChoiceBinder= R
<R S
	TContractS \
>\ ]
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
	TContract% .
>. / 
WithFactoryArguments0 D
<D E
TE F
>F G
(G H
TH I
paramJ O
)O P
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
	TContract% .
>. / 
WithFactoryArguments0 D
<D E
TParam1E L
,L M
TParam2N U
>U V
(V W
TParam1W ^
param1_ e
,e f
TParam2g n
param2o u
)u v
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
	TContract% .
>. / 
WithFactoryArguments0 D
<D E
TParam1E L
,L M
TParam2N U
,U V
TParam3W ^
>^ _
(_ `
TParam1 
param1 
, 
TParam2 #
param2$ *
,* +
TParam3, 3
param34 :
): ;
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
	TContract%%% .
>%%. / 
WithFactoryArguments%%0 D
<%%D E
TParam1%%E L
,%%L M
TParam2%%N U
,%%U V
TParam3%%W ^
,%%^ _
TParam4%%` g
>%%g h
(%%h i
TParam1&& 
param1&& 
,&& 
TParam2&& #
param2&&$ *
,&&* +
TParam3&&, 3
param3&&4 :
,&&: ;
TParam4&&< C
param4&&D J
)&&J K
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
	TContract,,% .
>,,. / 
WithFactoryArguments,,0 D
<,,D E
TParam1,,E L
,,,L M
TParam2,,N U
,,,U V
TParam3,,W ^
,,,^ _
TParam4,,` g
,,,g h
TParam5,,i p
>,,p q
(,,q r
TParam1-- 
param1-- 
,-- 
TParam2-- #
param2--$ *
,--* +
TParam3--, 3
param3--4 :
,--: ;
TParam4--< C
param4--D J
,--J K
TParam5--L S
param5--T Z
)--Z [
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
	TContract33% .
>33. / 
WithFactoryArguments330 D
<33D E
TParam133E L
,33L M
TParam233N U
,33U V
TParam333W ^
,33^ _
TParam433` g
,33g h
TParam533i p
,33p q
TParam633r y
>33y z
(33z {
TParam144 
param144 
,44 
TParam244 #
param244$ *
,44* +
TParam344, 3
param3444 :
,44: ;
TParam444< C
param444D J
,44J K
TParam544L S
param544T Z
,44Z [
TParam644\ c
param644d j
)44j k
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
	TContract::% .
>::. / 
WithFactoryArguments::0 D
(::D E
object::E K
[::K L
]::L M
args::N R
)::R S
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
	TContract@@% .
>@@. /(
WithFactoryArgumentsExplicit@@0 L
(@@L M
IEnumerable@@M X
<@@X Y
TypeValuePair@@Y f
>@@f g
	extraArgs@@h q
)@@q r
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF º%
QC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Main\BindingId.cs
	namespace 	
Zenject
 
{ 
[ 
DebuggerStepThrough 
] 
public 

struct 
	BindingId 
: 

IEquatable (
<( )
	BindingId) 2
>2 3
{		 
Type

 
_type

 
;

 
object 
_identifier 
; 
public 
	BindingId 
( 
Type 
type "
," #
object$ *

identifier+ 5
)5 6
{ 	
_type 
= 
type 
; 
_identifier 
= 

identifier $
;$ %
} 	
public 
Type 
Type 
{ 	
get 
{ 
return 
_type 
; 
}  !
set 
{ 
_type 
= 
value 
;  
}! "
} 	
public 
object 

Identifier  
{ 	
get 
{ 
return 
_identifier $
;$ %
}& '
set 
{ 
_identifier 
= 
value  %
;% &
}' (
} 	
public 
override 
string 
ToString '
(' (
)( )
{   	
if!! 
(!! 
_identifier!! 
==!! 
null!! #
)!!# $
{"" 
return## 
_type## 
.## 

PrettyName## '
(##' (
)##( )
;##) *
}$$ 
return&& 
$str&& "
.&&" #
Fmt&&# &
(&&& '
_type&&' ,
,&&, -
_identifier&&. 9
)&&9 :
;&&: ;
}'' 	
public)) 
override)) 
int)) 
GetHashCode)) '
())' (
)))( )
{** 	
	unchecked++ 
{,, 
int-- 
hash-- 
=-- 
$num-- 
;-- 
hash.. 
=.. 
hash.. 
*.. 
$num..  
+..! "
_type..# (
...( )
GetHashCode..) 4
(..4 5
)..5 6
;..6 7
hash// 
=// 
hash// 
*// 
$num//  
+//! "
(//# $
_identifier//$ /
==//0 2
null//3 7
?//8 9
$num//: ;
://< =
_identifier//> I
.//I J
GetHashCode//J U
(//U V
)//V W
)//W X
;//X Y
return00 
hash00 
;00 
}11 
}22 	
public44 
override44 
bool44 
Equals44 #
(44# $
object44$ *
other44+ 0
)440 1
{55 	
if66 
(66 
other66 
is66 
	BindingId66 "
)66" #
{77 
	BindingId88 
otherId88 !
=88" #
(88$ %
	BindingId88% .
)88. /
other88/ 4
;884 5
return99 
otherId99 
==99 !
this99" &
;99& '
}:: 
return<< 
false<< 
;<< 
}== 	
public?? 
bool?? 
Equals?? 
(?? 
	BindingId?? $
that??% )
)??) *
{@@ 	
returnAA 
thisAA 
==AA 
thatAA 
;AA  
}BB 	
publicDD 
staticDD 
boolDD 
operatorDD #
==DD$ &
(DD& '
	BindingIdDD' 0
leftDD1 5
,DD5 6
	BindingIdDD7 @
rightDDA F
)DDF G
{EE 	
returnFF 
leftFF 
.FF 
TypeFF 
==FF 
rightFF  %
.FF% &
TypeFF& *
&&FF+ -
EqualsFF. 4
(FF4 5
leftFF5 9
.FF9 :

IdentifierFF: D
,FFD E
rightFFF K
.FFK L

IdentifierFFL V
)FFV W
;FFW X
}GG 	
publicII 
staticII 
boolII 
operatorII #
!=II$ &
(II& '
	BindingIdII' 0
leftII1 5
,II5 6
	BindingIdII7 @
rightIIA F
)IIF G
{JJ 	
returnKK 
!KK 
leftKK 
.KK 
EqualsKK 
(KK  
rightKK  %
)KK% &
;KK& '
}LL 	
}MM 
}NN –”
éC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByNewPrefabDynamicContext.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

abstract 
class 8
,SubContainerCreatorByNewPrefabDynamicContext F
:G H-
!SubContainerCreatorDynamicContextI j
{ 
readonly 
IPrefabProvider  
_prefabProvider! 0
;0 1
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
public 8
,SubContainerCreatorByNewPrefabDynamicContext ;
(; <
DiContainer 
	container !
,! "
IPrefabProvider 
prefabProvider *
,* +(
GameObjectCreationParameters, H
gameObjectBindInfoI [
)[ \
: 
base 
( 
	container 
) 
{ 	
_prefabProvider 
= 
prefabProvider ,
;, -
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
} 	
	protected 
override 

GameObject %
CreateGameObject& 6
(6 7
out7 :
bool; ?
shouldMakeActive@ P
)P Q
{ 	
var 
prefab 
= 
_prefabProvider (
.( )
	GetPrefab) 2
(2 3
)3 4
;4 5
var 
gameObj 
= 
	Container #
.# $!
CreateAndParentPrefab$ 9
(9 :
prefab 
, 
_gameObjectBindInfo +
,+ ,
null- 1
,1 2
out3 6
shouldMakeActive7 G
)G H
;H I
if!! 
(!! 
gameObj!! 
.!! 
GetComponent!! $
<!!$ %
GameObjectContext!!% 6
>!!6 7
(!!7 8
)!!8 9
!=!!: <
null!!= A
)!!A B
{"" 
throw## 
Assert## 
.## 
CreateException## ,
(##, -
$str	$$ …
,
$$…  
prefab
$$À —
.
$$— “
name
$$“ ÷
)
$$÷ ◊
;
$$◊ ÿ
}%% 
return'' 
gameObj'' 
;'' 
}(( 	
})) 
[++ 
NoReflectionBaking++ 
]++ 
public,, 

class,, 3
'SubContainerCreatorByNewPrefabInstaller,, 8
:,,9 :8
,SubContainerCreatorByNewPrefabDynamicContext,,; g
{-- 
readonly.. 
Type.. 
_installerType.. $
;..$ %
readonly// 
List// 
<// 
TypeValuePair// #
>//# $

_extraArgs//% /
;/// 0
public11 3
'SubContainerCreatorByNewPrefabInstaller11 6
(116 7
DiContainer22 
	container22 !
,22! "
IPrefabProvider22# 2
prefabProvider223 A
,22A B(
GameObjectCreationParameters33 (
gameObjectBindInfo33) ;
,33; <
Type44 
installerType44 
,44 
List44  $
<44$ %
TypeValuePair44% 2
>442 3
	extraArgs444 =
)44= >
:55 
base55 
(55 
	container55 
,55 
prefabProvider55 ,
,55, -
gameObjectBindInfo55. @
)55@ A
{66 	
_installerType77 
=77 
installerType77 *
;77* +

_extraArgs88 
=88 
	extraArgs88 "
;88" #
Assert:: 
.:: 
That:: 
(:: 
installerType:: %
.::% &
DerivesFrom::& 1
<::1 2
InstallerBase::2 ?
>::? @
(::@ A
)::A B
,::B C
$str;; u
,;;u v
installerType	;;w Ñ
)
;;Ñ Ö
;
;;Ö Ü
}<< 	
	protected>> 
override>> 
void>> 
AddInstallers>>  -
(>>- .
List>>. 2
<>>2 3
TypeValuePair>>3 @
>>>@ A
args>>B F
,>>F G
GameObjectContext>>H Y
context>>Z a
)>>a b
{?? 	
context@@ 
.@@ 
AddNormalInstaller@@ &
(@@& '
newAA 
ActionInstallerAA #
(AA# $
subContainerAA$ 0
=>AA1 3
{BB 
varCC 
	extraArgsCC %
=CC& '
ZenPoolsCC( 0
.CC0 1
	SpawnListCC1 :
<CC: ;
TypeValuePairCC; H
>CCH I
(CCI J
)CCJ K
;CCK L
	extraArgsEE !
.EE! "
AllocFreeAddRangeEE" 3
(EE3 4

_extraArgsEE4 >
)EE> ?
;EE? @
	extraArgsFF !
.FF! "
AllocFreeAddRangeFF" 3
(FF3 4
argsFF4 8
)FF8 9
;FF9 :
varHH 
	installerHH %
=HH& '
(HH( )
InstallerBaseHH) 6
)HH6 7
subContainerHH7 C
.HHC D
InstantiateExplicitHHD W
(HHW X
_installerTypeII *
,II* +
	extraArgsII, 5
)II5 6
;II6 7
ZenPoolsKK  
.KK  !
DespawnListKK! ,
(KK, -
	extraArgsKK- 6
)KK6 7
;KK7 8
	installerMM !
.MM! "
InstallBindingsMM" 1
(MM1 2
)MM2 3
;MM3 4
}NN 
)NN 
)NN 
;NN 
}OO 	
}PP 
[RR 
NoReflectionBakingRR 
]RR 
publicSS 

classSS 0
$SubContainerCreatorByNewPrefabMethodSS 5
:SS6 78
,SubContainerCreatorByNewPrefabDynamicContextSS8 d
{TT 
readonlyUU 
ActionUU 
<UU 
DiContainerUU #
>UU# $
_installerMethodUU% 5
;UU5 6
publicWW 0
$SubContainerCreatorByNewPrefabMethodWW 3
(WW3 4
DiContainerXX 
	containerXX !
,XX! "
IPrefabProviderXX# 2
prefabProviderXX3 A
,XXA B(
GameObjectCreationParametersYY (
gameObjectBindInfoYY) ;
,YY; <
ActionZZ 
<ZZ 
DiContainerZZ 
>ZZ 
installerMethodZZ  /
)ZZ/ 0
:[[ 
base[[ 
([[ 
	container[[ 
,[[ 
prefabProvider[[ ,
,[[, -
gameObjectBindInfo[[. @
)[[@ A
{\\ 	
_installerMethod]] 
=]] 
installerMethod]] .
;]]. /
}^^ 	
	protected`` 
override`` 
void`` 
AddInstallers``  -
(``- .
List``. 2
<``2 3
TypeValuePair``3 @
>``@ A
args``B F
,``F G
GameObjectContext``H Y
context``Z a
)``a b
{aa 	
Assertbb 
.bb 
Thatbb 
(bb 
argsbb 
.bb 
IsEmptybb $
(bb$ %
)bb% &
)bb& '
;bb' (
contextcc 
.cc 
AddNormalInstallercc &
(cc& '
newdd 
ActionInstallerdd #
(dd# $
_installerMethoddd$ 4
)dd4 5
)dd5 6
;dd6 7
}ee 	
}ff 
[hh 
NoReflectionBakinghh 
]hh 
publicii 

classii 0
$SubContainerCreatorByNewPrefabMethodii 5
<ii5 6
TParam1ii6 =
>ii= >
:ii? @8
,SubContainerCreatorByNewPrefabDynamicContextiiA m
{jj 
readonlykk 
Actionkk 
<kk 
DiContainerkk #
,kk# $
TParam1kk% ,
>kk, -
_installerMethodkk. >
;kk> ?
publicmm 0
$SubContainerCreatorByNewPrefabMethodmm 3
(mm3 4
DiContainernn 
	containernn !
,nn! "
IPrefabProvidernn# 2
prefabProvidernn3 A
,nnA B(
GameObjectCreationParametersoo (
gameObjectBindInfooo) ;
,oo; <
Actionpp 
<pp 
DiContainerpp 
,pp 
TParam1pp  '
>pp' (
installerMethodpp) 8
)pp8 9
:qq 
baseqq 
(qq 
	containerqq 
,qq 
prefabProviderqq ,
,qq, -
gameObjectBindInfoqq. @
)qq@ A
{rr 	
_installerMethodss 
=ss 
installerMethodss .
;ss. /
}tt 	
	protectedvv 
overridevv 
voidvv 
AddInstallersvv  -
(vv- .
Listvv. 2
<vv2 3
TypeValuePairvv3 @
>vv@ A
argsvvB F
,vvF G
GameObjectContextvvH Y
contextvvZ a
)vva b
{ww 	
Assertxx 
.xx 
IsEqualxx 
(xx 
argsxx 
.xx  
Countxx  %
,xx% &
$numxx' (
)xx( )
;xx) *
Assertyy 
.yy 
Thatyy 
(yy 
argsyy 
[yy 
$numyy 
]yy 
.yy  
Typeyy  $
.yy$ %
DerivesFromOrEqualyy% 7
<yy7 8
TParam1yy8 ?
>yy? @
(yy@ A
)yyA B
)yyB C
;yyC D
context{{ 
.{{ 
AddNormalInstaller{{ &
({{& '
new|| 
ActionInstaller|| #
(||# $
subContainer||$ 0
=>||1 3
{}} 
_installerMethod~~ (
(~~( )
subContainer~~) 5
,~~5 6
(~~7 8
TParam1~~8 ?
)~~? @
args~~@ D
[~~D E
$num~~E F
]~~F G
.~~G H
Value~~H M
)~~M N
;~~N O
} 
) 
) 
; 
}
ÄÄ 	
}
ÅÅ 
[
ÉÉ  
NoReflectionBaking
ÉÉ 
]
ÉÉ 
public
ÑÑ 

class
ÑÑ 2
$SubContainerCreatorByNewPrefabMethod
ÑÑ 5
<
ÑÑ5 6
TParam1
ÑÑ6 =
,
ÑÑ= >
TParam2
ÑÑ? F
>
ÑÑF G
:
ÑÑH I:
,SubContainerCreatorByNewPrefabDynamicContext
ÑÑJ v
{
ÖÖ 
readonly
ÜÜ 
Action
ÜÜ 
<
ÜÜ 
DiContainer
ÜÜ #
,
ÜÜ# $
TParam1
ÜÜ% ,
,
ÜÜ, -
TParam2
ÜÜ. 5
>
ÜÜ5 6
_installerMethod
ÜÜ7 G
;
ÜÜG H
public
àà 2
$SubContainerCreatorByNewPrefabMethod
àà 3
(
àà3 4
DiContainer
ââ 
	container
ââ !
,
ââ! "
IPrefabProvider
ââ# 2
prefabProvider
ââ3 A
,
ââA B*
GameObjectCreationParameters
ää ( 
gameObjectBindInfo
ää) ;
,
ää; <
Action
ãã 
<
ãã 
DiContainer
ãã 
,
ãã 
TParam1
ãã  '
,
ãã' (
TParam2
ãã) 0
>
ãã0 1
installerMethod
ãã2 A
)
ããA B
:
åå 
base
åå 
(
åå 
	container
åå 
,
åå 
prefabProvider
åå ,
,
åå, - 
gameObjectBindInfo
åå. @
)
åå@ A
{
çç 	
_installerMethod
éé 
=
éé 
installerMethod
éé .
;
éé. /
}
èè 	
	protected
ëë 
override
ëë 
void
ëë 
AddInstallers
ëë  -
(
ëë- .
List
ëë. 2
<
ëë2 3
TypeValuePair
ëë3 @
>
ëë@ A
args
ëëB F
,
ëëF G
GameObjectContext
ëëH Y
context
ëëZ a
)
ëëa b
{
íí 	
Assert
ìì 
.
ìì 
IsEqual
ìì 
(
ìì 
args
ìì 
.
ìì  
Count
ìì  %
,
ìì% &
$num
ìì' (
)
ìì( )
;
ìì) *
Assert
îî 
.
îî 
That
îî 
(
îî 
args
îî 
[
îî 
$num
îî 
]
îî 
.
îî  
Type
îî  $
.
îî$ % 
DerivesFromOrEqual
îî% 7
<
îî7 8
TParam1
îî8 ?
>
îî? @
(
îî@ A
)
îîA B
)
îîB C
;
îîC D
Assert
ïï 
.
ïï 
That
ïï 
(
ïï 
args
ïï 
[
ïï 
$num
ïï 
]
ïï 
.
ïï  
Type
ïï  $
.
ïï$ % 
DerivesFromOrEqual
ïï% 7
<
ïï7 8
TParam2
ïï8 ?
>
ïï? @
(
ïï@ A
)
ïïA B
)
ïïB C
;
ïïC D
context
óó 
.
óó  
AddNormalInstaller
óó &
(
óó& '
new
òò 
ActionInstaller
òò #
(
òò# $
subContainer
òò$ 0
=>
òò1 3
{
ôô 
_installerMethod
öö (
(
öö( )
subContainer
öö) 5
,
öö5 6
(
õõ 
TParam1
õõ $
)
õõ$ %
args
õõ% )
[
õõ) *
$num
õõ* +
]
õõ+ ,
.
õõ, -
Value
õõ- 2
,
õõ2 3
(
úú 
TParam2
úú $
)
úú$ %
args
úú% )
[
úú) *
$num
úú* +
]
úú+ ,
.
úú, -
Value
úú- 2
)
úú2 3
;
úú3 4
}
ùù 
)
ùù 
)
ùù 
;
ùù 
}
ûû 	
}
üü 
[
°°  
NoReflectionBaking
°° 
]
°° 
public
¢¢ 

class
¢¢ 2
$SubContainerCreatorByNewPrefabMethod
¢¢ 5
<
¢¢5 6
TParam1
¢¢6 =
,
¢¢= >
TParam2
¢¢? F
,
¢¢F G
TParam3
¢¢H O
>
¢¢O P
:
¢¢Q R:
,SubContainerCreatorByNewPrefabDynamicContext
¢¢S 
{
££ 
readonly
§§ 
Action
§§ 
<
§§ 
DiContainer
§§ #
,
§§# $
TParam1
§§% ,
,
§§, -
TParam2
§§. 5
,
§§5 6
TParam3
§§7 >
>
§§> ?
_installerMethod
§§@ P
;
§§P Q
public
¶¶ 2
$SubContainerCreatorByNewPrefabMethod
¶¶ 3
(
¶¶3 4
DiContainer
ßß 
	container
ßß !
,
ßß! "
IPrefabProvider
ßß# 2
prefabProvider
ßß3 A
,
ßßA B*
GameObjectCreationParameters
®® ( 
gameObjectBindInfo
®®) ;
,
®®; <
Action
©© 
<
©© 
DiContainer
©© 
,
©© 
TParam1
©©  '
,
©©' (
TParam2
©©) 0
,
©©0 1
TParam3
©©2 9
>
©©9 :
installerMethod
©©; J
)
©©J K
:
™™ 
base
™™ 
(
™™ 
	container
™™ 
,
™™ 
prefabProvider
™™ ,
,
™™, - 
gameObjectBindInfo
™™. @
)
™™@ A
{
´´ 	
_installerMethod
¨¨ 
=
¨¨ 
installerMethod
¨¨ .
;
¨¨. /
}
≠≠ 	
	protected
ØØ 
override
ØØ 
void
ØØ 
AddInstallers
ØØ  -
(
ØØ- .
List
ØØ. 2
<
ØØ2 3
TypeValuePair
ØØ3 @
>
ØØ@ A
args
ØØB F
,
ØØF G
GameObjectContext
ØØH Y
context
ØØZ a
)
ØØa b
{
∞∞ 	
Assert
±± 
.
±± 
IsEqual
±± 
(
±± 
args
±± 
.
±±  
Count
±±  %
,
±±% &
$num
±±' (
)
±±( )
;
±±) *
Assert
≤≤ 
.
≤≤ 
That
≤≤ 
(
≤≤ 
args
≤≤ 
[
≤≤ 
$num
≤≤ 
]
≤≤ 
.
≤≤  
Type
≤≤  $
.
≤≤$ % 
DerivesFromOrEqual
≤≤% 7
<
≤≤7 8
TParam1
≤≤8 ?
>
≤≤? @
(
≤≤@ A
)
≤≤A B
)
≤≤B C
;
≤≤C D
Assert
≥≥ 
.
≥≥ 
That
≥≥ 
(
≥≥ 
args
≥≥ 
[
≥≥ 
$num
≥≥ 
]
≥≥ 
.
≥≥  
Type
≥≥  $
.
≥≥$ % 
DerivesFromOrEqual
≥≥% 7
<
≥≥7 8
TParam2
≥≥8 ?
>
≥≥? @
(
≥≥@ A
)
≥≥A B
)
≥≥B C
;
≥≥C D
Assert
¥¥ 
.
¥¥ 
That
¥¥ 
(
¥¥ 
args
¥¥ 
[
¥¥ 
$num
¥¥ 
]
¥¥ 
.
¥¥  
Type
¥¥  $
.
¥¥$ % 
DerivesFromOrEqual
¥¥% 7
<
¥¥7 8
TParam3
¥¥8 ?
>
¥¥? @
(
¥¥@ A
)
¥¥A B
)
¥¥B C
;
¥¥C D
context
∂∂ 
.
∂∂  
AddNormalInstaller
∂∂ &
(
∂∂& '
new
∑∑ 
ActionInstaller
∑∑ #
(
∑∑# $
subContainer
∑∑$ 0
=>
∑∑1 3
{
∏∏ 
_installerMethod
ππ (
(
ππ( )
subContainer
ππ) 5
,
ππ5 6
(
∫∫ 
TParam1
∫∫ $
)
∫∫$ %
args
∫∫% )
[
∫∫) *
$num
∫∫* +
]
∫∫+ ,
.
∫∫, -
Value
∫∫- 2
,
∫∫2 3
(
ªª 
TParam2
ªª $
)
ªª$ %
args
ªª% )
[
ªª) *
$num
ªª* +
]
ªª+ ,
.
ªª, -
Value
ªª- 2
,
ªª2 3
(
ºº 
TParam3
ºº $
)
ºº$ %
args
ºº% )
[
ºº) *
$num
ºº* +
]
ºº+ ,
.
ºº, -
Value
ºº- 2
)
ºº2 3
;
ºº3 4
}
ΩΩ 
)
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 	
}
øø 
[
¡¡  
NoReflectionBaking
¡¡ 
]
¡¡ 
public
¬¬ 

class
¬¬ 2
$SubContainerCreatorByNewPrefabMethod
¬¬ 5
<
¬¬5 6
TParam1
¬¬6 =
,
¬¬= >
TParam2
¬¬? F
,
¬¬F G
TParam3
¬¬H O
,
¬¬O P
TParam4
¬¬Q X
>
¬¬X Y
:
¬¬Z [;
,SubContainerCreatorByNewPrefabDynamicContext¬¬\ à
{
√√ 
readonly
ƒƒ 
Action
»» 
<
»» 
DiContainer
»» 
,
»» 
TParam1
»»  '
,
»»' (
TParam2
»») 0
,
»»0 1
TParam3
»»2 9
,
»»9 :
TParam4
»»; B
>
»»B C
_installerMethod
»»D T
;
»»T U
public
   2
$SubContainerCreatorByNewPrefabMethod
   3
(
  3 4
DiContainer
ÀÀ 
	container
ÀÀ !
,
ÀÀ! "
IPrefabProvider
ÀÀ# 2
prefabProvider
ÀÀ3 A
,
ÀÀA B*
GameObjectCreationParameters
ÃÃ ( 
gameObjectBindInfo
ÃÃ) ;
,
ÃÃ; <
Action
–– 
<
–– 
DiContainer
–– 
,
–– 
TParam1
––  '
,
––' (
TParam2
––) 0
,
––0 1
TParam3
––2 9
,
––9 :
TParam4
––; B
>
––B C
installerMethod
––D S
)
––S T
:
—— 
base
—— 
(
—— 
	container
—— 
,
—— 
prefabProvider
—— ,
,
——, - 
gameObjectBindInfo
——. @
)
——@ A
{
““ 	
_installerMethod
”” 
=
”” 
installerMethod
”” .
;
””. /
}
‘‘ 	
	protected
÷÷ 
override
÷÷ 
void
÷÷ 
AddInstallers
÷÷  -
(
÷÷- .
List
÷÷. 2
<
÷÷2 3
TypeValuePair
÷÷3 @
>
÷÷@ A
args
÷÷B F
,
÷÷F G
GameObjectContext
÷÷H Y
context
÷÷Z a
)
÷÷a b
{
◊◊ 	
Assert
ÿÿ 
.
ÿÿ 
IsEqual
ÿÿ 
(
ÿÿ 
args
ÿÿ 
.
ÿÿ  
Count
ÿÿ  %
,
ÿÿ% &
$num
ÿÿ' (
)
ÿÿ( )
;
ÿÿ) *
Assert
ŸŸ 
.
ŸŸ 
That
ŸŸ 
(
ŸŸ 
args
ŸŸ 
[
ŸŸ 
$num
ŸŸ 
]
ŸŸ 
.
ŸŸ  
Type
ŸŸ  $
.
ŸŸ$ % 
DerivesFromOrEqual
ŸŸ% 7
<
ŸŸ7 8
TParam1
ŸŸ8 ?
>
ŸŸ? @
(
ŸŸ@ A
)
ŸŸA B
)
ŸŸB C
;
ŸŸC D
Assert
⁄⁄ 
.
⁄⁄ 
That
⁄⁄ 
(
⁄⁄ 
args
⁄⁄ 
[
⁄⁄ 
$num
⁄⁄ 
]
⁄⁄ 
.
⁄⁄  
Type
⁄⁄  $
.
⁄⁄$ % 
DerivesFromOrEqual
⁄⁄% 7
<
⁄⁄7 8
TParam2
⁄⁄8 ?
>
⁄⁄? @
(
⁄⁄@ A
)
⁄⁄A B
)
⁄⁄B C
;
⁄⁄C D
Assert
€€ 
.
€€ 
That
€€ 
(
€€ 
args
€€ 
[
€€ 
$num
€€ 
]
€€ 
.
€€  
Type
€€  $
.
€€$ % 
DerivesFromOrEqual
€€% 7
<
€€7 8
TParam3
€€8 ?
>
€€? @
(
€€@ A
)
€€A B
)
€€B C
;
€€C D
Assert
‹‹ 
.
‹‹ 
That
‹‹ 
(
‹‹ 
args
‹‹ 
[
‹‹ 
$num
‹‹ 
]
‹‹ 
.
‹‹  
Type
‹‹  $
.
‹‹$ % 
DerivesFromOrEqual
‹‹% 7
<
‹‹7 8
TParam4
‹‹8 ?
>
‹‹? @
(
‹‹@ A
)
‹‹A B
)
‹‹B C
;
‹‹C D
context
ﬁﬁ 
.
ﬁﬁ  
AddNormalInstaller
ﬁﬁ &
(
ﬁﬁ& '
new
ﬂﬂ 
ActionInstaller
ﬂﬂ #
(
ﬂﬂ# $
subContainer
ﬂﬂ$ 0
=>
ﬂﬂ1 3
{
‡‡ 
_installerMethod
·· (
(
··( )
subContainer
··) 5
,
··5 6
(
‚‚ 
TParam1
‚‚ $
)
‚‚$ %
args
‚‚% )
[
‚‚) *
$num
‚‚* +
]
‚‚+ ,
.
‚‚, -
Value
‚‚- 2
,
‚‚2 3
(
„„ 
TParam2
„„ $
)
„„$ %
args
„„% )
[
„„) *
$num
„„* +
]
„„+ ,
.
„„, -
Value
„„- 2
,
„„2 3
(
‰‰ 
TParam3
‰‰ $
)
‰‰$ %
args
‰‰% )
[
‰‰) *
$num
‰‰* +
]
‰‰+ ,
.
‰‰, -
Value
‰‰- 2
,
‰‰2 3
(
ÂÂ 
TParam4
ÂÂ $
)
ÂÂ$ %
args
ÂÂ% )
[
ÂÂ) *
$num
ÂÂ* +
]
ÂÂ+ ,
.
ÂÂ, -
Value
ÂÂ- 2
)
ÂÂ2 3
;
ÂÂ3 4
}
ÊÊ 
)
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
}
ËË 
[
ÍÍ  
NoReflectionBaking
ÍÍ 
]
ÍÍ 
public
ÎÎ 

class
ÎÎ 2
$SubContainerCreatorByNewPrefabMethod
ÎÎ 5
<
ÎÎ5 6
TParam1
ÎÎ6 =
,
ÎÎ= >
TParam2
ÎÎ? F
,
ÎÎF G
TParam3
ÎÎH O
,
ÎÎO P
TParam4
ÎÎQ X
,
ÎÎX Y
TParam5
ÎÎZ a
>
ÎÎa b
:
ÎÎc d;
,SubContainerCreatorByNewPrefabDynamicContextÎÎe ë
{
ÏÏ 
readonly
ÌÌ 
Action
ÒÒ 
<
ÒÒ 
DiContainer
ÒÒ 
,
ÒÒ 
TParam1
ÒÒ  '
,
ÒÒ' (
TParam2
ÒÒ) 0
,
ÒÒ0 1
TParam3
ÒÒ2 9
,
ÒÒ9 :
TParam4
ÒÒ; B
,
ÒÒB C
TParam5
ÒÒD K
>
ÒÒK L
_installerMethod
ÒÒM ]
;
ÒÒ] ^
public
ÛÛ 2
$SubContainerCreatorByNewPrefabMethod
ÛÛ 3
(
ÛÛ3 4
DiContainer
ÙÙ 
	container
ÙÙ !
,
ÙÙ! "
IPrefabProvider
ÙÙ# 2
prefabProvider
ÙÙ3 A
,
ÙÙA B*
GameObjectCreationParameters
ıı ( 
gameObjectBindInfo
ıı) ;
,
ıı; <
Action
˘˘ 
<
˘˘ 
DiContainer
˘˘ 
,
˘˘ 
TParam1
˘˘  '
,
˘˘' (
TParam2
˘˘) 0
,
˘˘0 1
TParam3
˘˘2 9
,
˘˘9 :
TParam4
˘˘; B
,
˘˘B C
TParam5
˘˘D K
>
˘˘K L
installerMethod
˘˘M \
)
˘˘\ ]
:
˙˙ 
base
˙˙ 
(
˙˙ 
	container
˙˙ 
,
˙˙ 
prefabProvider
˙˙ ,
,
˙˙, - 
gameObjectBindInfo
˙˙. @
)
˙˙@ A
{
˚˚ 	
_installerMethod
¸¸ 
=
¸¸ 
installerMethod
¸¸ .
;
¸¸. /
}
˝˝ 	
	protected
ˇˇ 
override
ˇˇ 
void
ˇˇ 
AddInstallers
ˇˇ  -
(
ˇˇ- .
List
ˇˇ. 2
<
ˇˇ2 3
TypeValuePair
ˇˇ3 @
>
ˇˇ@ A
args
ˇˇB F
,
ˇˇF G
GameObjectContext
ˇˇH Y
context
ˇˇZ a
)
ˇˇa b
{
ÄÄ 	
Assert
ÅÅ 
.
ÅÅ 
IsEqual
ÅÅ 
(
ÅÅ 
args
ÅÅ 
.
ÅÅ  
Count
ÅÅ  %
,
ÅÅ% &
$num
ÅÅ' (
)
ÅÅ( )
;
ÅÅ) *
Assert
ÇÇ 
.
ÇÇ 
That
ÇÇ 
(
ÇÇ 
args
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
.
ÇÇ  
Type
ÇÇ  $
.
ÇÇ$ % 
DerivesFromOrEqual
ÇÇ% 7
<
ÇÇ7 8
TParam1
ÇÇ8 ?
>
ÇÇ? @
(
ÇÇ@ A
)
ÇÇA B
)
ÇÇB C
;
ÇÇC D
Assert
ÉÉ 
.
ÉÉ 
That
ÉÉ 
(
ÉÉ 
args
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
.
ÉÉ  
Type
ÉÉ  $
.
ÉÉ$ % 
DerivesFromOrEqual
ÉÉ% 7
<
ÉÉ7 8
TParam2
ÉÉ8 ?
>
ÉÉ? @
(
ÉÉ@ A
)
ÉÉA B
)
ÉÉB C
;
ÉÉC D
Assert
ÑÑ 
.
ÑÑ 
That
ÑÑ 
(
ÑÑ 
args
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
.
ÑÑ  
Type
ÑÑ  $
.
ÑÑ$ % 
DerivesFromOrEqual
ÑÑ% 7
<
ÑÑ7 8
TParam3
ÑÑ8 ?
>
ÑÑ? @
(
ÑÑ@ A
)
ÑÑA B
)
ÑÑB C
;
ÑÑC D
Assert
ÖÖ 
.
ÖÖ 
That
ÖÖ 
(
ÖÖ 
args
ÖÖ 
[
ÖÖ 
$num
ÖÖ 
]
ÖÖ 
.
ÖÖ  
Type
ÖÖ  $
.
ÖÖ$ % 
DerivesFromOrEqual
ÖÖ% 7
<
ÖÖ7 8
TParam4
ÖÖ8 ?
>
ÖÖ? @
(
ÖÖ@ A
)
ÖÖA B
)
ÖÖB C
;
ÖÖC D
Assert
ÜÜ 
.
ÜÜ 
That
ÜÜ 
(
ÜÜ 
args
ÜÜ 
[
ÜÜ 
$num
ÜÜ 
]
ÜÜ 
.
ÜÜ  
Type
ÜÜ  $
.
ÜÜ$ % 
DerivesFromOrEqual
ÜÜ% 7
<
ÜÜ7 8
TParam5
ÜÜ8 ?
>
ÜÜ? @
(
ÜÜ@ A
)
ÜÜA B
)
ÜÜB C
;
ÜÜC D
context
àà 
.
àà  
AddNormalInstaller
àà &
(
àà& '
new
ââ 
ActionInstaller
ââ #
(
ââ# $
subContainer
ââ$ 0
=>
ââ1 3
{
ää 
_installerMethod
ãã (
(
ãã( )
subContainer
ãã) 5
,
ãã5 6
(
åå 
TParam1
åå $
)
åå$ %
args
åå% )
[
åå) *
$num
åå* +
]
åå+ ,
.
åå, -
Value
åå- 2
,
åå2 3
(
çç 
TParam2
çç $
)
çç$ %
args
çç% )
[
çç) *
$num
çç* +
]
çç+ ,
.
çç, -
Value
çç- 2
,
çç2 3
(
éé 
TParam3
éé $
)
éé$ %
args
éé% )
[
éé) *
$num
éé* +
]
éé+ ,
.
éé, -
Value
éé- 2
,
éé2 3
(
èè 
TParam4
èè $
)
èè$ %
args
èè% )
[
èè) *
$num
èè* +
]
èè+ ,
.
èè, -
Value
èè- 2
,
èè2 3
(
êê 
TParam5
êê $
)
êê$ %
args
êê% )
[
êê) *
$num
êê* +
]
êê+ ,
.
êê, -
Value
êê- 2
)
êê2 3
;
êê3 4
}
ëë 
)
ëë 
)
ëë 
;
ëë 
}
íí 	
}
ìì 
[
ïï  
NoReflectionBaking
ïï 
]
ïï 
public
ññ 

class
ññ 2
$SubContainerCreatorByNewPrefabMethod
ññ 5
<
ññ5 6
TParam1
ññ6 =
,
ññ= >
TParam2
ññ? F
,
ññF G
TParam3
ññH O
,
ññO P
TParam4
ññQ X
,
ññX Y
TParam5
ññZ a
,
ñña b
TParam6
ññc j
>
ññj k
:
ññl m;
,SubContainerCreatorByNewPrefabDynamicContextññn ö
{
óó 
readonly
òò 
Action
úú 
<
úú 
DiContainer
úú 
,
úú 
TParam1
úú  '
,
úú' (
TParam2
úú) 0
,
úú0 1
TParam3
úú2 9
,
úú9 :
TParam4
úú; B
,
úúB C
TParam5
úúD K
,
úúK L
TParam6
úúM T
>
úúT U
_installerMethod
úúV f
;
úúf g
public
ûû 2
$SubContainerCreatorByNewPrefabMethod
ûû 3
(
ûû3 4
DiContainer
üü 
	container
üü !
,
üü! "
IPrefabProvider
üü# 2
prefabProvider
üü3 A
,
üüA B*
GameObjectCreationParameters
†† ( 
gameObjectBindInfo
††) ;
,
††; <
Action
§§ 
<
§§ 
DiContainer
§§ 
,
§§ 
TParam1
§§  '
,
§§' (
TParam2
§§) 0
,
§§0 1
TParam3
§§2 9
,
§§9 :
TParam4
§§; B
,
§§B C
TParam5
§§D K
,
§§K L
TParam6
§§M T
>
§§T U
installerMethod
§§V e
)
§§e f
:
•• 
base
•• 
(
•• 
	container
•• 
,
•• 
prefabProvider
•• ,
,
••, - 
gameObjectBindInfo
••. @
)
••@ A
{
¶¶ 	
_installerMethod
ßß 
=
ßß 
installerMethod
ßß .
;
ßß. /
}
®® 	
	protected
™™ 
override
™™ 
void
™™ 
AddInstallers
™™  -
(
™™- .
List
™™. 2
<
™™2 3
TypeValuePair
™™3 @
>
™™@ A
args
™™B F
,
™™F G
GameObjectContext
™™H Y
context
™™Z a
)
™™a b
{
´´ 	
Assert
¨¨ 
.
¨¨ 
IsEqual
¨¨ 
(
¨¨ 
args
¨¨ 
.
¨¨  
Count
¨¨  %
,
¨¨% &
$num
¨¨' (
)
¨¨( )
;
¨¨) *
Assert
≠≠ 
.
≠≠ 
That
≠≠ 
(
≠≠ 
args
≠≠ 
[
≠≠ 
$num
≠≠ 
]
≠≠ 
.
≠≠  
Type
≠≠  $
.
≠≠$ % 
DerivesFromOrEqual
≠≠% 7
<
≠≠7 8
TParam1
≠≠8 ?
>
≠≠? @
(
≠≠@ A
)
≠≠A B
)
≠≠B C
;
≠≠C D
Assert
ÆÆ 
.
ÆÆ 
That
ÆÆ 
(
ÆÆ 
args
ÆÆ 
[
ÆÆ 
$num
ÆÆ 
]
ÆÆ 
.
ÆÆ  
Type
ÆÆ  $
.
ÆÆ$ % 
DerivesFromOrEqual
ÆÆ% 7
<
ÆÆ7 8
TParam2
ÆÆ8 ?
>
ÆÆ? @
(
ÆÆ@ A
)
ÆÆA B
)
ÆÆB C
;
ÆÆC D
Assert
ØØ 
.
ØØ 
That
ØØ 
(
ØØ 
args
ØØ 
[
ØØ 
$num
ØØ 
]
ØØ 
.
ØØ  
Type
ØØ  $
.
ØØ$ % 
DerivesFromOrEqual
ØØ% 7
<
ØØ7 8
TParam3
ØØ8 ?
>
ØØ? @
(
ØØ@ A
)
ØØA B
)
ØØB C
;
ØØC D
Assert
∞∞ 
.
∞∞ 
That
∞∞ 
(
∞∞ 
args
∞∞ 
[
∞∞ 
$num
∞∞ 
]
∞∞ 
.
∞∞  
Type
∞∞  $
.
∞∞$ % 
DerivesFromOrEqual
∞∞% 7
<
∞∞7 8
TParam4
∞∞8 ?
>
∞∞? @
(
∞∞@ A
)
∞∞A B
)
∞∞B C
;
∞∞C D
Assert
±± 
.
±± 
That
±± 
(
±± 
args
±± 
[
±± 
$num
±± 
]
±± 
.
±±  
Type
±±  $
.
±±$ % 
DerivesFromOrEqual
±±% 7
<
±±7 8
TParam5
±±8 ?
>
±±? @
(
±±@ A
)
±±A B
)
±±B C
;
±±C D
Assert
≤≤ 
.
≤≤ 
That
≤≤ 
(
≤≤ 
args
≤≤ 
[
≤≤ 
$num
≤≤ 
]
≤≤ 
.
≤≤  
Type
≤≤  $
.
≤≤$ % 
DerivesFromOrEqual
≤≤% 7
<
≤≤7 8
TParam6
≤≤8 ?
>
≤≤? @
(
≤≤@ A
)
≤≤A B
)
≤≤B C
;
≤≤C D
context
¥¥ 
.
¥¥  
AddNormalInstaller
¥¥ &
(
¥¥& '
new
µµ 
ActionInstaller
µµ #
(
µµ# $
subContainer
µµ$ 0
=>
µµ1 3
{
∂∂ 
_installerMethod
∑∑ (
(
∑∑( )
subContainer
∑∑) 5
,
∑∑5 6
(
∏∏ 
TParam1
∏∏ $
)
∏∏$ %
args
∏∏% )
[
∏∏) *
$num
∏∏* +
]
∏∏+ ,
.
∏∏, -
Value
∏∏- 2
,
∏∏2 3
(
ππ 
TParam2
ππ $
)
ππ$ %
args
ππ% )
[
ππ) *
$num
ππ* +
]
ππ+ ,
.
ππ, -
Value
ππ- 2
,
ππ2 3
(
∫∫ 
TParam3
∫∫ $
)
∫∫$ %
args
∫∫% )
[
∫∫) *
$num
∫∫* +
]
∫∫+ ,
.
∫∫, -
Value
∫∫- 2
,
∫∫2 3
(
ªª 
TParam4
ªª $
)
ªª$ %
args
ªª% )
[
ªª) *
$num
ªª* +
]
ªª+ ,
.
ªª, -
Value
ªª- 2
,
ªª2 3
(
ºº 
TParam5
ºº $
)
ºº$ %
args
ºº% )
[
ºº) *
$num
ºº* +
]
ºº+ ,
.
ºº, -
Value
ºº- 2
,
ºº2 3
(
ΩΩ 
TParam6
ΩΩ $
)
ΩΩ$ %
args
ΩΩ% )
[
ΩΩ) *
$num
ΩΩ* +
]
ΩΩ+ ,
.
ΩΩ, -
Value
ΩΩ- 2
)
ΩΩ2 3
;
ΩΩ3 4
}
ææ 
)
ææ 
)
ææ 
;
ææ 
}
øø 	
}
¿¿ 
[
¬¬  
NoReflectionBaking
¬¬ 
]
¬¬ 
public
√√ 

class
√√ 2
$SubContainerCreatorByNewPrefabMethod
√√ 5
<
√√5 6
TParam1
√√6 =
,
√√= >
TParam2
√√? F
,
√√F G
TParam3
√√H O
,
√√O P
TParam4
√√Q X
,
√√X Y
TParam5
√√Z a
,
√√a b
TParam6
√√c j
,
√√j k
TParam7
√√l s
,
√√s t
TParam8
√√u |
,
√√| }
TParam9√√~ Ö
,√√Ö Ü
TParam10√√á è
>√√è ê
:√√ë í<
,SubContainerCreatorByNewPrefabDynamicContext√√ì ø
{
ƒƒ 
readonly
≈≈ 
Action
…… 
<
…… 
DiContainer
…… 
,
…… 
TParam1
……  '
,
……' (
TParam2
……) 0
,
……0 1
TParam3
……2 9
,
……9 :
TParam4
……; B
,
……B C
TParam5
……D K
,
……K L
TParam6
……M T
,
……T U
TParam7
……V ]
,
……] ^
TParam8
……_ f
,
……f g
TParam9
……h o
,
……o p
TParam10
……q y
>
……y z
_installerMethod……{ ã
;……ã å
public
ÀÀ 2
$SubContainerCreatorByNewPrefabMethod
ÀÀ 3
(
ÀÀ3 4
DiContainer
ÃÃ 
	container
ÃÃ !
,
ÃÃ! "
IPrefabProvider
ÃÃ# 2
prefabProvider
ÃÃ3 A
,
ÃÃA B*
GameObjectCreationParameters
ÕÕ ( 
gameObjectBindInfo
ÕÕ) ;
,
ÕÕ; <
Action
—— 
<
—— 
DiContainer
—— 
,
—— 
TParam1
——  '
,
——' (
TParam2
——) 0
,
——0 1
TParam3
——2 9
,
——9 :
TParam4
——; B
,
——B C
TParam5
——D K
,
——K L
TParam6
——M T
,
——T U
TParam7
——V ]
,
——] ^
TParam8
——_ f
,
——f g
TParam9
——h o
,
——o p
TParam10
——q y
>
——y z
installerMethod——{ ä
)——ä ã
:
““ 
base
““ 
(
““ 
	container
““ 
,
““ 
prefabProvider
““ ,
,
““, - 
gameObjectBindInfo
““. @
)
““@ A
{
”” 	
_installerMethod
‘‘ 
=
‘‘ 
installerMethod
‘‘ .
;
‘‘. /
}
’’ 	
	protected
◊◊ 
override
◊◊ 
void
◊◊ 
AddInstallers
◊◊  -
(
◊◊- .
List
◊◊. 2
<
◊◊2 3
TypeValuePair
◊◊3 @
>
◊◊@ A
args
◊◊B F
,
◊◊F G
GameObjectContext
◊◊H Y
context
◊◊Z a
)
◊◊a b
{
ÿÿ 	
Assert
ŸŸ 
.
ŸŸ 
IsEqual
ŸŸ 
(
ŸŸ 
args
ŸŸ 
.
ŸŸ  
Count
ŸŸ  %
,
ŸŸ% &
$num
ŸŸ' )
)
ŸŸ) *
;
ŸŸ* +
Assert
€€ 
.
€€ 
That
€€ 
(
€€ 
args
€€ 
[
€€ 
$num
€€ 
]
€€ 
.
€€  
Type
€€  $
.
€€$ % 
DerivesFromOrEqual
€€% 7
<
€€7 8
TParam1
€€8 ?
>
€€? @
(
€€@ A
)
€€A B
)
€€B C
;
€€C D
Assert
‹‹ 
.
‹‹ 
That
‹‹ 
(
‹‹ 
args
‹‹ 
[
‹‹ 
$num
‹‹ 
]
‹‹ 
.
‹‹  
Type
‹‹  $
.
‹‹$ % 
DerivesFromOrEqual
‹‹% 7
<
‹‹7 8
TParam2
‹‹8 ?
>
‹‹? @
(
‹‹@ A
)
‹‹A B
)
‹‹B C
;
‹‹C D
Assert
›› 
.
›› 
That
›› 
(
›› 
args
›› 
[
›› 
$num
›› 
]
›› 
.
››  
Type
››  $
.
››$ % 
DerivesFromOrEqual
››% 7
<
››7 8
TParam3
››8 ?
>
››? @
(
››@ A
)
››A B
)
››B C
;
››C D
Assert
ﬁﬁ 
.
ﬁﬁ 
That
ﬁﬁ 
(
ﬁﬁ 
args
ﬁﬁ 
[
ﬁﬁ 
$num
ﬁﬁ 
]
ﬁﬁ 
.
ﬁﬁ  
Type
ﬁﬁ  $
.
ﬁﬁ$ % 
DerivesFromOrEqual
ﬁﬁ% 7
<
ﬁﬁ7 8
TParam4
ﬁﬁ8 ?
>
ﬁﬁ? @
(
ﬁﬁ@ A
)
ﬁﬁA B
)
ﬁﬁB C
;
ﬁﬁC D
Assert
ﬂﬂ 
.
ﬂﬂ 
That
ﬂﬂ 
(
ﬂﬂ 
args
ﬂﬂ 
[
ﬂﬂ 
$num
ﬂﬂ 
]
ﬂﬂ 
.
ﬂﬂ  
Type
ﬂﬂ  $
.
ﬂﬂ$ % 
DerivesFromOrEqual
ﬂﬂ% 7
<
ﬂﬂ7 8
TParam5
ﬂﬂ8 ?
>
ﬂﬂ? @
(
ﬂﬂ@ A
)
ﬂﬂA B
)
ﬂﬂB C
;
ﬂﬂC D
Assert
‡‡ 
.
‡‡ 
That
‡‡ 
(
‡‡ 
args
‡‡ 
[
‡‡ 
$num
‡‡ 
]
‡‡ 
.
‡‡  
Type
‡‡  $
.
‡‡$ % 
DerivesFromOrEqual
‡‡% 7
<
‡‡7 8
TParam6
‡‡8 ?
>
‡‡? @
(
‡‡@ A
)
‡‡A B
)
‡‡B C
;
‡‡C D
Assert
·· 
.
·· 
That
·· 
(
·· 
args
·· 
[
·· 
$num
·· 
]
·· 
.
··  
Type
··  $
.
··$ % 
DerivesFromOrEqual
··% 7
<
··7 8
TParam7
··8 ?
>
··? @
(
··@ A
)
··A B
)
··B C
;
··C D
Assert
‚‚ 
.
‚‚ 
That
‚‚ 
(
‚‚ 
args
‚‚ 
[
‚‚ 
$num
‚‚ 
]
‚‚ 
.
‚‚  
Type
‚‚  $
.
‚‚$ % 
DerivesFromOrEqual
‚‚% 7
<
‚‚7 8
TParam8
‚‚8 ?
>
‚‚? @
(
‚‚@ A
)
‚‚A B
)
‚‚B C
;
‚‚C D
Assert
„„ 
.
„„ 
That
„„ 
(
„„ 
args
„„ 
[
„„ 
$num
„„ 
]
„„ 
.
„„  
Type
„„  $
.
„„$ % 
DerivesFromOrEqual
„„% 7
<
„„7 8
TParam9
„„8 ?
>
„„? @
(
„„@ A
)
„„A B
)
„„B C
;
„„C D
Assert
‰‰ 
.
‰‰ 
That
‰‰ 
(
‰‰ 
args
‰‰ 
[
‰‰ 
$num
‰‰ 
]
‰‰ 
.
‰‰  
Type
‰‰  $
.
‰‰$ % 
DerivesFromOrEqual
‰‰% 7
<
‰‰7 8
TParam10
‰‰8 @
>
‰‰@ A
(
‰‰A B
)
‰‰B C
)
‰‰C D
;
‰‰D E
context
ÊÊ 
.
ÊÊ  
AddNormalInstaller
ÊÊ &
(
ÊÊ& '
new
ÁÁ 
ActionInstaller
ÁÁ #
(
ÁÁ# $
subContainer
ÁÁ$ 0
=>
ÁÁ1 3
{
ËË 
_installerMethod
ÈÈ (
(
ÈÈ( )
subContainer
ÈÈ) 5
,
ÈÈ5 6
(
ÍÍ 
TParam1
ÍÍ $
)
ÍÍ$ %
args
ÍÍ% )
[
ÍÍ) *
$num
ÍÍ* +
]
ÍÍ+ ,
.
ÍÍ, -
Value
ÍÍ- 2
,
ÍÍ2 3
(
ÎÎ 
TParam2
ÎÎ $
)
ÎÎ$ %
args
ÎÎ% )
[
ÎÎ) *
$num
ÎÎ* +
]
ÎÎ+ ,
.
ÎÎ, -
Value
ÎÎ- 2
,
ÎÎ2 3
(
ÏÏ 
TParam3
ÏÏ $
)
ÏÏ$ %
args
ÏÏ% )
[
ÏÏ) *
$num
ÏÏ* +
]
ÏÏ+ ,
.
ÏÏ, -
Value
ÏÏ- 2
,
ÏÏ2 3
(
ÌÌ 
TParam4
ÌÌ $
)
ÌÌ$ %
args
ÌÌ% )
[
ÌÌ) *
$num
ÌÌ* +
]
ÌÌ+ ,
.
ÌÌ, -
Value
ÌÌ- 2
,
ÌÌ2 3
(
ÓÓ 
TParam5
ÓÓ $
)
ÓÓ$ %
args
ÓÓ% )
[
ÓÓ) *
$num
ÓÓ* +
]
ÓÓ+ ,
.
ÓÓ, -
Value
ÓÓ- 2
,
ÓÓ2 3
(
ÔÔ 
TParam6
ÔÔ $
)
ÔÔ$ %
args
ÔÔ% )
[
ÔÔ) *
$num
ÔÔ* +
]
ÔÔ+ ,
.
ÔÔ, -
Value
ÔÔ- 2
,
ÔÔ2 3
(
 
TParam7
 $
)
$ %
args
% )
[
) *
$num
* +
]
+ ,
.
, -
Value
- 2
,
2 3
(
ÒÒ 
TParam8
ÒÒ $
)
ÒÒ$ %
args
ÒÒ% )
[
ÒÒ) *
$num
ÒÒ* +
]
ÒÒ+ ,
.
ÒÒ, -
Value
ÒÒ- 2
,
ÒÒ2 3
(
ÚÚ 
TParam9
ÚÚ $
)
ÚÚ$ %
args
ÚÚ% )
[
ÚÚ) *
$num
ÚÚ* +
]
ÚÚ+ ,
.
ÚÚ, -
Value
ÚÚ- 2
,
ÚÚ2 3
(
ÛÛ 
TParam10
ÛÛ %
)
ÛÛ% &
args
ÛÛ& *
[
ÛÛ* +
$num
ÛÛ+ ,
]
ÛÛ, -
.
ÛÛ- .
Value
ÛÛ. 3
)
ÛÛ3 4
;
ÛÛ4 5
}
ÙÙ 
)
ÙÙ 
)
ÙÙ 
;
ÙÙ 
}
ıı 	
}
ˆˆ 
}˜˜ ÇJ
TC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ProfileBlock.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
ProfileBlock 
: 
IDisposable  +
{ 
static 
int 
_blockCount 
; 
static 
ProfileBlock 
	_instance %
=& '
new( +
ProfileBlock, 8
(8 9
)9 :
;: ;
static 

Dictionary 
< 
int 
, 
string %
>% &

_nameCache' 1
=2 3
new4 7

Dictionary8 B
<B C
intC F
,F G
stringH N
>N O
(O P
)P Q
;Q R
ProfileBlock 
( 
) 
{ 	
} 	
public 
static 
Thread 
UnityMainThread ,
{ 	
get 
; 
set 
; 
} 	
public 
static 
Regex 
ProfilePattern *
{ 	
get 
; 
set   
;   
}!! 	
static## 
int## 
GetHashCode## 
(## 
object## %
p1##& (
,##( )
object##* 0
p2##1 3
)##3 4
{$$ 	
	unchecked%% 
{&& 
int'' 
hash'' 
='' 
$num'' 
;'' 
hash(( 
=(( 
hash(( 
*(( 
$num((  
+((! "
p1((# %
.((% &
GetHashCode((& 1
(((1 2
)((2 3
;((3 4
hash)) 
=)) 
hash)) 
*)) 
$num))  
+))! "
p2))# %
.))% &
GetHashCode))& 1
())1 2
)))2 3
;))3 4
return** 
hash** 
;** 
}++ 
},, 	
static.. 
int.. 
GetHashCode.. 
(.. 
object.. %
p1..& (
,..( )
object..* 0
p2..1 3
,..3 4
object..5 ;
p3..< >
)..> ?
{// 	
	unchecked00 
{11 
int22 
hash22 
=22 
$num22 
;22 
hash33 
=33 
hash33 
*33 
$num33  
+33! "
p133# %
.33% &
GetHashCode33& 1
(331 2
)332 3
;333 4
hash44 
=44 
hash44 
*44 
$num44  
+44! "
p244# %
.44% &
GetHashCode44& 1
(441 2
)442 3
;443 4
hash55 
=55 
hash55 
*55 
$num55  
+55! "
p355# %
.55% &
GetHashCode55& 1
(551 2
)552 3
;553 4
return66 
hash66 
;66 
}77 
}88 	
public:: 
static:: 
ProfileBlock:: "
Start::# (
(::( )
string::) /
sampleNameFormat::0 @
,::@ A
object::B H
obj1::I M
,::M N
object::O U
obj2::V Z
)::Z [
{;; 	
if?? 
(?? 
UnityMainThread?? 
==??  "
null??# '
||@@ 
!@@ 
UnityMainThread@@ #
.@@# $
Equals@@$ *
(@@* +
Thread@@+ 1
.@@1 2
CurrentThread@@2 ?
)@@? @
)@@@ A
{AA 
returnBB 
nullBB 
;BB 
}CC 
ifEE 
(EE 
!EE 
ProfilerEE 
.EE 
enabledEE !
)EE! "
{FF 
returnGG 
nullGG 
;GG 
}HH 
varNN 
hashNN 
=NN 
GetHashCodeNN "
(NN" #
sampleNameFormatNN# 3
,NN3 4
obj1NN5 9
,NN9 :
obj2NN; ?
)NN? @
;NN@ A
stringPP 
formatStringPP 
;PP  
ifRR 
(RR 
!RR 

_nameCacheRR 
.RR 
TryGetValueRR '
(RR' (
hashRR( ,
,RR, -
outRR. 1
formatStringRR2 >
)RR> ?
)RR? @
{SS 
formatStringTT 
=TT 
stringTT %
.TT% &
FormatTT& ,
(TT, -
sampleNameFormatTT- =
,TT= >
obj1TT? C
,TTC D
obj2TTE I
)TTI J
;TTJ K

_nameCacheUU 
.UU 
AddUU 
(UU 
hashUU #
,UU# $
formatStringUU% 1
)UU1 2
;UU2 3
}VV 
returnXX 
StartInternalXX  
(XX  !
formatStringXX! -
)XX- .
;XX. /
}ZZ 	
public\\ 
static\\ 
ProfileBlock\\ "
Start\\# (
(\\( )
string\\) /
sampleNameFormat\\0 @
,\\@ A
object\\B H
obj\\I L
)\\L M
{]] 	
ifaa 
(aa 
UnityMainThreadaa 
==aa  "
nullaa# '
||bb 
!bb 
UnityMainThreadbb #
.bb# $
Equalsbb$ *
(bb* +
Threadbb+ 1
.bb1 2
CurrentThreadbb2 ?
)bb? @
)bb@ A
{cc 
returndd 
nulldd 
;dd 
}ee 
ifgg 
(gg 
!gg 
Profilergg 
.gg 
enabledgg !
)gg! "
{hh 
returnii 
nullii 
;ii 
}jj 
varpp 
hashpp 
=pp 
GetHashCodepp "
(pp" #
sampleNameFormatpp# 3
,pp3 4
objpp5 8
)pp8 9
;pp9 :
stringrr 
formatStringrr 
;rr  
iftt 
(tt 
!tt 

_nameCachett 
.tt 
TryGetValuett '
(tt' (
hashtt( ,
,tt, -
outtt. 1
formatStringtt2 >
)tt> ?
)tt? @
{uu 
formatStringvv 
=vv 
stringvv %
.vv% &
Formatvv& ,
(vv, -
sampleNameFormatvv- =
,vv= >
objvv? B
)vvB C
;vvC D

_nameCacheww 
.ww 
Addww 
(ww 
hashww #
,ww# $
formatStringww% 1
)ww1 2
;ww2 3
}xx 
returnzz 
StartInternalzz  
(zz  !
formatStringzz! -
)zz- .
;zz. /
}|| 	
public~~ 
static~~ 
ProfileBlock~~ "
Start~~# (
(~~( )
string~~) /

sampleName~~0 :
)~~: ;
{ 	
if
ÉÉ 
(
ÉÉ 
UnityMainThread
ÉÉ 
==
ÉÉ  "
null
ÉÉ# '
||
ÑÑ 
!
ÑÑ 
UnityMainThread
ÑÑ #
.
ÑÑ# $
Equals
ÑÑ$ *
(
ÑÑ* +
Thread
ÑÑ+ 1
.
ÑÑ1 2
CurrentThread
ÑÑ2 ?
)
ÑÑ? @
)
ÑÑ@ A
{
ÖÖ 
return
ÜÜ 
null
ÜÜ 
;
ÜÜ 
}
áá 
if
ââ 
(
ââ 
!
ââ 
Profiler
ââ 
.
ââ 
enabled
ââ !
)
ââ! "
{
ää 
return
ãã 
null
ãã 
;
ãã 
}
åå 
return
éé 
StartInternal
éé  
(
éé  !

sampleName
éé! +
)
éé+ ,
;
éé, -
}
êê 	
static
íí 
ProfileBlock
íí 
StartInternal
íí )
(
íí) *
string
íí* 0

sampleName
íí1 ;
)
íí; <
{
ìì 	
Assert
îî 
.
îî 
That
îî 
(
îî 
Profiler
îî  
.
îî  !
enabled
îî! (
)
îî( )
;
îî) *
if
ññ 
(
ññ 
ProfilePattern
ññ 
==
ññ !
null
ññ" &
||
ññ' )
ProfilePattern
ññ* 8
.
ññ8 9
Match
ññ9 >
(
ññ> ?

sampleName
ññ? I
)
ññI J
.
ññJ K
Success
ññK R
)
ññR S
{
óó 
Profiler
òò 
.
òò 
BeginSample
òò $
(
òò$ %

sampleName
òò% /
)
òò/ 0
;
òò0 1
_blockCount
ôô 
++
ôô 
;
ôô 
return
öö 
	_instance
öö  
;
öö  !
}
õõ 
return
ùù 
null
ùù 
;
ùù 
}
ûû 	
public
†† 
void
†† 
Dispose
†† 
(
†† 
)
†† 
{
°° 	
_blockCount
¢¢ 
--
¢¢ 
;
¢¢ 
Assert
££ 
.
££ 
That
££ 
(
££ 
_blockCount
££ #
>=
££$ &
$num
££' (
)
££( )
;
££) *
Profiler
§§ 
.
§§ 
	EndSample
§§ 
(
§§ 
)
§§  
;
§§  !
}
•• 	
}
—— 
}““ µ<
iC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\SceneDecoratorContext.cs
	namespace

 	
Zenject


 
{ 
public 

class !
SceneDecoratorContext &
:' (
Context) 0
{ 
[ 	
SerializeField	 
] 
List 
< 
MonoInstaller 
> 
_lateInstallers +
=, -
new. 1
List2 6
<6 7
MonoInstaller7 D
>D E
(E F
)F G
;G H
[ 	
SerializeField	 
] 
List 
< 
MonoInstaller 
> !
_lateInstallerPrefabs 1
=2 3
new4 7
List8 <
<< =
MonoInstaller= J
>J K
(K L
)L M
;M N
[ 	
SerializeField	 
] 
List 
< %
ScriptableObjectInstaller &
>& '+
_lateScriptableObjectInstallers( G
=H I
newJ M
ListN R
<R S%
ScriptableObjectInstallerS l
>l m
(m n
)n o
;o p
public 
IEnumerable 
< 
MonoInstaller (
>( )
LateInstallers* 8
{ 	
get 
{ 
return 
_lateInstallers (
;( )
}* +
set 
{ 
_lateInstallers 
.  
Clear  %
(% &
)& '
;' (
_lateInstallers 
.  
AddRange  (
(( )
value) .
). /
;/ 0
} 
} 	
public!! 
IEnumerable!! 
<!! 
MonoInstaller!! (
>!!( ) 
LateInstallerPrefabs!!* >
{"" 	
get## 
{## 
return## !
_lateInstallerPrefabs## .
;##. /
}##0 1
set$$ 
{%% !
_lateInstallerPrefabs&& %
.&&% &
Clear&&& +
(&&+ ,
)&&, -
;&&- .!
_lateInstallerPrefabs'' %
.''% &
AddRange''& .
(''. /
value''/ 4
)''4 5
;''5 6
}(( 
})) 	
public++ 
IEnumerable++ 
<++ %
ScriptableObjectInstaller++ 4
>++4 5*
LateScriptableObjectInstallers++6 T
{,, 	
get-- 
{-- 
return-- +
_lateScriptableObjectInstallers-- 8
;--8 9
}--: ;
set.. 
{// +
_lateScriptableObjectInstallers00 /
.00/ 0
Clear000 5
(005 6
)006 7
;007 8+
_lateScriptableObjectInstallers11 /
.11/ 0
AddRange110 8
(118 9
value119 >
)11> ?
;11? @
}22 
}33 	
[55 	 
FormerlySerializedAs55	 
(55 
$str55 )
)55) *
]55* +
[66 	
SerializeField66	 
]66 
string77 "
_decoratedContractName77 %
=77& '
null77( ,
;77, -
DiContainer99 

_container99 
;99 
readonly:: 
List:: 
<:: 
MonoBehaviour:: #
>::# $%
_injectableMonoBehaviours::% >
=::? @
new::A D
List::E I
<::I J
MonoBehaviour::J W
>::W X
(::X Y
)::Y Z
;::Z [
public<< 
string<< !
DecoratedContractName<< +
{== 	
get>> 
{>> 
return>> "
_decoratedContractName>> /
;>>/ 0
}>>1 2
}?? 	
publicAA 
overrideAA 
DiContainerAA #
	ContainerAA$ -
{BB 	
getCC 
{DD 
AssertEE 
.EE 
	IsNotNullEE  
(EE  !

_containerEE! +
)EE+ ,
;EE, -
returnFF 

_containerFF !
;FF! "
}GG 
}HH 	
publicJJ 
overrideJJ 
IEnumerableJJ #
<JJ# $

GameObjectJJ$ .
>JJ. /
GetRootGameObjectsJJ0 B
(JJB C
)JJC D
{KK 	
throwNN 
AssertNN 
.NN 
CreateExceptionNN (
(NN( )
)NN) *
;NN* +
}OO 	
publicQQ 
voidQQ 

InitializeQQ 
(QQ 
DiContainerQQ *
	containerQQ+ 4
)QQ4 5
{RR 	
AssertSS 
.SS 
IsNullSS 
(SS 

_containerSS $
)SS$ %
;SS% &
AssertTT 
.TT 
ThatTT 
(TT %
_injectableMonoBehavioursTT 1
.TT1 2
IsEmptyTT2 9
(TT9 :
)TT: ;
)TT; <
;TT< =

_containerVV 
=VV 
	containerVV "
;VV" #'
GetInjectableMonoBehavioursXX '
(XX' (%
_injectableMonoBehavioursXX( A
)XXA B
;XXB C
foreachZZ 
(ZZ 
varZZ 
instanceZZ !
inZZ" $%
_injectableMonoBehavioursZZ% >
)ZZ> ?
{[[ 
	container\\ 
.\\ 
QueueForInject\\ (
(\\( )
instance\\) 1
)\\1 2
;\\2 3
}]] 
}^^ 	
public`` 
void`` )
InstallDecoratorSceneBindings`` 1
(``1 2
)``2 3
{aa 	

_containerbb 
.bb 
Bindbb 
<bb !
SceneDecoratorContextbb 1
>bb1 2
(bb2 3
)bb3 4
.bb4 5
FromInstancebb5 A
(bbA B
thisbbB F
)bbF G
;bbG H 
InstallSceneBindingscc  
(cc  !%
_injectableMonoBehaviourscc! :
)cc: ;
;cc; <
}dd 	
publicff 
voidff &
InstallDecoratorInstallersff .
(ff. /
)ff/ 0
{gg 	
InstallInstallershh 
(hh 
)hh 
;hh  
}ii 	
	protectedkk 
overridekk 
voidkk '
GetInjectableMonoBehaviourskk  ;
(kk; <
Listkk< @
<kk@ A
MonoBehaviourkkA N
>kkN O
monoBehaviourskkP ^
)kk^ _
{ll 	
varmm 
scenemm 
=mm 

gameObjectmm "
.mm" #
scenemm# (
;mm( )
ZenUtilInternaloo 
.oo 8
,AddStateMachineBehaviourAutoInjectersInSceneoo H
(ooH I
sceneooI N
)ooN O
;ooO P
ZenUtilInternalpp 
.pp .
"GetInjectableMonoBehavioursInScenepp >
(pp> ?
scenepp? D
,ppD E
monoBehavioursppF T
)ppT U
;ppU V
}qq 	
publicss 
voidss *
InstallLateDecoratorInstallersss 2
(ss2 3
)ss3 4
{tt 	
InstallInstallersuu 
(uu 
newuu !
Listuu" &
<uu& '
InstallerBaseuu' 4
>uu4 5
(uu5 6
)uu6 7
,uu7 8
newuu9 <
Listuu= A
<uuA B
TypeuuB F
>uuF G
(uuG H
)uuH I
,uuI J+
_lateScriptableObjectInstallersuuK j
,uuj k
_lateInstallersuul {
,uu{ |"
_lateInstallerPrefabs	uu} í
)
uuí ì
;
uuì î
}vv 	
}ww 
}xx ¡
nC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\SceneContextRegistryAdderAndRemover.cs
	namespace 	
Zenject
 
{ 
public 

class /
#SceneContextRegistryAdderAndRemover 4
:5 6
IInitializable7 E
,E F
IDisposableG R
{ 
readonly  
SceneContextRegistry %
	_registry& /
;/ 0
readonly 
SceneContext 
_sceneContext +
;+ ,
public

 /
#SceneContextRegistryAdderAndRemover

 2
(

2 3
SceneContext 
sceneContext %
,% & 
SceneContextRegistry  
registry! )
)) *
{ 	
	_registry 
= 
registry  
;  !
_sceneContext 
= 
sceneContext (
;( )
} 	
public 
void 

Initialize 
( 
)  
{ 	
	_registry 
. 
Add 
( 
_sceneContext '
)' (
;( )
} 	
public 
void 
Dispose 
( 
) 
{ 	
	_registry 
. 
Remove 
( 
_sceneContext *
)* +
;+ ,
} 	
} 
} ¡ò
C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder5.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class 
FactoryFromBinder "
<" #
TParam1# *
,* +
TParam2, 3
,3 4
TParam35 <
,< =
TParam4> E
,E F
TParam5G N
,N O
	TContractP Y
>Y Z
: 	!
FactoryFromBinderBase
 
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func 
< 
DiContainer 
, 
TParam1 %
,% &
TParam2' .
,. /
TParam30 7
,7 8
TParam49 @
,@ A
TParam5B I
,I J
	TContractK T
>T U
methodV \
)\ ]
{ 	
ProviderFunc 
= 
( 
	container 
) 
=> 
new "'
MethodProviderWithContainer# >
<> ?
TParam1? F
,F G
TParam2H O
,O P
TParam3Q X
,X Y
TParam4Z a
,a b
TParam5c j
,j k
	TContractl u
>u v
(v w
methodw }
)} ~
;~ 
return 
this 
; 
} 	
public!! &
ConditionCopyNonLazyBinder!! )
FromFactory!!* 5
<!!5 6
TSubFactory!!6 A
>!!A B
(!!B C
)!!C D
where"" 
TSubFactory"" 
:"" 
IFactory""  (
<""( )
TParam1"") 0
,""0 1
TParam2""2 9
,""9 :
TParam3""; B
,""B C
TParam4""D K
,""K L
TParam5""M T
,""T U
	TContract""V _
>""_ `
{## 	
return$$ 
this$$ 
.$$ 
FromIFactory$$ $
($$$ %
x$$% &
=>$$' )
x$$* +
.$$+ ,
To$$, .
<$$. /
TSubFactory$$/ :
>$$: ;
($$; <
)$$< =
.$$= >
AsCached$$> F
($$F G
)$$G H
)$$H I
;$$I J
}%% 	
public'' %
FactorySubContainerBinder'' (
<''( )
TParam1'') 0
,''0 1
TParam2''2 9
,''9 :
TParam3''; B
,''B C
TParam4''D K
,''K L
TParam5''M T
,''T U
	TContract''V _
>''_ `#
FromSubContainerResolve''a x
(''x y
)''y z
{(( 	
return)) #
FromSubContainerResolve)) *
())* +
null))+ /
)))/ 0
;))0 1
}** 	
public,, %
FactorySubContainerBinder,, (
<,,( )
TParam1,,) 0
,,,0 1
TParam2,,2 9
,,,9 :
TParam3,,; B
,,,B C
TParam4,,D K
,,,K L
TParam5,,M T
,,,T U
	TContract,,V _
>,,_ `#
FromSubContainerResolve,,a x
(,,x y
object,,y 
subIdentifier
,,Ä ç
)
,,ç é
{-- 	
return.. 
new.. %
FactorySubContainerBinder.. 0
<..0 1
TParam1..1 8
,..8 9
TParam2..: A
,..A B
TParam3..C J
,..J K
TParam4..L S
,..S T
TParam5..U \
,..\ ]
	TContract..^ g
>..g h
(..h i
BindContainer// 
,// 
BindInfo// '
,//' (
FactoryBindInfo//) 8
,//8 9
subIdentifier//: G
)//G H
;//H I
}00 	
}11 
public55 

static55 
class55 (
FactoryFromBinder5Extensions55 4
{66 
public77 
static77 )
ArgConditionCopyNonLazyBinder77 3
FromIFactory774 @
<77@ A
TParam177A H
,77H I
TParam277J Q
,77Q R
TParam377S Z
,77Z [
TParam477\ c
,77c d
TParam577e l
,77l m
	TContract77n w
>77w x
(77x y
this88 
FactoryFromBinder88 "
<88" #
TParam188# *
,88* +
TParam288, 3
,883 4
TParam3885 <
,88< =
TParam488> E
,88E F
TParam588G N
,88N O
	TContract88P Y
>88Y Z

fromBinder88[ e
,88e f
Action99 
<99 !
ConcreteBinderGeneric99 (
<99( )
IFactory99) 1
<991 2
TParam1992 9
,999 :
TParam299; B
,99B C
TParam399D K
,99K L
TParam499M T
,99T U
TParam599V ]
,99] ^
	TContract99_ h
>99h i
>99i j
>99j k!
factoryBindGenerator	99l Ä
)
99Ä Å
{:: 	
Guid;; 
	factoryId;; 
;;;  
factoryBindGenerator<<  
(<<  !

fromBinder== 
.==  
CreateIFactoryBinder== /
<==/ 0
IFactory==0 8
<==8 9
TParam1==9 @
,==@ A
TParam2==B I
,==I J
TParam3==K R
,==R S
TParam4==T [
,==[ \
TParam5==] d
,==d e
	TContract==f o
>==o p
>==p q
(==q r
out==r u
	factoryId==v 
)	== Ä
)
==Ä Å
;
==Å Ç

fromBinder?? 
.?? 
ProviderFunc?? #
=??$ %
(@@ 
	container@@ 
)@@ 
=>@@ 
{@@  
return@@! '
new@@( +
IFactoryProvider@@, <
<@@< =
TParam1@@= D
,@@D E
TParam2@@F M
,@@M N
TParam3@@O V
,@@V W
TParam4@@X _
,@@_ `
TParam5@@a h
,@@h i
	TContract@@j s
>@@s t
(@@t u
	container@@u ~
,@@~ 
	factoryId
@@Ä â
)
@@â ä
;
@@ä ã
}
@@å ç
;
@@ç é
returnBB 
newBB )
ArgConditionCopyNonLazyBinderBB 4
(BB4 5

fromBinderBB5 ?
.BB? @
BindInfoBB@ H
)BBH I
;BBI J
}CC 	
publicEE 
staticEE )
ArgConditionCopyNonLazyBinderEE 3"
FromPoolableMemoryPoolEE4 J
<EEJ K
TParam1EEK R
,EER S
TParam2EET [
,EE[ \
TParam3EE] d
,EEd e
TParam4EEf m
,EEm n
TParam5EEo v
,EEv w
	TContract	EEx Å
>
EEÅ Ç
(
EEÇ É
thisFF 
FactoryFromBinderFF "
<FF" #
TParam1FF# *
,FF* +
TParam2FF, 3
,FF3 4
TParam3FF5 <
,FF< =
TParam4FF> E
,FFE F
TParam5FFG N
,FFN O
	TContractFFP Y
>FFY Z

fromBinderFF[ e
)FFe f
whereII 
	TContractII 
:II 
	IPoolableII '
<II' (
TParam1II( /
,II/ 0
TParam2II1 8
,II8 9
TParam3II: A
,IIA B
TParam4IIC J
,IIJ K
TParam5IIL S
,IIS T
IMemoryPoolIIU `
>II` a
{JJ 	
returnKK 

fromBinderKK 
.KK "
FromPoolableMemoryPoolKK 4
<KK4 5
TParam1KK5 <
,KK< =
TParam2KK> E
,KKE F
TParam3KKG N
,KKN O
TParam4KKP W
,KKW X
TParam5KKY `
,KK` a
	TContractKKb k
>KKk l
(KKl m
xKKm n
=>KKo q
{KKr s
}KKs t
)KKt u
;KKu v
}LL 	
publicNN 
staticNN )
ArgConditionCopyNonLazyBinderNN 3"
FromPoolableMemoryPoolNN4 J
<NNJ K
TParam1NNK R
,NNR S
TParam2NNT [
,NN[ \
TParam3NN] d
,NNd e
TParam4NNf m
,NNm n
TParam5NNo v
,NNv w
	TContract	NNx Å
>
NNÅ Ç
(
NNÇ É
thisOO 
FactoryFromBinderOO "
<OO" #
TParam1OO# *
,OO* +
TParam2OO, 3
,OO3 4
TParam3OO5 <
,OO< =
TParam4OO> E
,OOE F
TParam5OOG N
,OON O
	TContractOOP Y
>OOY Z

fromBinderOO[ e
,OOe f
ActionPP 
<PP .
"MemoryPoolInitialSizeMaxSizeBinderPP 5
<PP5 6
	TContractPP6 ?
>PP? @
>PP@ A
poolBindGeneratorPPB S
)PPS T
whereSS 
	TContractSS 
:SS 
	IPoolableSS '
<SS' (
TParam1SS( /
,SS/ 0
TParam2SS1 8
,SS8 9
TParam3SS: A
,SSA B
TParam4SSC J
,SSJ K
TParam5SSL S
,SSS T
IMemoryPoolSSU `
>SS` a
{TT 	
returnUU 

fromBinderUU 
.UU "
FromPoolableMemoryPoolUU 4
<UU4 5
TParam1UU5 <
,UU< =
TParam2UU> E
,UUE F
TParam3UUG N
,UUN O
TParam4UUP W
,UUW X
TParam5UUY `
,UU` a
	TContractUUb k
,UUk l
PoolableMemoryPoolUUm 
<	UU Ä
TParam1
UUÄ á
,
UUá à
TParam2
UUâ ê
,
UUê ë
TParam3
UUí ô
,
UUô ö
TParam4
UUõ ¢
,
UU¢ £
TParam5
UU§ ´
,
UU´ ¨
IMemoryPool
UU≠ ∏
,
UU∏ π
	TContract
UU∫ √
>
UU√ ƒ
>
UUƒ ≈
(
UU≈ ∆
poolBindGenerator
UU∆ ◊
)
UU◊ ÿ
;
UUÿ Ÿ
}VV 	
publicYY 
staticYY )
ArgConditionCopyNonLazyBinderYY 3&
FromMonoPoolableMemoryPoolYY4 N
<YYN O
TParam1YYO V
,YYV W
TParam2YYX _
,YY_ `
TParam3YYa h
,YYh i
TParam4YYj q
,YYq r
TParam5YYs z
,YYz {
	TContract	YY| Ö
>
YYÖ Ü
(
YYÜ á
thisZZ 
FactoryFromBinderZZ "
<ZZ" #
TParam1ZZ# *
,ZZ* +
TParam2ZZ, 3
,ZZ3 4
TParam3ZZ5 <
,ZZ< =
TParam4ZZ> E
,ZZE F
TParam5ZZG N
,ZZN O
	TContractZZP Y
>ZZY Z

fromBinderZZ[ e
)ZZe f
where]] 
	TContract]] 
:]] 
	Component]] '
,]]' (
	IPoolable]]) 2
<]]2 3
TParam1]]3 :
,]]: ;
TParam2]]< C
,]]C D
TParam3]]E L
,]]L M
TParam4]]N U
,]]U V
TParam5]]W ^
,]]^ _
IMemoryPool]]` k
>]]k l
{^^ 	
return__ 

fromBinder__ 
.__ &
FromMonoPoolableMemoryPool__ 8
<__8 9
TParam1__9 @
,__@ A
TParam2__B I
,__I J
TParam3__K R
,__R S
TParam4__T [
,__[ \
TParam5__] d
,__d e
	TContract__f o
>__o p
(__p q
x__q r
=>__s u
{__v w
}__w x
)__x y
;__y z
}`` 	
publicbb 
staticbb )
ArgConditionCopyNonLazyBinderbb 3&
FromMonoPoolableMemoryPoolbb4 N
<bbN O
TParam1bbO V
,bbV W
TParam2bbX _
,bb_ `
TParam3bba h
,bbh i
TParam4bbj q
,bbq r
TParam5bbs z
,bbz {
	TContract	bb| Ö
>
bbÖ Ü
(
bbÜ á
thiscc 
FactoryFromBindercc "
<cc" #
TParam1cc# *
,cc* +
TParam2cc, 3
,cc3 4
TParam3cc5 <
,cc< =
TParam4cc> E
,ccE F
TParam5ccG N
,ccN O
	TContractccP Y
>ccY Z

fromBindercc[ e
,cce f
Actiondd 
<dd .
"MemoryPoolInitialSizeMaxSizeBinderdd 5
<dd5 6
	TContractdd6 ?
>dd? @
>dd@ A
poolBindGeneratorddB S
)ddS T
wheregg 
	TContractgg 
:gg 
	Componentgg '
,gg' (
	IPoolablegg) 2
<gg2 3
TParam1gg3 :
,gg: ;
TParam2gg< C
,ggC D
TParam3ggE L
,ggL M
TParam4ggN U
,ggU V
TParam5ggW ^
,gg^ _
IMemoryPoolgg` k
>ggk l
{hh 	
returnii 

fromBinderii 
.ii "
FromPoolableMemoryPoolii 4
<ii4 5
TParam1ii5 <
,ii< =
TParam2ii> E
,iiE F
TParam3iiG N
,iiN O
TParam4iiP W
,iiW X
TParam5iiY `
,ii` a
	TContractiib k
,iik l#
MonoPoolableMemoryPool	iim É
<
iiÉ Ñ
TParam1
iiÑ ã
,
iiã å
TParam2
iiç î
,
iiî ï
TParam3
iiñ ù
,
iiù û
TParam4
iiü ¶
,
ii¶ ß
TParam5
ii® Ø
,
iiØ ∞
IMemoryPool
ii± º
,
iiº Ω
	TContract
iiæ «
>
ii« »
>
ii» …
(
ii…  
poolBindGenerator
ii  €
)
ii€ ‹
;
ii‹ ›
}jj 	
publicmm 
staticmm )
ArgConditionCopyNonLazyBindermm 3"
FromPoolableMemoryPoolmm4 J
<mmJ K
TParam1mmK R
,mmR S
TParam2mmT [
,mm[ \
TParam3mm] d
,mmd e
TParam4mmf m
,mmm n
TParam5mmo v
,mmv w
	TContract	mmx Å
,
mmÅ Ç
TMemoryPool
mmÉ é
>
mmé è
(
mmè ê
thisnn 
FactoryFromBindernn "
<nn" #
TParam1nn# *
,nn* +
TParam2nn, 3
,nn3 4
TParam3nn5 <
,nn< =
TParam4nn> E
,nnE F
TParam5nnG N
,nnN O
	TContractnnP Y
>nnY Z

fromBindernn[ e
)nne f
whereqq 
	TContractqq 
:qq 
	IPoolableqq '
<qq' (
TParam1qq( /
,qq/ 0
TParam2qq1 8
,qq8 9
TParam3qq: A
,qqA B
TParam4qqC J
,qqJ K
TParam5qqL S
,qqS T
IMemoryPoolqqU `
>qq` a
whererr 
TMemoryPoolrr 
:rr 

MemoryPoolrr  *
<rr* +
TParam1rr+ 2
,rr2 3
TParam2rr4 ;
,rr; <
TParam3rr= D
,rrD E
TParam4rrF M
,rrM N
TParam5rrO V
,rrV W
IMemoryPoolrrX c
,rrc d
	TContractrre n
>rrn o
{ss 	
returntt 

fromBindertt 
.tt "
FromPoolableMemoryPooltt 4
<tt4 5
TParam1tt5 <
,tt< =
TParam2tt> E
,ttE F
TParam3ttG N
,ttN O
TParam4ttP W
,ttW X
TParam5ttY `
,tt` a
	TContractttb k
,ttk l
TMemoryPoolttm x
>ttx y
(tty z
xttz {
=>tt| ~
{	tt Ä
}
ttÄ Å
)
ttÅ Ç
;
ttÇ É
}uu 	
publicww 
staticww )
ArgConditionCopyNonLazyBinderww 3"
FromPoolableMemoryPoolww4 J
<wwJ K
TParam1wwK R
,wwR S
TParam2wwT [
,ww[ \
TParam3ww] d
,wwd e
TParam4wwf m
,wwm n
TParam5wwo v
,wwv w
	TContract	wwx Å
,
wwÅ Ç
TMemoryPool
wwÉ é
>
wwé è
(
wwè ê
thisxx 
FactoryFromBinderxx "
<xx" #
TParam1xx# *
,xx* +
TParam2xx, 3
,xx3 4
TParam3xx5 <
,xx< =
TParam4xx> E
,xxE F
TParam5xxG N
,xxN O
	TContractxxP Y
>xxY Z

fromBinderxx[ e
,xxe f
Actionyy 
<yy .
"MemoryPoolInitialSizeMaxSizeBinderyy 5
<yy5 6
	TContractyy6 ?
>yy? @
>yy@ A
poolBindGeneratoryyB S
)yyS T
where|| 
	TContract|| 
:|| 
	IPoolable|| '
<||' (
TParam1||( /
,||/ 0
TParam2||1 8
,||8 9
TParam3||: A
,||A B
TParam4||C J
,||J K
TParam5||L S
,||S T
IMemoryPool||U `
>||` a
where}} 
TMemoryPool}} 
:}} 

MemoryPool}}  *
<}}* +
TParam1}}+ 2
,}}2 3
TParam2}}4 ;
,}}; <
TParam3}}= D
,}}D E
TParam4}}F M
,}}M N
TParam5}}O V
,}}V W
IMemoryPool}}X c
,}}c d
	TContract}}e n
>}}n o
{~~ 	
var
ÅÅ 
poolId
ÅÅ 
=
ÅÅ 
Guid
ÅÅ 
.
ÅÅ 
NewGuid
ÅÅ %
(
ÅÅ% &
)
ÅÅ& '
;
ÅÅ' (
var
ÑÑ 
binder
ÑÑ 
=
ÑÑ 

fromBinder
ÑÑ #
.
ÑÑ# $
BindContainer
ÑÑ$ 1
.
ÑÑ1 22
$BindMemoryPoolCustomInterfaceNoFlush
ÑÑ2 V
<
ÑÑV W
	TContract
ÑÑW `
,
ÑÑ` a
TMemoryPool
ÑÑb m
,
ÑÑm n
TMemoryPool
ÑÑo z
>
ÑÑz {
(
ÑÑ{ |
)
ÑÑ| }
.
ÖÖ 
WithId
ÖÖ 
(
ÖÖ 
poolId
ÖÖ 
)
ÖÖ 
;
ÖÖ  
binder
àà 
.
àà 
NonLazy
àà 
(
àà 
)
àà 
;
àà 
poolBindGenerator
ää 
(
ää 
binder
ää $
)
ää$ %
;
ää% &

fromBinder
åå 
.
åå 
ProviderFunc
åå #
=
åå$ %
(
çç 
	container
çç 
)
çç 
=>
çç 
{
çç  
return
çç! '
new
çç( +(
PoolableMemoryPoolProvider
çç, F
<
ççF G
TParam1
ççG N
,
ççN O
TParam2
ççP W
,
ççW X
TParam3
ççY `
,
çç` a
TParam4
ççb i
,
ççi j
TParam5
ççk r
,
ççr s
	TContract
ççt }
,
çç} ~
TMemoryPoolçç ä
>ççä ã
(ççã å
	containerççå ï
,ççï ñ
poolIdççó ù
)ççù û
;ççû ü
}çç† °
;çç° ¢
return
èè 
new
èè +
ArgConditionCopyNonLazyBinder
èè 4
(
èè4 5

fromBinder
èè5 ?
.
èè? @
BindInfo
èè@ H
)
èèH I
;
èèI J
}
êê 	
}
ëë 
}íí –
cC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\IfNotBoundBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
IfNotBoundBinder !
{ 
public 
IfNotBoundBinder 
(  
BindInfo  (
bindInfo) 1
)1 2
{ 	
BindInfo 
= 
bindInfo 
;  
}		 	
public 
BindInfo 
BindInfo  
{ 	
get 
; 
private 
set 
; 
} 	
public 
void 

IfNotBound 
( 
)  
{ 	
BindInfo 
. 
OnlyBindIfNotBound '
=( )
true* .
;. /
} 	
} 
} «
]C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\InstanceProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
InstanceProvider !
:" #
	IProvider$ -
{		 
readonly

 
object

 
	_instance

 !
;

! "
readonly 
Type 
_instanceType #
;# $
readonly 
DiContainer 

_container '
;' (
public 
InstanceProvider 
(  
Type 
instanceType 
, 
object %
instance& .
,. /
DiContainer0 ;
	container< E
)E F
{ 	
_instanceType 
= 
instanceType (
;( )
	_instance 
= 
instance  
;  !

_container 
= 
	container "
;" #
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
true 
; 
}  
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public   
Type   
GetInstanceType   #
(  # $
InjectContext  $ 1
context  2 9
)  9 :
{!! 	
return"" 
_instanceType""  
;""  !
}## 	
public%% 
void%% *
GetAllInstancesWithInjectSplit%% 2
(%%2 3
InjectContext&& 
context&& !
,&&! "
List&&# '
<&&' (
TypeValuePair&&( 5
>&&5 6
args&&7 ;
,&&; <
out&&= @
Action&&A G
injectAction&&H T
,&&T U
List&&V Z
<&&Z [
object&&[ a
>&&a b
buffer&&c i
)&&i j
{'' 	
Assert(( 
.(( 
That(( 
((( 
args(( 
.(( 
Count(( "
==((# %
$num((& '
)((' (
;((( )
Assert)) 
.)) 
	IsNotNull)) 
()) 
context)) $
)))$ %
;))% &
Assert++ 
.++ 
That++ 
(++ 
_instanceType++ %
.++% &
DerivesFromOrEqual++& 8
(++8 9
context++9 @
.++@ A

MemberType++A K
)++K L
)++L M
;++M N
injectAction-- 
=-- 
(-- 
)-- 
=>--  

_container--! +
.--+ ,

LazyInject--, 6
(--6 7
	_instance--7 @
)--@ A
;--A B
buffer// 
.// 
Add// 
(// 
	_instance//  
)//  !
;//! "
}00 	
}11 
}22 Î
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder2.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
	TContract; D
>D E
:F G*
FactoryArgumentsToChoiceBinderH f
<f g
TParam1g n
,n o
TParam2p w
,w x
	TContract	y Ç
>
Ç É
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{		 	
}

 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
	TContract@ I
>I J
WithIdK Q
(Q R
objectR X

identifierY c
)c d
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} Ôn
dC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\ScriptableObjectInstaller.cs
	namespace 	
Zenject
 
{ 
public

 

class

 %
ScriptableObjectInstaller

 *
:

+ ,)
ScriptableObjectInstallerBase

- J
{ 
} 
public 

class %
ScriptableObjectInstaller *
<* +
TDerived+ 3
>3 4
:5 6%
ScriptableObjectInstaller7 P
where 
TDerived 
: %
ScriptableObjectInstaller 2
<2 3
TDerived3 ;
>; <
{ 
public 
static 
TDerived 
InstallFromResource 2
(2 3
DiContainer3 >
	container? H
)H I
{ 	
return 
InstallFromResource &
(& ')
ScriptableObjectInstallerUtil -
.- ."
GetDefaultResourcePath. D
<D E
TDerivedE M
>M N
(N O
)O P
,P Q
	containerR [
)[ \
;\ ]
} 	
public!! 
static!! 
TDerived!! 
InstallFromResource!! 2
(!!2 3
string!!3 9
resourcePath!!: F
,!!F G
DiContainer!!H S
	container!!T ]
)!!] ^
{"" 	
var## 
	installer## 
=## )
ScriptableObjectInstallerUtil## 9
.##9 :
CreateInstaller##: I
<##I J
TDerived##J R
>##R S
(##S T
resourcePath##T `
,##` a
	container##b k
)##k l
;##l m
	container$$ 
.$$ 
Inject$$ 
($$ 
	installer$$ &
)$$& '
;$$' (
	installer%% 
.%% 
InstallBindings%% %
(%%% &
)%%& '
;%%' (
return&& 
	installer&& 
;&& 
}'' 	
}(( 
public** 

class** %
ScriptableObjectInstaller** *
<*** +
TParam1**+ 2
,**2 3
TDerived**4 <
>**< =
:**> ?)
ScriptableObjectInstallerBase**@ ]
where++ 
TDerived++ 
:++ %
ScriptableObjectInstaller++ 2
<++2 3
TParam1++3 :
,++: ;
TDerived++< D
>++D E
{,, 
public-- 
static-- 
TDerived-- 
InstallFromResource-- 2
(--2 3
DiContainer--3 >
	container--? H
,--H I
TParam1--J Q
p1--R T
)--T U
{.. 	
return// 
InstallFromResource// &
(//& ')
ScriptableObjectInstallerUtil00 -
.00- ."
GetDefaultResourcePath00. D
<00D E
TDerived00E M
>00M N
(00N O
)00O P
,00P Q
	container00R [
,00[ \
p100] _
)00_ `
;00` a
}11 	
public33 
static33 
TDerived33 
InstallFromResource33 2
(332 3
string333 9
resourcePath33: F
,33F G
DiContainer33H S
	container33T ]
,33] ^
TParam133_ f
p133g i
)33i j
{44 	
var55 
	installer55 
=55 )
ScriptableObjectInstallerUtil55 9
.559 :
CreateInstaller55: I
<55I J
TDerived55J R
>55R S
(55S T
resourcePath55T `
,55` a
	container55b k
)55k l
;55l m
	container66 
.66 
InjectExplicit66 $
(66$ %
	installer66% .
,66. /

InjectUtil660 :
.66: ;!
CreateArgListExplicit66; P
(66P Q
p166Q S
)66S T
)66T U
;66U V
	installer77 
.77 
InstallBindings77 %
(77% &
)77& '
;77' (
return88 
	installer88 
;88 
}99 	
}:: 
public<< 

class<< %
ScriptableObjectInstaller<< *
<<<* +
TParam1<<+ 2
,<<2 3
TParam2<<4 ;
,<<; <
TDerived<<= E
><<E F
:<<G H)
ScriptableObjectInstallerBase<<I f
where== 
TDerived== 
:== %
ScriptableObjectInstaller== 2
<==2 3
TParam1==3 :
,==: ;
TParam2==< C
,==C D
TDerived==E M
>==M N
{>> 
public?? 
static?? 
TDerived?? 
InstallFromResource?? 2
(??2 3
DiContainer??3 >
	container??? H
,??H I
TParam1??J Q
p1??R T
,??T U
TParam2??V ]
p2??^ `
)??` a
{@@ 	
returnAA 
InstallFromResourceAA &
(AA& ')
ScriptableObjectInstallerUtilBB -
.BB- ."
GetDefaultResourcePathBB. D
<BBD E
TDerivedBBE M
>BBM N
(BBN O
)BBO P
,BBP Q
	containerBBR [
,BB[ \
p1BB] _
,BB_ `
p2BBa c
)BBc d
;BBd e
}CC 	
publicEE 
staticEE 
TDerivedEE 
InstallFromResourceEE 2
(EE2 3
stringEE3 9
resourcePathEE: F
,EEF G
DiContainerEEH S
	containerEET ]
,EE] ^
TParam1EE_ f
p1EEg i
,EEi j
TParam2EEk r
p2EEs u
)EEu v
{FF 	
varGG 
	installerGG 
=GG )
ScriptableObjectInstallerUtilGG 9
.GG9 :
CreateInstallerGG: I
<GGI J
TDerivedGGJ R
>GGR S
(GGS T
resourcePathGGT `
,GG` a
	containerGGb k
)GGk l
;GGl m
	containerHH 
.HH 
InjectExplicitHH $
(HH$ %
	installerHH% .
,HH. /

InjectUtilHH0 :
.HH: ;!
CreateArgListExplicitHH; P
(HHP Q
p1HHQ S
,HHS T
p2HHU W
)HHW X
)HHX Y
;HHY Z
	installerII 
.II 
InstallBindingsII %
(II% &
)II& '
;II' (
returnJJ 
	installerJJ 
;JJ 
}KK 	
}LL 
publicNN 

classNN %
ScriptableObjectInstallerNN *
<NN* +
TParam1NN+ 2
,NN2 3
TParam2NN4 ;
,NN; <
TParam3NN= D
,NND E
TDerivedNNF N
>NNN O
:NNP Q)
ScriptableObjectInstallerBaseNNR o
whereOO 
TDerivedOO 
:OO %
ScriptableObjectInstallerOO 2
<OO2 3
TParam1OO3 :
,OO: ;
TParam2OO< C
,OOC D
TParam3OOE L
,OOL M
TDerivedOON V
>OOV W
{PP 
publicQQ 
staticQQ 
TDerivedQQ 
InstallFromResourceQQ 2
(QQ2 3
DiContainerQQ3 >
	containerQQ? H
,QQH I
TParam1QQJ Q
p1QQR T
,QQT U
TParam2QQV ]
p2QQ^ `
,QQ` a
TParam3QQb i
p3QQj l
)QQl m
{RR 	
returnSS 
InstallFromResourceSS &
(SS& ')
ScriptableObjectInstallerUtilTT -
.TT- ."
GetDefaultResourcePathTT. D
<TTD E
TDerivedTTE M
>TTM N
(TTN O
)TTO P
,TTP Q
	containerTTR [
,TT[ \
p1TT] _
,TT_ `
p2TTa c
,TTc d
p3TTe g
)TTg h
;TTh i
}UU 	
publicWW 
staticWW 
TDerivedWW 
InstallFromResourceWW 2
(WW2 3
stringWW3 9
resourcePathWW: F
,WWF G
DiContainerWWH S
	containerWWT ]
,WW] ^
TParam1WW_ f
p1WWg i
,WWi j
TParam2WWk r
p2WWs u
,WWu v
TParam3WWw ~
p3	WW Å
)
WWÅ Ç
{XX 	
varYY 
	installerYY 
=YY )
ScriptableObjectInstallerUtilYY 9
.YY9 :
CreateInstallerYY: I
<YYI J
TDerivedYYJ R
>YYR S
(YYS T
resourcePathYYT `
,YY` a
	containerYYb k
)YYk l
;YYl m
	containerZZ 
.ZZ 
InjectExplicitZZ $
(ZZ$ %
	installerZZ% .
,ZZ. /

InjectUtilZZ0 :
.ZZ: ;!
CreateArgListExplicitZZ; P
(ZZP Q
p1ZZQ S
,ZZS T
p2ZZU W
,ZZW X
p3ZZY [
)ZZ[ \
)ZZ\ ]
;ZZ] ^
	installer[[ 
.[[ 
InstallBindings[[ %
([[% &
)[[& '
;[[' (
return\\ 
	installer\\ 
;\\ 
}]] 	
}^^ 
public`` 

class`` %
ScriptableObjectInstaller`` *
<``* +
TParam1``+ 2
,``2 3
TParam2``4 ;
,``; <
TParam3``= D
,``D E
TParam4``F M
,``M N
TDerived``O W
>``W X
:``Y Z)
ScriptableObjectInstallerBase``[ x
whereaa 
TDerivedaa 
:aa %
ScriptableObjectInstalleraa 2
<aa2 3
TParam1aa3 :
,aa: ;
TParam2aa< C
,aaC D
TParam3aaE L
,aaL M
TParam4aaN U
,aaU V
TDerivedaaW _
>aa_ `
{bb 
publiccc 
staticcc 
TDerivedcc 
InstallFromResourcecc 2
(cc2 3
DiContainercc3 >
	containercc? H
,ccH I
TParam1ccJ Q
p1ccR T
,ccT U
TParam2ccV ]
p2cc^ `
,cc` a
TParam3ccb i
p3ccj l
,ccl m
TParam4ccn u
p4ccv x
)ccx y
{dd 	
returnee 
InstallFromResourceee &
(ee& ')
ScriptableObjectInstallerUtilff -
.ff- ."
GetDefaultResourcePathff. D
<ffD E
TDerivedffE M
>ffM N
(ffN O
)ffO P
,ffP Q
	containerffR [
,ff[ \
p1ff] _
,ff_ `
p2ffa c
,ffc d
p3ffe g
,ffg h
p4ffi k
)ffk l
;ffl m
}gg 	
publicii 
staticii 
TDerivedii 
InstallFromResourceii 2
(ii2 3
stringii3 9
resourcePathii: F
,iiF G
DiContaineriiH S
	containeriiT ]
,ii] ^
TParam1ii_ f
p1iig i
,iii j
TParam2iik r
p2iis u
,iiu v
TParam3iiw ~
p3	ii Å
,
iiÅ Ç
TParam4
iiÉ ä
p4
iiã ç
)
iiç é
{jj 	
varkk 
	installerkk 
=kk )
ScriptableObjectInstallerUtilkk 9
.kk9 :
CreateInstallerkk: I
<kkI J
TDerivedkkJ R
>kkR S
(kkS T
resourcePathkkT `
,kk` a
	containerkkb k
)kkk l
;kkl m
	containerll 
.ll 
InjectExplicitll $
(ll$ %
	installerll% .
,ll. /

InjectUtilll0 :
.ll: ;!
CreateArgListExplicitll; P
(llP Q
p1llQ S
,llS T
p2llU W
,llW X
p3llY [
,ll[ \
p4ll] _
)ll_ `
)ll` a
;lla b
	installermm 
.mm 
InstallBindingsmm %
(mm% &
)mm& '
;mm' (
returnnn 
	installernn 
;nn 
}oo 	
}pp 
publicrr 

staticrr 
classrr )
ScriptableObjectInstallerUtilrr 5
{ss 
publictt 
statictt 
stringtt "
GetDefaultResourcePathtt 3
<tt3 4

TInstallertt4 >
>tt> ?
(tt? @
)tt@ A
whereuu 

TInstalleruu 
:uu )
ScriptableObjectInstallerBaseuu <
{vv 	
returnww 
$strww  
+ww! "
typeofww# )
(ww) *

TInstallerww* 4
)ww4 5
.ww5 6

PrettyNameww6 @
(ww@ A
)wwA B
;wwB C
}xx 	
publiczz 
staticzz 

TInstallerzz  
CreateInstallerzz! 0
<zz0 1

TInstallerzz1 ;
>zz; <
(zz< =
string{{ 
resourcePath{{ 
,{{  
DiContainer{{! ,
	container{{- 6
){{6 7
where|| 

TInstaller|| 
:|| )
ScriptableObjectInstallerBase|| <
{}} 	
var~~ 

installers~~ 
=~~ 
	Resources~~ &
.~~& '
LoadAll~~' .
(~~. /
resourcePath~~/ ;
)~~; <
;~~< =
Assert
ÄÄ 
.
ÄÄ 
That
ÄÄ 
(
ÄÄ 

installers
ÄÄ "
.
ÄÄ" #
Length
ÄÄ# )
==
ÄÄ* ,
$num
ÄÄ- .
,
ÄÄ. /
$str
ÅÅ h
,
ÅÅh i
typeof
ÅÅj p
(
ÅÅp q

TInstaller
ÅÅq {
)
ÅÅ{ |
,
ÅÅ| }
resourcePathÅÅ~ ä
)ÅÅä ã
;ÅÅã å
var
ÉÉ 
	installer
ÉÉ 
=
ÉÉ 

installers
ÉÉ &
[
ÉÉ& '
$num
ÉÉ' (
]
ÉÉ( )
;
ÉÉ) *
Assert
ÖÖ 
.
ÖÖ 
That
ÖÖ 
(
ÖÖ 
	installer
ÖÖ !
is
ÖÖ" $

TInstaller
ÖÖ% /
,
ÖÖ/ 0
$str
ÜÜ S
,
ÜÜS T
typeof
ÜÜU [
(
ÜÜ[ \

TInstaller
ÜÜ\ f
)
ÜÜf g
,
ÜÜg h
resourcePath
ÜÜi u
)
ÜÜu v
;
ÜÜv w
return
àà 
(
àà 

TInstaller
àà 
)
àà 
	installer
àà (
;
àà( )
}
ââ 	
}
ää 
}ãã ∂"
àC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder10.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
TParam39 @
,@ A
TParam4B I
,I J
TParam5K R
,R S
TParam6T [
,[ \
TParam7] d
,d e
TParam8f m
,m n
TParam9o v
,v w
TParam10	x Ä
,
Ä Å
	TContract
Ç ã
>
ã å
: 	
FactoryFromBinder
 
< 
TParam1 #
,# $
TParam2% ,
,, -
TParam3. 5
,5 6
TParam47 >
,> ?
TParam5@ G
,G H
TParam6I P
,P Q
TParam7R Y
,Y Z
TParam8[ b
,b c
TParam9d k
,k l
TParam10m u
,u v
	TContract	w Ä
>
Ä Å
{ 
public		 !
FactoryToChoiceBinder		 $
(		$ %
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
TParam6N U
,U V
TParam7W ^
,^ _
TParam8` g
,g h
TParam9i p
,p q
TParam10r z
,z {
	TContract	| Ö
>
Ö Ü
ToSelf
á ç
(
ç é
)
é è
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
TParam33 :
,: ;
TParam4< C
,C D
TParam5E L
,L M
TParam6N U
,U V
TParam7W ^
,^ _
TParam8` g
,g h
TParam9i p
,p q
TParam10r z
,z {
	TConcrete	| Ö
>
Ö Ü
To
á â
<
â ä
	TConcrete
ä ì
>
ì î
(
î ï
)
ï ñ
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
TParam4D K
,K L
TParam5M T
,T U
TParam6V ]
,] ^
TParam7_ f
,f g
TParam8h o
,o p
TParam9q x
,x y
TParam10	z Ç
,
Ç É
	TConcrete
Ñ ç
>
ç é
(
é è
BindContainer
è ú
,
ú ù
BindInfo
û ¶
,
¶ ß
FactoryBindInfo
® ∑
)
∑ ∏
;
∏ π
} 	
} 
}   ¯
[C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\MethodProvider.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 
MethodProvider 
<  
TReturn  '
>' (
:) *
	IProvider+ 4
{		 
readonly

 
DiContainer

 

_container

 '
;

' (
readonly 
Func 
< 
InjectContext #
,# $
TReturn% ,
>, -
_method. 5
;5 6
public 
MethodProvider 
( 
Func 
< 
InjectContext 
, 
TReturn  '
>' (
method) /
,/ 0
DiContainer 
	container !
)! "
{ 	

_container 
= 
	container "
;" #
_method 
= 
method 
; 
} 	
public 
bool 
IsCached 
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
bool '
TypeVariesBasedOnMemberType /
{ 	
get 
{ 
return 
false 
; 
}  !
} 	
public 
Type 
GetInstanceType #
(# $
InjectContext$ 1
context2 9
)9 :
{   	
return!! 
typeof!! 
(!! 
TReturn!! !
)!!! "
;!!" #
}"" 	
public$$ 
void$$ *
GetAllInstancesWithInjectSplit$$ 2
($$2 3
InjectContext%% 
context%% !
,%%! "
List%%# '
<%%' (
TypeValuePair%%( 5
>%%5 6
args%%7 ;
,%%; <
out%%= @
Action%%A G
injectAction%%H T
,%%T U
List%%V Z
<%%Z [
object%%[ a
>%%a b
buffer%%c i
)%%i j
{&& 	
Assert'' 
.'' 
IsEmpty'' 
('' 
args'' 
)''  
;''  !
Assert(( 
.(( 
	IsNotNull(( 
((( 
context(( $
)(($ %
;((% &
Assert** 
.** 
That** 
(** 
typeof** 
(** 
TReturn** &
)**& '
.**' (
DerivesFromOrEqual**( :
(**: ;
context**; B
.**B C

MemberType**C M
)**M N
)**N O
;**O P
injectAction,, 
=,, 
null,, 
;,,  
if-- 
(-- 

_container-- 
.-- 
IsValidating-- '
&&--( *
!--+ ,
TypeAnalyzer--, 8
.--8 9'
ShouldAllowDuringValidation--9 T
(--T U
context--U \
.--\ ]

MemberType--] g
)--g h
)--h i
{.. 
buffer// 
.// 
Add// 
(// 
new// 
ValidationMarker// /
(/// 0
typeof//0 6
(//6 7
TReturn//7 >
)//> ?
)//? @
)//@ A
;//A B
}00 
else11 
{22 
buffer55 
.55 
Add55 
(55 
_method55 "
(55" #
context55# *
)55* +
)55+ ,
;55, -
}66 
}77 	
}88 
}99 ”¯
RC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\CheatSheet.cs
	namespace 	
Zenject
 
{ 
public		 

class		 

CheatSheet		 
:		 
	Installer		 '
<		' (

CheatSheet		( 2
>		2 3
{

 
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
	Container 
. 
Bind 
< 
Foo 
> 
(  
)  !
.! "
AsTransient" -
(- .
). /
;/ 0
	Container 
. 
Bind 
< 
IFoo 
>  
(  !
)! "
." #
To# %
<% &
Foo& )
>) *
(* +
)+ ,
., -
AsTransient- 8
(8 9
)9 :
;: ;
	Container 
. 
Bind 
( 
typeof !
(! "
IFoo" &
)& '
)' (
.( )
To) +
(+ ,
typeof, 2
(2 3
Foo3 6
)6 7
)7 8
.8 9
AsTransient9 D
(D E
)E F
;F G
	Container 
. 
Bind 
< 
Foo 
> 
(  
)  !
.! "
AsSingle" *
(* +
)+ ,
;, -
	Container 
. 
Bind 
< 
IFoo 
>  
(  !
)! "
." #
To# %
<% &
Foo& )
>) *
(* +
)+ ,
., -
AsSingle- 5
(5 6
)6 7
;7 8
	Container!! 
.!! 
Bind!! 
(!! 
typeof!! !
(!!! "
Foo!!" %
)!!% &
,!!& '
typeof!!( .
(!!. /
IFoo!!/ 3
)!!3 4
,!!4 5
typeof!!6 <
(!!< =
IFoo2!!= B
)!!B C
)!!C D
.!!D E
To!!E G
<!!G H
Foo!!H K
>!!K L
(!!L M
)!!M N
.!!N O
AsSingle!!O W
(!!W X
)!!X Y
;!!Y Z
	Container'' 
.'' #
BindInterfacesAndSelfTo'' -
<''- .
Foo''. 1
>''1 2
(''2 3
)''3 4
.''4 5
AsSingle''5 =
(''= >
)''> ?
;''? @
	Container,, 
.,, 
BindInterfacesTo,, &
<,,& '
Foo,,' *
>,,* +
(,,+ ,
),,, -
.,,- .
AsSingle,,. 6
(,,6 7
),,7 8
;,,8 9
	Container22 
.22 
Bind22 
<22 
Foo22 
>22 
(22  
)22  !
.22! "
FromInstance22" .
(22. /
new22/ 2
Foo223 6
(226 7
)227 8
)228 9
;229 :
	Container66 
.66 
BindInstance66 "
(66" #
new66# &
Foo66' *
(66* +
)66+ ,
)66, -
;66- .
	Container99 
.99 
BindInstances99 #
(99# $
new99$ '
Foo99( +
(99+ ,
)99, -
,99- .
new99/ 2
Bar993 6
(996 7
)997 8
)998 9
;999 :
	Container?? 
.?? 
Bind?? 
<?? 
int?? 
>?? 
(??  
)??  !
.??! "
FromInstance??" .
(??. /
$num??/ 1
)??1 2
;??2 3
	Container@@ 
.@@ 
Bind@@ 
<@@ 
bool@@ 
>@@  
(@@  !
)@@! "
.@@" #
FromInstance@@# /
(@@/ 0
false@@0 5
)@@5 6
;@@6 7
	ContainerCC 
.CC 
BindInstanceCC "
(CC" #
$numCC# %
)CC% &
;CC& '
	ContainerDD 
.DD 
BindInstanceDD "
(DD" #
falseDD# (
)DD( )
;DD) *
	ContainerGG 
.GG 
BindInstanceGG "
(GG" #
$numGG# %
)GG% &
.GG& '
WhenInjectedIntoGG' 7
<GG7 8
FooGG8 ;
>GG; <
(GG< =
)GG= >
;GG> ?
	ContainerNN 
.NN 
BindNN 
<NN 
FooNN 
>NN 
(NN  
)NN  !
.NN! "

FromMethodNN" ,
(NN, -
GetFooNN- 3
)NN3 4
;NN4 5
	ContainerRR 
.RR 
BindRR 
<RR 
IFooRR 
>RR  
(RR  !
)RR! "
.RR" #

FromMethodRR# -
(RR- .
GetRandomFooRR. :
)RR: ;
;RR; <
	ContainerUU 
.UU 
BindUU 
<UU 
FooUU 
>UU 
(UU  
)UU  !
.UU! "

FromMethodUU" ,
(UU, -
ctxUU- 0
=>UU1 3
newUU4 7
FooUU8 ;
(UU; <
)UU< =
)UU= >
;UU> ?
	ContainerXX 
.XX 
BindXX 
<XX 
FooXX 
>XX 
(XX  
)XX  !
.XX! "

FromMethodXX" ,
(XX, -
ctxXX- 0
=>XX1 3
ctxXX4 7
.XX7 8
	ContainerXX8 A
.XXA B
InstantiateXXB M
<XXM N
FooXXN Q
>XXQ R
(XXR S
)XXS T
)XXT U
;XXU V
InstallMoreZZ 
(ZZ 
)ZZ 
;ZZ 
}[[ 	
Foo]] 
GetFoo]] 
(]] 
InjectContext]]  
ctx]]! $
)]]$ %
{^^ 	
return__ 
new__ 
Foo__ 
(__ 
)__ 
;__ 
}`` 	
IFoobb 
GetRandomFoobb 
(bb 
InjectContextbb '
ctxbb( +
)bb+ ,
{cc 	
switchdd 
(dd 
Randomdd 
.dd 
Rangedd  
(dd  !
$numdd! "
,dd" #
$numdd$ %
)dd% &
)dd& '
{ee 
caseff 
$numff 
:ff 
{gg 
returnhh 
ctxhh 
.hh 
	Containerhh (
.hh( )
Instantiatehh) 4
<hh4 5
Foo1hh5 9
>hh9 :
(hh: ;
)hh; <
;hh< =
}ii 
casejj 
$numjj 
:jj 
{kk 
returnll 
ctxll 
.ll 
	Containerll (
.ll( )
Instantiatell) 4
<ll4 5
Foo2ll5 9
>ll9 :
(ll: ;
)ll; <
;ll< =
}mm 
}nn 
returnpp 
ctxpp 
.pp 
	Containerpp  
.pp  !
Instantiatepp! ,
<pp, -
Foo3pp- 1
>pp1 2
(pp2 3
)pp3 4
;pp4 5
}qq 	
voidss 
InstallMoress 
(ss 
)ss 
{tt 	
	Containeryy 
.yy 
Bindyy 
<yy 
Fooyy 
>yy 
(yy  
)yy  !
.yy! "
AsSingleyy" *
(yy* +
)yy+ ,
;yy, -
	Container{{ 
.{{ 
Bind{{ 
<{{ 
Bar{{ 
>{{ 
({{  
){{  !
.{{! "
FromResolveGetter{{" 3
<{{3 4
Foo{{4 7
>{{7 8
({{8 9
foo{{9 <
=>{{= ?
foo{{@ C
.{{C D
GetBar{{D J
({{J K
){{K L
){{L M
;{{M N
	Container~~ 
.~~ 
Bind~~ 
<~~ 
string~~ !
>~~! "
(~~" #
)~~# $
.~~$ %
FromResolveGetter~~% 6
<~~6 7
Foo~~7 :
>~~: ;
(~~; <
foo~~< ?
=>~~@ B
foo~~C F
.~~F G
GetTitle~~G O
(~~O P
)~~P Q
)~~Q R
;~~R S
	Container
ÉÉ 
.
ÉÉ 
Bind
ÉÉ 
<
ÉÉ 
Foo
ÉÉ 
>
ÉÉ 
(
ÉÉ  
)
ÉÉ  !
.
ÉÉ! "-
FromNewComponentOnNewGameObject
ÉÉ" A
(
ÉÉA B
)
ÉÉB C
.
ÉÉC D
AsSingle
ÉÉD L
(
ÉÉL M
)
ÉÉM N
;
ÉÉN O
	Container
ÜÜ 
.
ÜÜ 
Bind
ÜÜ 
<
ÜÜ 
Foo
ÜÜ 
>
ÜÜ 
(
ÜÜ  
)
ÜÜ  !
.
ÜÜ! "-
FromNewComponentOnNewGameObject
ÜÜ" A
(
ÜÜA B
)
ÜÜB C
.
ÜÜC D 
WithGameObjectName
ÜÜD V
(
ÜÜV W
$str
ÜÜW ]
)
ÜÜ] ^
.
ÜÜ^ _
AsSingle
ÜÜ_ g
(
ÜÜg h
)
ÜÜh i
;
ÜÜi j
	Container
ââ 
.
ââ 
Bind
ââ 
<
ââ 
IFoo
ââ 
>
ââ  
(
ââ  !
)
ââ! "
.
ââ" #
To
ââ# %
<
ââ% &
Foo
ââ& )
>
ââ) *
(
ââ* +
)
ââ+ ,
.
ââ, --
FromNewComponentOnNewGameObject
ââ- L
(
ââL M
)
ââM N
.
ââN O
AsSingle
ââO W
(
ââW X
)
ââX Y
;
ââY Z

GameObject
êê 
prefab
êê 
=
êê 
null
êê  $
;
êê$ %
	Container
ëë 
.
ëë 
Bind
ëë 
<
ëë 
Foo
ëë 
>
ëë 
(
ëë  
)
ëë  !
.
ëë! "&
FromComponentInNewPrefab
ëë" :
(
ëë: ;
prefab
ëë; A
)
ëëA B
.
ëëB C
AsSingle
ëëC K
(
ëëK L
)
ëëL M
;
ëëM N
	Container
îî 
.
îî 
Bind
îî 
<
îî 
IFoo
îî 
>
îî  
(
îî  !
)
îî! "
.
îî" #
To
îî# %
<
îî% &
Foo
îî& )
>
îî) *
(
îî* +
)
îî+ ,
.
îî, -&
FromComponentInNewPrefab
îî- E
(
îîE F
prefab
îîF L
)
îîL M
.
îîM N
AsSingle
îîN V
(
îîV W
)
îîW X
;
îîX Y
	Container
õõ 
.
õõ 
Bind
õõ 
(
õõ 
typeof
õõ !
(
õõ! "
Foo
õõ" %
)
õõ% &
,
õõ& '
typeof
õõ( .
(
õõ. /
Bar
õõ/ 2
)
õõ2 3
)
õõ3 4
.
õõ4 5&
FromComponentInNewPrefab
õõ5 M
(
õõM N
prefab
õõN T
)
õõT U
.
õõU V
AsSingle
õõV ^
(
õõ^ _
)
õõ_ `
;
õõ` a
	Container
°° 
.
°° 
Bind
°° 
<
°° 
Foo
°° 
>
°° 
(
°°  
)
°°  !
.
°°! "&
FromComponentInNewPrefab
°°" :
(
°°: ;
prefab
°°; A
)
°°A B
.
°°B C
AsTransient
°°C N
(
°°N O
)
°°O P
;
°°P Q
	Container
§§ 
.
§§ 
Bind
§§ 
<
§§ 
IFoo
§§ 
>
§§  
(
§§  !
)
§§! "
.
§§" #
To
§§# %
<
§§% &
Foo
§§& )
>
§§) *
(
§§* +
)
§§+ ,
.
§§, -&
FromComponentInNewPrefab
§§- E
(
§§E F
prefab
§§F L
)
§§L M
;
§§M N
	Container
´´ 
.
´´ 
Bind
´´ 
<
´´ 
string
´´ !
>
´´! "
(
´´" #
)
´´# $
.
´´$ %
WithId
´´% +
(
´´+ ,
$str
´´, 8
)
´´8 9
.
´´9 :
FromInstance
´´: F
(
´´F G
$str
´´G [
)
´´[ \
;
´´\ ]
	Container
ÆÆ 
.
ÆÆ 
BindInstance
ÆÆ "
(
ÆÆ" #
$str
ÆÆ# 7
)
ÆÆ7 8
.
ÆÆ8 9
WithId
ÆÆ9 ?
(
ÆÆ? @
$str
ÆÆ@ L
)
ÆÆL M
;
ÆÆM N
	Container
±± 
.
±± 
BindInstance
±± "
(
±±" #
$str
±±# (
)
±±( )
.
±±) *
WithId
±±* 0
(
±±0 1
$str
±±1 7
)
±±7 8
;
±±8 9
	Container
≤≤ 
.
≤≤ 
BindInstance
≤≤ "
(
≤≤" #
$str
≤≤# )
)
≤≤) *
.
≤≤* +
WithId
≤≤+ 1
(
≤≤1 2
$str
≤≤2 8
)
≤≤8 9
;
≤≤9 :
InstallMore2
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
}
µµ 	
public
∏∏ 
class
∏∏ 
Norf
∏∏ 
{
ππ 	
[
∫∫ 
Inject
∫∫ 
(
∫∫ 
Id
∫∫ 
=
∫∫ 
$str
∫∫ 
)
∫∫  
]
∫∫  !
public
ªª 
string
ªª 
Foo
ªª 
;
ªª 
}
ºº 	
public
ææ 
class
ææ 
Qux
ææ 
{
øø 	
[
¿¿ 
Inject
¿¿ 
(
¿¿ 
Id
¿¿ 
=
¿¿ 
$str
¿¿ 
)
¿¿  
]
¿¿  !
public
¡¡ 
string
¡¡ 
Foo
¡¡ 
;
¡¡ 
}
¬¬ 	
public
ƒƒ 
void
ƒƒ 
InstallMore2
ƒƒ  
(
ƒƒ  !
)
ƒƒ! "
{
≈≈ 	
	Container
ÃÃ 
.
ÃÃ 
Bind
ÃÃ 
<
ÃÃ 
Foo
ÃÃ 
>
ÃÃ 
(
ÃÃ  
)
ÃÃ  !
.
ÃÃ! "
AsCached
ÃÃ" *
(
ÃÃ* +
)
ÃÃ+ ,
;
ÃÃ, -
	Container
ÕÕ 
.
ÕÕ 
Bind
ÕÕ 
<
ÕÕ 
Foo
ÕÕ 
>
ÕÕ 
(
ÕÕ  
)
ÕÕ  !
.
ÕÕ! "
WithId
ÕÕ" (
(
ÕÕ( )
$str
ÕÕ) /
)
ÕÕ/ 0
.
ÕÕ0 1
AsCached
ÕÕ1 9
(
ÕÕ9 :
)
ÕÕ: ;
;
ÕÕ; <
	Container
ŒŒ 
.
ŒŒ 
Bind
ŒŒ 
<
ŒŒ 
Foo
ŒŒ 
>
ŒŒ 
(
ŒŒ  
)
ŒŒ  !
.
ŒŒ! "
WithId
ŒŒ" (
(
ŒŒ( )
$str
ŒŒ) /
)
ŒŒ/ 0
.
ŒŒ0 1
AsCached
ŒŒ1 9
(
ŒŒ9 :
)
ŒŒ: ;
;
ŒŒ; <
InstallMore3
–– 
(
–– 
)
–– 
;
–– 
}
—— 	
public
◊◊ 
class
◊◊ 
Norf2
◊◊ 
{
ÿÿ 	
[
ŸŸ 
Inject
ŸŸ 
]
ŸŸ 
public
⁄⁄ 
Foo
⁄⁄ 
Foo
⁄⁄ 
;
⁄⁄ 
}
€€ 	
public
ﬂﬂ 
class
ﬂﬂ 
Qux2
ﬂﬂ 
{
‡‡ 	
[
·· 
Inject
·· 
]
·· 
public
‚‚ 
Foo
‚‚ 
Foo
‚‚ 
;
‚‚ 
[
‰‰ 
Inject
‰‰ 
(
‰‰ 
Id
‰‰ 
=
‰‰ 
$str
‰‰ 
)
‰‰  
]
‰‰  !
public
ÂÂ 
Foo
ÂÂ 
Foo2
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
public
ËË 
void
ËË 
InstallMore3
ËË  
(
ËË  !
)
ËË! "
{
ÈÈ 	
	Container
ÓÓ 
.
ÓÓ 
Bind
ÓÓ 
<
ÓÓ 
Foo
ÓÓ 
>
ÓÓ 
(
ÓÓ  
)
ÓÓ  !
.
ÓÓ! "
AsSingle
ÓÓ" *
(
ÓÓ* +
)
ÓÓ+ ,
.
ÓÓ, -
WhenInjectedInto
ÓÓ- =
<
ÓÓ= >
Bar
ÓÓ> A
>
ÓÓA B
(
ÓÓB C
)
ÓÓC D
;
ÓÓD E
	Container
ÚÚ 
.
ÚÚ 
Bind
ÚÚ 
<
ÚÚ 
IFoo
ÚÚ 
>
ÚÚ  
(
ÚÚ  !
)
ÚÚ! "
.
ÚÚ" #
To
ÚÚ# %
<
ÚÚ% &
Foo1
ÚÚ& *
>
ÚÚ* +
(
ÚÚ+ ,
)
ÚÚ, -
.
ÚÚ- .
AsSingle
ÚÚ. 6
(
ÚÚ6 7
)
ÚÚ7 8
.
ÚÚ8 9
WhenInjectedInto
ÚÚ9 I
<
ÚÚI J
Bar
ÚÚJ M
>
ÚÚM N
(
ÚÚN O
)
ÚÚO P
;
ÚÚP Q
	Container
ÛÛ 
.
ÛÛ 
Bind
ÛÛ 
<
ÛÛ 
IFoo
ÛÛ 
>
ÛÛ  
(
ÛÛ  !
)
ÛÛ! "
.
ÛÛ" #
To
ÛÛ# %
<
ÛÛ% &
Foo2
ÛÛ& *
>
ÛÛ* +
(
ÛÛ+ ,
)
ÛÛ, -
.
ÛÛ- .
AsSingle
ÛÛ. 6
(
ÛÛ6 7
)
ÛÛ7 8
.
ÛÛ8 9
WhenInjectedInto
ÛÛ9 I
<
ÛÛI J
Qux
ÛÛJ M
>
ÛÛM N
(
ÛÛN O
)
ÛÛO P
;
ÛÛP Q
	Container
¯¯ 
.
¯¯ 
Bind
¯¯ 
<
¯¯ 
IFoo
¯¯ 
>
¯¯  
(
¯¯  !
)
¯¯! "
.
¯¯" #
To
¯¯# %
<
¯¯% &
Foo1
¯¯& *
>
¯¯* +
(
¯¯+ ,
)
¯¯, -
.
¯¯- .
AsSingle
¯¯. 6
(
¯¯6 7
)
¯¯7 8
;
¯¯8 9
	Container
˘˘ 
.
˘˘ 
Bind
˘˘ 
<
˘˘ 
IFoo
˘˘ 
>
˘˘  
(
˘˘  !
)
˘˘! "
.
˘˘" #
To
˘˘# %
<
˘˘% &
Foo2
˘˘& *
>
˘˘* +
(
˘˘+ ,
)
˘˘, -
.
˘˘- .
AsSingle
˘˘. 6
(
˘˘6 7
)
˘˘7 8
.
˘˘8 9
WhenInjectedInto
˘˘9 I
<
˘˘I J
Qux
˘˘J M
>
˘˘M N
(
˘˘N O
)
˘˘O P
;
˘˘P Q
	Container
¸¸ 
.
¸¸ 
Bind
¸¸ 
<
¸¸ 
Foo
¸¸ 
>
¸¸ 
(
¸¸  
)
¸¸  !
.
¸¸! "
AsSingle
¸¸" *
(
¸¸* +
)
¸¸+ ,
.
¸¸, -
WhenInjectedInto
¸¸- =
(
¸¸= >
typeof
¸¸> D
(
¸¸D E
Bar
¸¸E H
)
¸¸H I
,
¸¸I J
typeof
¸¸K Q
(
¸¸Q R
Qux
¸¸R U
)
¸¸U V
,
¸¸V W
typeof
¸¸X ^
(
¸¸^ _
Baz
¸¸_ b
)
¸¸b c
)
¸¸c d
;
¸¸d e
	Container
ˇˇ 
.
ˇˇ 
BindInstance
ˇˇ "
(
ˇˇ" #
$str
ˇˇ# ,
)
ˇˇ, -
.
ˇˇ- .
WithId
ˇˇ. 4
(
ˇˇ4 5
$str
ˇˇ5 <
)
ˇˇ< =
.
ˇˇ= >
WhenInjectedInto
ˇˇ> N
<
ˇˇN O
Gui
ˇˇO R
>
ˇˇR S
(
ˇˇS T
)
ˇˇT U
;
ˇˇU V
	Container
ÇÇ 
.
ÇÇ 
BindInstance
ÇÇ "
(
ÇÇ" #
$num
ÇÇ# $
)
ÇÇ$ %
.
ÇÇ% &
WhenInjectedInto
ÇÇ& 6
<
ÇÇ6 7
Gui
ÇÇ7 :
>
ÇÇ: ;
(
ÇÇ; <
)
ÇÇ< =
;
ÇÇ= >
	Container
ââ 
.
ââ 
BindInstance
ââ "
(
ââ" #
$num
ââ# '
)
ââ' (
.
ââ( )
When
ââ) -
(
ââ- .
ctx
ââ. 1
=>
ââ2 4
ctx
ää 
.
ää 

ObjectType
ää 
==
ää !
typeof
ää" (
(
ää( )
Gui
ää) ,
)
ää, -
&&
ää. 0
ctx
ää1 4
.
ää4 5

MemberName
ää5 ?
==
ää@ B
$str
ääC J
)
ääJ K
;
ääK L
	Container
ëë 
.
ëë 
Bind
ëë 
<
ëë 
IFoo
ëë 
>
ëë  
(
ëë  !
)
ëë! "
.
ëë" #
To
ëë# %
<
ëë% &
Foo
ëë& )
>
ëë) *
(
ëë* +
)
ëë+ ,
.
ëë, -
AsTransient
ëë- 8
(
ëë8 9
)
ëë9 :
.
ëë: ;
When
ëë; ?
(
ëë? @
ctx
íí 
=>
íí 
ctx
íí 
.
íí 
AllObjectTypes
íí )
.
íí) *
Contains
íí* 2
(
íí2 3
typeof
íí3 9
(
íí9 :
Bar
íí: =
)
íí= >
)
íí> ?
)
íí? @
;
íí@ A
var
ññ 
foo1
ññ 
=
ññ 
new
ññ 
Foo
ññ 
(
ññ 
)
ññ  
;
ññ  !
var
óó 
foo2
óó 
=
óó 
new
óó 
Foo
óó 
(
óó 
)
óó  
;
óó  !
	Container
ôô 
.
ôô 
Bind
ôô 
<
ôô 
Bar
ôô 
>
ôô 
(
ôô  
)
ôô  !
.
ôô! "
WithId
ôô" (
(
ôô( )
$str
ôô) /
)
ôô/ 0
.
ôô0 1
AsCached
ôô1 9
(
ôô9 :
)
ôô: ;
;
ôô; <
	Container
öö 
.
öö 
Bind
öö 
<
öö 
Bar
öö 
>
öö 
(
öö  
)
öö  !
.
öö! "
WithId
öö" (
(
öö( )
$str
öö) /
)
öö/ 0
.
öö0 1
AsCached
öö1 9
(
öö9 :
)
öö: ;
;
öö; <
	Container
ùù 
.
ùù 
BindInstance
ùù "
(
ùù" #
foo1
ùù# '
)
ùù' (
.
ùù( )
When
ùù) -
(
ùù- .
c
ùù. /
=>
ùù0 2
c
ùù3 4
.
ùù4 5
ParentContexts
ùù5 C
.
ùùC D
Where
ùùD I
(
ùùI J
x
ùùJ K
=>
ùùL N
x
ùùO P
.
ùùP Q

MemberType
ùùQ [
==
ùù\ ^
typeof
ùù_ e
(
ùùe f
Bar
ùùf i
)
ùùi j
&&
ùùk m
Equals
ùùn t
(
ùùt u
x
ùùu v
.
ùùv w

Identifierùùw Å
,ùùÅ Ç
$strùùÉ â
)ùùâ ä
)ùùä ã
.ùùã å
Anyùùå è
(ùùè ê
)ùùê ë
)ùùë í
;ùùí ì
	Container
ûû 
.
ûû 
BindInstance
ûû "
(
ûû" #
foo2
ûû# '
)
ûû' (
.
ûû( )
When
ûû) -
(
ûû- .
c
ûû. /
=>
ûû0 2
c
ûû3 4
.
ûû4 5
ParentContexts
ûû5 C
.
ûûC D
Where
ûûD I
(
ûûI J
x
ûûJ K
=>
ûûL N
x
ûûO P
.
ûûP Q

MemberType
ûûQ [
==
ûû\ ^
typeof
ûû_ e
(
ûûe f
Bar
ûûf i
)
ûûi j
&&
ûûk m
Equals
ûûn t
(
ûût u
x
ûûu v
.
ûûv w

Identifierûûw Å
,ûûÅ Ç
$strûûÉ â
)ûûâ ä
)ûûä ã
.ûûã å
Anyûûå è
(ûûè ê
)ûûê ë
)ûûë í
;ûûí ì
Assert
°° 
.
°° 
That
°° 
(
°° 
	Container
°° !
.
°°! "
	ResolveId
°°" +
<
°°+ ,
Bar
°°, /
>
°°/ 0
(
°°0 1
$str
°°1 7
)
°°7 8
.
°°8 9
Foo
°°9 <
==
°°= ?
foo1
°°@ D
)
°°D E
;
°°E F
Assert
¢¢ 
.
¢¢ 
That
¢¢ 
(
¢¢ 
	Container
¢¢ !
.
¢¢! "
	ResolveId
¢¢" +
<
¢¢+ ,
Bar
¢¢, /
>
¢¢/ 0
(
¢¢0 1
$str
¢¢1 7
)
¢¢7 8
.
¢¢8 9
Foo
¢¢9 <
==
¢¢= ?
foo2
¢¢@ D
)
¢¢D E
;
¢¢E F

GameObject
©© 
	fooPrefab
©©  
=
©©! "
null
©©# '
;
©©' (
	Container
™™ 
.
™™ 
Bind
™™ 
<
™™ 
Foo
™™ 
>
™™ 
(
™™  
)
™™  !
.
™™! "&
FromComponentInNewPrefab
™™" :
(
™™: ;
	fooPrefab
™™; D
)
™™D E
.
™™E F
AsSingle
™™F N
(
™™N O
)
™™O P
;
™™P Q
	Container
´´ 
.
´´ 
Bind
´´ 
<
´´ 
IBar
´´ 
>
´´  
(
´´  !
)
´´! "
.
´´" #
To
´´# %
<
´´% &
Foo
´´& )
>
´´) *
(
´´* +
)
´´+ ,
.
´´, -
FromResolve
´´- 8
(
´´8 9
)
´´9 :
;
´´: ;
	Container
¨¨ 
.
¨¨ 
Bind
¨¨ 
<
¨¨ 
IFoo
¨¨ 
>
¨¨  
(
¨¨  !
)
¨¨! "
.
¨¨" #
To
¨¨# %
<
¨¨% &
IBar
¨¨& *
>
¨¨* +
(
¨¨+ ,
)
¨¨, -
.
¨¨- .
FromResolve
¨¨. 9
(
¨¨9 :
)
¨¨: ;
;
¨¨; <
	Container
ØØ 
.
ØØ 
Bind
ØØ 
(
ØØ 
typeof
ØØ !
(
ØØ! "
Foo
ØØ" %
)
ØØ% &
,
ØØ& '
typeof
ØØ( .
(
ØØ. /
IBar
ØØ/ 3
)
ØØ3 4
,
ØØ4 5
typeof
ØØ6 <
(
ØØ< =
IFoo
ØØ= A
)
ØØA B
)
ØØB C
.
ØØC D
To
ØØD F
<
ØØF G
Foo
ØØG J
>
ØØJ K
(
ØØK L
)
ØØL M
.
ØØM N&
FromComponentInNewPrefab
ØØN f
(
ØØf g
	fooPrefab
ØØg p
)
ØØp q
.
ØØq r
AsSingle
ØØr z
(
ØØz {
)
ØØ{ |
;
ØØ| }
InstallMore4
±± 
(
±± 
)
±± 
;
±± 
}
≤≤ 	
public
¥¥ 
class
¥¥ 
FooInstaller
¥¥ !
:
¥¥" #
	Installer
¥¥$ -
<
¥¥- .
FooInstaller
¥¥. :
>
¥¥: ;
{
µµ 	
public
∂∂ 
FooInstaller
∂∂ 
(
∂∂  
string
∂∂  &
foo
∂∂' *
)
∂∂* +
{
∑∑ 
}
∏∏ 
public
∫∫ 
override
∫∫ 
void
∫∫  
InstallBindings
∫∫! 0
(
∫∫0 1
)
∫∫1 2
{
ªª 
}
ºº 
}
ΩΩ 	
public
øø 
class
øø "
FooInstallerWithArgs
øø )
:
øø* +
	Installer
øø, 5
<
øø5 6
string
øø6 <
,
øø< ="
FooInstallerWithArgs
øø> R
>
øøR S
{
¿¿ 	
public
¡¡ "
FooInstallerWithArgs
¡¡ '
(
¡¡' (
string
¡¡( .
foo
¡¡/ 2
)
¡¡2 3
{
¬¬ 
}
√√ 
public
≈≈ 
override
≈≈ 
void
≈≈  
InstallBindings
≈≈! 0
(
≈≈0 1
)
≈≈1 2
{
∆∆ 
}
«« 
}
»» 	
void
   
InstallMore4
   
(
   
)
   
{
ÀÀ 	
FooInstaller
œœ 
.
œœ 
Install
œœ  
(
œœ  !
	Container
œœ! *
)
œœ* +
;
œœ+ ,
	Container
““ 
.
““ 
BindInstance
““ "
(
““" #
$str
““# (
)
““( )
.
““) *
WhenInjectedInto
““* :
<
““: ;
FooInstaller
““; G
>
““G H
(
““H I
)
““I J
;
““J K
FooInstaller
”” 
.
”” 
Install
””  
(
””  !
	Container
””! *
)
””* +
;
””+ ,"
FooInstallerWithArgs
◊◊  
.
◊◊  !
Install
◊◊! (
(
◊◊( )
	Container
◊◊) 2
,
◊◊2 3
$str
◊◊4 9
)
◊◊9 :
;
◊◊: ;
var
‹‹ 
foo
‹‹ 
=
‹‹ 
new
‹‹ 
Foo
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹  
	Container
›› 
.
›› 
Inject
›› 
(
›› 
foo
››  
)
››  !
;
››! "
	Container
‚‚ 
.
‚‚ 
Resolve
‚‚ 
<
‚‚ 
IFoo
‚‚ "
>
‚‚" #
(
‚‚# $
)
‚‚$ %
;
‚‚% &
	Container
ÂÂ 
.
ÂÂ 

TryResolve
ÂÂ  
<
ÂÂ  !
IFoo
ÂÂ! %
>
ÂÂ% &
(
ÂÂ& '
)
ÂÂ' (
;
ÂÂ( )
	Container
ÈÈ 
.
ÈÈ 
BindInstance
ÈÈ "
(
ÈÈ" #
new
ÈÈ# &
Foo
ÈÈ' *
(
ÈÈ* +
)
ÈÈ+ ,
)
ÈÈ, -
;
ÈÈ- .
	Container
ÍÍ 
.
ÍÍ 
BindInstance
ÍÍ "
(
ÍÍ" #
new
ÍÍ# &
Foo
ÍÍ' *
(
ÍÍ* +
)
ÍÍ+ ,
)
ÍÍ, -
;
ÍÍ- .
var
ÎÎ 
foos
ÎÎ 
=
ÎÎ 
	Container
ÎÎ  
.
ÎÎ  !

ResolveAll
ÎÎ! +
<
ÎÎ+ ,
IFoo
ÎÎ, 0
>
ÎÎ0 1
(
ÎÎ1 2
)
ÎÎ2 3
;
ÎÎ3 4
	Container
ÔÔ 
.
ÔÔ 
Instantiate
ÔÔ !
<
ÔÔ! "
Foo
ÔÔ" %
>
ÔÔ% &
(
ÔÔ& '
)
ÔÔ' (
;
ÔÔ( )

GameObject
ÒÒ 
prefab1
ÒÒ 
=
ÒÒ  
null
ÒÒ! %
;
ÒÒ% &

GameObject
ÚÚ 
prefab2
ÚÚ 
=
ÚÚ  
null
ÚÚ! %
;
ÚÚ% &

GameObject
ıı 
go
ıı 
=
ıı 
	Container
ıı %
.
ıı% &
InstantiatePrefab
ıı& 7
(
ıı7 8
prefab1
ıı8 ?
)
ıı? @
;
ıı@ A
Foo
¯¯ 
foo2
¯¯ 
=
¯¯ 
	Container
¯¯  
.
¯¯  !+
InstantiatePrefabForComponent
¯¯! >
<
¯¯> ?
Foo
¯¯? B
>
¯¯B C
(
¯¯C D
prefab2
¯¯D K
)
¯¯K L
;
¯¯L M
Foo
˚˚ 
foo3
˚˚ 
=
˚˚ 
	Container
˚˚  
.
˚˚  !"
InstantiateComponent
˚˚! 5
<
˚˚5 6
Foo
˚˚6 9
>
˚˚9 :
(
˚˚: ;
go
˚˚; =
)
˚˚= >
;
˚˚> ?
}
¸¸ 	
public
˛˛ 
	interface
˛˛ 
IFoo2
˛˛ 
{
ˇˇ 	
}
ÄÄ 	
public
ÇÇ 
	interface
ÇÇ 
IFoo
ÇÇ 
{
ÉÉ 	
}
ÑÑ 	
public
ÜÜ 
	interface
ÜÜ 
IBar
ÜÜ 
:
ÜÜ 
IFoo
ÜÜ  $
{
áá 	
}
àà 	
public
ää 
class
ää 
Foo
ää 
:
ää 
MonoBehaviour
ää (
,
ää( )
IFoo
ää* .
,
ää. /
IFoo2
ää0 5
,
ää5 6
IBar
ää7 ;
{
ãã 	
public
åå 
Bar
åå 
GetBar
åå 
(
åå 
)
åå 
{
çç 
return
éé 
new
éé 
Bar
éé 
(
éé 
)
éé  
;
éé  !
}
èè 
public
ëë 
string
ëë 
GetTitle
ëë "
(
ëë" #
)
ëë# $
{
íí 
return
ìì 
$str
ìì 
;
ìì 
}
îî 
}
ïï 	
public
óó 
class
óó 
Foo1
óó 
:
óó 
IFoo
óó  
{
òò 	
}
ôô 	
public
õõ 
class
õõ 
Foo2
õõ 
:
õõ 
IFoo
õõ  
{
úú 	
}
ùù 	
public
üü 
class
üü 
Foo3
üü 
:
üü 
IFoo
üü  
{
†† 	
}
°° 	
public
££ 
class
££ 
Baz
££ 
{
§§ 	
}
•• 	
public
ßß 
class
ßß 
Gui
ßß 
{
®® 	
}
©© 	
public
´´ 
class
´´ 
Bar
´´ 
:
´´ 
IBar
´´ 
{
¨¨ 	
public
≠≠ 
Foo
≠≠ 
Foo
≠≠ 
{
ÆÆ 
get
ØØ 
{
∞∞ 
return
±± 
null
±± 
;
±±  
}
≤≤ 
}
≥≥ 
}
¥¥ 	
}
µµ 
}∂∂ ⁄*
nC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\ScopableBindingFinalizer.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class $
ScopableBindingFinalizer )
:* +$
ProviderBindingFinalizer, D
{		 
readonly

 
Func

 
<

 
DiContainer

 !
,

! "
Type

# '
,

' (
	IProvider

) 2
>

2 3
_providerFactory

4 D
;

D E
public $
ScopableBindingFinalizer '
(' (
BindInfo 
bindInfo 
, 
Func #
<# $
DiContainer$ /
,/ 0
Type1 5
,5 6
	IProvider7 @
>@ A
providerFactoryB Q
)Q R
: 
base 
( 
bindInfo 
) 
{ 	
_providerFactory 
= 
providerFactory .
;. /
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert 
. 
IsEmpty 
( 
BindInfo '
.' (
ToTypes( /
)/ 0
;0 1
FinalizeBindingSelf #
(# $
	container$ -
)- .
;. /
} 
else 
{ #
FinalizeBindingConcrete '
(' (
	container( 1
,1 2
BindInfo3 ;
.; <
ToTypes< C
)C D
;D E
} 
} 	
void   #
FinalizeBindingConcrete   $
(  $ %
DiContainer  % 0
	container  1 :
,  : ;
List  < @
<  @ A
Type  A E
>  E F
concreteTypes  G T
)  T U
{!! 	
if"" 
("" 
concreteTypes"" 
."" 
Count"" #
==""$ &
$num""' (
)""( )
{## 
return%% 
;%% 
}&& 
var(( 
scope(( 
=(( 
GetScope((  
(((  !
)((! "
;((" #
switch)) 
()) 
scope)) 
))) 
{** 
case++ 

ScopeTypes++ 
.++  
	Transient++  )
:++) *
{,, ;
/RegisterProvidersForAllContractsPerConcreteType-- C
(--C D
	container.. !
,..! "
concreteTypes..# 0
,..0 1
_providerFactory..2 B
)..B C
;..C D
break// 
;// 
}00 
case11 

ScopeTypes11 
.11  
	Singleton11  )
:11) *
{22 ;
/RegisterProvidersForAllContractsPerConcreteType33 C
(33C D
	container44 !
,44! "
concreteTypes55 %
,55% &
(66 
_66 
,66 
concreteType66 (
)66( )
=>66* ,
BindingUtil77 '
.77' ( 
CreateCachedProvider77( <
(77< =
_providerFactory88  0
(880 1
	container881 :
,88: ;
concreteType88< H
)88H I
)88I J
)88J K
;88K L
break99 
;99 
}:: 
default;; 
:;; 
{<< 
throw== 
Assert==  
.==  !
CreateException==! 0
(==0 1
)==1 2
;==2 3
}>> 
}?? 
}@@ 	
voidBB 
FinalizeBindingSelfBB  
(BB  !
DiContainerBB! ,
	containerBB- 6
)BB6 7
{CC 	
varDD 
scopeDD 
=DD 
GetScopeDD  
(DD  !
)DD! "
;DD" #
switchFF 
(FF 
scopeFF 
)FF 
{GG 
caseHH 

ScopeTypesHH 
.HH  
	TransientHH  )
:HH) *
{II '
RegisterProviderPerContractJJ /
(JJ/ 0
	containerJJ0 9
,JJ9 :
_providerFactoryJJ; K
)JJK L
;JJL M
breakKK 
;KK 
}LL 
caseMM 

ScopeTypesMM 
.MM  
	SingletonMM  )
:MM) *
{NN '
RegisterProviderPerContractOO /
(OO/ 0
	containerPP !
,PP! "
(QQ 
_QQ 
,QQ 
contractTypeQQ (
)QQ( )
=>QQ* ,
BindingUtilRR '
.RR' ( 
CreateCachedProviderRR( <
(RR< =
_providerFactorySS  0
(SS0 1
	containerSS1 :
,SS: ;
contractTypeSS< H
)SSH I
)SSI J
)SSJ K
;SSK L
breakTT 
;TT 
}UU 
defaultVV 
:VV 
{WW 
throwXX 
AssertXX  
.XX  !
CreateExceptionXX! 0
(XX0 1
)XX1 2
;XX2 3
}YY 
}ZZ 
}[[ 	
}\\ 
}]] Æ]
PC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenPools.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
public 

static 
class 
ZenPools  
{ 
staticQQ 
readonlyQQ 
StaticMemoryPoolQQ (
<QQ( )
InjectContextQQ) 6
>QQ6 7
_contextPoolQQ8 D
=QQE F
newQQG J
StaticMemoryPoolQQK [
<QQ[ \
InjectContextQQ\ i
>QQi j
(QQj k
)QQk l
;QQl m
staticRR 
readonlyRR 
StaticMemoryPoolRR (
<RR( )
LookupIdRR) 1
>RR1 2
_lookupIdPoolRR3 @
=RRA B
newRRC F
StaticMemoryPoolRRG W
<RRW X
LookupIdRRX `
>RR` a
(RRa b
)RRb c
;RRc d
staticSS 
readonlySS 
StaticMemoryPoolSS (
<SS( )
BindInfoSS) 1
>SS1 2
_bindInfoPoolSS3 @
=SSA B
newSSC F
StaticMemoryPoolSSG W
<SSW X
BindInfoSSX `
>SS` a
(SSa b
)SSb c
;SSc d
staticTT 
readonlyTT 
StaticMemoryPoolTT (
<TT( )
BindStatementTT) 6
>TT6 7
_bindStatementPoolTT8 J
=TTK L
newTTM P
StaticMemoryPoolTTQ a
<TTa b
BindStatementTTb o
>TTo p
(TTp q
)TTq r
;TTr s
publicVV 
staticVV 
HashSetVV 
<VV 
TVV 
>VV  
SpawnHashSetVV! -
<VV- .
TVV. /
>VV/ 0
(VV0 1
)VV1 2
{WW 	
returnXX 
HashSetPoolXX 
<XX 
TXX  
>XX  !
.XX! "
InstanceXX" *
.XX* +
SpawnXX+ 0
(XX0 1
)XX1 2
;XX2 3
}YY 	
public[[ 
static[[ 

Dictionary[[  
<[[  !
TKey[[! %
,[[% &
TValue[[' -
>[[- .
SpawnDictionary[[/ >
<[[> ?
TKey[[? C
,[[C D
TValue[[E K
>[[K L
([[L M
)[[M N
{\\ 	
return]] 
DictionaryPool]] !
<]]! "
TKey]]" &
,]]& '
TValue]]( .
>]]. /
.]]/ 0
Instance]]0 8
.]]8 9
Spawn]]9 >
(]]> ?
)]]? @
;]]@ A
}^^ 	
public`` 
static`` 
BindStatement`` #
SpawnStatement``$ 2
(``2 3
)``3 4
{aa 	
returnbb 
_bindStatementPoolbb %
.bb% &
Spawnbb& +
(bb+ ,
)bb, -
;bb- .
}cc 	
publicee 
staticee 
voidee 
DespawnStatementee +
(ee+ ,
BindStatementee, 9
	statementee: C
)eeC D
{ff 	
	statementgg 
.gg 
Resetgg 
(gg 
)gg 
;gg 
_bindStatementPoolhh 
.hh 
Despawnhh &
(hh& '
	statementhh' 0
)hh0 1
;hh1 2
}ii 	
publickk 
statickk 
BindInfokk 
SpawnBindInfokk ,
(kk, -
)kk- .
{ll 	
returnmm 
_bindInfoPoolmm  
.mm  !
Spawnmm! &
(mm& '
)mm' (
;mm( )
}nn 	
publicpp 
staticpp 
voidpp 
DespawnBindInfopp *
(pp* +
BindInfopp+ 3
bindInfopp4 <
)pp< =
{qq 	
bindInforr 
.rr 
Resetrr 
(rr 
)rr 
;rr 
_bindInfoPoolss 
.ss 
Despawnss !
(ss! "
bindInfoss" *
)ss* +
;ss+ ,
}tt 	
publicvv 
staticvv 
voidvv 
DespawnDictionaryvv ,
<vv, -
TKeyvv- 1
,vv1 2
TValuevv3 9
>vv9 :
(vv: ;

Dictionaryvv; E
<vvE F
TKeyvvF J
,vvJ K
TValuevvL R
>vvR S

dictionaryvvT ^
)vv^ _
{ww 	
DictionaryPoolxx 
<xx 
TKeyxx 
,xx  
TValuexx! '
>xx' (
.xx( )
Instancexx) 1
.xx1 2
Despawnxx2 9
(xx9 :

dictionaryxx: D
)xxD E
;xxE F
}yy 	
public{{ 
static{{ 
void{{ 
DespawnHashSet{{ )
<{{) *
T{{* +
>{{+ ,
({{, -
HashSet{{- 4
<{{4 5
T{{5 6
>{{6 7
set{{8 ;
){{; <
{|| 	
HashSetPool}} 
<}} 
T}} 
>}} 
.}} 
Instance}} #
.}}# $
Despawn}}$ +
(}}+ ,
set}}, /
)}}/ 0
;}}0 1
}~~ 	
public
ÄÄ 
static
ÄÄ 
LookupId
ÄÄ 
SpawnLookupId
ÄÄ ,
(
ÄÄ, -
	IProvider
ÄÄ- 6
provider
ÄÄ7 ?
,
ÄÄ? @
	BindingId
ÄÄA J
	bindingId
ÄÄK T
)
ÄÄT U
{
ÅÅ 	
var
ÇÇ 
lookupId
ÇÇ 
=
ÇÇ 
_lookupIdPool
ÇÇ (
.
ÇÇ( )
Spawn
ÇÇ) .
(
ÇÇ. /
)
ÇÇ/ 0
;
ÇÇ0 1
lookupId
ÑÑ 
.
ÑÑ 
Provider
ÑÑ 
=
ÑÑ 
provider
ÑÑ  (
;
ÑÑ( )
lookupId
ÖÖ 
.
ÖÖ 
	BindingId
ÖÖ 
=
ÖÖ  
	bindingId
ÖÖ! *
;
ÖÖ* +
return
áá 
lookupId
áá 
;
áá 
}
àà 	
public
ää 
static
ää 
void
ää 
DespawnLookupId
ää *
(
ää* +
LookupId
ää+ 3
lookupId
ää4 <
)
ää< =
{
ãã 	
_lookupIdPool
åå 
.
åå 
Despawn
åå !
(
åå! "
lookupId
åå" *
)
åå* +
;
åå+ ,
}
çç 	
public
èè 
static
èè 
List
èè 
<
èè 
T
èè 
>
èè 
	SpawnList
èè '
<
èè' (
T
èè( )
>
èè) *
(
èè* +
)
èè+ ,
{
êê 	
return
ëë 
ListPool
ëë 
<
ëë 
T
ëë 
>
ëë 
.
ëë 
Instance
ëë '
.
ëë' (
Spawn
ëë( -
(
ëë- .
)
ëë. /
;
ëë/ 0
}
íí 	
public
îî 
static
îî 
void
îî 
DespawnList
îî &
<
îî& '
T
îî' (
>
îî( )
(
îî) *
List
îî* .
<
îî. /
T
îî/ 0
>
îî0 1
list
îî2 6
)
îî6 7
{
ïï 	
ListPool
ññ 
<
ññ 
T
ññ 
>
ññ 
.
ññ 
Instance
ññ  
.
ññ  !
Despawn
ññ! (
(
ññ( )
list
ññ) -
)
ññ- .
;
ññ. /
}
óó 	
public
ôô 
static
ôô 
void
ôô 
DespawnArray
ôô '
<
ôô' (
T
ôô( )
>
ôô) *
(
ôô* +
T
ôô+ ,
[
ôô, -
]
ôô- .
arr
ôô/ 2
)
ôô2 3
{
öö 	
	ArrayPool
õõ 
<
õõ 
T
õõ 
>
õõ 
.
õõ 
GetPool
õõ  
(
õõ  !
arr
õõ! $
.
õõ$ %
Length
õõ% +
)
õõ+ ,
.
õõ, -
Despawn
õõ- 4
(
õõ4 5
arr
õõ5 8
)
õõ8 9
;
õõ9 :
}
úú 	
public
ûû 
static
ûû 
T
ûû 
[
ûû 
]
ûû 

SpawnArray
ûû $
<
ûû$ %
T
ûû% &
>
ûû& '
(
ûû' (
int
ûû( +
length
ûû, 2
)
ûû2 3
{
üü 	
return
†† 
	ArrayPool
†† 
<
†† 
T
†† 
>
†† 
.
††  
GetPool
††  '
(
††' (
length
††( .
)
††. /
.
††/ 0
Spawn
††0 5
(
††5 6
)
††6 7
;
††7 8
}
°° 	
public
££ 
static
££ 
InjectContext
££ # 
SpawnInjectContext
££$ 6
(
££6 7
DiContainer
££7 B
	container
££C L
,
££L M
Type
££N R

memberType
££S ]
)
££] ^
{
§§ 	
var
•• 
context
•• 
=
•• 
_contextPool
•• &
.
••& '
Spawn
••' ,
(
••, -
)
••- .
;
••. /
context
ßß 
.
ßß 
	Container
ßß 
=
ßß 
	container
ßß  )
;
ßß) *
context
®® 
.
®® 

MemberType
®® 
=
®®  

memberType
®®! +
;
®®+ ,
return
™™ 
context
™™ 
;
™™ 
}
´´ 	
public
≠≠ 
static
≠≠ 
void
≠≠ "
DespawnInjectContext
≠≠ /
(
≠≠/ 0
InjectContext
≠≠0 =
context
≠≠> E
)
≠≠E F
{
ÆÆ 	
context
ØØ 
.
ØØ 
Reset
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
_contextPool
∞∞ 
.
∞∞ 
Despawn
∞∞  
(
∞∞  !
context
∞∞! (
)
∞∞( )
;
∞∞) *
}
±± 	
public
¥¥ 
static
¥¥ 
InjectContext
¥¥ # 
SpawnInjectContext
¥¥$ 6
(
¥¥6 7
DiContainer
µµ 
	container
µµ !
,
µµ! "
InjectableInfo
µµ# 1
injectableInfo
µµ2 @
,
µµ@ A
InjectContext
µµB O
currentContext
µµP ^
,
µµ^ _
object
∂∂ 
targetInstance
∂∂ !
,
∂∂! "
Type
∂∂# '

targetType
∂∂( 2
,
∂∂2 3
object
∂∂4 : 
concreteIdentifier
∂∂; M
)
∂∂M N
{
∑∑ 	
var
∏∏ 
context
∏∏ 
=
∏∏  
SpawnInjectContext
∏∏ ,
(
∏∏, -
	container
∏∏- 6
,
∏∏6 7
injectableInfo
∏∏8 F
.
∏∏F G

MemberType
∏∏G Q
)
∏∏Q R
;
∏∏R S
context
∫∫ 
.
∫∫ 

ObjectType
∫∫ 
=
∫∫  

targetType
∫∫! +
;
∫∫+ ,
context
ªª 
.
ªª 
ParentContext
ªª !
=
ªª" #
currentContext
ªª$ 2
;
ªª2 3
context
ºº 
.
ºº 
ObjectInstance
ºº "
=
ºº# $
targetInstance
ºº% 3
;
ºº3 4
context
ΩΩ 
.
ΩΩ 

Identifier
ΩΩ 
=
ΩΩ  
injectableInfo
ΩΩ! /
.
ΩΩ/ 0

Identifier
ΩΩ0 :
;
ΩΩ: ;
context
ææ 
.
ææ 

MemberName
ææ 
=
ææ  
injectableInfo
ææ! /
.
ææ/ 0

MemberName
ææ0 :
;
ææ: ;
context
øø 
.
øø 
Optional
øø 
=
øø 
injectableInfo
øø -
.
øø- .
Optional
øø. 6
;
øø6 7
context
¿¿ 
.
¿¿ 

SourceType
¿¿ 
=
¿¿  
injectableInfo
¿¿! /
.
¿¿/ 0

SourceType
¿¿0 :
;
¿¿: ;
context
¡¡ 
.
¡¡ 
FallBackValue
¡¡ !
=
¡¡" #
injectableInfo
¡¡$ 2
.
¡¡2 3
DefaultValue
¡¡3 ?
;
¡¡? @
context
¬¬ 
.
¬¬  
ConcreteIdentifier
¬¬ &
=
¬¬' ( 
concreteIdentifier
¬¬) ;
;
¬¬; <
return
ƒƒ 
context
ƒƒ 
;
ƒƒ 
}
≈≈ 	
}
∆∆ 
}«« ≠X
mC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\SignalDeclaration.cs
	namespace 	
Zenject
 
{		 
public

 

class

 
SignalDeclaration

 "
:

# $
	ITickable

% .
,

. /
IDisposable

0 ;
{ 
readonly 
List 
< 
SignalSubscription (
>( )
_subscriptions* 8
=9 :
new; >
List? C
<C D
SignalSubscriptionD V
>V W
(W X
)X Y
;Y Z
readonly 
List 
< 
object 
> 
_asyncQueue )
=* +
new, /
List0 4
<4 5
object5 ;
>; <
(< =
)= >
;> ?
readonly 
	BindingId 

_bindingId %
;% &
readonly )
SignalMissingHandlerResponses .$
_missingHandlerResponses/ G
;G H
readonly 
bool 
_isAsync 
; 
readonly 
ZenjectSettings  
.  !
SignalSettings! /
	_settings0 9
;9 :
public 
SignalDeclaration  
(  !%
SignalDeclarationBindInfo %
bindInfo& .
,. /
[ 
InjectOptional 
] 
ZenjectSettings 
zenjectSettings +
)+ ,
{ 	
zenjectSettings 
= 
zenjectSettings -
??. 0
ZenjectSettings1 @
.@ A
DefaultA H
;H I
	_settings 
= 
zenjectSettings '
.' (
Signals( /
??0 2
ZenjectSettings3 B
.B C
SignalSettingsC Q
.Q R
DefaultR Y
;Y Z

_bindingId 
= 
new 
	BindingId &
(& '
bindInfo' /
./ 0

SignalType0 :
,: ;
bindInfo< D
.D E

IdentifierE O
)O P
;P Q$
_missingHandlerResponses   $
=  % &
bindInfo  ' /
.  / 0"
MissingHandlerResponse  0 F
;  F G
_isAsync!! 
=!! 
bindInfo!! 
.!!  
RunAsync!!  (
;!!( )
TickPriority"" 
="" 
bindInfo"" #
.""# $
TickPriority""$ 0
;""0 1
}## 	
public,, 
int,, 
TickPriority,, 
{-- 	
get.. 
;.. 
private.. 
set.. 
;.. 
}// 	
public11 
bool11 
IsAsync11 
{22 	
get33 
{33 
return33 
_isAsync33 !
;33! "
}33# $
}44 	
public66 
	BindingId66 
	BindingId66 "
{77 	
get88 
{88 
return88 

_bindingId88 #
;88# $
}88% &
}99 	
public;; 
void;; 
Dispose;; 
(;; 
);; 
{<< 	
if== 
(== 
	_settings== 
.== $
RequireStrictUnsubscribe== 2
)==2 3
{>> 
Assert?? 
.?? 
That?? 
(?? 
_subscriptions?? *
.??* +
IsEmpty??+ 2
(??2 3
)??3 4
,??4 5
$str@@ N
,@@N O
_subscriptions@@P ^
.@@^ _
Count@@_ d
,@@d e

_bindingId@@f p
)@@p q
;@@q r
}AA 
elseBB 
{CC 
forKK 
(KK 
intKK 
iKK 
=KK 
$numKK 
;KK 
iKK  !
<KK" #
_subscriptionsKK$ 2
.KK2 3
CountKK3 8
;KK8 9
iKK: ;
++KK; =
)KK= >
{LL 
_subscriptionsMM "
[MM" #
iMM# $
]MM$ %
.MM% &"
OnDeclarationDespawnedMM& <
(MM< =
)MM= >
;MM> ?
}NN 
}OO 
}PP 	
publicRR 
voidRR 
FireRR 
(RR 
objectRR 
signalRR  &
)RR& '
{SS 	
AssertTT 
.TT 
ThatTT 
(TT 
signalTT 
.TT 
GetTypeTT &
(TT& '
)TT' (
.TT( )
DerivesFromOrEqualTT) ;
(TT; <

_bindingIdTT< F
.TTF G
TypeTTG K
)TTK L
)TTL M
;TTM N
ifVV 
(VV 
_isAsyncVV 
)VV 
{WW 
_asyncQueueXX 
.XX 
AddXX 
(XX  
signalXX  &
)XX& '
;XX' (
}YY 
elseZZ 
{[[ 
using]] 
(]] 
var]] 
block]]  
=]]! "
DisposeBlock]]# /
.]]/ 0
Spawn]]0 5
(]]5 6
)]]6 7
)]]7 8
{^^ 
var__ 
subscriptions__ %
=__& '
block__( -
.__- .
	SpawnList__. 7
<__7 8
SignalSubscription__8 J
>__J K
(__K L
)__L M
;__M N
subscriptions`` !
.``! "
AddRange``" *
(``* +
_subscriptions``+ 9
)``9 :
;``: ;
FireInternalaa  
(aa  !
subscriptionsaa! .
,aa. /
signalaa0 6
)aa6 7
;aa7 8
}bb 
}cc 
}dd 	
voidff 
FireInternalff 
(ff 
Listff 
<ff 
SignalSubscriptionff 1
>ff1 2
subscriptionsff3 @
,ff@ A
objectffB H
signalffI O
)ffO P
{gg 	
ifhh 
(hh 
subscriptionshh 
.hh 
IsEmptyhh %
(hh% &
)hh& '
)ll 
{mm 
ifnn 
(nn $
_missingHandlerResponsesnn ,
==nn- /)
SignalMissingHandlerResponsesnn0 M
.nnM N
WarnnnN R
)nnR S
{oo 
Logpp 
.pp 
Warnpp 
(pp 
$str	pp ¬
,
pp¬ √
signal
ppƒ  
.
pp  À
GetType
ppÀ “
(
pp“ ”
)
pp” ‘
)
pp‘ ’
;
pp’ ÷
}qq 
elserr 
ifrr 
(rr $
_missingHandlerResponsesrr 1
==rr2 4)
SignalMissingHandlerResponsesrr5 R
.rrR S
ThrowrrS X
)rrX Y
{ss 
throwtt 
Asserttt  
.tt  !
CreateExceptiontt! 0
(tt0 1
$str	uu Ω
,
uuΩ æ
signal
uuø ≈
.
uu≈ ∆
GetType
uu∆ Õ
(
uuÕ Œ
)
uuŒ œ
)
uuœ –
;
uu– —
}vv 
}ww 
foryy 
(yy 
intyy 
iyy 
=yy 
$numyy 
;yy 
iyy 
<yy 
subscriptionsyy  -
.yy- .
Countyy. 3
;yy3 4
iyy5 6
++yy6 8
)yy8 9
{zz 
var{{ 
subscription{{  
={{! "
subscriptions{{# 0
[{{0 1
i{{1 2
]{{2 3
;{{3 4
if 
( 
_subscriptions "
." #
Contains# +
(+ ,
subscription, 8
)8 9
)9 :
{
ÄÄ 
subscription
ÅÅ  
.
ÅÅ  !
Invoke
ÅÅ! '
(
ÅÅ' (
signal
ÅÅ( .
)
ÅÅ. /
;
ÅÅ/ 0
}
ÇÇ 
}
ÉÉ 
}
àà 	
public
ää 
void
ää 
Tick
ää 
(
ää 
)
ää 
{
ãã 	
Assert
åå 
.
åå 
That
åå 
(
åå 
_isAsync
åå  
)
åå  !
;
åå! "
if
éé 
(
éé 
!
éé 
_asyncQueue
éé 
.
éé 
IsEmpty
éé $
(
éé$ %
)
éé% &
)
éé& '
{
èè 
using
ëë 
(
ëë 
var
ëë 
block
ëë  
=
ëë! "
DisposeBlock
ëë# /
.
ëë/ 0
Spawn
ëë0 5
(
ëë5 6
)
ëë6 7
)
ëë7 8
{
íí 
var
ìì 
subscriptions
ìì %
=
ìì& '
block
ìì( -
.
ìì- .
	SpawnList
ìì. 7
<
ìì7 8 
SignalSubscription
ìì8 J
>
ììJ K
(
ììK L
)
ììL M
;
ììM N
subscriptions
îî !
.
îî! "
AddRange
îî" *
(
îî* +
_subscriptions
îî+ 9
)
îî9 :
;
îî: ;
var
òò 
signals
òò 
=
òò  !
block
òò" '
.
òò' (
	SpawnList
òò( 1
<
òò1 2
object
òò2 8
>
òò8 9
(
òò9 :
)
òò: ;
;
òò; <
signals
ôô 
.
ôô 
AddRange
ôô $
(
ôô$ %
_asyncQueue
ôô% 0
)
ôô0 1
;
ôô1 2
_asyncQueue
õõ 
.
õõ  
Clear
õõ  %
(
õõ% &
)
õõ& '
;
õõ' (
for
ùù 
(
ùù 
int
ùù 
i
ùù 
=
ùù  
$num
ùù! "
;
ùù" #
i
ùù$ %
<
ùù& '
signals
ùù( /
.
ùù/ 0
Count
ùù0 5
;
ùù5 6
i
ùù7 8
++
ùù8 :
)
ùù: ;
{
ûû 
FireInternal
üü $
(
üü$ %
subscriptions
üü% 2
,
üü2 3
signals
üü4 ;
[
üü; <
i
üü< =
]
üü= >
)
üü> ?
;
üü? @
}
†† 
}
°° 
}
¢¢ 
}
££ 	
public
•• 
void
•• 
Add
•• 
(
••  
SignalSubscription
•• *
subscription
••+ 7
)
••7 8
{
¶¶ 	
Assert
ßß 
.
ßß 
That
ßß 
(
ßß 
!
ßß 
_subscriptions
ßß '
.
ßß' (
Contains
ßß( 0
(
ßß0 1
subscription
ßß1 =
)
ßß= >
)
ßß> ?
;
ßß? @
_subscriptions
®® 
.
®® 
Add
®® 
(
®® 
subscription
®® +
)
®®+ ,
;
®®, -
}
©© 	
public
´´ 
void
´´ 
Remove
´´ 
(
´´  
SignalSubscription
´´ -
subscription
´´. :
)
´´: ;
{
¨¨ 	
_subscriptions
≠≠ 
.
≠≠ 
RemoveWithConfirm
≠≠ ,
(
≠≠, -
subscription
≠≠- 9
)
≠≠9 :
;
≠≠: ;
}
ÆÆ 	
public
∞∞ 
class
∞∞ 
Factory
∞∞ 
:
∞∞  
PlaceholderFactory
∞∞ 1
<
∞∞1 2'
SignalDeclarationBindInfo
∞∞2 K
,
∞∞K L
SignalDeclaration
∞∞M ^
>
∞∞^ _
{
±± 	
}
≤≤ 	
}
≥≥ 
}¥¥ ó

C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\SubContainerCreators\SubContainerCreatorByInstance.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class )
SubContainerCreatorByInstance .
:/ 0 
ISubContainerCreator1 E
{ 
readonly		 
DiContainer		 
_subcontainer		 *
;		* +
public )
SubContainerCreatorByInstance ,
(, -
DiContainer- 8
subcontainer9 E
)E F
{ 	
_subcontainer 
= 
subcontainer (
;( )
} 	
public 
DiContainer 
CreateSubContainer -
(- .
List. 2
<2 3
TypeValuePair3 @
>@ A
argsB F
,F G
InjectContextH U
contextV ]
)] ^
{ 	
Assert 
. 
That 
( 
args 
. 
IsEmpty $
($ %
)% &
)& '
;' (
return 
_subcontainer  
;  !
} 	
} 
} Ä 
RC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Internal\Assert.cs
	namespace 	

ModestTree
 
{ 
public		 

static		 
class		 
Assert		 
{

 
public 
static 
void 
That 
(  
bool  $
	condition% .
). /
{ 	
if 
( 
! 
	condition 
) 
{ 
throw 
CreateException %
(% &
$str& 3
)3 4
;4 5
} 
} 	
public 
static 
void 

IsNotEmpty %
(% &
string& ,
str- 0
)0 1
{ 	
if 
( 
String 
. 
IsNullOrEmpty $
($ %
str% (
)( )
)) *
{ 
throw 
CreateException %
(% &
$str& G
)G H
;H I
} 
} 	
public%% 
static%% 
void%% 
IsEmpty%% "
<%%" #
T%%# $
>%%$ %
(%%% &
IList%%& +
<%%+ ,
T%%, -
>%%- .
list%%/ 3
)%%3 4
{&& 	
if'' 
('' 
list'' 
.'' 
Count'' 
!='' 
$num'' 
)''  
{(( 
throw)) 
CreateException)) %
())% &
$str** V
,**V W
list**X \
.**\ ]
Count**] b
)**b c
;**c d
}++ 
},, 	
public11 
static11 
void11 
IsEmpty11 "
<11" #
T11# $
>11$ %
(11% &
IEnumerable11& 1
<111 2
T112 3
>113 4
sequence115 =
)11= >
{22 	
if33 
(33 
!33 
sequence33 
.33 
IsEmpty33 !
(33! "
)33" #
)33# $
{44 
throw55 
CreateException55 %
(55% &
$str55& h
,55h i
sequence66 
.66 
Count66 "
(66" #
)66# $
)66$ %
;66% &
}77 
}88 	
public== 
static== 
void== 
IsType== !
<==! "
T==" #
>==# $
(==$ %
object==% +
obj==, /
)==/ 0
{>> 	
IsType?? 
<?? 
T?? 
>?? 
(?? 
obj?? 
,?? 
$str?? 
)?? 
;?? 
}@@ 	
publicEE 
staticEE 
voidEE 
IsTypeEE !
<EE! "
TEE" #
>EE# $
(EE$ %
objectEE% +
objEE, /
,EE/ 0
stringEE1 7
messageEE8 ?
)EE? @
{FF 	
ifGG 
(GG 
!GG 
(GG 
objGG 
isGG 
TGG 
)GG 
)GG 
{HH 
throwII 
CreateExceptionII %
(II% &
$strII& z
,IIz {
message	II| É
,
IIÉ Ñ
typeof
IIÖ ã
(
IIã å
T
IIå ç
)
IIç é
.
IIé è

PrettyName
IIè ô
(
IIô ö
)
IIö õ
,
IIõ ú
obj
IIù †
.
II† °
GetType
II° ®
(
II® ©
)
II© ™
.
II™ ´

PrettyName
II´ µ
(
IIµ ∂
)
II∂ ∑
)
II∑ ∏
;
II∏ π
}JJ 
}KK 	
publicPP 
staticPP 
voidPP 
DerivesFromPP &
<PP& '
TPP' (
>PP( )
(PP) *
TypePP* .
typePP/ 3
)PP3 4
{QQ 	
ifRR 
(RR 
!RR 
typeRR 
.RR 
DerivesFromRR !
<RR! "
TRR" #
>RR# $
(RR$ %
)RR% &
)RR& '
{SS 
throwTT 
CreateExceptionTT %
(TT% &
$strTT& P
,TTP Q
typeTTR V
.TTV W
NameTTW [
,TT[ \
typeofTT] c
(TTc d
TTTd e
)TTe f
.TTf g
NameTTg k
)TTk l
;TTl m
}UU 
}VV 	
public[[ 
static[[ 
void[[ 
DerivesFromOrEqual[[ -
<[[- .
T[[. /
>[[/ 0
([[0 1
Type[[1 5
type[[6 :
)[[: ;
{\\ 	
if]] 
(]] 
!]] 
type]] 
.]] 
DerivesFromOrEqual]] (
<]]( )
T]]) *
>]]* +
(]]+ ,
)]], -
)]]- .
{^^ 
throw__ 
CreateException__ %
(__% &
$str__& _
,___ `
type__a e
.__e f
Name__f j
,__j k
typeof__l r
(__r s
T__s t
)__t u
.__u v
Name__v z
)__z {
;__{ |
}`` 
}aa 	
publicff 
staticff 
voidff 
DerivesFromff &
(ff& '
Typeff' +
	childTypeff, 5
,ff5 6
Typeff7 ;

parentTypeff< F
)ffF G
{gg 	
ifhh 
(hh 
!hh 
	childTypehh 
.hh 
DerivesFromhh &
(hh& '

parentTypehh' 1
)hh1 2
)hh2 3
{ii 
throwjj 
CreateExceptionjj %
(jj% &
$strjj& P
,jjP Q
	childTypejjR [
.jj[ \
Namejj\ `
,jj` a

parentTypejjb l
.jjl m
Namejjm q
)jjq r
;jjr s
}kk 
}ll 	
publicqq 
staticqq 
voidqq 
DerivesFromOrEqualqq -
(qq- .
Typeqq. 2
	childTypeqq3 <
,qq< =
Typeqq> B

parentTypeqqC M
)qqM N
{rr 	
ifss 
(ss 
!ss 
	childTypess 
.ss 
DerivesFromOrEqualss -
(ss- .

parentTypess. 8
)ss8 9
)ss9 :
{tt 
throwuu 
CreateExceptionuu %
(uu% &
$struu& _
,uu_ `
	childTypeuua j
.uuj k
Nameuuk o
,uuo p

parentTypeuuq {
.uu{ |
Name	uu| Ä
)
uuÄ Å
;
uuÅ Ç
}vv 
}ww 	
public}} 
static}} 
void}} 
IsEqual}} "
(}}" #
object}}# )
left}}* .
,}}. /
object}}0 6
right}}7 <
)}}< =
{~~ 	
IsEqual 
( 
left 
, 
right 
,  
$str! #
)# $
;$ %
}
ÄÄ 	
public
ÜÜ 
static
ÜÜ 
void
ÜÜ 
IsEqual
ÜÜ "
(
ÜÜ" #
object
ÜÜ# )
left
ÜÜ* .
,
ÜÜ. /
object
ÜÜ0 6
right
ÜÜ7 <
,
ÜÜ< =
Func
ÜÜ> B
<
ÜÜB C
string
ÜÜC I
>
ÜÜI J
messageGenerator
ÜÜK [
)
ÜÜ[ \
{
áá 	
if
àà 
(
àà 
!
àà 
object
àà 
.
àà 
Equals
àà 
(
àà 
left
àà #
,
àà# $
right
àà% *
)
àà* +
)
àà+ ,
{
ââ 
left
ää 
=
ää 
left
ää 
??
ää 
$str
ää '
;
ää' (
right
ãã 
=
ãã 
right
ãã 
??
ãã  
$str
ãã! )
;
ãã) *
throw
åå 
CreateException
åå %
(
åå% &
$str
åå& i
,
ååi j
messageGenerator
ååk {
(
åå{ |
)
åå| }
,
åå} ~
leftåå É
,ååÉ Ñ
rightååÖ ä
)ååä ã
;ååã å
}
çç 
}
éé 	
public
ìì 
static
ìì 
void
ìì 
IsApproximately
ìì *
(
ìì* +
float
ìì+ 0
left
ìì1 5
,
ìì5 6
float
ìì7 <
right
ìì= B
,
ììB C
float
ììD I
epsilon
ììJ Q
=
ììR S
$num
ììT \
)
ìì\ ]
{
îî 	
bool
ïï 
isEqual
ïï 
=
ïï 
Math
ïï 
.
ïï  
Abs
ïï  #
(
ïï# $
left
ïï$ (
-
ïï) *
right
ïï+ 0
)
ïï0 1
<
ïï2 3
epsilon
ïï4 ;
;
ïï; <
if
óó 
(
óó 
!
óó 
isEqual
óó 
)
óó 
{
òò 
throw
ôô 
CreateException
ôô %
(
ôô% &
$str
ôô& c
,
ôôc d
left
ôôe i
,
ôôi j
right
ôôk p
)
ôôp q
;
ôôq r
}
öö 
}
õõ 	
public
°° 
static
°° 
void
°° 
IsEqual
°° "
(
°°" #
object
°°# )
left
°°* .
,
°°. /
object
°°0 6
right
°°7 <
,
°°< =
string
°°> D
message
°°E L
)
°°L M
{
¢¢ 	
if
££ 
(
££ 
!
££ 
object
££ 
.
££ 
Equals
££ 
(
££ 
left
££ #
,
££# $
right
££% *
)
££* +
)
££+ ,
{
§§ 
left
•• 
=
•• 
left
•• 
??
•• 
$str
•• '
;
••' (
right
¶¶ 
=
¶¶ 
right
¶¶ 
??
¶¶  
$str
¶¶! )
;
¶¶) *
throw
ßß 
CreateException
ßß %
(
ßß% &
$str
ßß& h
,
ßßh i
message
ßßj q
,
ßßq r
left
ßßs w
,
ßßw x
right
ßßy ~
)
ßß~ 
;ßß Ä
}
®® 
}
©© 	
public
ØØ 
static
ØØ 
void
ØØ 

IsNotEqual
ØØ %
(
ØØ% &
object
ØØ& ,
left
ØØ- 1
,
ØØ1 2
object
ØØ3 9
right
ØØ: ?
)
ØØ? @
{
∞∞ 	

IsNotEqual
±± 
(
±± 
left
±± 
,
±± 
right
±± "
,
±±" #
$str
±±$ &
)
±±& '
;
±±' (
}
≤≤ 	
public
∏∏ 
static
∏∏ 
void
∏∏ 

IsNotEqual
∏∏ %
(
∏∏% &
object
∏∏& ,
left
∏∏- 1
,
∏∏1 2
object
∏∏3 9
right
∏∏: ?
,
∏∏? @
Func
∏∏A E
<
∏∏E F
string
∏∏F L
>
∏∏L M
messageGenerator
∏∏N ^
)
∏∏^ _
{
ππ 	
if
∫∫ 
(
∫∫ 
object
∫∫ 
.
∫∫ 
Equals
∫∫ 
(
∫∫ 
left
∫∫ !
,
∫∫! "
right
∫∫# (
)
∫∫( )
)
∫∫) *
{
ªª 
left
ºº 
=
ºº 
left
ºº 
??
ºº 
$str
ºº '
;
ºº' (
right
ΩΩ 
=
ΩΩ 
right
ΩΩ 
??
ΩΩ  
$str
ΩΩ! )
;
ΩΩ) *
throw
ææ 
CreateException
ææ %
(
ææ% &
$str
ææ& n
,
ææn o
messageGeneratorææp Ä
(ææÄ Å
)ææÅ Ç
,ææÇ É
leftææÑ à
,ææà â
rightææä è
)ææè ê
;ææê ë
}
øø 
}
¿¿ 	
public
≈≈ 
static
≈≈ 
void
≈≈ 
IsNull
≈≈ !
(
≈≈! "
object
≈≈" (
val
≈≈) ,
)
≈≈, -
{
∆∆ 	
if
«« 
(
«« 
val
«« 
!=
«« 
null
«« 
)
«« 
{
»» 
throw
…… 
CreateException
…… %
(
……% &
$str
   O
,
  O P
val
  Q T
)
  T U
;
  U V
}
ÀÀ 
}
ÃÃ 	
public
—— 
static
—— 
void
—— 
IsNull
—— !
(
——! "
object
——" (
val
——) ,
,
——, -
string
——. 4
message
——5 <
)
——< =
{
““ 	
if
”” 
(
”” 
val
”” 
!=
”” 
null
”” 
)
”” 
{
‘‘ 
throw
’’ 
CreateException
’’ %
(
’’% &
$str
÷÷ %
,
÷÷% &
message
÷÷' .
)
÷÷. /
;
÷÷/ 0
}
◊◊ 
}
ÿÿ 	
public
ﬁﬁ 
static
ﬁﬁ 
void
ﬁﬁ 
IsNull
ﬁﬁ !
(
ﬁﬁ! "
object
ﬁﬁ" (
val
ﬁﬁ) ,
,
ﬁﬁ, -
string
ﬁﬁ. 4
message
ﬁﬁ5 <
,
ﬁﬁ< =
object
ﬁﬁ> D
p1
ﬁﬁE G
)
ﬁﬁG H
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
val
‡‡ 
!=
‡‡ 
null
‡‡ 
)
‡‡ 
{
·· 
throw
‚‚ 
CreateException
‚‚ %
(
‚‚% &
$str
„„ %
,
„„% &
message
„„' .
.
„„. /
Fmt
„„/ 2
(
„„2 3
p1
„„3 5
)
„„5 6
)
„„6 7
;
„„7 8
}
‰‰ 
}
ÂÂ 	
public
ÍÍ 
static
ÍÍ 
void
ÍÍ 
	IsNotNull
ÍÍ $
(
ÍÍ$ %
object
ÍÍ% +
val
ÍÍ, /
)
ÍÍ/ 0
{
ÎÎ 	
if
ÏÏ 
(
ÏÏ 
val
ÏÏ 
==
ÏÏ 
null
ÏÏ 
)
ÏÏ 
{
ÌÌ 
throw
ÓÓ 
CreateException
ÓÓ %
(
ÓÓ% &
$str
ÓÓ& ^
)
ÓÓ^ _
;
ÓÓ_ `
}
ÔÔ 
}
 	
public
ıı 
static
ıı 
void
ıı 
	IsNotNull
ıı $
(
ıı$ %
object
ıı% +
val
ıı, /
,
ıı/ 0
string
ıı1 7
message
ıı8 ?
)
ıı? @
{
ˆˆ 	
if
˜˜ 
(
˜˜ 
val
˜˜ 
==
˜˜ 
null
˜˜ 
)
˜˜ 
{
¯¯ 
throw
˘˘ 
CreateException
˘˘ %
(
˘˘% &
$str
˘˘& 7
,
˘˘7 8
message
˘˘9 @
)
˘˘@ A
;
˘˘A B
}
˙˙ 
}
˚˚ 	
public
ÅÅ 
static
ÅÅ 
void
ÅÅ 
	IsNotNull
ÅÅ $
(
ÅÅ$ %
object
ÅÅ% +
val
ÅÅ, /
,
ÅÅ/ 0
string
ÅÅ1 7
message
ÅÅ8 ?
,
ÅÅ? @
object
ÅÅA G
p1
ÅÅH J
)
ÅÅJ K
{
ÇÇ 	
if
ÉÉ 
(
ÉÉ 
val
ÉÉ 
==
ÉÉ 
null
ÉÉ 
)
ÉÉ 
{
ÑÑ 
throw
ÖÖ 
CreateException
ÖÖ %
(
ÖÖ% &
$str
ÖÖ& 7
,
ÖÖ7 8
message
ÖÖ9 @
.
ÖÖ@ A
Fmt
ÖÖA D
(
ÖÖD E
p1
ÖÖE G
)
ÖÖG H
)
ÖÖH I
;
ÖÖI J
}
ÜÜ 
}
áá 	
public
çç 
static
çç 
void
çç 
	IsNotNull
çç $
(
çç$ %
object
çç% +
val
çç, /
,
çç/ 0
string
çç1 7
message
çç8 ?
,
çç? @
object
ççA G
p1
ççH J
,
ççJ K
object
ççL R
p2
ççS U
)
ççU V
{
éé 	
if
èè 
(
èè 
val
èè 
==
èè 
null
èè 
)
èè 
{
êê 
throw
ëë 
CreateException
ëë %
(
ëë% &
$str
ëë& 7
,
ëë7 8
message
ëë9 @
.
ëë@ A
Fmt
ëëA D
(
ëëD E
p1
ëëE G
,
ëëG H
p2
ëëI K
)
ëëK L
)
ëëL M
;
ëëM N
}
íí 
}
ìì 	
public
òò 
static
òò 
void
òò 

IsNotEmpty
òò %
<
òò% &
T
òò& '
>
òò' (
(
òò( )
IEnumerable
òò) 4
<
òò4 5
T
òò5 6
>
òò6 7
val
òò8 ;
,
òò; <
string
òò= C
message
òòD K
=
òòL M
$str
òòN P
)
òòP Q
{
ôô 	
if
öö 
(
öö 
!
öö 
val
öö 
.
öö 
Any
öö 
(
öö 
)
öö 
)
öö 
{
õõ 
throw
úú 
CreateException
úú %
(
úú% &
$str
úú& g
,
úúg h
val
úúi l
.
úúl m
Count
úúm r
(
úúr s
)
úús t
,
úút u
message
úúv }
)
úú} ~
;
úú~ 
}
ùù 
}
ûû 	
public
§§ 
static
§§ 
void
§§ 

IsNotEqual
§§ %
(
§§% &
object
§§& ,
left
§§- 1
,
§§1 2
object
§§3 9
right
§§: ?
,
§§? @
string
§§A G
message
§§H O
)
§§O P
{
•• 	
if
¶¶ 
(
¶¶ 
object
¶¶ 
.
¶¶ 
Equals
¶¶ 
(
¶¶ 
left
¶¶ "
,
¶¶" #
right
¶¶$ )
)
¶¶) *
)
¶¶* +
{
ßß 
left
®® 
=
®® 
left
®® 
??
®® 
$str
®® '
;
®®' (
right
©© 
=
©© 
right
©© 
??
©©  
$str
©©! )
;
©©) *
throw
™™ 
CreateException
™™ %
(
™™% &
$str
™™& W
,
™™W X
message
™™Y `
,
™™` a
left
™™b f
)
™™f g
;
™™g h
}
´´ 
}
¨¨ 	
public
±± 
static
±± 
void
±± 
Warn
±± 
(
±±  
bool
±±  $
	condition
±±% .
)
±±. /
{
≤≤ 	
if
≥≥ 
(
≥≥ 
!
≥≥ 
	condition
≥≥ 
)
≥≥ 
{
¥¥ 

ModestTree
µµ 
.
µµ 
Log
µµ 
.
µµ 
Warn
µµ #
(
µµ# $
$str
µµ$ >
)
µµ> ?
;
µµ? @
}
∂∂ 
}
∑∑ 	
public
ºº 
static
ºº 
void
ºº 
Warn
ºº 
(
ºº  
bool
ºº  $
	condition
ºº% .
,
ºº. /
Func
ºº0 4
<
ºº4 5
string
ºº5 ;
>
ºº; <
messageGenerator
ºº= M
)
ººM N
{
ΩΩ 	
if
ææ 
(
ææ 
!
ææ 
	condition
ææ 
)
ææ 
{
øø 

ModestTree
¿¿ 
.
¿¿ 
Log
¿¿ 
.
¿¿ 
Warn
¿¿ #
(
¿¿# $
$str
¿¿$ :
+
¿¿; <
messageGenerator
¿¿= M
(
¿¿M N
)
¿¿N O
)
¿¿O P
;
¿¿P Q
}
¡¡ 
}
¬¬ 	
public
«« 
static
«« 
void
«« 
That
«« 
(
««  
bool
»» 
	condition
»» 
,
»» 
string
»» "
message
»»# *
)
»»* +
{
…… 	
if
   
(
   
!
   
	condition
   
)
   
{
ÀÀ 
throw
ÃÃ 
CreateException
ÃÃ %
(
ÃÃ% &
$str
ÃÃ& 4
+
ÃÃ5 6
message
ÃÃ7 >
)
ÃÃ> ?
;
ÃÃ? @
}
ÕÕ 
}
ŒŒ 	
public
‘‘ 
static
‘‘ 
void
‘‘ 
That
‘‘ 
(
‘‘  
bool
’’ 
	condition
’’ 
,
’’ 
string
’’ "
message
’’# *
,
’’* +
object
’’, 2
p1
’’3 5
)
’’5 6
{
÷÷ 	
if
◊◊ 
(
◊◊ 
!
◊◊ 
	condition
◊◊ 
)
◊◊ 
{
ÿÿ 
throw
ŸŸ 
CreateException
ŸŸ %
(
ŸŸ% &
$str
ŸŸ& 4
+
ŸŸ5 6
message
ŸŸ7 >
.
ŸŸ> ?
Fmt
ŸŸ? B
(
ŸŸB C
p1
ŸŸC E
)
ŸŸE F
)
ŸŸF G
;
ŸŸG H
}
⁄⁄ 
}
€€ 	
public
·· 
static
·· 
void
·· 
That
·· 
(
··  
bool
‚‚ 
	condition
‚‚ 
,
‚‚ 
string
‚‚ "
message
‚‚# *
,
‚‚* +
object
‚‚, 2
p1
‚‚3 5
,
‚‚5 6
object
‚‚7 =
p2
‚‚> @
)
‚‚@ A
{
„„ 	
if
‰‰ 
(
‰‰ 
!
‰‰ 
	condition
‰‰ 
)
‰‰ 
{
ÂÂ 
throw
ÊÊ 
CreateException
ÊÊ %
(
ÊÊ% &
$str
ÊÊ& 4
+
ÊÊ5 6
message
ÊÊ7 >
.
ÊÊ> ?
Fmt
ÊÊ? B
(
ÊÊB C
p1
ÊÊC E
,
ÊÊE F
p2
ÊÊG I
)
ÊÊI J
)
ÊÊJ K
;
ÊÊK L
}
ÁÁ 
}
ËË 	
public
ÓÓ 
static
ÓÓ 
void
ÓÓ 
That
ÓÓ 
(
ÓÓ  
bool
ÔÔ 
	condition
ÔÔ 
,
ÔÔ 
string
ÔÔ "
message
ÔÔ# *
,
ÔÔ* +
object
ÔÔ, 2
p1
ÔÔ3 5
,
ÔÔ5 6
object
ÔÔ7 =
p2
ÔÔ> @
,
ÔÔ@ A
object
ÔÔB H
p3
ÔÔI K
)
ÔÔK L
{
 	
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
	condition
ÒÒ 
)
ÒÒ 
{
ÚÚ 
throw
ÛÛ 
CreateException
ÛÛ %
(
ÛÛ% &
$str
ÛÛ& 4
+
ÛÛ5 6
message
ÛÛ7 >
.
ÛÛ> ?
Fmt
ÛÛ? B
(
ÛÛB C
p1
ÛÛC E
,
ÛÛE F
p2
ÛÛG I
,
ÛÛI J
p3
ÛÛK M
)
ÛÛM N
)
ÛÛN O
;
ÛÛO P
}
ÙÙ 
}
ıı 	
public
˙˙ 
static
˙˙ 
void
˙˙ 
Warn
˙˙ 
(
˙˙  
bool
˙˙  $
	condition
˙˙% .
,
˙˙. /
string
˙˙0 6
message
˙˙7 >
)
˙˙> ?
{
˚˚ 	
if
¸¸ 
(
¸¸ 
!
¸¸ 
	condition
¸¸ 
)
¸¸ 
{
˝˝ 

ModestTree
˛˛ 
.
˛˛ 
Log
˛˛ 
.
˛˛ 
Warn
˛˛ #
(
˛˛# $
$str
˛˛$ :
+
˛˛; <
message
˛˛= D
)
˛˛D E
;
˛˛E F
}
ˇˇ 
}
ÄÄ 	
public
ÖÖ 
static
ÖÖ 
void
ÖÖ 
Throws
ÖÖ !
(
ÖÖ! "
Action
ÖÖ" (
action
ÖÖ) /
)
ÖÖ/ 0
{
ÜÜ 	
Throws
áá 
<
áá 
	Exception
áá 
>
áá 
(
áá 
action
áá $
)
áá$ %
;
áá% &
}
àà 	
public
çç 
static
çç 
void
çç 
Throws
çç !
<
çç! "

TException
çç" ,
>
çç, -
(
çç- .
Action
çç. 4
action
çç5 ;
)
çç; <
where
éé 

TException
éé 
:
éé 
	Exception
éé (
{
èè 	
try
êê 
{
ëë 
action
íí 
(
íí 
)
íí 
;
íí 
}
ìì 
catch
îî 
(
îî 

TException
îî 
)
îî 
{
ïï 
return
ññ 
;
ññ 
}
óó 
throw
ôô 
CreateException
ôô !
(
ôô! "
$str
öö T
,
ööT U
typeof
ööV \
(
öö\ ]

TException
öö] g
)
öög h
.
ööh i
Name
ööi m
)
ööm n
;
öön o
}
õõ 	
public
ùù 
static
ùù 
ZenjectException
ùù &
CreateException
ùù' 6
(
ùù6 7
)
ùù7 8
{
ûû 	
return
üü 
new
üü 
ZenjectException
üü '
(
üü' (
$str
üü( 5
)
üü5 6
;
üü6 7
}
†† 	
public
¢¢ 
static
¢¢ 
ZenjectException
¢¢ &
CreateException
¢¢' 6
(
¢¢6 7
string
¢¢7 =
message
¢¢> E
)
¢¢E F
{
££ 	
return
§§ 
new
§§ 
ZenjectException
§§ '
(
§§' (
message
§§( /
)
§§/ 0
;
§§0 1
}
•• 	
public
ßß 
static
ßß 
ZenjectException
ßß &
CreateException
ßß' 6
(
ßß6 7
string
ßß7 =
message
ßß> E
,
ßßE F
params
ßßG M
object
ßßN T
[
ßßT U
]
ßßU V

parameters
ßßW a
)
ßßa b
{
®® 	
return
©© 
new
©© 
ZenjectException
©© '
(
©©' (
message
©©( /
.
©©/ 0
Fmt
©©0 3
(
©©3 4

parameters
©©4 >
)
©©> ?
)
©©? @
;
©©@ A
}
™™ 	
public
¨¨ 
static
¨¨ 
ZenjectException
¨¨ &
CreateException
¨¨' 6
(
¨¨6 7
	Exception
¨¨7 @
innerException
¨¨A O
,
¨¨O P
string
¨¨Q W
message
¨¨X _
,
¨¨_ `
params
¨¨a g
object
¨¨h n
[
¨¨n o
]
¨¨o p

parameters
¨¨q {
)
¨¨{ |
{
≠≠ 	
return
ÆÆ 
new
ÆÆ 
ZenjectException
ÆÆ '
(
ÆÆ' (
message
ÆÆ( /
.
ÆÆ/ 0
Fmt
ÆÆ0 3
(
ÆÆ3 4

parameters
ÆÆ4 >
)
ÆÆ> ?
,
ÆÆ? @
innerException
ÆÆA O
)
ÆÆO P
;
ÆÆP Q
}
ØØ 	
}
∞∞ 
}±± Â√
pC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinderBase.cs
	namespace		 	
Zenject		
 
{

 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryFromBinderBase &
:' (8
,ScopeConcreteIdArgConditionCopyNonLazyBinder) U
{ 
public !
FactoryFromBinderBase $
($ %
DiContainer 
bindContainer %
,% &
Type' +
contractType, 8
,8 9
BindInfo: B
bindInfoC K
,K L
FactoryBindInfoM \
factoryBindInfo] l
)l m
: 
base 
( 
bindInfo 
) 
{ 	
FactoryBindInfo 
= 
factoryBindInfo -
;- .
BindContainer 
= 
bindContainer )
;) *
ContractType 
= 
contractType '
;' (
factoryBindInfo 
. 
ProviderFunc (
=) *
( 
	container 
) 
=> 
new "
TransientProvider# 4
(4 5
ContractType  
,  !
	container" +
,+ ,
BindInfo- 5
.5 6
	Arguments6 ?
,? @
BindInfoA I
.I J
ContextInfoJ U
,U V
BindInfoW _
._ `
ConcreteIdentifier` r
,r s
BindInfo 
.  
InstantiatedCallback 1
)1 2
;2 3
} 	
internal 
DiContainer 
BindContainer *
{ 	
get 
; 
private 
set 
; 
} 	
	protected!! 
FactoryBindInfo!! !
FactoryBindInfo!!" 1
{"" 	
get## 
;## 
private## 
set## 
;## 
}$$ 	
internal'' 
Func'' 
<'' 
DiContainer'' !
,''! "
	IProvider''# ,
>'', -
ProviderFunc''. :
{(( 	
get)) 
{)) 
return)) 
FactoryBindInfo)) (
.))( )
ProviderFunc))) 5
;))5 6
}))7 8
set** 
{** 
FactoryBindInfo** !
.**! "
ProviderFunc**" .
=**/ 0
value**1 6
;**6 7
}**8 9
}++ 	
	protected-- 
Type-- 
ContractType-- #
{.. 	
get// 
;// 
private// 
set// 
;// 
}00 	
public22 
IEnumerable22 
<22 
Type22 
>22  
AllParentTypes22! /
{33 	
get44 
{55 
yield66 
return66 
ContractType66 )
;66) *
foreach88 
(88 
var88 
type88 !
in88" $
BindInfo88% -
.88- .
ToTypes88. 5
)885 6
{99 
yield:: 
return::  
type::! %
;::% &
};; 
}<< 
}== 	
public@@ &
ConditionCopyNonLazyBinder@@ )
FromNew@@* 1
(@@1 2
)@@2 3
{AA 	
BindingUtilBB 
.BB  
AssertIsNotComponentBB ,
(BB, -
ContractTypeBB- 9
)BB9 :
;BB: ;
BindingUtilCC 
.CC 
AssertIsNotAbstractCC +
(CC+ ,
ContractTypeCC, 8
)CC8 9
;CC9 :
returnEE 
thisEE 
;EE 
}FF 	
publicHH &
ConditionCopyNonLazyBinderHH )
FromResolveHH* 5
(HH5 6
)HH6 7
{II 	
returnJJ 
FromResolveJJ 
(JJ 
nullJJ #
)JJ# $
;JJ$ %
}KK 	
publicMM &
ConditionCopyNonLazyBinderMM )
FromInstanceMM* 6
(MM6 7
objectMM7 =
instanceMM> F
)MMF G
{NN 	
BindingUtilOO 
.OO ,
 AssertInstanceDerivesFromOrEqualOO 8
(OO8 9
instanceOO9 A
,OOA B
AllParentTypesOOC Q
)OOQ R
;OOR S
ProviderFuncQQ 
=QQ 
(RR 
	containerRR 
)RR 
=>RR 
newRR "
InstanceProviderRR# 3
(RR3 4
ContractTypeRR4 @
,RR@ A
instanceRRB J
,RRJ K
	containerRRL U
)RRU V
;RRV W
returnTT 
thisTT 
;TT 
}UU 	
publicWW &
ConditionCopyNonLazyBinderWW )
FromResolveWW* 5
(WW5 6
objectWW6 <
subIdentifierWW= J
)WWJ K
{XX 	
ProviderFuncYY 
=YY 
(ZZ 
	containerZZ 
)ZZ 
=>ZZ 
newZZ "
ResolveProviderZZ# 2
(ZZ2 3
ContractType[[  
,[[  !
	container[[" +
,[[+ ,
subIdentifier\\ !
,\\! "
false\\# (
,\\( )
InjectSources\\* 7
.\\7 8
Any\\8 ;
,\\; <
false\\= B
)\\B C
;\\C D
return^^ 
this^^ 
;^^ 
}__ 	
internalbb !
ConcreteBinderGenericbb &
<bb& '
Tbb' (
>bb( ) 
CreateIFactoryBinderbb* >
<bb> ?
Tbb? @
>bb@ A
(bbA B
outbbB E
GuidbbF J
	factoryIdbbK T
)bbT U
{cc 	
	factoryIdff 
=ff 
Guidff 
.ff 
NewGuidff $
(ff$ %
)ff% &
;ff& '
returnii 
BindContainerii  
.ii  !
BindNoFlushii! ,
<ii, -
Tii- .
>ii. /
(ii/ 0
)ii0 1
.ii1 2
WithIdii2 8
(ii8 9
	factoryIdii9 B
)iiB C
;iiC D
}jj 	
publicnn &
ConditionCopyNonLazyBindernn )
FromComponentOnnn* 9
(nn9 :

GameObjectnn: D

gameObjectnnE O
)nnO P
{oo 	
BindingUtilpp 
.pp #
AssertIsValidGameObjectpp /
(pp/ 0

gameObjectpp0 :
)pp: ;
;pp; <
BindingUtilqq 
.qq 
AssertIsComponentqq )
(qq) *
ContractTypeqq* 6
)qq6 7
;qq7 8
BindingUtilrr 
.rr 
AssertIsNotAbstractrr +
(rr+ ,
ContractTyperr, 8
)rr8 9
;rr9 :
ProviderFunctt 
=tt 
(uu 
	containeruu 
)uu 
=>uu 
newuu ".
"GetFromGameObjectComponentProvideruu# E
(uuE F
ContractTypevv  
,vv  !

gameObjectvv" ,
,vv, -
truevv. 2
)vv2 3
;vv3 4
returnxx 
thisxx 
;xx 
}yy 	
public{{ &
ConditionCopyNonLazyBinder{{ )
FromComponentOn{{* 9
({{9 :
Func{{: >
<{{> ?
InjectContext{{? L
,{{L M

GameObject{{N X
>{{X Y
gameObjectGetter{{Z j
){{j k
{|| 	
BindingUtil}} 
.}} 
AssertIsComponent}} )
(}}) *
ContractType}}* 6
)}}6 7
;}}7 8
BindingUtil~~ 
.~~ 
AssertIsNotAbstract~~ +
(~~+ ,
ContractType~~, 8
)~~8 9
;~~9 :
ProviderFunc
ÄÄ 
=
ÄÄ 
(
ÅÅ 
	container
ÅÅ 
)
ÅÅ 
=>
ÅÅ 
new
ÅÅ "6
(GetFromGameObjectGetterComponentProvider
ÅÅ# K
(
ÅÅK L
ContractType
ÇÇ  
,
ÇÇ  !
gameObjectGetter
ÇÇ" 2
,
ÇÇ2 3
true
ÇÇ4 8
)
ÇÇ8 9
;
ÇÇ9 :
return
ÑÑ 
this
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
public
áá (
ConditionCopyNonLazyBinder
áá )!
FromComponentOnRoot
áá* =
(
áá= >
)
áá> ?
{
àà 	
return
ââ 
FromComponentOn
ââ "
(
ââ" #
ctx
ää 
=>
ää 
BindContainer
ää $
.
ää$ %
Resolve
ää% ,
<
ää, -
Context
ää- 4
>
ää4 5
(
ää5 6
)
ää6 7
.
ää7 8

gameObject
ää8 B
)
ääB C
;
ääC D
}
ãã 	
public
çç (
ConditionCopyNonLazyBinder
çç ) 
FromNewComponentOn
çç* <
(
çç< =

GameObject
çç= G

gameObject
ççH R
)
ççR S
{
éé 	
BindingUtil
èè 
.
èè %
AssertIsValidGameObject
èè /
(
èè/ 0

gameObject
èè0 :
)
èè: ;
;
èè; <
BindingUtil
êê 
.
êê 
AssertIsComponent
êê )
(
êê) *
ContractType
êê* 6
)
êê6 7
;
êê7 8
BindingUtil
ëë 
.
ëë !
AssertIsNotAbstract
ëë +
(
ëë+ ,
ContractType
ëë, 8
)
ëë8 9
;
ëë9 :
ProviderFunc
ìì 
=
ìì 
(
îî 
	container
îî 
)
îî 
=>
îî 
new
îî "6
(AddToExistingGameObjectComponentProvider
îî# K
(
îîK L

gameObject
ïï 
,
ïï 
	container
ïï  )
,
ïï) *
ContractType
ïï+ 7
,
ïï7 8
new
ññ 
List
ññ 
<
ññ 
TypeValuePair
ññ *
>
ññ* +
(
ññ+ ,
)
ññ, -
,
ññ- .
BindInfo
ññ/ 7
.
ññ7 8 
ConcreteIdentifier
ññ8 J
,
ññJ K
BindInfo
ññL T
.
ññT U"
InstantiatedCallback
ññU i
)
ññi j
;
ññj k
return
òò 
this
òò 
;
òò 
}
ôô 	
public
õõ (
ConditionCopyNonLazyBinder
õõ ) 
FromNewComponentOn
õõ* <
(
õõ< =
Func
úú 
<
úú 
InjectContext
úú 
,
úú 

GameObject
úú  *
>
úú* +
gameObjectGetter
úú, <
)
úú< =
{
ùù 	
BindingUtil
ûû 
.
ûû 
AssertIsComponent
ûû )
(
ûû) *
ContractType
ûû* 6
)
ûû6 7
;
ûû7 8
BindingUtil
üü 
.
üü !
AssertIsNotAbstract
üü +
(
üü+ ,
ContractType
üü, 8
)
üü8 9
;
üü9 :
ProviderFunc
°° 
=
°° 
(
¢¢ 
	container
¢¢ 
)
¢¢ 
=>
¢¢ 
new
¢¢ "<
.AddToExistingGameObjectComponentProviderGetter
¢¢# Q
(
¢¢Q R
gameObjectGetter
££ $
,
££$ %
	container
££& /
,
££/ 0
ContractType
££1 =
,
££= >
new
§§ 
List
§§ 
<
§§ 
TypeValuePair
§§ *
>
§§* +
(
§§+ ,
)
§§, -
,
§§- .
BindInfo
§§/ 7
.
§§7 8 
ConcreteIdentifier
§§8 J
,
§§J K
BindInfo
§§L T
.
§§T U"
InstantiatedCallback
§§U i
)
§§i j
;
§§j k
return
¶¶ 
this
¶¶ 
;
¶¶ 
}
ßß 	
public
©© G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
©© H-
FromNewComponentOnNewGameObject
©©I h
(
©©h i
)
©©i j
{
™™ 	
BindingUtil
´´ 
.
´´ 
AssertIsComponent
´´ )
(
´´) *
ContractType
´´* 6
)
´´6 7
;
´´7 8
BindingUtil
¨¨ 
.
¨¨ !
AssertIsNotAbstract
¨¨ +
(
¨¨+ ,
ContractType
¨¨, 8
)
¨¨8 9
;
¨¨9 :
var
ÆÆ 
gameObjectInfo
ÆÆ 
=
ÆÆ  
new
ÆÆ! $*
GameObjectCreationParameters
ÆÆ% A
(
ÆÆA B
)
ÆÆB C
;
ÆÆC D
ProviderFunc
∞∞ 
=
∞∞ 
(
±± 
	container
±± 
)
±± 
=>
±± 
new
±± "1
#AddToNewGameObjectComponentProvider
±±# F
(
±±F G
	container
≤≤ 
,
≤≤ 
ContractType
≤≤ +
,
≤≤+ ,
new
≥≥ 
List
≥≥ 
<
≥≥ 
TypeValuePair
≥≥ *
>
≥≥* +
(
≥≥+ ,
)
≥≥, -
,
≥≥- .
gameObjectInfo
≥≥/ =
,
≥≥= >
BindInfo
≥≥? G
.
≥≥G H 
ConcreteIdentifier
≥≥H Z
,
≥≥Z [
BindInfo
≥≥\ d
.
≥≥d e"
InstantiatedCallback
≥≥e y
)
≥≥y z
;
≥≥z {
return
µµ 
new
µµ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
µµ P
(
µµP Q
BindInfo
µµQ Y
,
µµY Z
gameObjectInfo
µµ[ i
)
µµi j
;
µµj k
}
∂∂ 	
public
∏∏ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
∏∏ H)
FromNewComponentOnNewPrefab
∏∏I d
(
∏∏d e
UnityEngine
∏∏e p
.
∏∏p q
Object
∏∏q w
prefab
∏∏x ~
)
∏∏~ 
{
ππ 	
BindingUtil
∫∫ 
.
∫∫ !
AssertIsValidPrefab
∫∫ +
(
∫∫+ ,
prefab
∫∫, 2
)
∫∫2 3
;
∫∫3 4
BindingUtil
ªª 
.
ªª 
AssertIsComponent
ªª )
(
ªª) *
ContractType
ªª* 6
)
ªª6 7
;
ªª7 8
BindingUtil
ºº 
.
ºº !
AssertIsNotAbstract
ºº +
(
ºº+ ,
ContractType
ºº, 8
)
ºº8 9
;
ºº9 :
var
ææ 
gameObjectInfo
ææ 
=
ææ  
new
ææ! $*
GameObjectCreationParameters
ææ% A
(
ææA B
)
ææB C
;
ææC D
ProviderFunc
¿¿ 
=
¿¿ 
(
¡¡ 
	container
¡¡ 
)
¡¡ 
=>
¡¡ 
new
¡¡ "2
$InstantiateOnPrefabComponentProvider
¡¡# G
(
¡¡G H
ContractType
¬¬  
,
¬¬  !
new
√√  
PrefabInstantiator
√√ *
(
√√* +
	container
ƒƒ !
,
ƒƒ! "
gameObjectInfo
ƒƒ# 1
,
ƒƒ1 2
ContractType
≈≈ $
,
≈≈$ %
new
≈≈& )
[
≈≈* +
]
≈≈+ ,
{
≈≈- .
ContractType
≈≈/ ;
}
≈≈< =
,
≈≈= >
new
≈≈? B
List
≈≈C G
<
≈≈G H
TypeValuePair
≈≈H U
>
≈≈U V
(
≈≈V W
)
≈≈W X
,
≈≈X Y
new
∆∆ 
PrefabProvider
∆∆ *
(
∆∆* +
prefab
∆∆+ 1
)
∆∆1 2
,
∆∆2 3
BindInfo
∆∆4 <
.
∆∆< ="
InstantiatedCallback
∆∆= Q
)
∆∆Q R
)
∆∆R S
;
∆∆S T
return
»» 
new
»» G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
»» P
(
»»P Q
BindInfo
»»Q Y
,
»»Y Z
gameObjectInfo
»»[ i
)
»»i j
;
»»j k
}
…… 	
public
ÀÀ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÀÀ H&
FromComponentInNewPrefab
ÀÀI a
(
ÀÀa b
UnityEngine
ÀÀb m
.
ÀÀm n
Object
ÀÀn t
prefab
ÀÀu {
)
ÀÀ{ |
{
ÃÃ 	
BindingUtil
ÕÕ 
.
ÕÕ !
AssertIsValidPrefab
ÕÕ +
(
ÕÕ+ ,
prefab
ÕÕ, 2
)
ÕÕ2 3
;
ÕÕ3 4
BindingUtil
ŒŒ 
.
ŒŒ *
AssertIsInterfaceOrComponent
ŒŒ 4
(
ŒŒ4 5
ContractType
ŒŒ5 A
)
ŒŒA B
;
ŒŒB C
var
–– 
gameObjectInfo
–– 
=
––  
new
––! $*
GameObjectCreationParameters
––% A
(
––A B
)
––B C
;
––C D
ProviderFunc
““ 
=
““ 
(
”” 
	container
”” 
)
”” 
=>
”” 
new
”” ",
GetFromPrefabComponentProvider
””# A
(
””A B
ContractType
‘‘  
,
‘‘  !
new
’’  
PrefabInstantiator
’’ *
(
’’* +
	container
÷÷ !
,
÷÷! "
gameObjectInfo
÷÷# 1
,
÷÷1 2
ContractType
◊◊ $
,
◊◊$ %
new
◊◊& )
[
◊◊* +
]
◊◊+ ,
{
◊◊- .
ContractType
◊◊/ ;
}
◊◊< =
,
◊◊= >
new
◊◊? B
List
◊◊C G
<
◊◊G H
TypeValuePair
◊◊H U
>
◊◊U V
(
◊◊V W
)
◊◊W X
,
◊◊X Y
new
ÿÿ 
PrefabProvider
ÿÿ *
(
ÿÿ* +
prefab
ÿÿ+ 1
)
ÿÿ1 2
,
ÿÿ2 3
BindInfo
ŸŸ  
.
ŸŸ  !"
InstantiatedCallback
ŸŸ! 5
)
ŸŸ5 6
,
ŸŸ6 7
true
ŸŸ8 <
)
ŸŸ< =
;
ŸŸ= >
return
€€ 
new
€€ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
€€ P
(
€€P Q
BindInfo
€€Q Y
,
€€Y Z
gameObjectInfo
€€[ i
)
€€i j
;
€€j k
}
‹‹ 	
public
ﬁﬁ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ﬁﬁ H.
 FromComponentInNewPrefabResource
ﬁﬁI i
(
ﬁﬁi j
string
ﬁﬁj p
resourcePath
ﬁﬁq }
)
ﬁﬁ} ~
{
ﬂﬂ 	
BindingUtil
‡‡ 
.
‡‡ '
AssertIsValidResourcePath
‡‡ 1
(
‡‡1 2
resourcePath
‡‡2 >
)
‡‡> ?
;
‡‡? @
BindingUtil
·· 
.
·· *
AssertIsInterfaceOrComponent
·· 4
(
··4 5
ContractType
··5 A
)
··A B
;
··B C
var
„„ 
gameObjectInfo
„„ 
=
„„  
new
„„! $*
GameObjectCreationParameters
„„% A
(
„„A B
)
„„B C
;
„„C D
ProviderFunc
ÂÂ 
=
ÂÂ 
(
ÊÊ 
	container
ÊÊ 
)
ÊÊ 
=>
ÊÊ 
new
ÊÊ ",
GetFromPrefabComponentProvider
ÊÊ# A
(
ÊÊA B
ContractType
ÁÁ  
,
ÁÁ  !
new
ËË  
PrefabInstantiator
ËË *
(
ËË* +
	container
ÈÈ !
,
ÈÈ! "
gameObjectInfo
ÈÈ# 1
,
ÈÈ1 2
ContractType
ÍÍ $
,
ÍÍ$ %
new
ÍÍ& )
[
ÍÍ* +
]
ÍÍ+ ,
{
ÍÍ- .
ContractType
ÍÍ/ ;
}
ÍÍ< =
,
ÍÍ= >
new
ÍÍ? B
List
ÍÍC G
<
ÍÍG H
TypeValuePair
ÍÍH U
>
ÍÍU V
(
ÍÍV W
)
ÍÍW X
,
ÍÍX Y
new
ÎÎ $
PrefabProviderResource
ÎÎ 2
(
ÎÎ2 3
resourcePath
ÎÎ3 ?
)
ÎÎ? @
,
ÎÎ@ A
BindInfo
ÎÎB J
.
ÎÎJ K"
InstantiatedCallback
ÎÎK _
)
ÎÎ_ `
,
ÎÎ` a
true
ÎÎb f
)
ÎÎf g
;
ÎÎg h
return
ÌÌ 
new
ÌÌ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÌÌ P
(
ÌÌP Q
BindInfo
ÌÌQ Y
,
ÌÌY Z
gameObjectInfo
ÌÌ[ i
)
ÌÌi j
;
ÌÌj k
}
ÓÓ 	
public
 G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
 H1
#FromNewComponentOnNewPrefabResource
I l
(
l m
string
m s
resourcePatht Ä
)Ä Å
{
ÒÒ 	
BindingUtil
ÚÚ 
.
ÚÚ '
AssertIsValidResourcePath
ÚÚ 1
(
ÚÚ1 2
resourcePath
ÚÚ2 >
)
ÚÚ> ?
;
ÚÚ? @
BindingUtil
ÛÛ 
.
ÛÛ 
AssertIsComponent
ÛÛ )
(
ÛÛ) *
ContractType
ÛÛ* 6
)
ÛÛ6 7
;
ÛÛ7 8
BindingUtil
ÙÙ 
.
ÙÙ !
AssertIsNotAbstract
ÙÙ +
(
ÙÙ+ ,
ContractType
ÙÙ, 8
)
ÙÙ8 9
;
ÙÙ9 :
var
ˆˆ 
gameObjectInfo
ˆˆ 
=
ˆˆ  
new
ˆˆ! $*
GameObjectCreationParameters
ˆˆ% A
(
ˆˆA B
)
ˆˆB C
;
ˆˆC D
ProviderFunc
¯¯ 
=
¯¯ 
(
˘˘ 
	container
˘˘ 
)
˘˘ 
=>
˘˘ 
new
˘˘ "2
$InstantiateOnPrefabComponentProvider
˘˘# G
(
˘˘G H
ContractType
˙˙  
,
˙˙  !
new
˚˚  
PrefabInstantiator
˚˚ *
(
˚˚* +
	container
¸¸ !
,
¸¸! "
gameObjectInfo
¸¸# 1
,
¸¸1 2
ContractType
˝˝ $
,
˝˝$ %
new
˝˝& )
[
˝˝* +
]
˝˝+ ,
{
˝˝- .
ContractType
˝˝/ ;
}
˝˝< =
,
˝˝= >
new
˝˝? B
List
˝˝C G
<
˝˝G H
TypeValuePair
˝˝H U
>
˝˝U V
(
˝˝V W
)
˝˝W X
,
˝˝X Y
new
˛˛ $
PrefabProviderResource
˛˛ 2
(
˛˛2 3
resourcePath
˛˛3 ?
)
˛˛? @
,
˛˛@ A
BindInfo
ˇˇ  
.
ˇˇ  !"
InstantiatedCallback
ˇˇ! 5
)
ˇˇ5 6
)
ˇˇ6 7
;
ˇˇ7 8
return
ÅÅ 
new
ÅÅ G
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
ÅÅ P
(
ÅÅP Q
BindInfo
ÅÅQ Y
,
ÅÅY Z
gameObjectInfo
ÅÅ[ i
)
ÅÅi j
;
ÅÅj k
}
ÇÇ 	
public
ÑÑ (
ConditionCopyNonLazyBinder
ÑÑ )-
FromNewScriptableObjectResource
ÑÑ* I
(
ÑÑI J
string
ÑÑJ P
resourcePath
ÑÑQ ]
)
ÑÑ] ^
{
ÖÖ 	
BindingUtil
ÜÜ 
.
ÜÜ '
AssertIsValidResourcePath
ÜÜ 1
(
ÜÜ1 2
resourcePath
ÜÜ2 >
)
ÜÜ> ?
;
ÜÜ? @
BindingUtil
áá 
.
áá 1
#AssertIsInterfaceOrScriptableObject
áá ;
(
áá; <
ContractType
áá< H
)
ááH I
;
ááI J
ProviderFunc
ââ 
=
ââ 
(
ää 
	container
ää 
)
ää 
=>
ää 
new
ää ".
 ScriptableObjectResourceProvider
ää# C
(
ääC D
resourcePath
ãã  
,
ãã  !
ContractType
ãã" .
,
ãã. /
	container
ãã0 9
,
ãã9 :
new
ãã; >
List
ãã? C
<
ããC D
TypeValuePair
ããD Q
>
ããQ R
(
ããR S
)
ããS T
,
ããT U
true
åå 
,
åå 
null
åå 
,
åå 
BindInfo
åå  (
.
åå( )"
InstantiatedCallback
åå) =
)
åå= >
;
åå> ?
return
éé 
this
éé 
;
éé 
}
èè 	
public
ëë (
ConditionCopyNonLazyBinder
ëë )*
FromScriptableObjectResource
ëë* F
(
ëëF G
string
ëëG M
resourcePath
ëëN Z
)
ëëZ [
{
íí 	
BindingUtil
ìì 
.
ìì '
AssertIsValidResourcePath
ìì 1
(
ìì1 2
resourcePath
ìì2 >
)
ìì> ?
;
ìì? @
BindingUtil
îî 
.
îî 1
#AssertIsInterfaceOrScriptableObject
îî ;
(
îî; <
ContractType
îî< H
)
îîH I
;
îîI J
ProviderFunc
ññ 
=
ññ 
(
óó 
	container
óó 
)
óó 
=>
óó 
new
óó ".
 ScriptableObjectResourceProvider
óó# C
(
óóC D
resourcePath
òò  
,
òò  !
ContractType
òò" .
,
òò. /
	container
òò0 9
,
òò9 :
new
òò; >
List
òò? C
<
òòC D
TypeValuePair
òòD Q
>
òòQ R
(
òòR S
)
òòS T
,
òòT U
false
ôô 
,
ôô 
null
ôô 
,
ôô  
BindInfo
ôô! )
.
ôô) *"
InstantiatedCallback
ôô* >
)
ôô> ?
;
ôô? @
return
õõ 
this
õõ 
;
õõ 
}
úú 	
public
ûû (
ConditionCopyNonLazyBinder
ûû )
FromResource
ûû* 6
(
ûû6 7
string
ûû7 =
resourcePath
ûû> J
)
ûûJ K
{
üü 	
BindingUtil
†† 
.
†† *
AssertDerivesFromUnityObject
†† 4
(
††4 5
ContractType
††5 A
)
††A B
;
††B C
ProviderFunc
¢¢ 
=
¢¢ 
(
££ 
	container
££ 
)
££ 
=>
££ 
new
££ "
ResourceProvider
££# 3
(
££3 4
resourcePath
££4 @
,
££@ A
ContractType
££B N
,
££N O
true
££P T
)
££T U
;
££U V
return
•• 
this
•• 
;
•• 
}
¶¶ 	
}
®® 
}©© •?
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder1.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
	TContract9 B
>B C
:D E!
FactoryToChoiceBinderF [
<[ \
TParam1\ c
,c d
	TContracte n
>n o
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
	TContract. 7
>7 8 
WithFactoryArguments9 M
<M N
TN O
>O P
(P Q
TQ R
paramS X
)X Y
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
	TContract. 7
>7 8 
WithFactoryArguments9 M
<M N
TFactoryParam1N \
,\ ]
TFactoryParam2^ l
>l m
(m n
TFactoryParam1n |
param1	} É
,
É Ñ
TFactoryParam2
Ö ì
param2
î ö
)
ö õ
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
	TContract. 7
>7 8 
WithFactoryArguments9 M
<M N
TFactoryParam1N \
,\ ]
TFactoryParam2^ l
,l m
TFactoryParam3n |
>| }
(} ~
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
	TContract%%. 7
>%%7 8 
WithFactoryArguments%%9 M
<%%M N
TFactoryParam1%%N \
,%%\ ]
TFactoryParam2%%^ l
,%%l m
TFactoryParam3%%n |
,%%| }
TFactoryParam4	%%~ å
>
%%å ç
(
%%ç é
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
	TContract,,. 7
>,,7 8 
WithFactoryArguments,,9 M
<,,M N
TFactoryParam1,,N \
,,,\ ]
TFactoryParam2,,^ l
,,,l m
TFactoryParam3,,n |
,,,| }
TFactoryParam4	,,~ å
,
,,å ç
TFactoryParam5
,,é ú
>
,,ú ù
(
,,ù û
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
	TContract33. 7
>337 8 
WithFactoryArguments339 M
<33M N
TFactoryParam133N \
,33\ ]
TFactoryParam233^ l
,33l m
TFactoryParam333n |
,33| }
TFactoryParam4	33~ å
,
33å ç
TFactoryParam5
33é ú
,
33ú ù
TFactoryParam6
33û ¨
>
33¨ ≠
(
33≠ Æ
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
	TContract::. 7
>::7 8 
WithFactoryArguments::9 M
(::M N
object::N T
[::T U
]::U V
args::W [
)::[ \
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
	TContract@@. 7
>@@7 8(
WithFactoryArgumentsExplicit@@9 U
(@@U V
IEnumerable@@V a
<@@a b
TypeValuePair@@b o
>@@o p
	extraArgs@@q z
)@@z {
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ºö
lC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Factories\Pooling\Static\StaticMemoryPool.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

abstract 
class $
StaticMemoryPoolBaseBase 2
<2 3
TValue3 9
>9 :
:; <"
IDespawnableMemoryPool= S
<S T
TValueT Z
>Z [
,[ \
IDisposable] h
where		 
TValue		 
:		 
class		 
{

 
readonly 
Stack 
< 
TValue 
> 
_stack %
=& '
new( +
Stack, 1
<1 2
TValue2 8
>8 9
(9 :
): ;
;; <
Action 
< 
TValue 
> 
_onDespawnedMethod )
;) *
int 
_activeCount 
; 
public $
StaticMemoryPoolBaseBase '
(' (
Action( .
<. /
TValue/ 5
>5 6
onDespawnedMethod7 H
)H I
{ 	
_onDespawnedMethod 
=  
onDespawnedMethod! 2
;2 3$
StaticMemoryPoolRegistry $
.$ %
Add% (
(( )
this) -
)- .
;. /
} 	
public 
Action 
< 
TValue 
> 
OnDespawnedMethod /
{ 	
set   
{   
_onDespawnedMethod   $
=  % &
value  ' ,
;  , -
}  . /
}!! 	
public## 
int## 
NumTotal## 
{$$ 	
get%% 
{%% 
return%% 
NumInactive%% $
+%%% &
	NumActive%%' 0
;%%0 1
}%%2 3
}&& 	
public(( 
int(( 
	NumActive(( 
{)) 	
get** 
{++ 
{// 
return00 
_activeCount00 '
;00' (
}11 
}22 
}33 	
public55 
int55 
NumInactive55 
{66 	
get77 
{88 
{<< 
return== 
_stack== !
.==! "
Count==" '
;==' (
}>> 
}?? 
}@@ 	
publicBB 
TypeBB 
ItemTypeBB 
{CC 	
getDD 
{DD 
returnDD 
typeofDD 
(DD  
TValueDD  &
)DD& '
;DD' (
}DD) *
}EE 	
publicGG 
voidGG 
ResizeGG 
(GG 
intGG 
desiredPoolSizeGG .
)GG. /
{HH 	
{LL 
ResizeInternalMM 
(MM 
desiredPoolSizeMM .
)MM. /
;MM/ 0
}NN 
}OO 	
voidRR 
ResizeInternalRR 
(RR 
intRR 
desiredPoolSizeRR  /
)RR/ 0
{SS 	
AssertTT 
.TT 
ThatTT 
(TT 
desiredPoolSizeTT '
>=TT( *
$numTT+ ,
,TT, -
$strTT. a
)TTa b
;TTb c
whileVV 
(VV 
_stackVV 
.VV 
CountVV 
>VV  !
desiredPoolSizeVV" 1
)VV1 2
{WW 
_stackXX 
.XX 
PopXX 
(XX 
)XX 
;XX 
}YY 
while[[ 
([[ 
desiredPoolSize[[ "
>[[# $
_stack[[% +
.[[+ ,
Count[[, 1
)[[1 2
{\\ 
_stack]] 
.]] 
Push]] 
(]] 
Alloc]] !
(]]! "
)]]" #
)]]# $
;]]$ %
}^^ 
Assert`` 
.`` 
IsEqual`` 
(`` 
_stack`` !
.``! "
Count``" '
,``' (
desiredPoolSize``) 8
)``8 9
;``9 :
}aa 	
publiccc 
voidcc 
Disposecc 
(cc 
)cc 
{dd 	$
StaticMemoryPoolRegistryff $
.ff$ %
Removeff% +
(ff+ ,
thisff, 0
)ff0 1
;ff1 2
}hh 	
publicjj 
voidjj 
ClearActiveCountjj $
(jj$ %
)jj% &
{kk 	
{oo 
_activeCountpp 
=pp 
$numpp  
;pp  !
}qq 
}rr 	
publictt 
voidtt 
Cleartt 
(tt 
)tt 
{uu 	
Resizevv 
(vv 
$numvv 
)vv 
;vv 
}ww 	
publicyy 
voidyy 
ShrinkByyy 
(yy 
intyy  
numToRemoveyy! ,
)yy, -
{zz 	
{~~ 
ResizeInternal 
( 
_stack %
.% &
Count& +
-, -
numToRemove. 9
)9 :
;: ;
}
ÄÄ 
}
ÅÅ 	
public
ÉÉ 
void
ÉÉ 
ExpandBy
ÉÉ 
(
ÉÉ 
int
ÉÉ  
numToAdd
ÉÉ! )
)
ÉÉ) *
{
ÑÑ 	
{
àà 
ResizeInternal
ââ 
(
ââ 
_stack
ââ %
.
ââ% &
Count
ââ& +
+
ââ, -
numToAdd
ââ. 6
)
ââ6 7
;
ââ7 8
}
ää 
}
ãã 	
	protected
éé 
TValue
éé 
SpawnInternal
éé &
(
éé& '
)
éé' (
{
èè 	
TValue
êê 
element
êê 
;
êê 
if
íí 
(
íí 
_stack
íí 
.
íí 
Count
íí 
==
íí 
$num
íí  !
)
íí! "
{
ìì 
element
îî 
=
îî 
Alloc
îî 
(
îî  
)
îî  !
;
îî! "
}
ïï 
else
ññ 
{
óó 
element
òò 
=
òò 
_stack
òò  
.
òò  !
Pop
òò! $
(
òò$ %
)
òò% &
;
òò& '
}
ôô 
_activeCount
õõ 
++
õõ 
;
õõ 
return
úú 
element
úú 
;
úú 
}
ùù 	
void
üü 
IMemoryPool
üü 
.
üü 
Despawn
üü  
(
üü  !
object
üü! '
item
üü( ,
)
üü, -
{
†† 	
Despawn
°° 
(
°° 
(
°° 
TValue
°° 
)
°° 
item
°°  
)
°°  !
;
°°! "
}
¢¢ 	
public
§§ 
void
§§ 
Despawn
§§ 
(
§§ 
TValue
§§ "
element
§§# *
)
§§* +
{
•• 	
if
¶¶ 
(
¶¶  
_onDespawnedMethod
¶¶ "
!=
¶¶# %
null
¶¶& *
)
¶¶* +
{
ßß  
_onDespawnedMethod
®® "
(
®®" #
element
®®# *
)
®®* +
;
®®+ ,
}
©© 
{
ÆÆ 
Assert
ØØ 
.
ØØ 
That
ØØ 
(
ØØ 
!
ØØ 
_stack
ØØ #
.
ØØ# $
Contains
ØØ$ ,
(
ØØ, -
element
ØØ- 4
)
ØØ4 5
,
ØØ5 6
$str
ØØ7 \
)
ØØ\ ]
;
ØØ] ^
_activeCount
±± 
--
±± 
;
±± 
_stack
≤≤ 
.
≤≤ 
Push
≤≤ 
(
≤≤ 
element
≤≤ #
)
≤≤# $
;
≤≤$ %
}
≥≥ 
}
¥¥ 	
	protected
∂∂ 
abstract
∂∂ 
TValue
∂∂ !
Alloc
∂∂" '
(
∂∂' (
)
∂∂( )
;
∂∂) *
}
∑∑ 
[
ππ  
NoReflectionBaking
ππ 
]
ππ 
public
∫∫ 

abstract
∫∫ 
class
∫∫ "
StaticMemoryPoolBase
∫∫ .
<
∫∫. /
TValue
∫∫/ 5
>
∫∫5 6
:
∫∫7 8&
StaticMemoryPoolBaseBase
∫∫9 Q
<
∫∫Q R
TValue
∫∫R X
>
∫∫X Y
where
ªª 
TValue
ªª 
:
ªª 
class
ªª 
,
ªª 
new
ªª !
(
ªª! "
)
ªª" #
{
ºº 
public
ΩΩ "
StaticMemoryPoolBase
ΩΩ #
(
ΩΩ# $
Action
ΩΩ$ *
<
ΩΩ* +
TValue
ΩΩ+ 1
>
ΩΩ1 2
onDespawnedMethod
ΩΩ3 D
)
ΩΩD E
:
ææ 
base
ææ 
(
ææ 
onDespawnedMethod
ææ $
)
ææ$ %
{
øø 	
}
¿¿ 	
	protected
¬¬ 
override
¬¬ 
TValue
¬¬ !
Alloc
¬¬" '
(
¬¬' (
)
¬¬( )
{
√√ 	
return
ƒƒ 
new
ƒƒ 
TValue
ƒƒ 
(
ƒƒ 
)
ƒƒ 
;
ƒƒ  
}
≈≈ 	
}
∆∆ 
[
    
NoReflectionBaking
   
]
   
public
ÀÀ 

class
ÀÀ 
StaticMemoryPool
ÀÀ !
<
ÀÀ! "
TValue
ÀÀ" (
>
ÀÀ( )
:
ÀÀ* +"
StaticMemoryPoolBase
ÀÀ, @
<
ÀÀ@ A
TValue
ÀÀA G
>
ÀÀG H
,
ÀÀH I
IMemoryPool
ÀÀJ U
<
ÀÀU V
TValue
ÀÀV \
>
ÀÀ\ ]
where
ÃÃ 
TValue
ÃÃ 
:
ÃÃ 
class
ÃÃ 
,
ÃÃ 
new
ÃÃ !
(
ÃÃ! "
)
ÃÃ" #
{
ÕÕ 
Action
ŒŒ 
<
ŒŒ 
TValue
ŒŒ 
>
ŒŒ 
_onSpawnMethod
ŒŒ %
;
ŒŒ% &
public
–– 
StaticMemoryPool
–– 
(
––  
Action
—— 
<
—— 
TValue
—— 
>
—— 
onSpawnMethod
—— (
=
——) *
null
——+ /
,
——/ 0
Action
——1 7
<
——7 8
TValue
——8 >
>
——> ?
onDespawnedMethod
——@ Q
=
——R S
null
——T X
)
——X Y
:
““ 
base
““ 
(
““ 
onDespawnedMethod
““ $
)
““$ %
{
”” 	
_onSpawnMethod
‘‘ 
=
‘‘ 
onSpawnMethod
‘‘ *
;
‘‘* +
}
’’ 	
public
◊◊ 
Action
◊◊ 
<
◊◊ 
TValue
◊◊ 
>
◊◊ 
OnSpawnMethod
◊◊ +
{
ÿÿ 	
set
ŸŸ 
{
ŸŸ 
_onSpawnMethod
ŸŸ  
=
ŸŸ! "
value
ŸŸ# (
;
ŸŸ( )
}
ŸŸ* +
}
⁄⁄ 	
public
‹‹ 
TValue
‹‹ 
Spawn
‹‹ 
(
‹‹ 
)
‹‹ 
{
›› 	
{
·· 
var
‚‚ 
item
‚‚ 
=
‚‚ 
SpawnInternal
‚‚ (
(
‚‚( )
)
‚‚) *
;
‚‚* +
if
‰‰ 
(
‰‰ 
_onSpawnMethod
‰‰ "
!=
‰‰# %
null
‰‰& *
)
‰‰* +
{
ÂÂ 
_onSpawnMethod
ÊÊ "
(
ÊÊ" #
item
ÊÊ# '
)
ÊÊ' (
;
ÊÊ( )
}
ÁÁ 
return
ÈÈ 
item
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
[
  
NoReflectionBaking
 
]
 
public
ÒÒ 

class
ÒÒ 
StaticMemoryPool
ÒÒ !
<
ÒÒ! "
TParam1
ÒÒ" )
,
ÒÒ) *
TValue
ÒÒ+ 1
>
ÒÒ1 2
:
ÒÒ3 4"
StaticMemoryPoolBase
ÒÒ5 I
<
ÒÒI J
TValue
ÒÒJ P
>
ÒÒP Q
,
ÒÒQ R
IMemoryPool
ÒÒS ^
<
ÒÒ^ _
TParam1
ÒÒ_ f
,
ÒÒf g
TValue
ÒÒh n
>
ÒÒn o
where
ÚÚ 
TValue
ÚÚ 
:
ÚÚ 
class
ÚÚ 
,
ÚÚ 
new
ÚÚ !
(
ÚÚ! "
)
ÚÚ" #
{
ÛÛ 
Action
ÙÙ 
<
ÙÙ 
TParam1
ÙÙ 
,
ÙÙ 
TValue
ÙÙ 
>
ÙÙ 
_onSpawnMethod
ÙÙ  .
;
ÙÙ. /
public
ˆˆ 
StaticMemoryPool
ˆˆ 
(
ˆˆ  
Action
˜˜ 
<
˜˜ 
TParam1
˜˜ 
,
˜˜ 
TValue
˜˜ "
>
˜˜" #
onSpawnMethod
˜˜$ 1
,
˜˜1 2
Action
˜˜3 9
<
˜˜9 :
TValue
˜˜: @
>
˜˜@ A
onDespawnedMethod
˜˜B S
=
˜˜T U
null
˜˜V Z
)
˜˜Z [
:
¯¯ 
base
¯¯ 
(
¯¯ 
onDespawnedMethod
¯¯ $
)
¯¯$ %
{
˘˘ 	
Assert
˚˚ 
.
˚˚ 
	IsNotNull
˚˚ 
(
˚˚ 
onSpawnMethod
˚˚ *
)
˚˚* +
;
˚˚+ ,
_onSpawnMethod
¸¸ 
=
¸¸ 
onSpawnMethod
¸¸ *
;
¸¸* +
}
˝˝ 	
public
ˇˇ 
Action
ˇˇ 
<
ˇˇ 
TParam1
ˇˇ 
,
ˇˇ 
TValue
ˇˇ %
>
ˇˇ% &
OnSpawnMethod
ˇˇ' 4
{
ÄÄ 	
set
ÅÅ 
{
ÅÅ 
_onSpawnMethod
ÅÅ  
=
ÅÅ! "
value
ÅÅ# (
;
ÅÅ( )
}
ÅÅ* +
}
ÇÇ 	
public
ÑÑ 
TValue
ÑÑ 
Spawn
ÑÑ 
(
ÑÑ 
TParam1
ÑÑ #
param
ÑÑ$ )
)
ÑÑ) *
{
ÖÖ 	
{
ââ 
var
ää 
item
ää 
=
ää 
SpawnInternal
ää (
(
ää( )
)
ää) *
;
ää* +
if
åå 
(
åå 
_onSpawnMethod
åå "
!=
åå# %
null
åå& *
)
åå* +
{
çç 
_onSpawnMethod
éé "
(
éé" #
param
éé# (
,
éé( )
item
éé* .
)
éé. /
;
éé/ 0
}
èè 
return
ëë 
item
ëë 
;
ëë 
}
íí 
}
ìì 	
}
îî 
[
òò  
NoReflectionBaking
òò 
]
òò 
public
ôô 

class
ôô 
StaticMemoryPool
ôô !
<
ôô! "
TParam1
ôô" )
,
ôô) *
TParam2
ôô+ 2
,
ôô2 3
TValue
ôô4 :
>
ôô: ;
:
ôô< ="
StaticMemoryPoolBase
ôô> R
<
ôôR S
TValue
ôôS Y
>
ôôY Z
,
ôôZ [
IMemoryPool
ôô\ g
<
ôôg h
TParam1
ôôh o
,
ôôo p
TParam2
ôôq x
,
ôôx y
TValueôôz Ä
>ôôÄ Å
where
öö 
TValue
öö 
:
öö 
class
öö 
,
öö 
new
öö !
(
öö! "
)
öö" #
{
õõ 
Action
úú 
<
úú 
TParam1
úú 
,
úú 
TParam2
úú 
,
úú  
TValue
úú! '
>
úú' (
_onSpawnMethod
úú) 7
;
úú7 8
public
ûû 
StaticMemoryPool
ûû 
(
ûû  
Action
üü 
<
üü 
TParam1
üü 
,
üü 
TParam2
üü #
,
üü# $
TValue
üü% +
>
üü+ ,
onSpawnMethod
üü- :
,
üü: ;
Action
üü< B
<
üüB C
TValue
üüC I
>
üüI J
onDespawnedMethod
üüK \
=
üü] ^
null
üü_ c
)
üüc d
:
†† 
base
†† 
(
†† 
onDespawnedMethod
†† $
)
††$ %
{
°° 	
Assert
££ 
.
££ 
	IsNotNull
££ 
(
££ 
onSpawnMethod
££ *
)
££* +
;
££+ ,
_onSpawnMethod
§§ 
=
§§ 
onSpawnMethod
§§ *
;
§§* +
}
•• 	
public
ßß 
Action
ßß 
<
ßß 
TParam1
ßß 
,
ßß 
TParam2
ßß &
,
ßß& '
TValue
ßß( .
>
ßß. /
OnSpawnMethod
ßß0 =
{
®® 	
set
©© 
{
©© 
_onSpawnMethod
©©  
=
©©! "
value
©©# (
;
©©( )
}
©©* +
}
™™ 	
public
¨¨ 
TValue
¨¨ 
Spawn
¨¨ 
(
¨¨ 
TParam1
¨¨ #
p1
¨¨$ &
,
¨¨& '
TParam2
¨¨( /
p2
¨¨0 2
)
¨¨2 3
{
≠≠ 	
{
±± 
var
≤≤ 
item
≤≤ 
=
≤≤ 
SpawnInternal
≤≤ (
(
≤≤( )
)
≤≤) *
;
≤≤* +
if
¥¥ 
(
¥¥ 
_onSpawnMethod
¥¥ "
!=
¥¥# %
null
¥¥& *
)
¥¥* +
{
µµ 
_onSpawnMethod
∂∂ "
(
∂∂" #
p1
∂∂# %
,
∂∂% &
p2
∂∂' )
,
∂∂) *
item
∂∂+ /
)
∂∂/ 0
;
∂∂0 1
}
∑∑ 
return
ππ 
item
ππ 
;
ππ 
}
∫∫ 
}
ªª 	
}
ºº 
[
¿¿  
NoReflectionBaking
¿¿ 
]
¿¿ 
public
¡¡ 

class
¡¡ 
StaticMemoryPool
¡¡ !
<
¡¡! "
TParam1
¡¡" )
,
¡¡) *
TParam2
¡¡+ 2
,
¡¡2 3
TParam3
¡¡4 ;
,
¡¡; <
TValue
¡¡= C
>
¡¡C D
:
¡¡E F"
StaticMemoryPoolBase
¡¡G [
<
¡¡[ \
TValue
¡¡\ b
>
¡¡b c
,
¡¡c d
IMemoryPool
¡¡e p
<
¡¡p q
TParam1
¡¡q x
,
¡¡x y
TParam2¡¡z Å
,¡¡Å Ç
TParam3¡¡É ä
,¡¡ä ã
TValue¡¡å í
>¡¡í ì
where
¬¬ 
TValue
¬¬ 
:
¬¬ 
class
¬¬ 
,
¬¬ 
new
¬¬ !
(
¬¬! "
)
¬¬" #
{
√√ 
Action
ƒƒ 
<
ƒƒ 
TParam1
ƒƒ 
,
ƒƒ 
TParam2
ƒƒ 
,
ƒƒ  
TParam3
ƒƒ! (
,
ƒƒ( )
TValue
ƒƒ* 0
>
ƒƒ0 1
_onSpawnMethod
ƒƒ2 @
;
ƒƒ@ A
public
∆∆ 
StaticMemoryPool
∆∆ 
(
∆∆  
Action
«« 
<
«« 
TParam1
«« 
,
«« 
TParam2
«« #
,
««# $
TParam3
««% ,
,
««, -
TValue
««. 4
>
««4 5
onSpawnMethod
««6 C
,
««C D
Action
««E K
<
««K L
TValue
««L R
>
««R S
onDespawnedMethod
««T e
=
««f g
null
««h l
)
««l m
:
»» 
base
»» 
(
»» 
onDespawnedMethod
»» $
)
»»$ %
{
…… 	
Assert
ÀÀ 
.
ÀÀ 
	IsNotNull
ÀÀ 
(
ÀÀ 
onSpawnMethod
ÀÀ *
)
ÀÀ* +
;
ÀÀ+ ,
_onSpawnMethod
ÃÃ 
=
ÃÃ 
onSpawnMethod
ÃÃ *
;
ÃÃ* +
}
ÕÕ 	
public
œœ 
Action
œœ 
<
œœ 
TParam1
œœ 
,
œœ 
TParam2
œœ &
,
œœ& '
TParam3
œœ( /
,
œœ/ 0
TValue
œœ1 7
>
œœ7 8
OnSpawnMethod
œœ9 F
{
–– 	
set
—— 
{
—— 
_onSpawnMethod
——  
=
——! "
value
——# (
;
——( )
}
——* +
}
““ 	
public
‘‘ 
TValue
‘‘ 
Spawn
‘‘ 
(
‘‘ 
TParam1
‘‘ #
p1
‘‘$ &
,
‘‘& '
TParam2
‘‘( /
p2
‘‘0 2
,
‘‘2 3
TParam3
‘‘4 ;
p3
‘‘< >
)
‘‘> ?
{
’’ 	
{
ŸŸ 
var
⁄⁄ 
item
⁄⁄ 
=
⁄⁄ 
SpawnInternal
⁄⁄ (
(
⁄⁄( )
)
⁄⁄) *
;
⁄⁄* +
if
‹‹ 
(
‹‹ 
_onSpawnMethod
‹‹ "
!=
‹‹# %
null
‹‹& *
)
‹‹* +
{
›› 
_onSpawnMethod
ﬁﬁ "
(
ﬁﬁ" #
p1
ﬁﬁ# %
,
ﬁﬁ% &
p2
ﬁﬁ' )
,
ﬁﬁ) *
p3
ﬁﬁ+ -
,
ﬁﬁ- .
item
ﬁﬁ/ 3
)
ﬁﬁ3 4
;
ﬁﬁ4 5
}
ﬂﬂ 
return
·· 
item
·· 
;
·· 
}
‚‚ 
}
„„ 	
}
‰‰ 
[
ËË  
NoReflectionBaking
ËË 
]
ËË 
public
ÈÈ 

class
ÈÈ 
StaticMemoryPool
ÈÈ !
<
ÈÈ! "
TParam1
ÈÈ" )
,
ÈÈ) *
TParam2
ÈÈ+ 2
,
ÈÈ2 3
TParam3
ÈÈ4 ;
,
ÈÈ; <
TParam4
ÈÈ= D
,
ÈÈD E
TValue
ÈÈF L
>
ÈÈL M
:
ÈÈN O"
StaticMemoryPoolBase
ÈÈP d
<
ÈÈd e
TValue
ÈÈe k
>
ÈÈk l
,
ÈÈl m
IMemoryPool
ÈÈn y
<
ÈÈy z
TParam1ÈÈz Å
,ÈÈÅ Ç
TParam2ÈÈÉ ä
,ÈÈä ã
TParam3ÈÈå ì
,ÈÈì î
TParam4ÈÈï ú
,ÈÈú ù
TValueÈÈû §
>ÈÈ§ •
where
ÍÍ 
TValue
ÍÍ 
:
ÍÍ 
class
ÍÍ 
,
ÍÍ 
new
ÍÍ !
(
ÍÍ! "
)
ÍÍ" #
{
ÎÎ 
Action
ÔÔ 
<
ÔÔ 
TParam1
ÔÔ 
,
ÔÔ 
TParam2
ÔÔ #
,
ÔÔ# $
TParam3
ÔÔ% ,
,
ÔÔ, -
TParam4
ÔÔ. 5
,
ÔÔ5 6
TValue
ÔÔ7 =
>
ÔÔ= >
_onSpawnMethod
ÔÔ? M
;
ÔÔM N
public
ÒÒ 
StaticMemoryPool
ÒÒ 
(
ÒÒ  
Action
ıı 
<
ıı 
TParam1
ıı 
,
ıı 
TParam2
ıı #
,
ıı# $
TParam3
ıı% ,
,
ıı, -
TParam4
ıı. 5
,
ıı5 6
TValue
ıı7 =
>
ıı= >
onSpawnMethod
ıı? L
,
ııL M
Action
ııN T
<
ııT U
TValue
ııU [
>
ıı[ \
onDespawnedMethod
ıı] n
=
ııo p
null
ııq u
)
ııu v
:
ˆˆ 
base
ˆˆ 
(
ˆˆ 
onDespawnedMethod
ˆˆ $
)
ˆˆ$ %
{
˜˜ 	
Assert
˘˘ 
.
˘˘ 
	IsNotNull
˘˘ 
(
˘˘ 
onSpawnMethod
˘˘ *
)
˘˘* +
;
˘˘+ ,
_onSpawnMethod
˙˙ 
=
˙˙ 
onSpawnMethod
˙˙ *
;
˙˙* +
}
˚˚ 	
public
˝˝ 
Action
ÅÅ 
<
ÅÅ 
TParam1
ÅÅ 
,
ÅÅ 
TParam2
ÅÅ #
,
ÅÅ# $
TParam3
ÅÅ% ,
,
ÅÅ, -
TParam4
ÅÅ. 5
,
ÅÅ5 6
TValue
ÅÅ7 =
>
ÅÅ= >
OnSpawnMethod
ÅÅ? L
{
ÇÇ 	
set
ÉÉ 
{
ÉÉ 
_onSpawnMethod
ÉÉ  
=
ÉÉ! "
value
ÉÉ# (
;
ÉÉ( )
}
ÉÉ* +
}
ÑÑ 	
public
ÜÜ 
TValue
ÜÜ 
Spawn
ÜÜ 
(
ÜÜ 
TParam1
ÜÜ #
p1
ÜÜ$ &
,
ÜÜ& '
TParam2
ÜÜ( /
p2
ÜÜ0 2
,
ÜÜ2 3
TParam3
ÜÜ4 ;
p3
ÜÜ< >
,
ÜÜ> ?
TParam4
ÜÜ@ G
p4
ÜÜH J
)
ÜÜJ K
{
áá 	
{
ãã 
var
åå 
item
åå 
=
åå 
SpawnInternal
åå (
(
åå( )
)
åå) *
;
åå* +
if
éé 
(
éé 
_onSpawnMethod
éé "
!=
éé# %
null
éé& *
)
éé* +
{
èè 
_onSpawnMethod
êê "
(
êê" #
p1
êê# %
,
êê% &
p2
êê' )
,
êê) *
p3
êê+ -
,
êê- .
p4
êê/ 1
,
êê1 2
item
êê3 7
)
êê7 8
;
êê8 9
}
ëë 
return
ìì 
item
ìì 
;
ìì 
}
îî 
}
ïï 	
}
ññ 
[
öö  
NoReflectionBaking
öö 
]
öö 
public
õõ 

class
õõ 
StaticMemoryPool
õõ !
<
õõ! "
TParam1
õõ" )
,
õõ) *
TParam2
õõ+ 2
,
õõ2 3
TParam3
õõ4 ;
,
õõ; <
TParam4
õõ= D
,
õõD E
TParam5
õõF M
,
õõM N
TValue
õõO U
>
õõU V
:
õõW X"
StaticMemoryPoolBase
õõY m
<
õõm n
TValue
õõn t
>
õõt u
,
õõu v
IMemoryPoolõõw Ç
<õõÇ É
TParam1õõÉ ä
,õõä ã
TParam2õõå ì
,õõì î
TParam3õõï ú
,õõú ù
TParam4õõû •
,õõ• ¶
TParam5õõß Æ
,õõÆ Ø
TValueõõ∞ ∂
>õõ∂ ∑
where
úú 
TValue
úú 
:
úú 
class
úú 
,
úú 
new
úú !
(
úú! "
)
úú" #
{
ùù 
Action
°° 
<
°° 
TParam1
°° 
,
°° 
TParam2
°° #
,
°°# $
TParam3
°°% ,
,
°°, -
TParam4
°°. 5
,
°°5 6
TParam5
°°7 >
,
°°> ?
TValue
°°@ F
>
°°F G
_onSpawnMethod
°°H V
;
°°V W
public
££ 
StaticMemoryPool
££ 
(
££  
Action
ßß 
<
ßß 
TParam1
ßß 
,
ßß 
TParam2
ßß #
,
ßß# $
TParam3
ßß% ,
,
ßß, -
TParam4
ßß. 5
,
ßß5 6
TParam5
ßß7 >
,
ßß> ?
TValue
ßß@ F
>
ßßF G
onSpawnMethod
ßßH U
,
ßßU V
Action
ßßW ]
<
ßß] ^
TValue
ßß^ d
>
ßßd e
onDespawnedMethod
ßßf w
=
ßßx y
null
ßßz ~
)
ßß~ 
:
®® 
base
®® 
(
®® 
onDespawnedMethod
®® $
)
®®$ %
{
©© 	
Assert
´´ 
.
´´ 
	IsNotNull
´´ 
(
´´ 
onSpawnMethod
´´ *
)
´´* +
;
´´+ ,
_onSpawnMethod
¨¨ 
=
¨¨ 
onSpawnMethod
¨¨ *
;
¨¨* +
}
≠≠ 	
public
ØØ 
Action
≥≥ 
<
≥≥ 
TParam1
≥≥ 
,
≥≥ 
TParam2
≥≥ #
,
≥≥# $
TParam3
≥≥% ,
,
≥≥, -
TParam4
≥≥. 5
,
≥≥5 6
TParam5
≥≥7 >
,
≥≥> ?
TValue
≥≥@ F
>
≥≥F G
OnSpawnMethod
≥≥H U
{
¥¥ 	
set
µµ 
{
µµ 
_onSpawnMethod
µµ  
=
µµ! "
value
µµ# (
;
µµ( )
}
µµ* +
}
∂∂ 	
public
∏∏ 
TValue
∏∏ 
Spawn
∏∏ 
(
∏∏ 
TParam1
∏∏ #
p1
∏∏$ &
,
∏∏& '
TParam2
∏∏( /
p2
∏∏0 2
,
∏∏2 3
TParam3
∏∏4 ;
p3
∏∏< >
,
∏∏> ?
TParam4
∏∏@ G
p4
∏∏H J
,
∏∏J K
TParam5
∏∏L S
p5
∏∏T V
)
∏∏V W
{
ππ 	
{
ΩΩ 
var
ææ 
item
ææ 
=
ææ 
SpawnInternal
ææ (
(
ææ( )
)
ææ) *
;
ææ* +
if
¿¿ 
(
¿¿ 
_onSpawnMethod
¿¿ "
!=
¿¿# %
null
¿¿& *
)
¿¿* +
{
¡¡ 
_onSpawnMethod
¬¬ "
(
¬¬" #
p1
¬¬# %
,
¬¬% &
p2
¬¬' )
,
¬¬) *
p3
¬¬+ -
,
¬¬- .
p4
¬¬/ 1
,
¬¬1 2
p5
¬¬3 5
,
¬¬5 6
item
¬¬7 ;
)
¬¬; <
;
¬¬< =
}
√√ 
return
≈≈ 
item
≈≈ 
;
≈≈ 
}
∆∆ 
}
«« 	
}
»» 
[
ÃÃ  
NoReflectionBaking
ÃÃ 
]
ÃÃ 
public
ÕÕ 

class
ÕÕ 
StaticMemoryPool
ÕÕ !
<
ÕÕ! "
TParam1
ÕÕ" )
,
ÕÕ) *
TParam2
ÕÕ+ 2
,
ÕÕ2 3
TParam3
ÕÕ4 ;
,
ÕÕ; <
TParam4
ÕÕ= D
,
ÕÕD E
TParam5
ÕÕF M
,
ÕÕM N
TParam6
ÕÕO V
,
ÕÕV W
TValue
ÕÕX ^
>
ÕÕ^ _
:
ÕÕ` a"
StaticMemoryPoolBase
ÕÕb v
<
ÕÕv w
TValue
ÕÕw }
>
ÕÕ} ~
,
ÕÕ~ 
IMemoryPoolÕÕÄ ã
<ÕÕã å
TParam1ÕÕå ì
,ÕÕì î
TParam2ÕÕï ú
,ÕÕú ù
TParam3ÕÕû •
,ÕÕ• ¶
TParam4ÕÕß Æ
,ÕÕÆ Ø
TParam5ÕÕ∞ ∑
,ÕÕ∑ ∏
TParam6ÕÕπ ¿
,ÕÕ¿ ¡
TValueÕÕ¬ »
>ÕÕ» …
where
ŒŒ 
TValue
ŒŒ 
:
ŒŒ 
class
ŒŒ 
,
ŒŒ 
new
ŒŒ !
(
ŒŒ! "
)
ŒŒ" #
{
œœ 
Action
”” 
<
”” 
TParam1
”” 
,
”” 
TParam2
”” #
,
””# $
TParam3
””% ,
,
””, -
TParam4
””. 5
,
””5 6
TParam5
””7 >
,
””> ?
TParam6
””@ G
,
””G H
TValue
””I O
>
””O P
_onSpawnMethod
””Q _
;
””_ `
public
’’ 
StaticMemoryPool
’’ 
(
’’  
Action
ŸŸ 
<
ŸŸ 
TParam1
ŸŸ 
,
ŸŸ 
TParam2
ŸŸ #
,
ŸŸ# $
TParam3
ŸŸ% ,
,
ŸŸ, -
TParam4
ŸŸ. 5
,
ŸŸ5 6
TParam5
ŸŸ7 >
,
ŸŸ> ?
TParam6
ŸŸ@ G
,
ŸŸG H
TValue
ŸŸI O
>
ŸŸO P
onSpawnMethod
ŸŸQ ^
,
ŸŸ^ _
Action
ŸŸ` f
<
ŸŸf g
TValue
ŸŸg m
>
ŸŸm n 
onDespawnedMethodŸŸo Ä
=ŸŸÅ Ç
nullŸŸÉ á
)ŸŸá à
:
⁄⁄ 
base
⁄⁄ 
(
⁄⁄ 
onDespawnedMethod
⁄⁄ $
)
⁄⁄$ %
{
€€ 	
Assert
›› 
.
›› 
	IsNotNull
›› 
(
›› 
onSpawnMethod
›› *
)
››* +
;
››+ ,
_onSpawnMethod
ﬁﬁ 
=
ﬁﬁ 
onSpawnMethod
ﬁﬁ *
;
ﬁﬁ* +
}
ﬂﬂ 	
public
·· 
Action
ÂÂ 
<
ÂÂ 
TParam1
ÂÂ 
,
ÂÂ 
TParam2
ÂÂ #
,
ÂÂ# $
TParam3
ÂÂ% ,
,
ÂÂ, -
TParam4
ÂÂ. 5
,
ÂÂ5 6
TParam5
ÂÂ7 >
,
ÂÂ> ?
TParam6
ÂÂ@ G
,
ÂÂG H
TValue
ÂÂI O
>
ÂÂO P
OnSpawnMethod
ÂÂQ ^
{
ÊÊ 	
set
ÁÁ 
{
ÁÁ 
_onSpawnMethod
ÁÁ  
=
ÁÁ! "
value
ÁÁ# (
;
ÁÁ( )
}
ÁÁ* +
}
ËË 	
public
ÍÍ 
TValue
ÍÍ 
Spawn
ÍÍ 
(
ÍÍ 
TParam1
ÍÍ #
p1
ÍÍ$ &
,
ÍÍ& '
TParam2
ÍÍ( /
p2
ÍÍ0 2
,
ÍÍ2 3
TParam3
ÍÍ4 ;
p3
ÍÍ< >
,
ÍÍ> ?
TParam4
ÍÍ@ G
p4
ÍÍH J
,
ÍÍJ K
TParam5
ÍÍL S
p5
ÍÍT V
,
ÍÍV W
TParam6
ÍÍX _
p6
ÍÍ` b
)
ÍÍb c
{
ÎÎ 	
{
ÔÔ 
var
 
item
 
=
 
SpawnInternal
 (
(
( )
)
) *
;
* +
if
ÚÚ 
(
ÚÚ 
_onSpawnMethod
ÚÚ "
!=
ÚÚ# %
null
ÚÚ& *
)
ÚÚ* +
{
ÛÛ 
_onSpawnMethod
ÙÙ "
(
ÙÙ" #
p1
ÙÙ# %
,
ÙÙ% &
p2
ÙÙ' )
,
ÙÙ) *
p3
ÙÙ+ -
,
ÙÙ- .
p4
ÙÙ/ 1
,
ÙÙ1 2
p5
ÙÙ3 5
,
ÙÙ5 6
p6
ÙÙ7 9
,
ÙÙ9 :
item
ÙÙ; ?
)
ÙÙ? @
;
ÙÙ@ A
}
ıı 
return
˜˜ 
item
˜˜ 
;
˜˜ 
}
¯¯ 
}
˘˘ 	
}
˙˙ 
[
˛˛  
NoReflectionBaking
˛˛ 
]
˛˛ 
public
ˇˇ 

class
ˇˇ 
StaticMemoryPool
ˇˇ !
<
ˇˇ! "
TParam1
ˇˇ" )
,
ˇˇ) *
TParam2
ˇˇ+ 2
,
ˇˇ2 3
TParam3
ˇˇ4 ;
,
ˇˇ; <
TParam4
ˇˇ= D
,
ˇˇD E
TParam5
ˇˇF M
,
ˇˇM N
TParam6
ˇˇO V
,
ˇˇV W
TParam7
ˇˇX _
,
ˇˇ_ `
TValue
ˇˇa g
>
ˇˇg h
:
ˇˇi j"
StaticMemoryPoolBase
ˇˇk 
<ˇˇ Ä
TValueˇˇÄ Ü
>ˇˇÜ á
,ˇˇá à
IMemoryPoolˇˇâ î
<ˇˇî ï
TParam1ˇˇï ú
,ˇˇú ù
TParam2ˇˇû •
,ˇˇ• ¶
TParam3ˇˇß Æ
,ˇˇÆ Ø
TParam4ˇˇ∞ ∑
,ˇˇ∑ ∏
TParam5ˇˇπ ¿
,ˇˇ¿ ¡
TParam6ˇˇ¬ …
,ˇˇ…  
TParam7ˇˇÀ “
,ˇˇ“ ”
TValueˇˇ‘ ⁄
>ˇˇ⁄ €
where
ÄÄ 
TValue
ÄÄ 
:
ÄÄ 
class
ÄÄ 
,
ÄÄ 
new
ÄÄ !
(
ÄÄ! "
)
ÄÄ" #
{
ÅÅ 
Action
ÖÖ 
<
ÖÖ 
TParam1
ÖÖ 
,
ÖÖ 
TParam2
ÖÖ #
,
ÖÖ# $
TParam3
ÖÖ% ,
,
ÖÖ, -
TParam4
ÖÖ. 5
,
ÖÖ5 6
TParam5
ÖÖ7 >
,
ÖÖ> ?
TParam6
ÖÖ@ G
,
ÖÖG H
TParam7
ÖÖI P
,
ÖÖP Q
TValue
ÖÖR X
>
ÖÖX Y
_onSpawnMethod
ÖÖZ h
;
ÖÖh i
public
áá 
StaticMemoryPool
áá 
(
áá  
Action
ãã 
<
ãã 
TParam1
ãã 
,
ãã 
TParam2
ãã #
,
ãã# $
TParam3
ãã% ,
,
ãã, -
TParam4
ãã. 5
,
ãã5 6
TParam5
ãã7 >
,
ãã> ?
TParam6
ãã@ G
,
ããG H
TParam7
ããI P
,
ããP Q
TValue
ããR X
>
ããX Y
onSpawnMethod
ããZ g
,
ããg h
Action
ããi o
<
ãão p
TValue
ããp v
>
ããv w 
onDespawnedMethodããx â
=ããä ã
nullããå ê
)ããê ë
:
åå 
base
åå 
(
åå 
onDespawnedMethod
åå $
)
åå$ %
{
çç 	
Assert
èè 
.
èè 
	IsNotNull
èè 
(
èè 
onSpawnMethod
èè *
)
èè* +
;
èè+ ,
_onSpawnMethod
êê 
=
êê 
onSpawnMethod
êê *
;
êê* +
}
ëë 	
public
ìì 
Action
óó 
<
óó 
TParam1
óó 
,
óó 
TParam2
óó #
,
óó# $
TParam3
óó% ,
,
óó, -
TParam4
óó. 5
,
óó5 6
TParam5
óó7 >
,
óó> ?
TParam6
óó@ G
,
óóG H
TParam7
óóI P
,
óóP Q
TValue
óóR X
>
óóX Y
OnSpawnMethod
óóZ g
{
òò 	
set
ôô 
{
ôô 
_onSpawnMethod
ôô  
=
ôô! "
value
ôô# (
;
ôô( )
}
ôô* +
}
öö 	
public
úú 
TValue
úú 
Spawn
úú 
(
úú 
TParam1
úú #
p1
úú$ &
,
úú& '
TParam2
úú( /
p2
úú0 2
,
úú2 3
TParam3
úú4 ;
p3
úú< >
,
úú> ?
TParam4
úú@ G
p4
úúH J
,
úúJ K
TParam5
úúL S
p5
úúT V
,
úúV W
TParam6
úúX _
p6
úú` b
,
úúb c
TParam7
úúd k
p7
úúl n
)
úún o
{
ùù 	
{
°° 
var
¢¢ 
item
¢¢ 
=
¢¢ 
SpawnInternal
¢¢ (
(
¢¢( )
)
¢¢) *
;
¢¢* +
if
§§ 
(
§§ 
_onSpawnMethod
§§ "
!=
§§# %
null
§§& *
)
§§* +
{
•• 
_onSpawnMethod
¶¶ "
(
¶¶" #
p1
¶¶# %
,
¶¶% &
p2
¶¶' )
,
¶¶) *
p3
¶¶+ -
,
¶¶- .
p4
¶¶/ 1
,
¶¶1 2
p5
¶¶3 5
,
¶¶5 6
p6
¶¶7 9
,
¶¶9 :
p7
¶¶; =
,
¶¶= >
item
¶¶? C
)
¶¶C D
;
¶¶D E
}
ßß 
return
©© 
item
©© 
;
©© 
}
™™ 
}
´´ 	
}
¨¨ 
}≠≠ ﬂ
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder3.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
TParam3; B
,B C
	TContractD M
>M N
:O P*
FactoryArgumentsToChoiceBinderQ o
<o p
TParam1p w
,w x
TParam2	y Ä
,
Ä Å
TParam3
Ç â
,
â ä
	TContract
ã î
>
î ï
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{		 	
}

 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
TParam27 >
,> ?
TParam3@ G
,G H
	TContractI R
>R S
WithIdT Z
(Z [
object[ a

identifierb l
)l m
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ◊
áC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceBinder\FactoryToChoiceBinder2.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class !
FactoryToChoiceBinder &
<& '
TParam1' .
,. /
TParam20 7
,7 8
	TContract9 B
>B C
:D E
FactoryFromBinderF W
<W X
TParam1X _
,_ `
TParam2a h
,h i
	TContractj s
>s t
{ 
public !
FactoryToChoiceBinder $
($ %
DiContainer		 
bindContainer		 %
,		% &
BindInfo		' /
bindInfo		0 8
,		8 9
FactoryBindInfo		: I
factoryBindInfo		J Y
)		Y Z
:

 
base

 
(

 
bindContainer

  
,

  !
bindInfo

" *
,

* +
factoryBindInfo

, ;
)

; <
{ 	
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
	TContract3 <
>< =
ToSelf> D
(D E
)E F
{ 	
Assert 
. 
IsEqual 
( 
BindInfo #
.# $
ToChoice$ ,
,, -
	ToChoices. 7
.7 8
Self8 <
)< =
;= >
return 
this 
; 
} 	
public 
FactoryFromBinder  
<  !
TParam1! (
,( )
TParam2* 1
,1 2
	TConcrete3 <
>< =
To> @
<@ A
	TConcreteA J
>J K
(K L
)L M
where 
	TConcrete 
: 
	TContract '
{ 	
BindInfo 
. 
ToChoice 
= 
	ToChoices  )
.) *
Concrete* 2
;2 3
BindInfo 
. 
ToTypes 
. 
Clear "
(" #
)# $
;$ %
BindInfo 
. 
ToTypes 
. 
Add  
(  !
typeof! '
(' (
	TConcrete( 1
)1 2
)2 3
;3 4
return 
new 
FactoryFromBinder (
<( )
TParam1) 0
,0 1
TParam22 9
,9 :
	TConcrete; D
>D E
(E F
BindContainerF S
,S T
BindInfoU ]
,] ^
FactoryBindInfo_ n
)n o
;o p
} 	
} 
} ƒ@
¶C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Providers\ComponentProviders\AddToGameObjectComponentProviders\AddToGameObjectComponentProviderBase.cs
	namespace

 	
Zenject


 
{ 
[ 
NoReflectionBaking 
] 
public 

abstract 
class 0
$AddToGameObjectComponentProviderBase >
:? @
	IProviderA J
{ 
readonly 
Type 
_componentType $
;$ %
readonly 
DiContainer 

_container '
;' (
readonly 
List 
< 
TypeValuePair #
># $
_extraArguments% 4
;4 5
readonly 
object 
_concreteIdentifier +
;+ ,
readonly 
Action 
< 
InjectContext %
,% &
object' -
>- . 
_instantiateCallback/ C
;C D
public 0
$AddToGameObjectComponentProviderBase 3
(3 4
DiContainer 
	container !
,! "
Type# '
componentType( 5
,5 6
IEnumerable 
< 
TypeValuePair %
>% &
extraArguments' 5
,5 6
object7 =
concreteIdentifier> P
,P Q
Action 
< 
InjectContext  
,  !
object" (
>( )
instantiateCallback* =
)= >
{ 	
Assert 
. 
That 
( 
componentType %
.% &
DerivesFrom& 1
<1 2
	Component2 ;
>; <
(< =
)= >
)> ?
;? @
_extraArguments 
= 
extraArguments ,
., -
ToList- 3
(3 4
)4 5
;5 6
_componentType 
= 
componentType *
;* +

_container 
= 
	container "
;" #
_concreteIdentifier 
=  !
concreteIdentifier" 4
;4 5 
_instantiateCallback    
=  ! "
instantiateCallback  # 6
;  6 7
}!! 	
public## 
bool## 
IsCached## 
{$$ 	
get%% 
{%% 
return%% 
false%% 
;%% 
}%%  !
}&& 	
public(( 
bool(( '
TypeVariesBasedOnMemberType(( /
{)) 	
get** 
{** 
return** 
false** 
;** 
}**  !
}++ 	
	protected-- 
DiContainer-- 
	Container-- '
{.. 	
get// 
{// 
return// 

_container// #
;//# $
}//% &
}00 	
	protected22 
Type22 
ComponentType22 $
{33 	
get44 
{44 
return44 
_componentType44 '
;44' (
}44) *
}55 	
	protected77 
abstract77 
bool77 
ShouldToggleActive77  2
{88 	
get99 
;99 
}:: 	
public<< 
Type<< 
GetInstanceType<< #
(<<# $
InjectContext<<$ 1
context<<2 9
)<<9 :
{== 	
return>> 
_componentType>> !
;>>! "
}?? 	
publicAA 
voidAA *
GetAllInstancesWithInjectSplitAA 2
(AA2 3
InjectContextBB 
contextBB !
,BB! "
ListBB# '
<BB' (
TypeValuePairBB( 5
>BB5 6
argsBB7 ;
,BB; <
outBB= @
ActionBBA G
injectActionBBH T
,BBT U
ListBBV Z
<BBZ [
objectBB[ a
>BBa b
bufferBBc i
)BBi j
{CC 	
AssertDD 
.DD 
	IsNotNullDD 
(DD 
contextDD $
)DD$ %
;DD% &
objectFF 
instanceFF 
;FF 
varII 
gameObjII 
=II 
GetGameObjectII '
(II' (
contextII( /
)II/ 0
;II0 1
varKK 
	wasActiveKK 
=KK 
gameObjKK #
.KK# $

activeSelfKK$ .
;KK. /
ifMM 
(MM 
	wasActiveMM 
&&MM 
ShouldToggleActiveMM /
)MM/ 0
{NN 
gameObjQQ 
.QQ 
	SetActiveQQ !
(QQ! "
falseQQ" '
)QQ' (
;QQ( )
}RR 
ifTT 
(TT 
!TT 

_containerTT 
.TT 
IsValidatingTT (
||TT) +
TypeAnalyzerTT, 8
.TT8 9'
ShouldAllowDuringValidationTT9 T
(TTT U
_componentTypeTTU c
)TTc d
)TTd e
{UU 
ifVV 
(VV 
_componentTypeVV "
==VV# %
typeofVV& ,
(VV, -
	TransformVV- 6
)VV6 7
)VV7 8
{[[ 
instance\\ 
=\\ 
gameObj\\ &
.\\& '
	transform\\' 0
;\\0 1
}]] 
else^^ 
{__ 
instance`` 
=`` 
gameObj`` &
.``& '
AddComponent``' 3
(``3 4
_componentType``4 B
)``B C
;``C D
}aa 
Assertcc 
.cc 
	IsNotNullcc  
(cc  !
instancecc! )
)cc) *
;cc* +
}dd 
elseee 
{ff 
instancegg 
=gg 
newgg 
ValidationMarkergg /
(gg/ 0
_componentTypegg0 >
)gg> ?
;gg? @
}hh 
injectActionjj 
=jj 
(jj 
)jj 
=>jj  
{kk 
tryll 
{mm 
varnn 
	extraArgsnn !
=nn" #
ZenPoolsnn$ ,
.nn, -
	SpawnListnn- 6
<nn6 7
TypeValuePairnn7 D
>nnD E
(nnE F
)nnF G
;nnG H
	extraArgspp 
.pp 
AllocFreeAddRangepp /
(pp/ 0
_extraArgumentspp0 ?
)pp? @
;pp@ A
	extraArgsqq 
.qq 
AllocFreeAddRangeqq /
(qq/ 0
argsqq0 4
)qq4 5
;qq5 6

_containerss 
.ss 
InjectExplicitss -
(ss- .
instancess. 6
,ss6 7
_componentTypess8 F
,ssF G
	extraArgsssH Q
,ssQ R
contextssS Z
,ssZ [
_concreteIdentifierss\ o
)sso p
;ssp q
Assertuu 
.uu 
Thatuu 
(uu  
	extraArgsuu  )
.uu) *
Countuu* /
==uu0 2
$numuu3 4
)uu4 5
;uu5 6
ZenPoolsww 
.ww 
DespawnListww (
(ww( )
	extraArgsww) 2
)ww2 3
;ww3 4
ifyy 
(yy  
_instantiateCallbackyy ,
!=yy- /
nullyy0 4
)yy4 5
{zz  
_instantiateCallback{{ ,
({{, -
context{{- 4
,{{4 5
instance{{6 >
){{> ?
;{{? @
}|| 
}}} 
finally~~ 
{ 
if
ÄÄ 
(
ÄÄ 
	wasActive
ÄÄ !
&&
ÄÄ" $ 
ShouldToggleActive
ÄÄ% 7
)
ÄÄ7 8
{
ÅÅ 
gameObj
ÇÇ 
.
ÇÇ  
	SetActive
ÇÇ  )
(
ÇÇ) *
true
ÇÇ* .
)
ÇÇ. /
;
ÇÇ/ 0
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
;
ÖÖ 
buffer
áá 
.
áá 
Add
áá 
(
áá 
instance
áá 
)
áá  
;
áá  !
}
àà 	
	protected
ää 
abstract
ää 

GameObject
ää %
GetGameObject
ää& 3
(
ää3 4
InjectContext
ää4 A
context
ääB I
)
ääI J
;
ääJ K
}
ãã 
}åå »?
ÄC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\FactoryFromBinder10.cs
	namespace 	
Zenject
 
{ 
[		 
NoReflectionBaking		 
]		 
public

 

class

 
FactoryFromBinder

 "
<

" #
TParam1

# *
,

* +
TParam2

, 3
,

3 4
TParam3

5 <
,

< =
TParam4

> E
,

E F
TParam5

G N
,

N O
TParam6

P W
,

W X
TParam7

Y `
,

` a
TParam8

b i
,

i j
TParam9

k r
,

r s
TParam10

t |
,

| }
	TContract	

~ á
>


á à
: 	!
FactoryFromBinderBase
 
{ 
public 
FactoryFromBinder  
(  !
DiContainer 
	container !
,! "
BindInfo# +
bindInfo, 4
,4 5
FactoryBindInfo6 E
factoryBindInfoF U
)U V
: 
base 
( 
	container 
, 
typeof $
($ %
	TContract% .
). /
,/ 0
bindInfo1 9
,9 :
factoryBindInfo; J
)J K
{ 	
} 	
public &
ConditionCopyNonLazyBinder )

FromMethod* 4
(4 5
Func 
< 
DiContainer  
,  !
TParam1" )
,) *
TParam2+ 2
,2 3
TParam34 ;
,; <
TParam4= D
,D E
TParam5F M
,M N
TParam6O V
,V W
TParam7X _
,_ `
TParam8a h
,h i
TParam9j q
,q r
TParam10s {
,{ |
	TContract	} Ü
>
Ü á
method
à é
)
é è
{ 	
ProviderFunc 
= 
	container 
=> 
new  '
MethodProviderWithContainer! <
<< =
TParam1= D
,D E
TParam2F M
,M N
TParam3O V
,V W
TParam4X _
,_ `
TParam5a h
,h i
TParam6j q
,q r
TParam7s z
,z {
TParam8	| É
,
É Ñ
TParam9
Ö å
,
å ç
TParam10
é ñ
,
ñ ó
	TContract
ò °
>
° ¢
(
¢ £
method
£ ©
)
© ™
;
™ ´
return 
this 
; 
} 	
public   &
ConditionCopyNonLazyBinder   )
FromFactory  * 5
<  5 6
TSubFactory  6 A
>  A B
(  B C
)  C D
where!! 
TSubFactory!! 
:!! 
IFactory!!  (
<!!( )
TParam1!!) 0
,!!0 1
TParam2!!2 9
,!!9 :
TParam3!!; B
,!!B C
TParam4!!D K
,!!K L
TParam5!!M T
,!!T U
TParam6!!V ]
,!!] ^
TParam7!!_ f
,!!f g
TParam8!!h o
,!!o p
TParam9!!q x
,!!x y
TParam10	!!z Ç
,
!!Ç É
	TContract
!!Ñ ç
>
!!ç é
{"" 	
return## 
FromIFactory## 
(##  
x##  !
=>##" $
x##% &
.##& '
To##' )
<##) *
TSubFactory##* 5
>##5 6
(##6 7
)##7 8
.##8 9
AsCached##9 A
(##A B
)##B C
)##C D
;##D E
}$$ 	
public&& )
ArgConditionCopyNonLazyBinder&& ,
FromIFactory&&- 9
(&&9 :
Action'' 
<'' !
ConcreteBinderGeneric'' (
<''( )
IFactory'') 1
<''1 2
TParam1''2 9
,''9 :
TParam2''; B
,''B C
TParam3''D K
,''K L
TParam4''M T
,''T U
TParam5''V ]
,''] ^
TParam6''_ f
,''f g
TParam7''h o
,''o p
TParam8''q x
,''x y
TParam9	''z Å
,
''Å Ç
TParam10
''É ã
,
''ã å
	TContract
''ç ñ
>
''ñ ó
>
''ó ò
>
''ò ô"
factoryBindGenerator
''ö Æ
)
''Æ Ø
{(( 	
Guid)) 
	factoryId)) 
;))  
factoryBindGenerator**  
(**  ! 
CreateIFactoryBinder++ $
<++$ %
IFactory++% -
<++- .
TParam1++. 5
,++5 6
TParam2++7 >
,++> ?
TParam3++@ G
,++G H
TParam4++I P
,++P Q
TParam5++R Y
,++Y Z
TParam6++[ b
,++b c
TParam7++d k
,++k l
TParam8++m t
,++t u
TParam9++v }
,++} ~
TParam10	++ á
,
++á à
	TContract
++â í
>
++í ì
>
++ì î
(
++î ï
out
++ï ò
	factoryId
++ô ¢
)
++¢ £
)
++£ §
;
++§ •
ProviderFunc-- 
=-- 
	container.. 
=>.. 
{.. 
return.. %
new..& )
IFactoryProvider..* :
<..: ;
TParam1..; B
,..B C
TParam2..D K
,..K L
TParam3..M T
,..T U
TParam4..V ]
,..] ^
TParam5.._ f
,..f g
TParam6..h o
,..o p
TParam7..q x
,..x y
TParam8	..z Å
,
..Å Ç
TParam9
..É ä
,
..ä ã
TParam10
..å î
,
..î ï
	TContract
..ñ ü
>
..ü †
(
..† °
	container
..° ™
,
..™ ´
	factoryId
..¨ µ
)
..µ ∂
;
..∂ ∑
}
..∏ π
;
..π ∫
return00 
new00 )
ArgConditionCopyNonLazyBinder00 4
(004 5
BindInfo005 =
)00= >
;00> ?
}11 	
public33 %
FactorySubContainerBinder33 (
<33( )
TParam133) 0
,330 1
TParam2332 9
,339 :
TParam333; B
,33B C
TParam433D K
,33K L
TParam533M T
,33T U
TParam633V ]
,33] ^
TParam733_ f
,33f g
TParam833h o
,33o p
TParam933q x
,33x y
TParam10	33z Ç
,
33Ç É
	TContract
33Ñ ç
>
33ç é%
FromSubContainerResolve
33è ¶
(
33¶ ß
)
33ß ®
{44 	
return55 #
FromSubContainerResolve55 *
(55* +
null55+ /
)55/ 0
;550 1
}66 	
public88 %
FactorySubContainerBinder88 (
<88( )
TParam188) 0
,880 1
TParam2882 9
,889 :
TParam388; B
,88B C
TParam488D K
,88K L
TParam588M T
,88T U
TParam688V ]
,88] ^
TParam788_ f
,88f g
TParam888h o
,88o p
TParam988q x
,88x y
TParam10	88z Ç
,
88Ç É
	TContract
88Ñ ç
>
88ç é%
FromSubContainerResolve
88è ¶
(
88¶ ß
object
88ß ≠
subIdentifier
88Æ ª
)
88ª º
{99 	
return:: 
new:: %
FactorySubContainerBinder:: 0
<::0 1
TParam1::1 8
,::8 9
TParam2::: A
,::A B
TParam3::C J
,::J K
TParam4::L S
,::S T
TParam5::U \
,::\ ]
TParam6::^ e
,::e f
TParam7::g n
,::n o
TParam8::p w
,::w x
TParam9	::y Ä
,
::Ä Å
TParam10
::Ç ä
,
::ä ã
	TContract
::å ï
>
::ï ñ
(
::ñ ó
BindContainer;; 
,;; 
BindInfo;; '
,;;' (
FactoryBindInfo;;) 8
,;;8 9
subIdentifier;;: G
);;G H
;;;H I
}<< 	
}== 
}>> ◊

öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\DeclareSignal\DeclareSignalAsyncTickPriorityCopyBinder.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class 4
(DeclareSignalAsyncTickPriorityCopyBinder 9
:: ;(
SignalTickPriorityCopyBinder< X
{ 
public 4
(DeclareSignalAsyncTickPriorityCopyBinder 7
(7 8%
SignalDeclarationBindInfo8 Q
signalBindInfoR `
)` a
: 
base 
( 
signalBindInfo !
)! "
{ 	
}		 	
public (
SignalTickPriorityCopyBinder +
RunAsync, 4
(4 5
)5 6
{ 	
SignalBindInfo 
. 
RunAsync #
=$ %
true& *
;* +
return 
this 
; 
} 	
public 
SignalCopyBinder 
RunSync  '
(' (
)( )
{ 	
SignalBindInfo 
. 
RunAsync #
=$ %
false& +
;+ ,
return 
this 
; 
} 	
} 
} ùE
ôC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryArgumentsToChoiceBinder\FactoryArgumentsToChoiceBinder3.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class *
FactoryArgumentsToChoiceBinder /
</ 0
TParam10 7
,7 8
TParam29 @
,@ A
TParam3B I
,I J
	TContractK T
>T U
:V W!
FactoryToChoiceBinderX m
<m n
TParam1n u
,u v
TParam2w ~
,~ 
TParam3
Ä á
,
á à
	TContract
â í
>
í ì
{ 
public		 *
FactoryArgumentsToChoiceBinder		 -
(		- .
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
)

Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{ 	
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
	TContract@ I
>I J 
WithFactoryArgumentsK _
<_ `
T` a
>a b
(b c
Tc d
parame j
)j k
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
paramI N
)N O
;O P
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
	TContract@ I
>I J 
WithFactoryArgumentsK _
<_ `
TFactoryParam1` n
,n o
TFactoryParam2p ~
>~ 
(	 Ä
TFactoryParam1
Ä é
param1
è ï
,
ï ñ
TFactoryParam2
ó •
param2
¶ ¨
)
¨ ≠
{ 	
FactoryBindInfo 
. 
	Arguments %
=& '

InjectUtil( 2
.2 3!
CreateArgListExplicit3 H
(H I
param1I O
,O P
param2Q W
)W X
;X Y
return 
this 
; 
} 	
public !
FactoryToChoiceBinder $
<$ %
TParam1% ,
,, -
TParam2. 5
,5 6
TParam37 >
,> ?
	TContract@ I
>I J 
WithFactoryArgumentsK _
<_ `
TFactoryParam1` n
,n o
TFactoryParam2p ~
,~ 
TFactoryParam3
Ä é
>
é è
(
è ê
TFactoryParam1 
param1 !
,! "
TFactoryParam2# 1
param22 8
,8 9
TFactoryParam3: H
param3I O
)O P
{   	
FactoryBindInfo!! 
.!! 
	Arguments!! %
=!!& '

InjectUtil!!( 2
.!!2 3!
CreateArgListExplicit!!3 H
(!!H I
param1!!I O
,!!O P
param2!!Q W
,!!W X
param3!!Y _
)!!_ `
;!!` a
return"" 
this"" 
;"" 
}## 	
public%% !
FactoryToChoiceBinder%% $
<%%$ %
TParam1%%% ,
,%%, -
TParam2%%. 5
,%%5 6
TParam3%%7 >
,%%> ?
	TContract%%@ I
>%%I J 
WithFactoryArguments%%K _
<%%_ `
TFactoryParam1%%` n
,%%n o
TFactoryParam2%%p ~
,%%~ 
TFactoryParam3
%%Ä é
,
%%é è
TFactoryParam4
%%ê û
>
%%û ü
(
%%ü †
TFactoryParam1&& 
param1&& !
,&&! "
TFactoryParam2&&# 1
param2&&2 8
,&&8 9
TFactoryParam3&&: H
param3&&I O
,&&O P
TFactoryParam4&&Q _
param4&&` f
)&&f g
{'' 	
FactoryBindInfo(( 
.(( 
	Arguments(( %
=((& '

InjectUtil((( 2
.((2 3!
CreateArgListExplicit((3 H
(((H I
param1((I O
,((O P
param2((Q W
,((W X
param3((Y _
,((_ `
param4((a g
)((g h
;((h i
return)) 
this)) 
;)) 
}** 	
public,, !
FactoryToChoiceBinder,, $
<,,$ %
TParam1,,% ,
,,,, -
TParam2,,. 5
,,,5 6
TParam3,,7 >
,,,> ?
	TContract,,@ I
>,,I J 
WithFactoryArguments,,K _
<,,_ `
TFactoryParam1,,` n
,,,n o
TFactoryParam2,,p ~
,,,~ 
TFactoryParam3
,,Ä é
,
,,é è
TFactoryParam4
,,ê û
,
,,û ü
TFactoryParam5
,,† Æ
>
,,Æ Ø
(
,,Ø ∞
TFactoryParam1-- 
param1-- !
,--! "
TFactoryParam2--# 1
param2--2 8
,--8 9
TFactoryParam3--: H
param3--I O
,--O P
TFactoryParam4--Q _
param4--` f
,--f g
TFactoryParam5--h v
param5--w }
)--} ~
{.. 	
FactoryBindInfo// 
.// 
	Arguments// %
=//& '

InjectUtil//( 2
.//2 3!
CreateArgListExplicit//3 H
(//H I
param1//I O
,//O P
param2//Q W
,//W X
param3//Y _
,//_ `
param4//a g
,//g h
param5//i o
)//o p
;//p q
return00 
this00 
;00 
}11 	
public33 !
FactoryToChoiceBinder33 $
<33$ %
TParam133% ,
,33, -
TParam233. 5
,335 6
TParam3337 >
,33> ?
	TContract33@ I
>33I J 
WithFactoryArguments33K _
<33_ `
TFactoryParam133` n
,33n o
TFactoryParam233p ~
,33~ 
TFactoryParam3
33Ä é
,
33é è
TFactoryParam4
33ê û
,
33û ü
TFactoryParam5
33† Æ
,
33Æ Ø
TFactoryParam6
33∞ æ
>
33æ ø
(
33ø ¿
TFactoryParam144 
param144 !
,44! "
TFactoryParam244# 1
param2442 8
,448 9
TFactoryParam344: H
param344I O
,44O P
TFactoryParam444Q _
param444` f
,44f g
TFactoryParam544h v
param544w }
,44} ~
TFactoryParam6	44 ç
param6
44é î
)
44î ï
{55 	
FactoryBindInfo66 
.66 
	Arguments66 %
=66& '

InjectUtil66( 2
.662 3!
CreateArgListExplicit663 H
(66H I
param166I O
,66O P
param266Q W
,66W X
param366Y _
,66_ `
param466a g
,66g h
param566i o
,66o p
param666q w
)66w x
;66x y
return77 
this77 
;77 
}88 	
public:: !
FactoryToChoiceBinder:: $
<::$ %
TParam1::% ,
,::, -
TParam2::. 5
,::5 6
TParam3::7 >
,::> ?
	TContract::@ I
>::I J 
WithFactoryArguments::K _
(::_ `
object::` f
[::f g
]::g h
args::i m
)::m n
{;; 	
FactoryBindInfo<< 
.<< 
	Arguments<< %
=<<& '

InjectUtil<<( 2
.<<2 3
CreateArgList<<3 @
(<<@ A
args<<A E
)<<E F
;<<F G
return== 
this== 
;== 
}>> 	
public@@ !
FactoryToChoiceBinder@@ $
<@@$ %
TParam1@@% ,
,@@, -
TParam2@@. 5
,@@5 6
TParam3@@7 >
,@@> ?
	TContract@@@ I
>@@I J(
WithFactoryArgumentsExplicit@@K g
(@@g h
IEnumerable@@h s
<@@s t
TypeValuePair	@@t Å
>
@@Å Ç
	extraArgs
@@É å
)
@@å ç
{AA 	
FactoryBindInfoBB 
.BB 
	ArgumentsBB %
=BB& '
	extraArgsBB( 1
.BB1 2
ToListBB2 8
(BB8 9
)BB9 :
;BB: ;
returnCC 
thisCC 
;CC 
}DD 	
}EE 
}FF ©
^C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Runtime\Kernels\SceneKernel.cs
	namespace 	
Zenject
 
{ 
public 

class 
SceneKernel 
: 

MonoKernel )
{ 
} 
} ˚M
lC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Finalizers\PrefabBindingFinalizer.cs
	namespace 	
Zenject
 
{		 
[

 
NoReflectionBaking

 
]

 
public 

class "
PrefabBindingFinalizer '
:( )$
ProviderBindingFinalizer* B
{ 
readonly (
GameObjectCreationParameters -
_gameObjectBindInfo. A
;A B
readonly 
UnityEngine 
. 
Object #
_prefab$ +
;+ ,
readonly 
Func 
< 
Type 
, 
IPrefabInstantiator /
,/ 0
	IProvider1 :
>: ;
_providerFactory< L
;L M
public "
PrefabBindingFinalizer %
(% &
BindInfo 
bindInfo 
, (
GameObjectCreationParameters (
gameObjectBindInfo) ;
,; <
UnityEngine 
. 
Object 
prefab %
,% &
Func' +
<+ ,
Type, 0
,0 1
IPrefabInstantiator2 E
,E F
	IProviderG P
>P Q
providerFactoryR a
)a b
: 
base 
( 
bindInfo 
) 
{ 	
_gameObjectBindInfo 
=  !
gameObjectBindInfo" 4
;4 5
_prefab 
= 
prefab 
; 
_providerFactory 
= 
providerFactory .
;. /
} 	
	protected 
override 
void 
OnFinalizeBinding  1
(1 2
DiContainer2 =
	container> G
)G H
{ 	
if 
( 
BindInfo 
. 
ToChoice !
==" $
	ToChoices% .
.. /
Self/ 3
)3 4
{ 
Assert   
.   
IsEmpty   
(   
BindInfo   '
.  ' (
ToTypes  ( /
)  / 0
;  0 1
FinalizeBindingSelf!! #
(!!# $
	container!!$ -
)!!- .
;!!. /
}"" 
else## 
{$$ #
FinalizeBindingConcrete%% '
(%%' (
	container%%( 1
,%%1 2
BindInfo%%3 ;
.%%; <
ToTypes%%< C
)%%C D
;%%D E
}&& 
}'' 	
void)) #
FinalizeBindingConcrete)) $
())$ %
DiContainer))% 0
	container))1 :
,)): ;
List))< @
<))@ A
Type))A E
>))E F
concreteTypes))G T
)))T U
{** 	
var++ 
scope++ 
=++ 
GetScope++  
(++  !
)++! "
;++" #
switch-- 
(-- 
scope-- 
)-- 
{.. 
case// 

ScopeTypes// 
.//  
	Transient//  )
://) *
{00 ;
/RegisterProvidersForAllContractsPerConcreteType11 C
(11C D
	container22 !
,22! "
concreteTypes33 %
,33% &
(44 
_44 
,44 
concreteType44 (
)44( )
=>44* ,
_providerFactory55 ,
(55, -
concreteType66  ,
,66, -
new77  #
PrefabInstantiator77$ 6
(776 7
	container88$ -
,88- .
_gameObjectBindInfo99$ 7
,997 8
concreteType::$ 0
,::0 1
concreteTypes;;$ 1
,;;1 2
BindInfo<<$ ,
.<<, -
	Arguments<<- 6
,<<6 7
new==$ '
PrefabProvider==( 6
(==6 7
_prefab==7 >
)==> ?
,==? @
BindInfo>>$ ,
.>>, - 
InstantiatedCallback>>- A
)>>A B
)>>B C
)>>C D
;>>D E
break?? 
;?? 
}@@ 
caseAA 

ScopeTypesAA 
.AA  
	SingletonAA  )
:AA) *
{BB 
varCC 
argumentTargetCC &
=CC' (
concreteTypesCC) 6
.CC6 7
OnlyOrDefaultCC7 D
(CCD E
)CCE F
;CCF G
ifEE 
(EE 
argumentTargetEE &
==EE' )
nullEE* .
)EE. /
{FF 
AssertGG 
.GG 
ThatGG #
(GG# $
BindInfoGG$ ,
.GG, -
	ArgumentsGG- 6
.GG6 7
IsEmptyGG7 >
(GG> ?
)GG? @
,GG@ A
$strHH t
)HHt u
;HHu v
}II 
varKK 
prefabCreatorKK %
=KK& '
newKK( +$
PrefabInstantiatorCachedKK, D
(KKD E
newLL 
PrefabInstantiatorLL .
(LL. /
	containerMM %
,MM% &
_gameObjectBindInfoNN /
,NN/ 0
argumentTargetOO *
,OO* +
concreteTypesPP )
,PP) *
BindInfoQQ $
.QQ$ %
	ArgumentsQQ% .
,QQ. /
newRR 
PrefabProviderRR  .
(RR. /
_prefabRR/ 6
)RR6 7
,RR7 8
BindInfoSS $
.SS$ % 
InstantiatedCallbackSS% 9
)SS9 :
)SS: ;
;SS; <;
/RegisterProvidersForAllContractsPerConcreteTypeUU C
(UUC D
	containerVV !
,VV! "
concreteTypesWW %
,WW% &
(XX 
_XX 
,XX 
concreteTypeXX (
)XX( )
=>XX* ,
BindingUtilXX- 8
.XX8 9 
CreateCachedProviderXX9 M
(XXM N
_providerFactoryYY ,
(YY, -
concreteTypeYY- 9
,YY9 :
prefabCreatorYY; H
)YYH I
)YYI J
)YYJ K
;YYK L
breakZZ 
;ZZ 
}[[ 
default\\ 
:\\ 
{]] 
throw^^ 
Assert^^  
.^^  !
CreateException^^! 0
(^^0 1
)^^1 2
;^^2 3
}__ 
}`` 
}aa 	
voidcc 
FinalizeBindingSelfcc  
(cc  !
DiContainercc! ,
	containercc- 6
)cc6 7
{dd 	
varee 
scopeee 
=ee 
GetScopeee  
(ee  !
)ee! "
;ee" #
switchgg 
(gg 
scopegg 
)gg 
{hh 
caseii 

ScopeTypesii 
.ii  
	Transientii  )
:ii) *
{jj '
RegisterProviderPerContractkk /
(kk/ 0
	containerll !
,ll! "
(mm 
_mm 
,mm 
contractTypemm (
)mm( )
=>mm* ,
_providerFactorynn ,
(nn, -
contractTypeoo  ,
,oo, -
newpp  #
PrefabInstantiatorpp$ 6
(pp6 7
	containerqq$ -
,qq- .
_gameObjectBindInforr$ 7
,rr7 8
contractTypess$ 0
,ss0 1
BindInfott$ ,
.tt, -
ContractTypestt- :
,tt: ;
BindInfouu$ ,
.uu, -
	Argumentsuu- 6
,uu6 7
newvv$ '
PrefabProvidervv( 6
(vv6 7
_prefabvv7 >
)vv> ?
,vv? @
BindInfoww$ ,
.ww, - 
InstantiatedCallbackww- A
)wwA B
)wwB C
)wwC D
;wwD E
breakxx 
;xx 
}yy 
casezz 

ScopeTypeszz 
.zz  
	Singletonzz  )
:zz) *
{{{ 
var|| 
argumentTarget|| &
=||' (
BindInfo||) 1
.||1 2
ContractTypes||2 ?
.||? @
OnlyOrDefault||@ M
(||M N
)||N O
;||O P
if~~ 
(~~ 
argumentTarget~~ &
==~~' )
null~~* .
)~~. /
{ 
Assert
ÄÄ 
.
ÄÄ 
That
ÄÄ #
(
ÄÄ# $
BindInfo
ÄÄ$ ,
.
ÄÄ, -
	Arguments
ÄÄ- 6
.
ÄÄ6 7
IsEmpty
ÄÄ7 >
(
ÄÄ> ?
)
ÄÄ? @
,
ÄÄ@ A
$str
ÅÅ t
)
ÅÅt u
;
ÅÅu v
}
ÇÇ 
var
ÑÑ 
prefabCreator
ÑÑ %
=
ÑÑ& '
new
ÑÑ( +&
PrefabInstantiatorCached
ÑÑ, D
(
ÑÑD E
new
ÖÖ  
PrefabInstantiator
ÖÖ .
(
ÖÖ. /
	container
ÜÜ %
,
ÜÜ% &!
_gameObjectBindInfo
áá /
,
áá/ 0
argumentTarget
àà *
,
àà* +
BindInfo
ââ $
.
ââ$ %
ContractTypes
ââ% 2
,
ââ2 3
BindInfo
ää $
.
ää$ %
	Arguments
ää% .
,
ää. /
new
ãã 
PrefabProvider
ãã  .
(
ãã. /
_prefab
ãã/ 6
)
ãã6 7
,
ãã7 8
BindInfo
åå $
.
åå$ %"
InstantiatedCallback
åå% 9
)
åå9 :
)
åå: ;
;
åå; <)
RegisterProviderPerContract
éé /
(
éé/ 0
	container
èè !
,
èè! "
(
êê 
_
êê 
,
êê 
contractType
êê (
)
êê( )
=>
êê* ,
BindingUtil
ëë '
.
ëë' ("
CreateCachedProvider
ëë( <
(
ëë< =
_providerFactory
íí  0
(
íí0 1
contractType
íí1 =
,
íí= >
prefabCreator
íí? L
)
ííL M
)
ííM N
)
ííN O
;
ííO P
break
ìì 
;
ìì 
}
îî 
default
ïï 
:
ïï 
{
ññ 
throw
óó 
Assert
óó  
.
óó  !
CreateException
óó! 0
(
óó0 1
)
óó1 2
;
óó2 3
}
òò 
}
ôô 
}
öö 	
}
õõ 
}úú ∞~
WC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Util\ZenUtilInternal.cs
	namespace 	
Zenject
 
. 
Internal 
{ 
public 

static 
class 
ZenUtilInternal '
{ 
static 

GameObject -
!_disabledIndestructibleGameObject ;
;; <
public 
static 
bool 
IsNull !
(! "
System" (
.( )
Object) /
obj0 3
)3 4
{ 	
return 
obj 
== 
null 
|| !
obj" %
.% &
Equals& ,
(, -
null- 1
)1 2
;2 3
} 	
public!! 
static!! 
bool!! 
IsOutsideUnity!! )
(!!) *
)!!* +
{"" 	
return## 
	AppDomain## 
.## 
CurrentDomain## *
.##* +
FriendlyName##+ 7
!=##8 :
$str##; O
;##O P
}$$ 	
public'' 
static'' 
bool'' 
AreFunctionsEqual'' ,
('', -
Delegate''- 5
left''6 :
,'': ;
Delegate''< D
right''E J
)''J K
{(( 	
return)) 
left)) 
.)) 
Target)) 
==)) !
right))" '
.))' (
Target))( .
&&))/ 1
left))2 6
.))6 7
Method))7 =
())= >
)))> ?
==))@ B
right))C H
.))H I
Method))I O
())O P
)))P Q
;))Q R
}** 	
public.. 
static.. 
int.. 
GetInheritanceDelta.. -
(..- .
Type... 2
derived..3 :
,..: ;
Type..< @
parent..A G
)..G H
{// 	
Assert00 
.00 
That00 
(00 
derived00 
.00  
DerivesFromOrEqual00  2
(002 3
parent003 9
)009 :
)00: ;
;00; <
if22 
(22 
parent22 
.22 
IsInterface22 "
(22" #
)22# $
)22$ %
{33 
return55 
$num55 
;55 
}66 
if88 
(88 
derived88 
==88 
parent88 !
)88! "
{99 
return:: 
$num:: 
;:: 
};; 
int== 
distance== 
=== 
$num== 
;== 
Type?? 
child?? 
=?? 
derived??  
;??  !
whileAA 
(AA 
(AA 
childAA 
=AA 
childAA !
.AA! "
BaseTypeAA" *
(AA* +
)AA+ ,
)AA, -
!=AA. 0
parentAA1 7
)AA7 8
{BB 
distanceCC 
++CC 
;CC 
}DD 
returnFF 
distanceFF 
;FF 
}GG 	
publicJJ 
staticJJ 
IEnumerableJJ !
<JJ! "
SceneContextJJ" .
>JJ. /
GetAllSceneContextsJJ0 C
(JJC D
)JJD E
{KK 	
foreachLL 
(LL 
varLL 
sceneLL 
inLL !
	UnityUtilLL" +
.LL+ ,
AllLoadedScenesLL, ;
)LL; <
{MM 
varNN 
contextsNN 
=NN 
sceneNN $
.NN$ %
GetRootGameObjectsNN% 7
(NN7 8
)NN8 9
.OO 

SelectManyOO 
(OO  
rootOO  $
=>OO% '
rootOO( ,
.OO, -#
GetComponentsInChildrenOO- D
<OOD E
SceneContextOOE Q
>OOQ R
(OOR S
)OOS T
)OOT U
.OOU V
ToListOOV \
(OO\ ]
)OO] ^
;OO^ _
ifQQ 
(QQ 
contextsQQ 
.QQ 
IsEmptyQQ $
(QQ$ %
)QQ% &
)QQ& '
{RR 
continueSS 
;SS 
}TT 
AssertVV 
.VV 
ThatVV 
(VV 
contextsVV $
.VV$ %
CountVV% *
==VV+ -
$numVV. /
,VV/ 0
$strWW B
,WWB C
sceneWWD I
.WWI J
nameWWJ N
)WWN O
;WWO P
yieldYY 
returnYY 
contextsYY %
[YY% &
$numYY& '
]YY' (
;YY( )
}ZZ 
}[[ 	
public]] 
static]] 
void]] 8
,AddStateMachineBehaviourAutoInjectersInScene]] G
(]]G H
Scene]]H M
scene]]N S
)]]S T
{^^ 	
foreach__ 
(__ 
var__ 
rootObj__  
in__! #
GetRootGameObjects__$ 6
(__6 7
scene__7 <
)__< =
)__= >
{`` 
ifaa 
(aa 
rootObjaa 
!=aa 
nullaa #
)aa# $
{bb @
4AddStateMachineBehaviourAutoInjectersUnderGameObjectcc H
(ccH I
rootObjccI P
)ccP Q
;ccQ R
}dd 
}ee 
}ff 	
publicmm 
staticmm 
voidmm @
4AddStateMachineBehaviourAutoInjectersUnderGameObjectmm O
(mmO P

GameObjectmmP Z
rootmm[ _
)mm_ `
{nn 	
{rr 
varss 
	animatorsss 
=ss 
rootss  $
.ss$ %#
GetComponentsInChildrenss% <
<ss< =
Animatorss= E
>ssE F
(ssF G
truessG K
)ssK L
;ssL M
foreachuu 
(uu 
varuu 
animatoruu %
inuu& (
	animatorsuu) 2
)uu2 3
{vv 
ifww 
(ww 
animatorww  
.ww  !

gameObjectww! +
.ww+ ,
GetComponentww, 8
<ww8 94
(ZenjectStateMachineBehaviourAutoInjecterww9 a
>wwa b
(wwb c
)wwc d
==wwe g
nullwwh l
)wwl m
{xx 
animatoryy  
.yy  !

gameObjectyy! +
.yy+ ,
AddComponentyy, 8
<yy8 94
(ZenjectStateMachineBehaviourAutoInjecteryy9 a
>yya b
(yyb c
)yyc d
;yyd e
}zz 
}{{ 
}|| 
}}} 	
public 
static 
void .
"GetInjectableMonoBehavioursInScene =
(= >
Scene
ÄÄ 
scene
ÄÄ 
,
ÄÄ 
List
ÄÄ 
<
ÄÄ 
MonoBehaviour
ÄÄ +
>
ÄÄ+ ,
monoBehaviours
ÄÄ- ;
)
ÄÄ; <
{
ÅÅ 	
{
ÖÖ 
foreach
ÜÜ 
(
ÜÜ 
var
ÜÜ 
rootObj
ÜÜ $
in
ÜÜ% ' 
GetRootGameObjects
ÜÜ( :
(
ÜÜ: ;
scene
ÜÜ; @
)
ÜÜ@ A
)
ÜÜA B
{
áá 
if
àà 
(
àà 
rootObj
àà 
!=
àà  "
null
àà# '
)
àà' (
{
ââ @
2GetInjectableMonoBehavioursUnderGameObjectInternal
ää J
(
ääJ K
rootObj
ääK R
,
ääR S
monoBehaviours
ääT b
)
ääb c
;
ääc d
}
ãã 
}
åå 
}
çç 
}
éé 	
public
íí 
static
íí 
void
íí 8
*GetInjectableMonoBehavioursUnderGameObject
íí E
(
ííE F

GameObject
ìì 

gameObject
ìì !
,
ìì! "
List
ìì# '
<
ìì' (
MonoBehaviour
ìì( 5
>
ìì5 6"
injectableComponents
ìì7 K
)
ììK L
{
îî 	
{
òò @
2GetInjectableMonoBehavioursUnderGameObjectInternal
ôô B
(
ôôB C

gameObject
ôôC M
,
ôôM N"
injectableComponents
ôôO c
)
ôôc d
;
ôôd e
}
öö 
}
õõ 	
static
ùù 
void
ùù @
2GetInjectableMonoBehavioursUnderGameObjectInternal
ùù F
(
ùùF G

GameObject
ûû 

gameObject
ûû !
,
ûû! "
List
ûû# '
<
ûû' (
MonoBehaviour
ûû( 5
>
ûû5 6"
injectableComponents
ûû7 K
)
ûûK L
{
üü 	
if
†† 
(
†† 

gameObject
†† 
==
†† 
null
†† "
)
††" #
{
°° 
return
¢¢ 
;
¢¢ 
}
££ 
var
•• 
monoBehaviours
•• 
=
••  

gameObject
••! +
.
••+ ,
GetComponents
••, 9
<
••9 :
MonoBehaviour
••: G
>
••G H
(
••H I
)
••I J
;
••J K
for
ßß 
(
ßß 
int
ßß 
i
ßß 
=
ßß 
$num
ßß 
;
ßß 
i
ßß 
<
ßß 
monoBehaviours
ßß  .
.
ßß. /
Length
ßß/ 5
;
ßß5 6
i
ßß7 8
++
ßß8 :
)
ßß: ;
{
®® 
var
©© 
monoBehaviour
©© !
=
©©" #
monoBehaviours
©©$ 2
[
©©2 3
i
©©3 4
]
©©4 5
;
©©5 6
if
¨¨ 
(
¨¨ 
monoBehaviour
¨¨ !
!=
¨¨" $
null
¨¨% )
&&
≠≠ 
monoBehaviour
≠≠ (
.
≠≠( )
GetType
≠≠) 0
(
≠≠0 1
)
≠≠1 2
.
≠≠2 3 
DerivesFromOrEqual
≠≠3 E
<
≠≠E F
GameObjectContext
≠≠F W
>
≠≠W X
(
≠≠X Y
)
≠≠Y Z
)
≠≠Z [
{
ÆÆ "
injectableComponents
≤≤ (
.
≤≤( )
Add
≤≤) ,
(
≤≤, -
monoBehaviour
≤≤- :
)
≤≤: ;
;
≤≤; <
return
≥≥ 
;
≥≥ 
}
¥¥ 
}
µµ 
for
ππ 
(
ππ 
int
ππ 
i
ππ 
=
ππ 
$num
ππ 
;
ππ 
i
ππ 
<
ππ 

gameObject
ππ  *
.
ππ* +
	transform
ππ+ 4
.
ππ4 5

childCount
ππ5 ?
;
ππ? @
i
ππA B
++
ππB D
)
ππD E
{
∫∫ 
var
ªª 
child
ªª 
=
ªª 

gameObject
ªª &
.
ªª& '
	transform
ªª' 0
.
ªª0 1
GetChild
ªª1 9
(
ªª9 :
i
ªª: ;
)
ªª; <
;
ªª< =
if
ΩΩ 
(
ΩΩ 
child
ΩΩ 
!=
ΩΩ 
null
ΩΩ !
)
ΩΩ! "
{
ææ @
2GetInjectableMonoBehavioursUnderGameObjectInternal
øø F
(
øøF G
child
øøG L
.
øøL M

gameObject
øøM W
,
øøW X"
injectableComponents
øøY m
)
øøm n
;
øøn o
}
¿¿ 
}
¡¡ 
for
√√ 
(
√√ 
int
√√ 
i
√√ 
=
√√ 
$num
√√ 
;
√√ 
i
√√ 
<
√√ 
monoBehaviours
√√  .
.
√√. /
Length
√√/ 5
;
√√5 6
i
√√7 8
++
√√8 :
)
√√: ;
{
ƒƒ 
var
≈≈ 
monoBehaviour
≈≈ !
=
≈≈" #
monoBehaviours
≈≈$ 2
[
≈≈2 3
i
≈≈3 4
]
≈≈4 5
;
≈≈5 6
if
»» 
(
»» 
monoBehaviour
»» !
!=
»»" $
null
»»% )
&&
…… +
IsInjectableMonoBehaviourType
…… 4
(
……4 5
monoBehaviour
……5 B
.
……B C
GetType
……C J
(
……J K
)
……K L
)
……L M
)
……M N
{
   "
injectableComponents
ÀÀ (
.
ÀÀ( )
Add
ÀÀ) ,
(
ÀÀ, -
monoBehaviour
ÀÀ- :
)
ÀÀ: ;
;
ÀÀ; <
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 	
public
–– 
static
–– 
bool
–– +
IsInjectableMonoBehaviourType
–– 8
(
––8 9
Type
––9 =
type
––> B
)
––B C
{
—— 	
return
”” 
type
”” 
!=
”” 
null
”” 
&&
””  "
!
””# $
type
””$ (
.
””( )
DerivesFrom
””) 4
<
””4 5
MonoInstaller
””5 B
>
””B C
(
””C D
)
””D E
&&
””F H
TypeAnalyzer
””I U
.
””U V
HasInfo
””V ]
(
””] ^
type
””^ b
)
””b c
;
””c d
}
‘‘ 	
public
÷÷ 
static
÷÷ 
IEnumerable
÷÷ !
<
÷÷! "

GameObject
÷÷" ,
>
÷÷, - 
GetRootGameObjects
÷÷. @
(
÷÷@ A
Scene
÷÷A F
scene
÷÷G L
)
÷÷L M
{
◊◊ 	
{
€€ 
if
‹‹ 
(
‹‹ 
scene
‹‹ 
.
‹‹ 
isLoaded
‹‹ "
)
‹‹" #
{
›› 
return
ﬁﬁ 
scene
ﬁﬁ  
.
ﬁﬁ  ! 
GetRootGameObjects
ﬁﬁ! 3
(
ﬁﬁ3 4
)
ﬁﬁ4 5
.
ﬂﬂ 
Where
ﬂﬂ 
(
ﬂﬂ 
x
ﬂﬂ  
=>
ﬂﬂ! #
x
ﬂﬂ$ %
.
ﬂﬂ% &
GetComponent
ﬂﬂ& 2
<
ﬂﬂ2 3
ProjectContext
ﬂﬂ3 A
>
ﬂﬂA B
(
ﬂﬂB C
)
ﬂﬂC D
==
ﬂﬂE G
null
ﬂﬂH L
)
ﬂﬂL M
;
ﬂﬂM N
}
‡‡ 
return
ÔÔ 
	Resources
ÔÔ  
.
ÔÔ  !"
FindObjectsOfTypeAll
ÔÔ! 5
<
ÔÔ5 6

GameObject
ÔÔ6 @
>
ÔÔ@ A
(
ÔÔA B
)
ÔÔB C
.
 
Where
 
(
 
x
 
=>
 
x
  !
.
! "
	transform
" +
.
+ ,
parent
, 2
==
3 5
null
6 :
&&
ÒÒ 
x
ÒÒ  
.
ÒÒ  !
GetComponent
ÒÒ! -
<
ÒÒ- .
ProjectContext
ÒÒ. <
>
ÒÒ< =
(
ÒÒ= >
)
ÒÒ> ?
==
ÒÒ@ B
null
ÒÒC G
&&
ÚÚ 
x
ÚÚ  
.
ÚÚ  !
scene
ÚÚ! &
==
ÚÚ' )
scene
ÚÚ* /
)
ÚÚ/ 0
;
ÚÚ0 1
}
ÛÛ 
}
ÙÙ 	
public
˙˙ 
static
˙˙ 
	Transform
˙˙ -
GetOrCreateInactivePrefabParent
˙˙  ?
(
˙˙? @
)
˙˙@ A
{
˚˚ 	
if
¸¸ 
(
¸¸ /
!_disabledIndestructibleGameObject
¸¸ 0
==
¸¸1 3
null
¸¸4 8
||
¸¸9 ;
(
¸¸< =
!
¸¸= >
Application
¸¸> I
.
¸¸I J
	isPlaying
¸¸J S
&&
¸¸T V/
!_disabledIndestructibleGameObject
¸¸W x
.
¸¸x y
scene
¸¸y ~
!=¸¸ Å
SceneManager¸¸Ç é
.¸¸é è
GetActiveScene¸¸è ù
(¸¸ù û
)¸¸û ü
)¸¸ü †
)¸¸† °
{
˝˝ 
var
˛˛ 
go
˛˛ 
=
˛˛ 
new
˛˛ 

GameObject
˛˛ '
(
˛˛' (
$str
˛˛( F
)
˛˛F G
;
˛˛G H
go
ˇˇ 
.
ˇˇ 
	hideFlags
ˇˇ 
=
ˇˇ 
	HideFlags
ˇˇ (
.
ˇˇ( )
HideAndDontSave
ˇˇ) 8
;
ˇˇ8 9
go
ÄÄ 
.
ÄÄ 
	SetActive
ÄÄ 
(
ÄÄ 
false
ÄÄ "
)
ÄÄ" #
;
ÄÄ# $
if
ÇÇ 
(
ÇÇ 
Application
ÇÇ 
.
ÇÇ 
	isPlaying
ÇÇ (
)
ÇÇ( )
{
ÉÉ 
UnityEngine
ÑÑ 
.
ÑÑ  
Object
ÑÑ  &
.
ÑÑ& '
DontDestroyOnLoad
ÑÑ' 8
(
ÑÑ8 9
go
ÑÑ9 ;
)
ÑÑ; <
;
ÑÑ< =
}
ÖÖ /
!_disabledIndestructibleGameObject
áá 1
=
áá2 3
go
áá4 6
;
áá6 7
}
àà 
return
ää /
!_disabledIndestructibleGameObject
ää 4
.
ää4 5
	transform
ää5 >
;
ää> ?
}
ãã 	
}
èè 
}êê ¸
ãC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryToChoiceIdBinder\FactoryToChoiceIdBinder1.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class #
FactoryToChoiceIdBinder (
<( )
TParam1) 0
,0 1
	TContract2 ;
>; <
:= >*
FactoryArgumentsToChoiceBinder? ]
<] ^
TParam1^ e
,e f
	TContractg p
>p q
{ 
public #
FactoryToChoiceIdBinder &
(& '
DiContainer 
bindContainer %
,% &
BindInfo' /
bindInfo0 8
,8 9
FactoryBindInfo: I
factoryBindInfoJ Y
)Y Z
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
); <
{		 	
}

 	
public *
FactoryArgumentsToChoiceBinder -
<- .
TParam1. 5
,5 6
	TContract7 @
>@ A
WithIdB H
(H I
objectI O

identifierP Z
)Z [
{ 	
BindInfo 
. 

Identifier 
=  !

identifier" ,
;, -
return 
this 
; 
} 	
} 
} ¥-
ÅC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\BindSignal\BindSignalToBinder.cs
	namespace 	
Zenject
 
{ 
public 

class 
BindSignalToBinder #
<# $
TSignal$ +
>+ ,
{ 
DiContainer 

_container 
; 
BindStatement		 
_bindStatement		 $
;		$ %!
SignalBindingBindInfo

 
_signalBindInfo

 -
;

- .
public 
BindSignalToBinder !
(! "
DiContainer" -
	container. 7
,7 8!
SignalBindingBindInfo9 N
signalBindInfoO ]
)] ^
{ 	

_container 
= 
	container "
;" #
_signalBindInfo 
= 
signalBindInfo ,
;, -
_bindStatement 
= 
	container &
.& '
StartBinding' 3
(3 4
)4 5
;5 6
} 	
	protected !
SignalBindingBindInfo '
SignalBindInfo( 6
{ 	
get 
{ 
return 
_signalBindInfo (
;( )
}* +
} 	
public 
SignalCopyBinder 
ToMethod  (
(( )
Action) /
</ 0
TSignal0 7
>7 8
callback9 A
)A B
{ 	
Assert 
. 
That 
( 
! 
_bindStatement '
.' (
HasFinalizer( 4
)4 5
;5 6
_bindStatement 
. 
SetFinalizer '
(' (
new( + 
NullBindingFinalizer, @
(@ A
)A B
)B C
;C D
var 
bindInfo 
= 

_container %
.% &
Bind& *
<* +
IDisposable+ 6
>6 7
(7 8
)8 9
.   
To   
<   !
SignalCallbackWrapper   )
>  ) *
(  * +
)  + ,
.!! 
AsCached!! 
(!! 
)!! 
.%% 
WithArguments%% 
(%% 
_signalBindInfo%% .
,%%. /
(%%0 1
Action%%1 7
<%%7 8
object%%8 >
>%%> ?
)%%? @
(%%@ A
o%%A B
=>%%C E
callback%%F N
(%%N O
(%%O P
TSignal%%P W
)%%W X
o%%X Y
)%%Y Z
)%%Z [
)%%[ \
.&& 
NonLazy&& 
(&& 
)&& 
.&& 
BindInfo&& #
;&&# $
return(( 
new(( 
SignalCopyBinder(( '
(((' (
bindInfo((( 0
)((0 1
;((1 2
})) 	
public++ 
SignalCopyBinder++ 
ToMethod++  (
(++( )
Action++) /
callback++0 8
)++8 9
{,, 	
return-- 
ToMethod-- 
(-- 
signal-- "
=>--# %
callback--& .
(--. /
)--/ 0
)--0 1
;--1 2
}.. 	
public00  
BindSignalFromBinder00 #
<00# $
TObject00$ +
,00+ ,
TSignal00- 4
>004 5
ToMethod006 >
<00> ?
TObject00? F
>00F G
(00G H
Action00H N
<00N O
TObject00O V
,00V W
TSignal00X _
>00_ `
handler00a h
)00h i
{11 	
return22 
ToMethod22 
<22 
TObject22 #
>22# $
(22$ %
x22% &
=>22' )
(22* +
Action22+ 1
<221 2
TSignal222 9
>229 :
)22: ;
(22; <
s22< =
=>22> @
handler22A H
(22H I
x22I J
,22J K
s22L M
)22M N
)22N O
)22O P
;22P Q
}33 	
public55  
BindSignalFromBinder55 #
<55# $
TObject55$ +
,55+ ,
TSignal55- 4
>554 5
ToMethod556 >
<55> ?
TObject55? F
>55F G
(55G H
Func55H L
<55L M
TObject55M T
,55T U
Action55V \
>55\ ]
handlerGetter55^ k
)55k l
{66 	
return77 
ToMethod77 
<77 
TObject77 #
>77# $
(77$ %
x77% &
=>77' )
(77* +
Action77+ 1
<771 2
TSignal772 9
>779 :
)77: ;
(77; <
s77< =
=>77> @
handlerGetter77A N
(77N O
x77O P
)77P Q
(77Q R
)77R S
)77S T
)77T U
;77U V
}88 	
public::  
BindSignalFromBinder:: #
<::# $
TObject::$ +
,::+ ,
TSignal::- 4
>::4 5
ToMethod::6 >
<::> ?
TObject::? F
>::F G
(::G H
Func::H L
<::L M
TObject::M T
,::T U
Action::V \
<::\ ]
TSignal::] d
>::d e
>::e f
handlerGetter::g t
)::t u
{;; 	
return<< 
new<<  
BindSignalFromBinder<< +
<<<+ ,
TObject<<, 3
,<<3 4
TSignal<<5 <
><<< =
(<<= >
_signalBindInfo== 
,==  
_bindStatement==! /
,==/ 0
handlerGetter==1 >
,==> ?

_container==@ J
)==J K
;==K L
}>> 	
}?? 
}@@ “
ÑC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\Signals\Internal\Binders\BindSignal\SignalCallbackWrapper.cs
	namespace 	
Zenject
 
{ 
public 

class !
SignalCallbackWrapper &
:' (
IDisposable) 4
{		 
readonly

 
	SignalBus

 

_signalBus

 %
;

% &
readonly 
Action 
< 
object 
> 
_action  '
;' (
readonly 
Type 
_signalType !
;! "
readonly 
object 
_identifier #
;# $
public !
SignalCallbackWrapper $
($ %!
SignalBindingBindInfo !
bindInfo" *
,* +
Action 
< 
object 
> 
action !
,! "
	SignalBus 
	signalBus 
)  
{ 	
_signalType 
= 
bindInfo "
." #

SignalType# -
;- .
_identifier 
= 
bindInfo "
." #

Identifier# -
;- .

_signalBus 
= 
	signalBus "
;" #
_action 
= 
action 
; 
	signalBus 
. 
SubscribeId !
(! "
bindInfo" *
.* +

SignalType+ 5
,5 6
_identifier7 B
,B C
OnSignalFiredD Q
)Q R
;R S
} 	
void 
OnSignalFired 
( 
object !
signal" (
)( )
{ 	
_action 
( 
signal 
) 
; 
} 	
public!! 
void!! 
Dispose!! 
(!! 
)!! 
{"" 	

_signalBus## 
.## 
UnsubscribeId## $
(##$ %
_signalType##% 0
,##0 1
_identifier##2 =
,##= >
OnSignalFired##? L
)##L M
;##M N
}$$ 	
}%% 
}&& î«
`C:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Install\Contexts\SceneContext.cs
	namespace 	
Zenject
 
{ 
public 

class 
SceneContext 
: 
RunnableContext  /
{ 
public 
event 
Action 

PreInstall &
;& '
public 
event 
Action 
PostInstall '
;' (
public 
event 
Action 

PreResolve &
;& '
public 
event 
Action 
PostResolve '
;' (
public 

UnityEvent 
OnPreInstall &
;& '
public 

UnityEvent 
OnPostInstall '
;' (
public 

UnityEvent 
OnPreResolve &
;& '
public 

UnityEvent 
OnPostResolve '
;' (
public 
static 
Action 
< 
DiContainer (
>( )&
ExtraBindingsInstallMethod* D
;D E
public 
static 
Action 
< 
DiContainer (
>( )*
ExtraBindingsLateInstallMethod* H
;H I
public 
static 
IEnumerable !
<! "
DiContainer" -
>- .
ParentContainers/ ?
;? @
[   	 
FormerlySerializedAs  	 
(   
$str   9
)  9 :
]  : ;
[!! 	 
FormerlySerializedAs!!	 
(!! 
$str!! :
)!!: ;
]!!; <
["" 	
Tooltip""	 
("" 
$str"" f
)""f g
]""g h
[## 	
SerializeField##	 
]## 
bool$$ .
"_parentNewObjectsUnderSceneContext$$ /
;$$/ 0
[&& 	
Tooltip&&	 
(&& 
$str	&& —
)
&&— “
]
&&“ ”
['' 	
SerializeField''	 
]'' 
List(( 
<(( 
string(( 
>(( 
_contractNames(( #
=(($ %
new((& )
List((* .
<((. /
string((/ 5
>((5 6
(((6 7
)((7 8
;((8 9
[** 	
Tooltip**	 
(** 
$str	** ó
)
**ó ò
]
**ò ô
[++ 	
SerializeField++	 
]++ 
List,, 
<,, 
string,, 
>,,  
_parentContractNames,, )
=,,* +
new,,, /
List,,0 4
<,,4 5
string,,5 ;
>,,; <
(,,< =
),,= >
;,,> ?
DiContainer.. 

_container.. 
;.. 
readonly00 
List00 
<00 !
SceneDecoratorContext00 +
>00+ ,
_decoratorContexts00- ?
=00@ A
new00B E
List00F J
<00J K!
SceneDecoratorContext00K `
>00` a
(00a b
)00b c
;00c d
bool22 
_hasInstalled22 
;22 
bool33 
_hasResolved33 
;33 
public55 
override55 
DiContainer55 #
	Container55$ -
{66 	
get77 
{77 
return77 

_container77 #
;77# $
}77% &
}88 	
public:: 
bool:: 
HasResolved:: 
{;; 	
get<< 
{<< 
return<< 
_hasResolved<< %
;<<% &
}<<' (
}== 	
public?? 
bool?? 
HasInstalled??  
{@@ 	
getAA 
{AA 
returnAA 
_hasInstalledAA &
;AA& '
}AA( )
}BB 	
publicDD 
boolDD 
IsValidatingDD  
{EE 	
getFF 
{GG 
returnHH 
ProjectContextHH %
.HH% &
InstanceHH& .
.HH. /
	ContainerHH/ 8
.HH8 9
IsValidatingHH9 E
;HHE F
}II 
}JJ 	
publicLL 
IEnumerableLL 
<LL 
stringLL !
>LL! "
ContractNamesLL# 0
{MM 	
getNN 
{NN 
returnNN 
_contractNamesNN '
;NN' (
}NN) *
setOO 
{PP 
_contractNamesQQ 
.QQ 
ClearQQ $
(QQ$ %
)QQ% &
;QQ& '
_contractNamesRR 
.RR 
AddRangeRR '
(RR' (
valueRR( -
)RR- .
;RR. /
}SS 
}TT 	
publicVV 
IEnumerableVV 
<VV 
stringVV !
>VV! "
ParentContractNamesVV# 6
{WW 	
getXX 
{YY 
varZZ 
resultZZ 
=ZZ 
newZZ  
ListZZ! %
<ZZ% &
stringZZ& ,
>ZZ, -
(ZZ- .
)ZZ. /
;ZZ/ 0
result[[ 
.[[ 
AddRange[[ 
([[   
_parentContractNames[[  4
)[[4 5
;[[5 6
return\\ 
result\\ 
;\\ 
}]] 
set^^ 
{__  
_parentContractNames`` $
=``% &
value``' ,
.``, -
ToList``- 3
(``3 4
)``4 5
;``5 6
}aa 
}bb 	
publicdd 
booldd -
!ParentNewObjectsUnderSceneContextdd 5
{ee 	
getff 
{ff 
returnff .
"_parentNewObjectsUnderSceneContextff ;
;ff; <
}ff= >
setgg 
{gg .
"_parentNewObjectsUnderSceneContextgg 4
=gg5 6
valuegg7 <
;gg< =
}gg> ?
}hh 	
publicjj 
voidjj 
Awakejj 
(jj 
)jj 
{kk 	
{pp 

Initializeqq 
(qq 
)qq 
;qq 
}rr 
}ss 	
publicuu 
voiduu 
Validateuu 
(uu 
)uu 
{vv 	
Assertww 
.ww 
Thatww 
(ww 
IsValidatingww $
)ww$ %
;ww% &
Installyy 
(yy 
)yy 
;yy 
Resolvezz 
(zz 
)zz 
;zz 
}{{ 	
	protected}} 
override}} 
void}} 
RunInternal}}  +
(}}+ ,
)}}, -
{~~ 	
ProjectContext
ÄÄ 
.
ÄÄ 
Instance
ÄÄ #
.
ÄÄ# $!
EnsureIsInitialized
ÄÄ$ 7
(
ÄÄ7 8
)
ÄÄ8 9
;
ÄÄ9 :
using
ÉÉ 
(
ÉÉ 
ProfileBlock
ÉÉ 
.
ÉÉ  
Start
ÉÉ  %
(
ÉÉ% &
$str
ÉÉ& D
)
ÉÉD E
)
ÉÉE F
{
ÖÖ 
Install
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 
using
ää 
(
ää 
ProfileBlock
ää 
.
ää  
Start
ää  %
(
ää% &
$str
ää& D
)
ääD E
)
ääE F
{
åå 
Resolve
çç 
(
çç 
)
çç 
;
çç 
}
éé 
}
èè 	
public
ëë 
override
ëë 
IEnumerable
ëë #
<
ëë# $

GameObject
ëë$ .
>
ëë. / 
GetRootGameObjects
ëë0 B
(
ëëB C
)
ëëC D
{
íí 	
return
ìì 
ZenUtilInternal
ìì "
.
ìì" # 
GetRootGameObjects
ìì# 5
(
ìì5 6

gameObject
ìì6 @
.
ìì@ A
scene
ììA F
)
ììF G
;
ììG H
}
îî 	
IEnumerable
ññ 
<
ññ 
DiContainer
ññ 
>
ññ  !
GetParentContainers
ññ! 4
(
ññ4 5
)
ññ5 6
{
óó 	
var
òò !
parentContractNames
òò #
=
òò$ %!
ParentContractNames
òò& 9
;
òò9 :
if
öö 
(
öö !
parentContractNames
öö #
.
öö# $
IsEmpty
öö$ +
(
öö+ ,
)
öö, -
)
öö- .
{
õõ 
if
úú 
(
úú 
ParentContainers
úú $
!=
úú% '
null
úú( ,
)
úú, -
{
ùù 
var
ûû !
tempParentContainer
ûû +
=
ûû, -
ParentContainers
ûû. >
;
ûû> ?
ParentContainers
¢¢ $
=
¢¢% &
null
¢¢' +
;
¢¢+ ,
return
§§ !
tempParentContainer
§§ .
;
§§. /
}
•• 
return
ßß 
new
ßß 
[
ßß 
]
ßß 
{
ßß 
ProjectContext
ßß -
.
ßß- .
Instance
ßß. 6
.
ßß6 7
	Container
ßß7 @
}
ßßA B
;
ßßB C
}
®® 
Assert
™™ 
.
™™ 
IsNull
™™ 
(
™™ 
ParentContainers
™™ *
,
™™* +
$str
´´ t
)
´´t u
;
´´u v
var
≠≠ 
parentContainers
≠≠  
=
≠≠! "
	UnityUtil
≠≠# ,
.
≠≠, -
AllLoadedScenes
≠≠- <
.
ÆÆ 
Except
ÆÆ 
(
ÆÆ 

gameObject
ÆÆ "
.
ÆÆ" #
scene
ÆÆ# (
)
ÆÆ( )
.
ØØ 

SelectMany
ØØ 
(
ØØ 
scene
ØØ !
=>
ØØ" $
scene
ØØ% *
.
ØØ* + 
GetRootGameObjects
ØØ+ =
(
ØØ= >
)
ØØ> ?
)
ØØ? @
.
∞∞ 

SelectMany
∞∞ 
(
∞∞ 
root
∞∞  
=>
∞∞! #
root
∞∞$ (
.
∞∞( )%
GetComponentsInChildren
∞∞) @
<
∞∞@ A
SceneContext
∞∞A M
>
∞∞M N
(
∞∞N O
)
∞∞O P
)
∞∞P Q
.
±± 
Where
±± 
(
±± 
sceneContext
±± #
=>
±±$ &
sceneContext
±±' 3
.
±±3 4
ContractNames
±±4 A
.
±±A B
Where
±±B G
(
±±G H
x
±±H I
=>
±±J L!
parentContractNames
±±M `
.
±±` a
Contains
±±a i
(
±±i j
x
±±j k
)
±±k l
)
±±l m
.
±±m n
Any
±±n q
(
±±q r
)
±±r s
)
±±s t
.
≤≤ 
Select
≤≤ 
(
≤≤ 
x
≤≤ 
=>
≤≤ 
x
≤≤ 
.
≤≤ 
	Container
≤≤ (
)
≤≤( )
.
≥≥ 
ToList
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
if
µµ 
(
µµ 
!
µµ 
parentContainers
µµ !
.
µµ! "
Any
µµ" %
(
µµ% &
)
µµ& '
)
µµ' (
{
∂∂ 
throw
∑∑ 
Assert
∑∑ 
.
∑∑ 
CreateException
∑∑ ,
(
∑∑, -
$str∏∏ ¶
,∏∏¶ ß

gameObject
ππ 
.
ππ 
name
ππ #
,
ππ# $

gameObject
∫∫ 
.
∫∫ 
scene
∫∫ $
.
∫∫$ %
name
∫∫% )
,
∫∫) *!
parentContractNames
ªª '
.
ªª' (
Join
ªª( ,
(
ªª, -
$str
ªª- 1
)
ªª1 2
)
ªª2 3
;
ªª3 4
}
ºº 
return
ææ 
parentContainers
ææ #
;
ææ# $
}
øø 	
List
¡¡ 
<
¡¡ #
SceneDecoratorContext
¡¡ "
>
¡¡" #%
LookupDecoratorContexts
¡¡$ ;
(
¡¡; <
)
¡¡< =
{
¬¬ 	
if
√√ 
(
√√ 
_contractNames
√√ 
.
√√ 
IsEmpty
√√ &
(
√√& '
)
√√' (
)
√√( )
{
ƒƒ 
return
≈≈ 
new
≈≈ 
List
≈≈ 
<
≈≈  #
SceneDecoratorContext
≈≈  5
>
≈≈5 6
(
≈≈6 7
)
≈≈7 8
;
≈≈8 9
}
∆∆ 
return
»» 
	UnityUtil
»» 
.
»» 
AllLoadedScenes
»» ,
.
…… 
Except
…… 
(
…… 

gameObject
…… "
.
……" #
scene
……# (
)
……( )
.
   

SelectMany
   
(
   
scene
   !
=>
  " $
scene
  % *
.
  * + 
GetRootGameObjects
  + =
(
  = >
)
  > ?
)
  ? @
.
ÀÀ 

SelectMany
ÀÀ 
(
ÀÀ 
root
ÀÀ  
=>
ÀÀ! #
root
ÀÀ$ (
.
ÀÀ( )%
GetComponentsInChildren
ÀÀ) @
<
ÀÀ@ A#
SceneDecoratorContext
ÀÀA V
>
ÀÀV W
(
ÀÀW X
)
ÀÀX Y
)
ÀÀY Z
.
ÃÃ 
Where
ÃÃ 
(
ÃÃ 
decoratorContext
ÃÃ '
=>
ÃÃ( *
_contractNames
ÃÃ+ 9
.
ÃÃ9 :
Contains
ÃÃ: B
(
ÃÃB C
decoratorContext
ÃÃC S
.
ÃÃS T#
DecoratedContractName
ÃÃT i
)
ÃÃi j
)
ÃÃj k
.
ÕÕ 
ToList
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 	
public
–– 
void
–– 
Install
–– 
(
–– 
)
–– 
{
—— 	
Assert
““ 
.
““ 
That
““ 
(
““ 
!
““ 
_hasInstalled
““ &
)
““& '
;
““' (
_hasInstalled
”” 
=
”” 
true
””  
;
””  !
Assert
’’ 
.
’’ 
IsNull
’’ 
(
’’ 

_container
’’ $
)
’’$ %
;
’’% &
var
◊◊ 
parents
◊◊ 
=
◊◊ !
GetParentContainers
◊◊ -
(
◊◊- .
)
◊◊. /
;
◊◊/ 0
Assert
ÿÿ 
.
ÿÿ 
That
ÿÿ 
(
ÿÿ 
!
ÿÿ 
parents
ÿÿ  
.
ÿÿ  !
IsEmpty
ÿÿ! (
(
ÿÿ( )
)
ÿÿ) *
)
ÿÿ* +
;
ÿÿ+ ,
Assert
ŸŸ 
.
ŸŸ 
That
ŸŸ 
(
ŸŸ 
parents
ŸŸ 
.
ŸŸ  
All
ŸŸ  #
(
ŸŸ# $
x
ŸŸ$ %
=>
ŸŸ& (
x
ŸŸ) *
.
ŸŸ* +
IsValidating
ŸŸ+ 7
==
ŸŸ8 :
parents
ŸŸ; B
.
ŸŸB C
First
ŸŸC H
(
ŸŸH I
)
ŸŸI J
.
ŸŸJ K
IsValidating
ŸŸK W
)
ŸŸW X
)
ŸŸX Y
;
ŸŸY Z

_container
€€ 
=
€€ 
new
€€ 
DiContainer
€€ (
(
€€( )
parents
€€) 0
,
€€0 1
parents
€€2 9
.
€€9 :
First
€€: ?
(
€€? @
)
€€@ A
.
€€A B
IsValidating
€€B N
)
€€N O
;
€€O P
if
ﬁﬁ 
(
ﬁﬁ 

PreInstall
ﬁﬁ 
!=
ﬁﬁ 
null
ﬁﬁ "
)
ﬁﬁ" #
{
ﬂﬂ 

PreInstall
‡‡ 
(
‡‡ 
)
‡‡ 
;
‡‡ 
}
·· 
if
„„ 
(
„„ 
OnPreInstall
„„ 
!=
„„ 
null
„„  $
)
„„$ %
{
‰‰ 
OnPreInstall
ÂÂ 
.
ÂÂ 
Invoke
ÂÂ #
(
ÂÂ# $
)
ÂÂ$ %
;
ÂÂ% &
}
ÊÊ 
Assert
ËË 
.
ËË 
That
ËË 
(
ËË  
_decoratorContexts
ËË *
.
ËË* +
IsEmpty
ËË+ 2
(
ËË2 3
)
ËË3 4
)
ËË4 5
;
ËË5 6 
_decoratorContexts
ÈÈ 
.
ÈÈ 
AddRange
ÈÈ '
(
ÈÈ' (%
LookupDecoratorContexts
ÈÈ( ?
(
ÈÈ? @
)
ÈÈ@ A
)
ÈÈA B
;
ÈÈB C
if
ÎÎ 
(
ÎÎ 0
"_parentNewObjectsUnderSceneContext
ÎÎ 2
)
ÎÎ2 3
{
ÏÏ 

_container
ÌÌ 
.
ÌÌ 
DefaultParent
ÌÌ (
=
ÌÌ) *
	transform
ÌÌ+ 4
;
ÌÌ4 5
}
ÓÓ 
else
ÔÔ 
{
 

_container
ÒÒ 
.
ÒÒ 
DefaultParent
ÒÒ (
=
ÒÒ) *
null
ÒÒ+ /
;
ÒÒ/ 0
}
ÚÚ 
var
˘˘ &
injectableMonoBehaviours
˘˘ (
=
˘˘) *
new
˘˘+ .
List
˘˘/ 3
<
˘˘3 4
MonoBehaviour
˘˘4 A
>
˘˘A B
(
˘˘B C
)
˘˘C D
;
˘˘D E)
GetInjectableMonoBehaviours
˙˙ '
(
˙˙' (&
injectableMonoBehaviours
˙˙( @
)
˙˙@ A
;
˙˙A B
foreach
˚˚ 
(
˚˚ 
var
˚˚ 
instance
˚˚ !
in
˚˚" $&
injectableMonoBehaviours
˚˚% =
)
˚˚= >
{
¸¸ 

_container
˝˝ 
.
˝˝ 
QueueForInject
˝˝ )
(
˝˝) *
instance
˝˝* 2
)
˝˝2 3
;
˝˝3 4
}
˛˛ 
foreach
ÄÄ 
(
ÄÄ 
var
ÄÄ 
decoratorContext
ÄÄ )
in
ÄÄ* , 
_decoratorContexts
ÄÄ- ?
)
ÄÄ? @
{
ÅÅ 
decoratorContext
ÇÇ  
.
ÇÇ  !

Initialize
ÇÇ! +
(
ÇÇ+ ,

_container
ÇÇ, 6
)
ÇÇ6 7
;
ÇÇ7 8
}
ÉÉ 

_container
ÖÖ 
.
ÖÖ 
IsInstalling
ÖÖ #
=
ÖÖ$ %
true
ÖÖ& *
;
ÖÖ* +
try
áá 
{
àà 
InstallBindings
ââ 
(
ââ  &
injectableMonoBehaviours
ââ  8
)
ââ8 9
;
ââ9 :
}
ää 
finally
ãã 
{
åå 

_container
çç 
.
çç 
IsInstalling
çç '
=
çç( )
false
çç* /
;
çç/ 0
}
éé 
if
êê 
(
êê 
PostInstall
êê 
!=
êê 
null
êê #
)
êê# $
{
ëë 
PostInstall
íí 
(
íí 
)
íí 
;
íí 
}
ìì 
if
ïï 
(
ïï 
OnPostInstall
ïï 
!=
ïï  
null
ïï! %
)
ïï% &
{
ññ 
OnPostInstall
óó 
.
óó 
Invoke
óó $
(
óó$ %
)
óó% &
;
óó& '
}
òò 
}
ôô 	
public
õõ 
void
õõ 
Resolve
õõ 
(
õõ 
)
õõ 
{
úú 	
if
ùù 
(
ùù 

PreResolve
ùù 
!=
ùù 
null
ùù "
)
ùù" #
{
ûû 

PreResolve
üü 
(
üü 
)
üü 
;
üü 
}
†† 
if
¢¢ 
(
¢¢ 
OnPreResolve
¢¢ 
!=
¢¢ 
null
¢¢  $
)
¢¢$ %
{
££ 
OnPreResolve
§§ 
.
§§ 
Invoke
§§ #
(
§§# $
)
§§$ %
;
§§% &
}
•• 
Assert
ßß 
.
ßß 
That
ßß 
(
ßß 
_hasInstalled
ßß %
)
ßß% &
;
ßß& '
Assert
®® 
.
®® 
That
®® 
(
®® 
!
®® 
_hasResolved
®® %
)
®®% &
;
®®& '
_hasResolved
©© 
=
©© 
true
©© 
;
©©  

_container
´´ 
.
´´ 
ResolveRoots
´´ #
(
´´# $
)
´´$ %
;
´´% &
if
≠≠ 
(
≠≠ 
PostResolve
≠≠ 
!=
≠≠ 
null
≠≠ #
)
≠≠# $
{
ÆÆ 
PostResolve
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
if
≤≤ 
(
≤≤ 
OnPostResolve
≤≤ 
!=
≤≤  
null
≤≤! %
)
≤≤% &
{
≥≥ 
OnPostResolve
¥¥ 
.
¥¥ 
Invoke
¥¥ $
(
¥¥$ %
)
¥¥% &
;
¥¥& '
}
µµ 
}
∂∂ 	
void
∏∏ 
InstallBindings
∏∏ 
(
∏∏ 
List
∏∏ !
<
∏∏! "
MonoBehaviour
∏∏" /
>
∏∏/ 0&
injectableMonoBehaviours
∏∏1 I
)
∏∏I J
{
ππ 	

_container
∫∫ 
.
∫∫ 
Bind
∫∫ 
(
∫∫ 
typeof
∫∫ "
(
∫∫" #
Context
∫∫# *
)
∫∫* +
,
∫∫+ ,
typeof
∫∫- 3
(
∫∫3 4
SceneContext
∫∫4 @
)
∫∫@ A
)
∫∫A B
.
∫∫B C
To
∫∫C E
<
∫∫E F
SceneContext
∫∫F R
>
∫∫R S
(
∫∫S T
)
∫∫T U
.
∫∫U V
FromInstance
∫∫V b
(
∫∫b c
this
∫∫c g
)
∫∫g h
;
∫∫h i

_container
ªª 
.
ªª 
BindInterfacesTo
ªª '
<
ªª' (1
#SceneContextRegistryAdderAndRemover
ªª( K
>
ªªK L
(
ªªL M
)
ªªM N
.
ªªN O
AsSingle
ªªO W
(
ªªW X
)
ªªX Y
;
ªªY Z

_container
ææ 
.
ææ  
BindExecutionOrder
ææ )
<
ææ) *1
#SceneContextRegistryAdderAndRemover
ææ* M
>
ææM N
(
ææN O
-
ææO P
$num
ææP Q
)
ææQ R
;
ææR S
foreach
¿¿ 
(
¿¿ 
var
¿¿ 
decoratorContext
¿¿ )
in
¿¿* , 
_decoratorContexts
¿¿- ?
)
¿¿? @
{
¡¡ 
decoratorContext
¬¬  
.
¬¬  !+
InstallDecoratorSceneBindings
¬¬! >
(
¬¬> ?
)
¬¬? @
;
¬¬@ A
}
√√ "
InstallSceneBindings
≈≈  
(
≈≈  !&
injectableMonoBehaviours
≈≈! 9
)
≈≈9 :
;
≈≈: ;

_container
«« 
.
«« 
Bind
«« 
(
«« 
typeof
«« "
(
««" #
SceneKernel
««# .
)
««. /
,
««/ 0
typeof
««1 7
(
««7 8

MonoKernel
««8 B
)
««B C
)
««C D
.
»» 
To
»» 
<
»» 
SceneKernel
»» 
>
»»  
(
»»  !
)
»»! "
.
»»" # 
FromNewComponentOn
»»# 5
(
»»5 6

gameObject
»»6 @
)
»»@ A
.
»»A B
AsSingle
»»B J
(
»»J K
)
»»K L
.
»»L M
NonLazy
»»M T
(
»»T U
)
»»U V
;
»»V W

_container
   
.
   
Bind
   
<
    
ZenjectSceneLoader
   .
>
  . /
(
  / 0
)
  0 1
.
  1 2
AsSingle
  2 :
(
  : ;
)
  ; <
;
  < =
if
ÃÃ 
(
ÃÃ (
ExtraBindingsInstallMethod
ÃÃ *
!=
ÃÃ+ -
null
ÃÃ. 2
)
ÃÃ2 3
{
ÕÕ (
ExtraBindingsInstallMethod
ŒŒ *
(
ŒŒ* +

_container
ŒŒ+ 5
)
ŒŒ5 6
;
ŒŒ6 7(
ExtraBindingsInstallMethod
–– *
=
––+ ,
null
––- 1
;
––1 2
}
—— 
foreach
’’ 
(
’’ 
var
’’ 
decoratorContext
’’ )
in
’’* , 
_decoratorContexts
’’- ?
)
’’? @
{
÷÷ 
decoratorContext
◊◊  
.
◊◊  !(
InstallDecoratorInstallers
◊◊! ;
(
◊◊; <
)
◊◊< =
;
◊◊= >
}
ÿÿ 
InstallInstallers
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
;
⁄⁄  
foreach
‹‹ 
(
‹‹ 
var
‹‹ 
decoratorContext
‹‹ )
in
‹‹* , 
_decoratorContexts
‹‹- ?
)
‹‹? @
{
›› 
decoratorContext
ﬁﬁ  
.
ﬁﬁ  !,
InstallLateDecoratorInstallers
ﬁﬁ! ?
(
ﬁﬁ? @
)
ﬁﬁ@ A
;
ﬁﬁA B
}
ﬂﬂ 
if
·· 
(
·· ,
ExtraBindingsLateInstallMethod
·· .
!=
··/ 1
null
··2 6
)
··6 7
{
‚‚ ,
ExtraBindingsLateInstallMethod
„„ .
(
„„. /

_container
„„/ 9
)
„„9 :
;
„„: ;,
ExtraBindingsLateInstallMethod
ÂÂ .
=
ÂÂ/ 0
null
ÂÂ1 5
;
ÂÂ5 6
}
ÊÊ 
}
ÁÁ 	
	protected
ÈÈ 
override
ÈÈ 
void
ÈÈ )
GetInjectableMonoBehaviours
ÈÈ  ;
(
ÈÈ; <
List
ÈÈ< @
<
ÈÈ@ A
MonoBehaviour
ÈÈA N
>
ÈÈN O
monoBehaviours
ÈÈP ^
)
ÈÈ^ _
{
ÍÍ 	
var
ÎÎ 
scene
ÎÎ 
=
ÎÎ 

gameObject
ÎÎ "
.
ÎÎ" #
scene
ÎÎ# (
;
ÎÎ( )
ZenUtilInternal
ÌÌ 
.
ÌÌ :
,AddStateMachineBehaviourAutoInjectersInScene
ÌÌ H
(
ÌÌH I
scene
ÌÌI N
)
ÌÌN O
;
ÌÌO P
ZenUtilInternal
ÓÓ 
.
ÓÓ 0
"GetInjectableMonoBehavioursInScene
ÓÓ >
(
ÓÓ> ?
scene
ÓÓ? D
,
ÓÓD E
monoBehaviours
ÓÓF T
)
ÓÓT U
;
ÓÓU V
}
ÔÔ 	
public
ıı 
static
ıı 
SceneContext
ıı "
Create
ıı# )
(
ıı) *
)
ıı* +
{
ˆˆ 	
return
˜˜ 
CreateComponent
˜˜ "
<
˜˜" #
SceneContext
˜˜# /
>
˜˜/ 0
(
˜˜0 1
new
¯¯ 

GameObject
¯¯ 
(
¯¯ 
$str
¯¯ -
)
¯¯- .
)
¯¯. /
;
¯¯/ 0
}
˘˘ 	
}
˙˙ 
}˚˚ Ö9
öC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\Source\Binding\Binders\Factory\FactoryFromBinder\SubContainerBinder\FactorySubContainerBinder2.cs
	namespace 	
Zenject
 
{ 
[ 
NoReflectionBaking 
] 
public 

class %
FactorySubContainerBinder *
<* +
TParam1+ 2
,2 3
TParam24 ;
,; <
	TContract= F
>F G
: 	/
#FactorySubContainerBinderWithParams
 -
<- .
	TContract. 7
>7 8
{ 
public		 %
FactorySubContainerBinder		 (
(		( )
DiContainer

 
bindContainer

 %
,

% &
BindInfo

' /
bindInfo

0 8
,

8 9
FactoryBindInfo

: I
factoryBindInfo

J Y
,

Y Z
object

[ a
subIdentifier

b o
)

o p
: 
base 
( 
bindContainer  
,  !
bindInfo" *
,* +
factoryBindInfo, ;
,; <
subIdentifier= J
)J K
{ 	
} 	
public 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder ;
ByMethod< D
(D E
ActionE K
<K L
DiContainerL W
,W X
TParam1Y `
,` a
TParam2b i
>i j
installerMethodk z
)z {
{ 	
var  
subcontainerBindInfo $
=% &
new' *'
SubContainerCreatorBindInfo+ F
(F G
)G H
;H I
ProviderFunc 
= 
( 
	container 
) 
=> 
new "*
SubContainerDependencyProvider# A
(A B
ContractType  
,  !
SubIdentifier" /
,/ 0
new '
SubContainerCreatorByMethod 3
<3 4
TParam14 ;
,; <
TParam2= D
>D E
(E F
	container !
,! " 
subcontainerBindInfo# 7
,7 8
installerMethod9 H
)H I
,I J
falseK P
)P Q
;Q R
return 
new 8
,ScopeConcreteIdArgConditionCopyNonLazyBinder C
(C D
BindInfoD L
)L M
;M N
} 	
public E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder H!
ByNewGameObjectMethodI ^
(^ _
Action 
< 
DiContainer 
, 
TParam1  '
,' (
TParam2) 0
>0 1
installerMethod2 A
)A B
{ 	
var   
gameObjectInfo   
=    
new  ! $(
GameObjectCreationParameters  % A
(  A B
)  B C
;  C D
ProviderFunc"" 
="" 
(## 
	container## 
)## 
=>## 
new## "*
SubContainerDependencyProvider### A
(##A B
ContractType$$  
,$$  !
SubIdentifier$$" /
,$$/ 0
new%% 4
(SubContainerCreatorByNewGameObjectMethod%% @
<%%@ A
TParam1%%A H
,%%H I
TParam2%%J Q
>%%Q R
(%%R S
	container&& !
,&&! "
gameObjectInfo&&# 1
,&&1 2
installerMethod&&3 B
)&&B C
,&&C D
false&&E J
)&&J K
;&&K L
return(( 
new(( E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(( P
(((P Q
BindInfo((Q Y
,((Y Z
gameObjectInfo(([ i
)((i j
;((j k
})) 	
public++ E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder++ H
ByNewPrefabMethod++I Z
(++Z [
UnityEngine,, 
.,, 
Object,, 
prefab,, %
,,,% &
Action,,' -
<,,- .
DiContainer,,. 9
,,,9 :
TParam1,,; B
,,,B C
TParam2,,D K
>,,K L
installerMethod,,M \
),,\ ]
{-- 	
BindingUtil.. 
... 
AssertIsValidPrefab.. +
(..+ ,
prefab.., 2
)..2 3
;..3 4
var00 
gameObjectInfo00 
=00  
new00! $(
GameObjectCreationParameters00% A
(00A B
)00B C
;00C D
ProviderFunc22 
=22 
(33 
	container33 
)33 
=>33 
new33 "*
SubContainerDependencyProvider33# A
(33A B
ContractType44  
,44  !
SubIdentifier44" /
,44/ 0
new55 0
$SubContainerCreatorByNewPrefabMethod55 <
<55< =
TParam155= D
,55D E
TParam255F M
>55M N
(55N O
	container66 !
,66! "
new77 
PrefabProvider77 *
(77* +
prefab77+ 1
)771 2
,772 3
gameObjectInfo88 &
,88& '
installerMethod88( 7
)887 8
,888 9
false88: ?
)88? @
;88@ A
return:: 
new:: E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder:: P
(::P Q
BindInfo::Q Y
,::Y Z
gameObjectInfo::[ i
)::i j
;::j k
};; 	
public== E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder== H%
ByNewPrefabResourceMethod==I b
(==b c
string>> 
resourcePath>> 
,>>  
Action>>! '
<>>' (
DiContainer>>( 3
,>>3 4
TParam1>>5 <
,>>< =
TParam2>>> E
>>>E F
installerMethod>>G V
)>>V W
{?? 	
BindingUtil@@ 
.@@ %
AssertIsValidResourcePath@@ 1
(@@1 2
resourcePath@@2 >
)@@> ?
;@@? @
varBB 
gameObjectInfoBB 
=BB  
newBB! $(
GameObjectCreationParametersBB% A
(BBA B
)BBB C
;BBC D
ProviderFuncDD 
=DD 
(EE 
	containerEE 
)EE 
=>EE 
newEE "*
SubContainerDependencyProviderEE# A
(EEA B
ContractTypeFF  
,FF  !
SubIdentifierFF" /
,FF/ 0
newGG 0
$SubContainerCreatorByNewPrefabMethodGG <
<GG< =
TParam1GG= D
,GGD E
TParam2GGF M
>GGM N
(GGN O
	containerHH !
,HH! "
newII "
PrefabProviderResourceII 2
(II2 3
resourcePathII3 ?
)II? @
,II@ A
gameObjectInfoJJ &
,JJ& '
installerMethodJJ( 7
)JJ7 8
,JJ8 9
falseJJ: ?
)JJ? @
;JJ@ A
returnLL 
newLL E
9NameTransformScopeConcreteIdArgConditionCopyNonLazyBinderLL P
(LLP Q
BindInfoLLQ Y
,LLY Z
gameObjectInfoLL[ i
)LLi j
;LLj k
}MM 	
}OO 
}PP 