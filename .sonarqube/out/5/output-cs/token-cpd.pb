ö‘
wC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\MemoryPoolMonitor\Editor\DebugWindow\MpmView.cs
	namespace

 	
Zenject


 
.

 
MemoryPoolMonitor

 #
{ 
public 

class 
MpmView 
: 
IGuiRenderable )
,) *
	ITickable+ 4
,4 5
IInitializable6 D
{ 
readonly 
Settings 
	_settings #
;# $
readonly 
	MpmWindow 
_window "
;" #
readonly 
List 
< 
IMemoryPool !
>! "
_pools# )
=* +
new, /
List0 4
<4 5
IMemoryPool5 @
>@ A
(A B
)B C
;C D
const 
int 

NumColumns 
= 
$num  
;  !
static 
string 
[ 
] 
ColumnTitles $
=% &
new' *
string+ 1
[1 2
]2 3
{ 	
$str 
, 
$str $
,$ %
$str& 2
,2 3
$str4 B
,B C
$strD F
,F G
$strH J
} 	
;	 

int 

_controlID 
; 
int 
_sortColumn 
= 
$num 
; 
float 
_scrollPosition 
; 
bool 
_poolListDirty 
; 
bool 
_sortDescending 
; 
	Texture2D 
_rowBackground1 !
;! "
	Texture2D   
_rowBackground2   !
;  ! "
	Texture2D!! %
_rowBackgroundHighlighted!! +
;!!+ ,
	Texture2D"" "
_rowBackgroundSelected"" (
;""( )
	Texture2D## 
_lineTexture## 
;## 
Type$$ 
_selectedPoolType$$ 
;$$ 
string%% 
_searchFilter%% 
=%% 
$str%% !
;%%! "
string&& 
_actualFilter&& 
=&& 
$str&& !
;&&! "
public(( 
MpmView(( 
((( 
	MpmWindow)) 
window)) 
,)) 
Settings** 
settings** 
)** 
{++ 	
	_settings,, 
=,, 
settings,,  
;,,  !
_window-- 
=-- 
window-- 
;-- 
}.. 	
public00 
float00 
	HeaderTop00 
{11 	
get22 
{22 
return22 
	_settings22 "
.22" #
HeaderHeight22# /
+220 1
	_settings222 ;
.22; <
FilterHeight22< H
;22H I
}22J K
}33 	
public55 
float55 

TotalWidth55 
{66 	
get77 
{77 
return77 
_window77  
.77  !
position77! )
.77) *
width77* /
;77/ 0
}771 2
}88 	
public:: 
float:: 
TotalHeight::  
{;; 	
get<< 
{<< 
return<< 
_window<<  
.<<  !
position<<! )
.<<) *
height<<* 0
;<<0 1
}<<2 3
}== 	
string?? 
GetName?? 
(?? 
IMemoryPool?? "
pool??# '
)??' (
{@@ 	
varAA 
typeAA 
=AA 
poolAA 
.AA 
GetTypeAA #
(AA# $
)AA$ %
;AA% &
returnBB 
$strBB 
.BB 
FmtBB  
(BB  !
typeBB! %
.BB% &
	NamespaceBB& /
,BB/ 0
typeBB1 5
.BB5 6

PrettyNameBB6 @
(BB@ A
)BBA B
)BBB C
;BBC D
}CC 	
	Texture2DEE 
CreateColorTextureEE $
(EE$ %
ColorEE% *
colorEE+ 0
)EE0 1
{FF 	
varGG 
textureGG 
=GG 
newGG 
	Texture2DGG '
(GG' (
$numGG( )
,GG) *
$numGG+ ,
)GG, -
;GG- .
textureHH 
.HH 
SetPixelHH 
(HH 
$numHH 
,HH 
$numHH  !
,HH! "
colorHH# (
)HH( )
;HH) *
textureII 
.II 
ApplyII 
(II 
)II 
;II 
returnJJ 
textureJJ 
;JJ 
}KK 	
	Texture2DMM 
RowBackground1MM  
{NN 	
getOO 
{PP 
ifQQ 
(QQ 
_rowBackground1QQ #
==QQ$ &
nullQQ' +
)QQ+ ,
{RR 
_rowBackground1SS #
=SS$ %
CreateColorTextureSS& 8
(SS8 9
	_settingsSS9 B
.SSB C
RowBackground1SSC Q
)SSQ R
;SSR S
}TT 
returnVV 
_rowBackground1VV &
;VV& '
}WW 
}XX 	
	Texture2DZZ 
RowBackground2ZZ  
{[[ 	
get\\ 
{]] 
if^^ 
(^^ 
_rowBackground2^^ #
==^^$ &
null^^' +
)^^+ ,
{__ 
_rowBackground2`` #
=``$ %
CreateColorTexture``& 8
(``8 9
	_settings``9 B
.``B C
RowBackground2``C Q
)``Q R
;``R S
}aa 
returncc 
_rowBackground2cc &
;cc& '
}dd 
}ee 	
	Texture2Dgg $
RowBackgroundHighlightedgg *
{hh 	
getii 
{jj 
ifkk 
(kk %
_rowBackgroundHighlightedkk -
==kk. 0
nullkk1 5
)kk5 6
{ll %
_rowBackgroundHighlightedmm -
=mm. /
CreateColorTexturemm0 B
(mmB C
	_settingsmmC L
.mmL M$
RowBackgroundHighlightedmmM e
)mme f
;mmf g
}nn 
returnpp %
_rowBackgroundHighlightedpp 0
;pp0 1
}qq 
}rr 	
	Texture2Dtt !
RowBackgroundSelectedtt '
{uu 	
getvv 
{ww 
ifxx 
(xx "
_rowBackgroundSelectedxx *
==xx+ -
nullxx. 2
)xx2 3
{yy "
_rowBackgroundSelectedzz *
=zz+ ,
CreateColorTexturezz- ?
(zz? @
	_settingszz@ I
.zzI J!
RowBackgroundSelectedzzJ _
)zz_ `
;zz` a
}{{ 
return}} "
_rowBackgroundSelected}} -
;}}- .
}~~ 
} 	
	Texture2D
ÅÅ 
LineTexture
ÅÅ 
{
ÇÇ 	
get
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
_lineTexture
ÖÖ  
==
ÖÖ! #
null
ÖÖ$ (
)
ÖÖ( )
{
ÜÜ 
_lineTexture
áá  
=
áá! " 
CreateColorTexture
áá# 5
(
áá5 6
	_settings
áá6 ?
.
áá? @
	LineColor
áá@ I
)
ááI J
;
ááJ K
}
àà 
return
ää 
_lineTexture
ää #
;
ää# $
}
ãã 
}
åå 	
public
éé 
void
éé 

Initialize
éé 
(
éé 
)
éé  
{
èè 	&
StaticMemoryPoolRegistry
êê $
.
êê$ %
	PoolAdded
êê% .
+=
êê/ 1
OnPoolListChanged
êê2 C
;
êêC D&
StaticMemoryPoolRegistry
ëë $
.
ëë$ %
PoolRemoved
ëë% 0
+=
ëë1 3
OnPoolListChanged
ëë4 E
;
ëëE F
_poolListDirty
íí 
=
íí 
true
íí !
;
íí! "
}
ìì 	
void
ïï 
OnPoolListChanged
ïï 
(
ïï 
IMemoryPool
ïï *
pool
ïï+ /
)
ïï/ 0
{
ññ 	
_poolListDirty
óó 
=
óó 
true
óó !
;
óó! "
}
òò 	
public
öö 
void
öö 
Tick
öö 
(
öö 
)
öö 
{
õõ 	
if
úú 
(
úú 
_poolListDirty
úú 
)
úú 
{
ùù 
_poolListDirty
ûû 
=
ûû  
false
ûû! &
;
ûû& '
_pools
†† 
.
†† 
Clear
†† 
(
†† 
)
†† 
;
†† 
_pools
°° 
.
°° 
AddRange
°° 
(
°°  &
StaticMemoryPoolRegistry
°°  8
.
°°8 9
Pools
°°9 >
.
°°> ?
Where
°°? D
(
°°D E
ShouldIncludePool
°°E V
)
°°V W
)
°°W X
;
°°X Y
}
¢¢ 
InPlaceStableSort
§§ 
<
§§ 
IMemoryPool
§§ )
>
§§) *
.
§§* +
Sort
§§+ /
(
§§/ 0
_pools
§§0 6
,
§§6 7
ComparePools
§§8 D
)
§§D E
;
§§E F
}
•• 	
bool
ßß 
ShouldIncludePool
ßß 
(
ßß 
IMemoryPool
ßß *
pool
ßß+ /
)
ßß/ 0
{
®® 	
if
∞∞ 
(
∞∞ 
_actualFilter
∞∞ 
.
∞∞ 
IsEmpty
∞∞ %
(
∞∞% &
)
∞∞& '
)
∞∞' (
{
±± 
return
≤≤ 
true
≤≤ 
;
≤≤ 
}
≥≥ 
return
µµ 
GetName
µµ 
(
µµ 
pool
µµ 
)
µµ  
.
µµ  !
ToLowerInvariant
µµ! 1
(
µµ1 2
)
µµ2 3
.
µµ3 4
Contains
µµ4 <
(
µµ< =
_actualFilter
µµ= J
)
µµJ K
;
µµK L
}
∂∂ 	
public
∏∏ 
void
∏∏ 
	GuiRender
∏∏ 
(
∏∏ 
)
∏∏ 
{
ππ 	

_controlID
∫∫ 
=
∫∫ 

GUIUtility
∫∫ #
.
∫∫# $
GetControlID
∫∫$ 0
(
∫∫0 1
	FocusType
∫∫1 :
.
∫∫: ;
Passive
∫∫; B
)
∫∫B C
;
∫∫C D
Rect
ºº 
windowBounds
ºº 
=
ºº 
new
ºº  #
Rect
ºº$ (
(
ºº( )
$num
ºº) *
,
ºº* +
$num
ºº, -
,
ºº- .

TotalWidth
ºº/ 9
,
ºº9 :
_window
ºº; B
.
ººB C
position
ººC K
.
ººK L
height
ººL R
)
ººR S
;
ººS T
Vector2
ææ 
scrollbarSize
ææ !
=
ææ" #
new
ææ$ '
Vector2
ææ( /
(
ææ/ 0
GUI
øø 
.
øø 
skin
øø 
.
øø !
horizontalScrollbar
øø ,
.
øø, -
CalcSize
øø- 5
(
øø5 6

GUIContent
øø6 @
.
øø@ A
none
øøA E
)
øøE F
.
øøF G
y
øøG H
,
øøH I
GUI
¿¿ 
.
¿¿ 
skin
¿¿ 
.
¿¿ 
verticalScrollbar
¿¿ *
.
¿¿* +
CalcSize
¿¿+ 3
(
¿¿3 4

GUIContent
¿¿4 >
.
¿¿> ?
none
¿¿? C
)
¿¿C D
.
¿¿D E
x
¿¿E F
)
¿¿F G
;
¿¿G H
GUI
¬¬ 
.
¬¬ 
Label
¬¬ 
(
¬¬ 
new
¬¬ 
Rect
¬¬ 
(
¬¬ 
$num
√√ 
,
√√ 
$num
√√ 
,
√√ 
	_settings
√√ 
.
√√  
FilterPaddingLeft
√√  1
,
√√1 2
	_settings
√√3 <
.
√√< =
FilterHeight
√√= I
)
√√I J
,
√√J K
$str
√√L U
,
√√U V
	_settings
√√W `
.
√√` a
FilterTextStyle
√√a p
)
√√p q
;
√√q r
var
≈≈ 
searchFilter
≈≈ 
=
≈≈ 
GUI
≈≈ "
.
≈≈" #
	TextField
≈≈# ,
(
≈≈, -
new
∆∆ 
Rect
∆∆ 
(
∆∆ 
	_settings
∆∆ "
.
∆∆" #
FilterPaddingLeft
∆∆# 4
,
∆∆4 5
	_settings
∆∆6 ?
.
∆∆? @
FilterPaddingTop
∆∆@ P
,
∆∆P Q
	_settings
∆∆R [
.
∆∆[ \
FilterWidth
∆∆\ g
,
∆∆g h
	_settings
∆∆i r
.
∆∆r s 
FilterInputHeight∆∆s Ñ
)∆∆Ñ Ö
,∆∆Ö Ü
_searchFilter∆∆á î
,∆∆î ï
$num∆∆ñ ô
)∆∆ô ö
;∆∆ö õ
if
»» 
(
»» 
searchFilter
»» 
!=
»» 
_searchFilter
»»  -
)
»»- .
{
…… 
_searchFilter
   
=
   
searchFilter
    ,
;
  , -
_actualFilter
ÀÀ 
=
ÀÀ 
_searchFilter
ÀÀ  -
.
ÀÀ- .
Trim
ÀÀ. 2
(
ÀÀ2 3
)
ÀÀ3 4
.
ÀÀ4 5
ToLowerInvariant
ÀÀ5 E
(
ÀÀE F
)
ÀÀF G
;
ÀÀG H
_poolListDirty
ÃÃ 
=
ÃÃ  
true
ÃÃ! %
;
ÃÃ% &
}
ÕÕ 
Rect
œœ 
viewArea
œœ 
=
œœ 
new
œœ 
Rect
œœ  $
(
œœ$ %
$num
œœ% &
,
œœ& '
	HeaderTop
œœ( 1
,
œœ1 2

TotalWidth
œœ3 =
-
œœ> ?
scrollbarSize
œœ@ M
.
œœM N
y
œœN O
,
œœO P
_window
œœQ X
.
œœX Y
position
œœY a
.
œœa b
height
œœb h
-
œœi j
	HeaderTop
œœk t
)
œœt u
;
œœu v
Rect
—— 
contentRect
—— 
=
—— 
new
—— "
Rect
——# '
(
——' (
$num
““ 
,
““ 
$num
““ 
,
““ 
viewArea
““ 
.
““ 
width
““ $
,
““$ %
_pools
““& ,
.
““, -
Count
““- 2
(
““2 3
)
““3 4
*
““5 6
	_settings
““7 @
.
““@ A
	RowHeight
““A J
)
““J K
;
““K L
Rect
‘‘ 
vScrRect
‘‘ 
=
‘‘ 
new
‘‘ 
Rect
‘‘  $
(
‘‘$ %
windowBounds
’’ 
.
’’ 
x
’’ 
+
’’  
viewArea
’’! )
.
’’) *
width
’’* /
,
’’/ 0
	HeaderTop
’’1 :
,
’’: ;
scrollbarSize
’’< I
.
’’I J
y
’’J K
,
’’K L
viewArea
’’M U
.
’’U V
height
’’V \
)
’’\ ]
;
’’] ^
_scrollPosition
◊◊ 
=
◊◊ 
GUI
◊◊ !
.
◊◊! "
VerticalScrollbar
◊◊" 3
(
◊◊3 4
vScrRect
ÿÿ 
,
ÿÿ 
_scrollPosition
ÿÿ )
,
ÿÿ) *
viewArea
ÿÿ+ 3
.
ÿÿ3 4
height
ÿÿ4 :
,
ÿÿ: ;
$num
ÿÿ< =
,
ÿÿ= >
contentRect
ÿÿ? J
.
ÿÿJ K
height
ÿÿK Q
)
ÿÿQ R
;
ÿÿR S
DrawColumnHeaders
⁄⁄ 
(
⁄⁄ 
viewArea
⁄⁄ &
.
⁄⁄& '
width
⁄⁄' ,
)
⁄⁄, -
;
⁄⁄- .
GUI
‹‹ 
.
‹‹ 

BeginGroup
‹‹ 
(
‹‹ 
viewArea
‹‹ #
)
‹‹# $
;
‹‹$ %
{
›› 
contentRect
ﬁﬁ 
.
ﬁﬁ 
y
ﬁﬁ 
=
ﬁﬁ 
-
ﬁﬁ  !
_scrollPosition
ﬁﬁ! 0
;
ﬁﬁ0 1
GUI
‡‡ 
.
‡‡ 

BeginGroup
‡‡ 
(
‡‡ 
contentRect
‡‡ *
)
‡‡* +
;
‡‡+ ,
{
·· 
DrawContent
‚‚ 
(
‚‚  
contentRect
‚‚  +
.
‚‚+ ,
width
‚‚, 1
)
‚‚1 2
;
‚‚2 3
}
„„ 
GUI
‰‰ 
.
‰‰ 
EndGroup
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
}
ÂÂ 
GUI
ÊÊ 
.
ÊÊ 
EndGroup
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
HandleEvents
ËË 
(
ËË 
)
ËË 
;
ËË 
}
ÈÈ 	
void
ÎÎ 
DrawColumnHeaders
ÎÎ 
(
ÎÎ 
float
ÎÎ $
width
ÎÎ% *
)
ÎÎ* +
{
ÏÏ 	
GUI
ÌÌ 
.
ÌÌ 
DrawTexture
ÌÌ 
(
ÌÌ 
new
ÌÌ 
Rect
ÌÌ  $
(
ÌÌ$ %
$num
ÓÓ 
,
ÓÓ 
	_settings
ÓÓ 
.
ÓÓ 
FilterHeight
ÓÓ )
-
ÓÓ* +
$num
ÓÓ, 0
*
ÓÓ1 2
	_settings
ÓÓ3 <
.
ÓÓ< =
SplitterWidth
ÓÓ= J
,
ÓÓJ K
width
ÓÓL Q
,
ÓÓQ R
	_settings
ÓÓS \
.
ÓÓ\ ]
SplitterWidth
ÓÓ] j
)
ÓÓj k
,
ÓÓk l
LineTexture
ÓÓm x
)
ÓÓx y
;
ÓÓy z
GUI
 
.
 
DrawTexture
 
(
 
new
 
Rect
  $
(
$ %
$num
ÒÒ 
,
ÒÒ 
	HeaderTop
ÒÒ 
-
ÒÒ 
$num
ÒÒ #
*
ÒÒ$ %
	_settings
ÒÒ& /
.
ÒÒ/ 0
SplitterWidth
ÒÒ0 =
,
ÒÒ= >
width
ÒÒ? D
,
ÒÒD E
	_settings
ÒÒF O
.
ÒÒO P
SplitterWidth
ÒÒP ]
)
ÒÒ] ^
,
ÒÒ^ _
LineTexture
ÒÒ` k
)
ÒÒk l
;
ÒÒl m
var
ÛÛ 
	columnPos
ÛÛ 
=
ÛÛ 
$num
ÛÛ  
;
ÛÛ  !
for
ıı 
(
ıı 
int
ıı 
i
ıı 
=
ıı 
$num
ıı 
;
ıı 
i
ıı 
<
ıı 

NumColumns
ıı  *
;
ıı* +
i
ıı, -
++
ıı- /
)
ıı/ 0
{
ˆˆ 
var
˜˜ 
columnWidth
˜˜ 
=
˜˜  !
GetColumnWidth
˜˜" 0
(
˜˜0 1
i
˜˜1 2
)
˜˜2 3
;
˜˜3 4
DrawColumn1
¯¯ 
(
¯¯ 
i
¯¯ 
,
¯¯ 
	columnPos
¯¯ (
,
¯¯( )
columnWidth
¯¯* 5
)
¯¯5 6
;
¯¯6 7
	columnPos
˘˘ 
+=
˘˘ 
columnWidth
˘˘ (
;
˘˘( )
}
˙˙ 
}
˚˚ 	
void
˝˝ 
DrawColumn1
˝˝ 
(
˝˝ 
int
˛˛ 
index
˛˛ 
,
˛˛ 
float
˛˛ 
position
˛˛ %
,
˛˛% &
float
˛˛' ,
width
˛˛- 2
)
˛˛2 3
{
ˇˇ 	
var
ÄÄ 
columnHeight
ÄÄ 
=
ÄÄ 
	_settings
ÄÄ (
.
ÄÄ( )
HeaderHeight
ÄÄ) 5
+
ÄÄ6 7
_pools
ÄÄ8 >
.
ÄÄ> ?
Count
ÄÄ? D
(
ÄÄD E
)
ÄÄE F
*
ÄÄG H
	_settings
ÄÄI R
.
ÄÄR S
	RowHeight
ÄÄS \
;
ÄÄ\ ]
if
ÇÇ 
(
ÇÇ 
index
ÇÇ 
<
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÉÉ 
GUI
ÑÑ 
.
ÑÑ 
DrawTexture
ÑÑ 
(
ÑÑ  
new
ÑÑ  #
Rect
ÑÑ$ (
(
ÑÑ( )
position
ÖÖ 
+
ÖÖ 
width
ÖÖ $
-
ÖÖ% &
	_settings
ÖÖ' 0
.
ÖÖ0 1
SplitterWidth
ÖÖ1 >
*
ÖÖ? @
$num
ÖÖA E
,
ÖÖE F
	_settings
ÖÖG P
.
ÖÖP Q
FilterHeight
ÖÖQ ]
,
ÖÖ] ^
	_settings
ÜÜ 
.
ÜÜ 
SplitterWidth
ÜÜ +
,
ÜÜ+ ,
columnHeight
ÜÜ- 9
)
ÜÜ9 :
,
ÜÜ: ;
LineTexture
ÜÜ< G
)
ÜÜG H
;
ÜÜH I
}
áá 
var
ââ 
headerBounds
ââ 
=
ââ 
new
ââ "
Rect
ââ# '
(
ââ' (
position
ää 
+
ää 
$num
ää 
*
ää  !
	_settings
ää" +
.
ää+ ,
SplitterWidth
ää, 9
,
ää9 :
	_settings
ãã 
.
ãã 
FilterHeight
ãã &
,
ãã& '
width
åå 
-
åå 
	_settings
åå !
.
åå! "
SplitterWidth
åå" /
,
åå/ 0
	_settings
åå1 :
.
åå: ;
HeaderHeight
åå; G
)
ååG H
;
ååH I
DrawColumnHeader
éé 
(
éé 
index
éé "
,
éé" #
headerBounds
éé$ 0
,
éé0 1
ColumnTitles
éé2 >
[
éé> ?
index
éé? D
]
ééD E
)
ééE F
;
ééF G
}
èè 	
void
ëë 
HandleEvents
ëë 
(
ëë 
)
ëë 
{
íí 	
switch
ìì 
(
ìì 
Event
ìì 
.
ìì 
current
ìì !
.
ìì! "
GetTypeForControl
ìì" 3
(
ìì3 4

_controlID
ìì4 >
)
ìì> ?
)
ìì? @
{
îî 
case
ïï 
	EventType
ïï 
.
ïï 
ScrollWheel
ïï *
:
ïï* +
{
ññ 
_scrollPosition
óó #
=
óó$ %
Mathf
óó& +
.
óó+ ,
Clamp
óó, 1
(
óó1 2
_scrollPosition
óó2 A
+
óóB C
Event
óóD I
.
óóI J
current
óóJ Q
.
óóQ R
delta
óóR W
.
óóW X
y
óóX Y
*
óóZ [
	_settings
óó\ e
.
óóe f
ScrollSpeed
óóf q
,
óóq r
$num
óós t
,
óót u
TotalHeightóóv Å
)óóÅ Ç
;óóÇ É
break
òò 
;
òò 
}
ôô 
case
öö 
	EventType
öö 
.
öö 
	MouseDown
öö (
:
öö( )
{
õõ 
_selectedPoolType
úú %
=
úú& '&
TryGetPoolTypeUnderMouse
úú( @
(
úú@ A
)
úúA B
;
úúB C
break
ùù 
;
ùù 
}
ûû 
}
üü 
}
†† 	
Type
¢¢ &
TryGetPoolTypeUnderMouse
¢¢ %
(
¢¢% &
)
¢¢& '
{
££ 	
var
§§ $
mousePositionInContent
§§ &
=
§§' (
Event
§§) .
.
§§. /
current
§§/ 6
.
§§6 7
mousePosition
§§7 D
+
§§E F
Vector2
§§G N
.
§§N O
up
§§O Q
*
§§R S
_scrollPosition
§§T c
;
§§c d
for
¶¶ 
(
¶¶ 
int
¶¶ 
i
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
i
¶¶ 
<
¶¶ 
_pools
¶¶  &
.
¶¶& '
Count
¶¶' ,
;
¶¶, -
i
¶¶. /
++
¶¶/ 1
)
¶¶1 2
{
ßß 
var
®® 
pool
®® 
=
®® 
_pools
®® !
[
®®! "
i
®®" #
]
®®# $
;
®®$ %
var
™™ 
rowRect
™™ 
=
™™ 
GetPoolRowRect
™™ ,
(
™™, -
i
™™- .
)
™™. /
;
™™/ 0
rowRect
´´ 
.
´´ 
y
´´ 
+=
´´ 
	HeaderTop
´´ &
;
´´& '
if
≠≠ 
(
≠≠ 
rowRect
≠≠ 
.
≠≠ 
Contains
≠≠ $
(
≠≠$ %$
mousePositionInContent
≠≠% ;
)
≠≠; <
)
≠≠< =
{
ÆÆ 
return
ØØ 
pool
ØØ 
.
ØØ  
GetType
ØØ  '
(
ØØ' (
)
ØØ( )
;
ØØ) *
}
∞∞ 
}
±± 
return
≥≥ 
null
≥≥ 
;
≥≥ 
}
¥¥ 	
Rect
∂∂ 
GetPoolRowRect
∂∂ 
(
∂∂ 
int
∂∂ 
index
∂∂  %
)
∂∂% &
{
∑∑ 	
return
∏∏ 
new
∏∏ 
Rect
∏∏ 
(
∏∏ 
$num
ππ 
,
ππ 
index
ππ 
*
ππ 
	_settings
ππ $
.
ππ$ %
	RowHeight
ππ% .
,
ππ. /

TotalWidth
ππ0 :
,
ππ: ;
	_settings
ππ< E
.
ππE F
	RowHeight
ππF O
)
ππO P
;
ππP Q
}
∫∫ 	
void
ºº  
DrawRowBackgrounds
ºº 
(
ºº  
)
ºº  !
{
ΩΩ 	
var
ææ $
mousePositionInContent
ææ &
=
ææ' (
Event
ææ) .
.
ææ. /
current
ææ/ 6
.
ææ6 7
mousePosition
ææ7 D
;
ææD E
for
¿¿ 
(
¿¿ 
int
¿¿ 
i
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
i
¿¿ 
<
¿¿ 
_pools
¿¿  &
.
¿¿& '
Count
¿¿' ,
;
¿¿, -
i
¿¿. /
++
¿¿/ 1
)
¿¿1 2
{
¡¡ 
var
¬¬ 
pool
¬¬ 
=
¬¬ 
_pools
¬¬ !
[
¬¬! "
i
¬¬" #
]
¬¬# $
;
¬¬$ %
var
√√ 
rowRect
√√ 
=
√√ 
GetPoolRowRect
√√ ,
(
√√, -
i
√√- .
)
√√. /
;
√√/ 0
	Texture2D
≈≈ 

background
≈≈ $
;
≈≈$ %
if
«« 
(
«« 
pool
«« 
.
«« 
GetType
««  
(
««  !
)
««! "
==
««# %
_selectedPoolType
««& 7
)
««7 8
{
»» 

background
…… 
=
……  #
RowBackgroundSelected
……! 6
;
……6 7
}
   
else
ÀÀ 
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
rowRect
ÕÕ 
.
ÕÕ  
Contains
ÕÕ  (
(
ÕÕ( )$
mousePositionInContent
ÕÕ) ?
)
ÕÕ? @
)
ÕÕ@ A
{
ŒŒ 

background
œœ "
=
œœ# $&
RowBackgroundHighlighted
œœ% =
;
œœ= >
}
–– 
else
—— 
if
—— 
(
—— 
i
—— 
%
——  
$num
——! "
==
——# %
$num
——& '
)
——' (
{
““ 

background
”” "
=
””# $
RowBackground1
””% 3
;
””3 4
}
‘‘ 
else
’’ 
{
÷÷ 

background
◊◊ "
=
◊◊# $
RowBackground2
◊◊% 3
;
◊◊3 4
}
ÿÿ 
}
ŸŸ 
GUI
€€ 
.
€€ 
DrawTexture
€€ 
(
€€  
rowRect
€€  '
,
€€' (

background
€€) 3
)
€€3 4
;
€€4 5
}
‹‹ 
}
›› 	
float
ﬂﬂ 
GetColumnWidth
ﬂﬂ 
(
ﬂﬂ 
int
ﬂﬂ  
index
ﬂﬂ! &
)
ﬂﬂ& '
{
‡‡ 	
if
·· 
(
·· 
index
·· 
==
·· 
$num
·· 
)
·· 
{
‚‚ 
return
„„ 

TotalWidth
„„ !
-
„„" #
(
„„$ %

NumColumns
„„% /
-
„„0 1
$num
„„2 3
)
„„3 4
*
„„5 6
	_settings
„„7 @
.
„„@ A
NormalColumnWidth
„„A R
;
„„R S
}
‰‰ 
return
ÊÊ 
	_settings
ÊÊ 
.
ÊÊ 
NormalColumnWidth
ÊÊ .
;
ÊÊ. /
}
ÁÁ 	
void
ÈÈ 
DrawContent
ÈÈ 
(
ÈÈ 
float
ÈÈ 
width
ÈÈ $
)
ÈÈ$ %
{
ÍÍ 	 
DrawRowBackgrounds
ÎÎ 
(
ÎÎ 
)
ÎÎ  
;
ÎÎ  !
var
ÌÌ 
	columnPos
ÌÌ 
=
ÌÌ 
$num
ÌÌ  
;
ÌÌ  !
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
i
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
i
ÔÔ 
<
ÔÔ 

NumColumns
ÔÔ  *
;
ÔÔ* +
i
ÔÔ, -
++
ÔÔ- /
)
ÔÔ/ 0
{
 
var
ÒÒ 
columnWidth
ÒÒ 
=
ÒÒ  !
GetColumnWidth
ÒÒ" 0
(
ÒÒ0 1
i
ÒÒ1 2
)
ÒÒ2 3
;
ÒÒ3 4

DrawColumn
ÚÚ 
(
ÚÚ 
i
ÚÚ 
,
ÚÚ 
	columnPos
ÚÚ '
,
ÚÚ' (
columnWidth
ÚÚ) 4
)
ÚÚ4 5
;
ÚÚ5 6
	columnPos
ÛÛ 
+=
ÛÛ 
columnWidth
ÛÛ (
;
ÛÛ( )
}
ÙÙ 
}
ıı 	
void
˜˜ 

DrawColumn
˜˜ 
(
˜˜ 
int
¯¯ 
index
¯¯ 
,
¯¯ 
float
¯¯ 
position
¯¯ %
,
¯¯% &
float
¯¯' ,
width
¯¯- 2
)
¯¯2 3
{
˘˘ 	
var
˙˙ 
columnHeight
˙˙ 
=
˙˙ 
	_settings
˙˙ (
.
˙˙( )
HeaderHeight
˙˙) 5
+
˙˙6 7
_pools
˙˙8 >
.
˙˙> ?
Count
˙˙? D
(
˙˙D E
)
˙˙E F
*
˙˙G H
	_settings
˙˙I R
.
˙˙R S
	RowHeight
˙˙S \
;
˙˙\ ]
if
¸¸ 
(
¸¸ 
index
¸¸ 
<
¸¸ 
$num
¸¸ 
)
¸¸ 
{
˝˝ 
GUI
˛˛ 
.
˛˛ 
DrawTexture
˛˛ 
(
˛˛  
new
˛˛  #
Rect
˛˛$ (
(
˛˛( )
position
ˇˇ 
+
ˇˇ 
width
ˇˇ $
-
ˇˇ% &
	_settings
ˇˇ' 0
.
ˇˇ0 1
SplitterWidth
ˇˇ1 >
*
ˇˇ? @
$num
ˇˇA E
,
ˇˇE F
$num
ˇˇG H
,
ˇˇH I
	_settings
ÄÄ 
.
ÄÄ 
SplitterWidth
ÄÄ +
,
ÄÄ+ ,
columnHeight
ÄÄ- 9
)
ÄÄ9 :
,
ÄÄ: ;
LineTexture
ÄÄ< G
)
ÄÄG H
;
ÄÄH I
}
ÅÅ 
var
ÉÉ 
columnBounds
ÉÉ 
=
ÉÉ 
new
ÉÉ "
Rect
ÉÉ# '
(
ÉÉ' (
position
ÑÑ 
+
ÑÑ 
$num
ÑÑ 
*
ÑÑ  !
	_settings
ÑÑ" +
.
ÑÑ+ ,
SplitterWidth
ÑÑ, 9
,
ÑÑ9 :
$num
ÑÑ; <
,
ÑÑ< =
width
ÑÑ> C
-
ÑÑD E
	_settings
ÑÑF O
.
ÑÑO P
SplitterWidth
ÑÑP ]
,
ÑÑ] ^
columnHeight
ÑÑ_ k
)
ÑÑk l
;
ÑÑl m
GUI
ÜÜ 
.
ÜÜ 

BeginGroup
ÜÜ 
(
ÜÜ 
columnBounds
ÜÜ '
)
ÜÜ' (
;
ÜÜ( )
{
áá 
for
àà 
(
àà 
int
àà 
i
àà 
=
àà 
$num
àà 
;
àà 
i
àà  !
<
àà" #
_pools
àà$ *
.
àà* +
Count
àà+ 0
;
àà0 1
i
àà2 3
++
àà3 5
)
àà5 6
{
ââ 
var
ää 
pool
ää 
=
ää 
_pools
ää %
[
ää% &
i
ää& '
]
ää' (
;
ää( )
var
åå 

cellBounds
åå "
=
åå# $
new
åå% (
Rect
åå) -
(
åå- .
$num
çç 
,
çç 
	_settings
çç $
.
çç$ %
	RowHeight
çç% .
*
çç/ 0
i
çç1 2
,
çç2 3
columnBounds
éé $
.
éé$ %
width
éé% *
,
éé* +
	_settings
éé, 5
.
éé5 6
	RowHeight
éé6 ?
)
éé? @
;
éé@ A 
DrawColumnContents
êê &
(
êê& '
index
êê' ,
,
êê, -

cellBounds
êê. 8
,
êê8 9
pool
êê: >
)
êê> ?
;
êê? @
}
ëë 
}
íí 
GUI
ìì 
.
ìì 
EndGroup
ìì 
(
ìì 
)
ìì 
;
ìì 
}
îî 	
void
ññ  
DrawColumnContents
ññ 
(
ññ  
int
óó 
index
óó 
,
óó 
Rect
óó 
bounds
óó "
,
óó" #
IMemoryPool
óó$ /
pool
óó0 4
)
óó4 5
{
òò 	
switch
ôô 
(
ôô 
index
ôô 
)
ôô 
{
öö 
case
õõ 
$num
õõ 
:
õõ 
{
úú 
GUI
ùù 
.
ùù 
Label
ùù 
(
ùù 
bounds
ùù $
,
ùù$ %
GetName
ùù& -
(
ùù- .
pool
ùù. 2
)
ùù2 3
,
ùù3 4
	_settings
ùù5 >
.
ùù> ?"
ContentNameTextStyle
ùù? S
)
ùùS T
;
ùùT U
break
ûû 
;
ûû 
}
üü 
case
†† 
$num
†† 
:
†† 
{
°° 
GUI
¢¢ 
.
¢¢ 
Label
¢¢ 
(
¢¢ 
bounds
¢¢ $
,
¢¢$ %
pool
¢¢& *
.
¢¢* +
NumTotal
¢¢+ 3
.
¢¢3 4
ToString
¢¢4 <
(
¢¢< =
)
¢¢= >
,
¢¢> ?
	_settings
¢¢@ I
.
¢¢I J$
ContentNumberTextStyle
¢¢J `
)
¢¢` a
;
¢¢a b
break
££ 
;
££ 
}
§§ 
case
•• 
$num
•• 
:
•• 
{
¶¶ 
GUI
ßß 
.
ßß 
Label
ßß 
(
ßß 
bounds
ßß $
,
ßß$ %
pool
ßß& *
.
ßß* +
	NumActive
ßß+ 4
.
ßß4 5
ToString
ßß5 =
(
ßß= >
)
ßß> ?
,
ßß? @
	_settings
ßßA J
.
ßßJ K$
ContentNumberTextStyle
ßßK a
)
ßßa b
;
ßßb c
break
®® 
;
®® 
}
©© 
case
™™ 
$num
™™ 
:
™™ 
{
´´ 
GUI
¨¨ 
.
¨¨ 
Label
¨¨ 
(
¨¨ 
bounds
¨¨ $
,
¨¨$ %
pool
¨¨& *
.
¨¨* +
NumInactive
¨¨+ 6
.
¨¨6 7
ToString
¨¨7 ?
(
¨¨? @
)
¨¨@ A
,
¨¨A B
	_settings
¨¨C L
.
¨¨L M$
ContentNumberTextStyle
¨¨M c
)
¨¨c d
;
¨¨d e
break
≠≠ 
;
≠≠ 
}
ÆÆ 
case
ØØ 
$num
ØØ 
:
ØØ 
{
∞∞ 
var
±± 
buttonBounds
±± $
=
±±% &
new
±±' *
Rect
±±+ /
(
±±/ 0
bounds
≤≤ 
.
≤≤ 
x
≤≤  
+
≤≤! "
	_settings
≤≤# ,
.
≤≤, -
ButtonMargin
≤≤- 9
,
≤≤9 :
bounds
≤≤; A
.
≤≤A B
y
≤≤B C
,
≤≤C D
bounds
≤≤E K
.
≤≤K L
width
≤≤L Q
-
≤≤R S
	_settings
≤≤T ]
.
≤≤] ^
ButtonMargin
≤≤^ j
,
≤≤j k
bounds
≤≤l r
.
≤≤r s
height
≤≤s y
)
≤≤y z
;
≤≤z {
if
¥¥ 
(
¥¥ 
GUI
¥¥ 
.
¥¥ 
Button
¥¥ "
(
¥¥" #
buttonBounds
¥¥# /
,
¥¥/ 0
$str
¥¥1 8
)
¥¥8 9
)
¥¥9 :
{
µµ 
pool
∂∂ 
.
∂∂ 
Clear
∂∂ "
(
∂∂" #
)
∂∂# $
;
∂∂$ %
}
∑∑ 
break
∏∏ 
;
∏∏ 
}
ππ 
case
∫∫ 
$num
∫∫ 
:
∫∫ 
{
ªª 
var
ºº 
buttonBounds
ºº $
=
ºº% &
new
ºº' *
Rect
ºº+ /
(
ºº/ 0
bounds
ΩΩ 
.
ΩΩ 
x
ΩΩ  
,
ΩΩ  !
bounds
ΩΩ" (
.
ΩΩ( )
y
ΩΩ) *
,
ΩΩ* +
bounds
ΩΩ, 2
.
ΩΩ2 3
width
ΩΩ3 8
-
ΩΩ9 :
$num
ΩΩ; @
,
ΩΩ@ A
bounds
ΩΩB H
.
ΩΩH I
height
ΩΩI O
)
ΩΩO P
;
ΩΩP Q
if
øø 
(
øø 
GUI
øø 
.
øø 
Button
øø "
(
øø" #
buttonBounds
øø# /
,
øø/ 0
$str
øø1 9
)
øø9 :
)
øø: ;
{
¿¿ 
pool
¡¡ 
.
¡¡ 
ExpandBy
¡¡ %
(
¡¡% &
$num
¡¡& '
)
¡¡' (
;
¡¡( )
}
¬¬ 
break
√√ 
;
√√ 
}
ƒƒ 
default
≈≈ 
:
≈≈ 
{
∆∆ 
throw
«« 
Assert
««  
.
««  !
CreateException
««! 0
(
««0 1
)
««1 2
;
««2 3
}
»» 
}
…… 
}
   	
void
ÃÃ 
DrawColumnHeader
ÃÃ 
(
ÃÃ 
int
ÃÃ !
index
ÃÃ" '
,
ÃÃ' (
Rect
ÃÃ) -
bounds
ÃÃ. 4
,
ÃÃ4 5
string
ÃÃ6 <
text
ÃÃ= A
)
ÃÃA B
{
ÕÕ 	
if
ŒŒ 
(
ŒŒ 
index
ŒŒ 
>
ŒŒ 
$num
ŒŒ 
)
ŒŒ 
{
œœ 
return
–– 
;
–– 
}
—— 
if
”” 
(
”” 
_sortColumn
”” 
==
”” 
index
”” $
)
””$ %
{
‘‘ 
var
’’ 
offset
’’ 
=
’’ 
	_settings
’’ &
.
’’& '
TriangleOffset
’’' 5
;
’’5 6
var
÷÷ 
image
÷÷ 
=
÷÷ 
_sortDescending
÷÷ +
?
÷÷, -
	_settings
÷÷. 7
.
÷÷7 8
TriangleDown
÷÷8 D
:
÷÷E F
	_settings
÷÷G P
.
÷÷P Q

TriangleUp
÷÷Q [
;
÷÷[ \
GUI
ÿÿ 
.
ÿÿ 
DrawTexture
ÿÿ 
(
ÿÿ  
new
ÿÿ  #
Rect
ÿÿ$ (
(
ÿÿ( )
bounds
ÿÿ) /
.
ÿÿ/ 0
x
ÿÿ0 1
+
ÿÿ2 3
offset
ÿÿ4 :
.
ÿÿ: ;
x
ÿÿ; <
,
ÿÿ< =
bounds
ÿÿ> D
.
ÿÿD E
y
ÿÿE F
+
ÿÿG H
offset
ÿÿI O
.
ÿÿO P
y
ÿÿP Q
,
ÿÿQ R
image
ÿÿS X
.
ÿÿX Y
width
ÿÿY ^
,
ÿÿ^ _
image
ÿÿ` e
.
ÿÿe f
height
ÿÿf l
)
ÿÿl m
,
ÿÿm n
image
ÿÿo t
)
ÿÿt u
;
ÿÿu v
}
ŸŸ 
if
€€ 
(
€€ 
GUI
€€ 
.
€€ 
Button
€€ 
(
€€ 
bounds
€€ !
,
€€! "
text
€€# '
,
€€' (
index
€€) .
==
€€/ 1
$num
€€2 3
?
€€4 5
	_settings
€€6 ?
.
€€? @!
HeaderTextStyleName
€€@ S
:
€€T U
	_settings
€€V _
.
€€_ `
HeaderTextStyle
€€` o
)
€€o p
)
€€p q
{
‹‹ 
if
›› 
(
›› 
_sortColumn
›› 
==
››  "
index
››# (
)
››( )
{
ﬁﬁ 
_sortDescending
ﬂﬂ #
=
ﬂﬂ$ %
!
ﬂﬂ& '
_sortDescending
ﬂﬂ' 6
;
ﬂﬂ6 7
}
‡‡ 
else
·· 
{
‚‚ 
_sortColumn
„„ 
=
„„  !
index
„„" '
;
„„' (
}
‰‰ 
}
ÂÂ 
}
ÊÊ 	
int
ËË 
ComparePools
ËË 
(
ËË 
IMemoryPool
ËË $
left
ËË% )
,
ËË) *
IMemoryPool
ËË+ 6
right
ËË7 <
)
ËË< =
{
ÈÈ 	
if
ÍÍ 
(
ÍÍ 
_sortDescending
ÍÍ 
)
ÍÍ  
{
ÎÎ 
var
ÏÏ 
temp
ÏÏ 
=
ÏÏ 
right
ÏÏ  
;
ÏÏ  !
right
ÌÌ 
=
ÌÌ 
left
ÌÌ 
;
ÌÌ 
left
ÓÓ 
=
ÓÓ 
temp
ÓÓ 
;
ÓÓ 
}
ÔÔ 
switch
ÒÒ 
(
ÒÒ 
_sortColumn
ÒÒ 
)
ÒÒ  
{
ÚÚ 
case
ÛÛ 
$num
ÛÛ 
:
ÛÛ 
case
ÙÙ 
$num
ÙÙ 
:
ÙÙ 
case
ıı 
$num
ıı 
:
ıı 
{
ˆˆ 
return
˜˜ 
GetName
˜˜ "
(
˜˜" #
left
˜˜# '
)
˜˜' (
.
˜˜( )
	CompareTo
˜˜) 2
(
˜˜2 3
GetName
˜˜3 :
(
˜˜: ;
right
˜˜; @
)
˜˜@ A
)
˜˜A B
;
˜˜B C
}
¯¯ 
case
˘˘ 
$num
˘˘ 
:
˘˘ 
{
˙˙ 
return
˚˚ 
left
˚˚ 
.
˚˚  
NumTotal
˚˚  (
.
˚˚( )
	CompareTo
˚˚) 2
(
˚˚2 3
right
˚˚3 8
.
˚˚8 9
NumTotal
˚˚9 A
)
˚˚A B
;
˚˚B C
}
¸¸ 
case
˝˝ 
$num
˝˝ 
:
˝˝ 
{
˛˛ 
return
ˇˇ 
left
ˇˇ 
.
ˇˇ  
	NumActive
ˇˇ  )
.
ˇˇ) *
	CompareTo
ˇˇ* 3
(
ˇˇ3 4
right
ˇˇ4 9
.
ˇˇ9 :
	NumActive
ˇˇ: C
)
ˇˇC D
;
ˇˇD E
}
ÄÄ 
case
ÅÅ 
$num
ÅÅ 
:
ÅÅ 
{
ÇÇ 
return
ÉÉ 
left
ÉÉ 
.
ÉÉ  
NumInactive
ÉÉ  +
.
ÉÉ+ ,
	CompareTo
ÉÉ, 5
(
ÉÉ5 6
right
ÉÉ6 ;
.
ÉÉ; <
NumInactive
ÉÉ< G
)
ÉÉG H
;
ÉÉH I
}
ÑÑ 
}
ÖÖ 
throw
áá 
Assert
áá 
.
áá 
CreateException
áá (
(
áá( )
)
áá) *
;
áá* +
}
àà 	
[
ää 	
Serializable
ää	 
]
ää 
public
ãã 
class
ãã 
Settings
ãã 
{
åå 	
public
çç 
	Texture2D
çç 

TriangleUp
çç '
;
çç' (
public
éé 
	Texture2D
éé 
TriangleDown
éé )
;
éé) *
public
èè 
Vector2
èè 
TriangleOffset
èè )
;
èè) *
public
ëë 
GUIStyle
ëë 
FilterTextStyle
ëë +
;
ëë+ ,
public
íí 
GUIStyle
íí !
HeaderTextStyleName
íí /
;
íí/ 0
public
ìì 
GUIStyle
ìì 
HeaderTextStyle
ìì +
;
ìì+ ,
public
îî 
GUIStyle
îî $
ContentNumberTextStyle
îî 2
;
îî2 3
public
ïï 
GUIStyle
ïï "
ContentNameTextStyle
ïï 0
;
ïï0 1
public
óó 
Color
óó 
RowBackground1
óó '
;
óó' (
public
òò 
Color
òò 
RowBackground2
òò '
;
òò' (
public
ôô 
Color
ôô &
RowBackgroundHighlighted
ôô 1
;
ôô1 2
public
öö 
Color
öö #
RowBackgroundSelected
öö .
;
öö. /
public
õõ 
Color
õõ 
	LineColor
õõ "
;
õõ" #
public
ùù 
float
ùù 
ScrollSpeed
ùù $
=
ùù% &
$num
ùù' +
;
ùù+ ,
public
ûû 
float
ûû 
NormalColumnWidth
ûû *
;
ûû* +
public
üü 
float
üü 
HeaderHeight
üü %
;
üü% &
public
†† 
float
†† 
FilterHeight
†† %
;
††% &
public
°° 
float
°° 
FilterInputHeight
°° *
;
°°* +
public
¢¢ 
float
¢¢ 
FilterWidth
¢¢ $
;
¢¢$ %
public
££ 
float
££ 
FilterPaddingLeft
££ *
;
££* +
public
§§ 
float
§§ 
FilterPaddingTop
§§ )
=
§§* +
$num
§§, .
;
§§. /
public
¶¶ 
float
¶¶ 
SplitterWidth
¶¶ &
;
¶¶& '
public
ßß 
float
ßß 
	RowHeight
ßß "
;
ßß" #
public
©© 
float
©© 
ButtonMargin
©© %
=
©©& '
$num
©©( )
;
©©) *
}
™™ 	
}
´´ 
}¨¨ ˜Ç
ÅC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\MemoryPoolMonitor\Editor\DebugWindow\InPlaceStableSort.cs
	namespace 	
Zenject
 
. 
MemoryPoolMonitor #
{ 
public		 

class		 
InPlaceStableSort		 "
<		" #
T		# $
>		$ %
{

 
static 
void 
Exchange 
( 
List !
<! "
T" #
># $
list% )
,) *
int+ .
a/ 0
,0 1
int2 5
b6 7
)7 8
{ 	
var 
temp 
= 
list 
[ 
a 
] 
; 
list 
[ 
a 
] 
= 
list 
[ 
b 
] 
; 
list 
[ 
b 
] 
= 
temp 
; 
} 	
static 
int 
Lower 
( 
List 
< 
T 
>  
list! %
,% &

Comparison' 1
<1 2
T2 3
>3 4
comparer5 =
,= >
int? B
fromC G
,G H
intI L
toM O
,O P
intQ T
valU X
)X Y
{ 	
int 
len 
= 
to 
- 
from 
,  
half! %
;% &
while 
( 
len 
> 
$num 
) 
{ 
half 
= 
len 
/ 
$num 
; 
int 
mid 
= 
from 
+  
half! %
;% &
if 
( 
comparer 
( 
list !
[! "
mid" %
]% &
,& '
list( ,
[, -
val- 0
]0 1
)1 2
<3 4
$num5 6
)6 7
{ 
from 
= 
mid 
+  
$num! "
;" #
len 
= 
len 
- 
half  $
-% &
$num' (
;( )
} 
else 
{ 
len   
=   
half   
;   
}!! 
}"" 
return## 
from## 
;## 
}$$ 	
static&& 
int&& 
Upper&& 
(&& 
List&& 
<&& 
T&& 
>&&  
list&&! %
,&&% &

Comparison&&' 1
<&&1 2
T&&2 3
>&&3 4
comparer&&5 =
,&&= >
int&&? B
from&&C G
,&&G H
int&&I L
to&&M O
,&&O P
int&&Q T
val&&U X
)&&X Y
{'' 	
int(( 
len(( 
=(( 
to(( 
-(( 
from(( 
,((  
half((! %
;((% &
while)) 
()) 
len)) 
>)) 
$num)) 
))) 
{** 
half++ 
=++ 
len++ 
/++ 
$num++ 
;++ 
int,, 
mid,, 
=,, 
from,, 
+,,  
half,,! %
;,,% &
if-- 
(-- 
comparer-- 
(-- 
list-- !
[--! "
val--" %
]--% &
,--& '
list--( ,
[--, -
mid--- 0
]--0 1
)--1 2
<--3 4
$num--5 6
)--6 7
{.. 
len// 
=// 
half// 
;// 
}00 
else11 
{22 
from33 
=33 
mid33 
+33  
$num33! "
;33" #
len44 
=44 
len44 
-44 
half44  $
-44% &
$num44' (
;44( )
}55 
}66 
return77 
from77 
;77 
}88 	
static:: 
void:: 

InsertSort:: 
(:: 
List:: #
<::# $
T::$ %
>::% &
list::' +
,::+ ,

Comparison::- 7
<::7 8
T::8 9
>::9 :
comparer::; C
,::C D
int::E H
from::I M
,::M N
int::O R
to::S U
)::U V
{;; 	
if<< 
(<< 
to<< 
><< 
from<< 
+<< 
$num<< 
)<< 
{== 
for>> 
(>> 
int>> 
i>> 
=>> 
from>> !
+>>" #
$num>>$ %
;>>% &
i>>' (
<>>) *
to>>+ -
;>>- .
i>>/ 0
++>>0 2
)>>2 3
{?? 
for@@ 
(@@ 
int@@ 
j@@ 
=@@  
i@@! "
;@@" #
j@@$ %
>@@& '
from@@( ,
;@@, -
j@@. /
--@@/ 1
)@@1 2
{AA 
ifBB 
(BB 
comparerBB $
(BB$ %
listBB% )
[BB) *
jBB* +
]BB+ ,
,BB, -
listBB. 2
[BB2 3
jBB3 4
-BB5 6
$numBB7 8
]BB8 9
)BB9 :
<BB; <
$numBB= >
)BB> ?
{CC 
ExchangeDD $
(DD$ %
listDD% )
,DD) *
jDD+ ,
,DD, -
jDD. /
-DD0 1
$numDD2 3
)DD3 4
;DD4 5
}EE 
elseFF 
{GG 
breakHH !
;HH! "
}II 
}JJ 
}KK 
}LL 
}MM 	
staticOO 
intOO 
GcdOO 
(OO 
intOO 
mOO 
,OO 
intOO !
nOO" #
)OO# $
{PP 	
whileQQ 
(QQ 
nQQ 
!=QQ 
$numQQ 
)QQ 
{RR 
intSS 
tSS 
=SS 
mSS 
%SS 
nSS 
;SS 
mTT 
=TT 
nTT 
;TT 
nUU 
=UU 
tUU 
;UU 
}VV 
returnWW 
mWW 
;WW 
}XX 	
staticZZ 
voidZZ 
ReverseZZ 
(ZZ 
ListZZ  
<ZZ  !
TZZ! "
>ZZ" #
listZZ$ (
,ZZ( )
intZZ* -
fromZZ. 2
,ZZ2 3
intZZ4 7
toZZ8 :
)ZZ: ;
{[[ 	
while\\ 
(\\ 
from\\ 
<\\ 
to\\ 
)\\ 
{]] 
Exchange^^ 
(^^ 
list^^ 
,^^ 
from^^ #
++^^# %
,^^% &
to^^' )
--^^) +
)^^+ ,
;^^, -
}__ 
}`` 	
staticbb 
voidbb 
Rotatebb 
(bb 
Listbb 
<bb  
Tbb  !
>bb! "
listbb# '
,bb' (

Comparisonbb) 3
<bb3 4
Tbb4 5
>bb5 6
comparerbb7 ?
,bb? @
intbbA D
frombbE I
,bbI J
intbbK N
midbbO R
,bbR S
intbbT W
tobbX Z
)bbZ [
{cc 	
ifii 
(ii 
fromii 
==ii 
midii 
||ii 
midii "
==ii# %
toii& (
)ii( )
{jj 
returnkk 
;kk 
}ll 
intmm 
nmm 
=mm 
Gcdmm 
(mm 
tomm 
-mm 
frommm !
,mm! "
midmm# &
-mm' (
frommm) -
)mm- .
;mm. /
whilenn 
(nn 
nnn 
--nn 
!=nn 
$numnn 
)nn 
{oo 
Tpp 
valpp 
=pp 
listpp 
[pp 
frompp !
+pp" #
npp$ %
]pp% &
;pp& '
intqq 
shiftqq 
=qq 
midqq 
-qq  !
fromqq" &
;qq& '
intrr 
p1rr 
=rr 
fromrr 
+rr 
nrr  !
,rr! "
p2rr# %
=rr& '
fromrr( ,
+rr- .
nrr/ 0
+rr1 2
shiftrr3 8
;rr8 9
whiless 
(ss 
p2ss 
!=ss 
fromss !
+ss" #
nss$ %
)ss% &
{tt 
listuu 
[uu 
p1uu 
]uu 
=uu 
listuu #
[uu# $
p2uu$ &
]uu& '
;uu' (
p1vv 
=vv 
p2vv 
;vv 
ifww 
(ww 
toww 
-ww 
p2ww 
>ww  !
shiftww" '
)ww' (
{xx 
p2yy 
+=yy 
shiftyy #
;yy# $
}zz 
else{{ 
{|| 
p2}} 
=}} 
from}} !
+}}" #
(}}$ %
shift}}% *
-}}+ ,
(}}- .
to}}. 0
-}}1 2
p2}}3 5
)}}5 6
)}}6 7
;}}7 8
}~~ 
} 
list
ÄÄ 
[
ÄÄ 
p1
ÄÄ 
]
ÄÄ 
=
ÄÄ 
val
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
static
ÑÑ 
void
ÑÑ 
Merge
ÑÑ 
(
ÑÑ 
List
ÑÑ 
<
ÑÑ 
T
ÑÑ  
>
ÑÑ  !
list
ÑÑ" &
,
ÑÑ& '

Comparison
ÑÑ( 2
<
ÑÑ2 3
T
ÑÑ3 4
>
ÑÑ4 5
comparer
ÑÑ6 >
,
ÑÑ> ?
int
ÑÑ@ C
from
ÑÑD H
,
ÑÑH I
int
ÑÑJ M
pivot
ÑÑN S
,
ÑÑS T
int
ÑÑU X
to
ÑÑY [
,
ÑÑ[ \
int
ÑÑ] `
len1
ÑÑa e
,
ÑÑe f
int
ÑÑg j
len2
ÑÑk o
)
ÑÑo p
{
ÖÖ 	
if
ÜÜ 
(
ÜÜ 
len1
ÜÜ 
==
ÜÜ 
$num
ÜÜ 
||
ÜÜ 
len2
ÜÜ !
==
ÜÜ" $
$num
ÜÜ% &
)
ÜÜ& '
{
áá 
return
àà 
;
àà 
}
ââ 
if
ãã 
(
ãã 
len1
ãã 
+
ãã 
len2
ãã 
==
ãã 
$num
ãã  
)
ãã  !
{
åå 
if
çç 
(
çç 
comparer
çç 
(
çç 
list
çç !
[
çç! "
pivot
çç" '
]
çç' (
,
çç( )
list
çç* .
[
çç. /
from
çç/ 3
]
çç3 4
)
çç4 5
<
çç6 7
$num
çç8 9
)
çç9 :
{
éé 
Exchange
èè 
(
èè 
list
èè !
,
èè! "
pivot
èè# (
,
èè( )
from
èè* .
)
èè. /
;
èè/ 0
}
êê 
return
íí 
;
íí 
}
ìì 
int
ïï 
	first_cut
ïï 
,
ïï 

second_cut
ïï %
;
ïï% &
int
ññ 
len11
ññ 
,
ññ 
len22
ññ 
;
ññ 
if
òò 
(
òò 
len1
òò 
>
òò 
len2
òò 
)
òò 
{
ôô 
len11
öö 
=
öö 
len1
öö 
/
öö 
$num
öö  
;
öö  !
	first_cut
õõ 
=
õõ 
from
õõ  
+
õõ! "
len11
õõ# (
;
õõ( )

second_cut
úú 
=
úú 
Lower
úú "
(
úú" #
list
úú# '
,
úú' (
comparer
úú) 1
,
úú1 2
pivot
úú3 8
,
úú8 9
to
úú: <
,
úú< =
	first_cut
úú> G
)
úúG H
;
úúH I
len22
ùù 
=
ùù 

second_cut
ùù "
-
ùù# $
pivot
ùù% *
;
ùù* +
}
ûû 
else
üü 
{
†† 
len22
°° 
=
°° 
len2
°° 
/
°° 
$num
°°  
;
°°  !

second_cut
¢¢ 
=
¢¢ 
pivot
¢¢ "
+
¢¢# $
len22
¢¢% *
;
¢¢* +
	first_cut
££ 
=
££ 
Upper
££ !
(
££! "
list
££" &
,
££& '
comparer
££( 0
,
££0 1
from
££2 6
,
££6 7
pivot
££8 =
,
££= >

second_cut
££? I
)
££I J
;
££J K
len11
§§ 
=
§§ 
	first_cut
§§ !
-
§§" #
from
§§$ (
;
§§( )
}
•• 
Rotate
ßß 
(
ßß 
list
ßß 
,
ßß 
comparer
ßß !
,
ßß! "
	first_cut
ßß# ,
,
ßß, -
pivot
ßß. 3
,
ßß3 4

second_cut
ßß5 ?
)
ßß? @
;
ßß@ A
int
®® 
new_mid
®® 
=
®® 
	first_cut
®® #
+
®®$ %
len22
®®& +
;
®®+ ,
Merge
©© 
(
©© 
list
©© 
,
©© 
comparer
©©  
,
©©  !
from
©©" &
,
©©& '
	first_cut
©©( 1
,
©©1 2
new_mid
©©3 :
,
©©: ;
len11
©©< A
,
©©A B
len22
©©C H
)
©©H I
;
©©I J
Merge
™™ 
(
™™ 
list
™™ 
,
™™ 
comparer
™™  
,
™™  !
new_mid
™™" )
,
™™) *

second_cut
™™+ 5
,
™™5 6
to
™™7 9
,
™™9 :
len1
™™; ?
-
™™@ A
len11
™™B G
,
™™G H
len2
™™I M
-
™™N O
len22
™™P U
)
™™U V
;
™™V W
}
´´ 	
public
≠≠ 
static
≠≠ 
void
≠≠ 
Sort
≠≠ 
(
≠≠  
List
≠≠  $
<
≠≠$ %
T
≠≠% &
>
≠≠& '
list
≠≠( ,
,
≠≠, -

Comparison
≠≠. 8
<
≠≠8 9
T
≠≠9 :
>
≠≠: ;
comparer
≠≠< D
,
≠≠D E
int
≠≠F I
from
≠≠J N
,
≠≠N O
int
≠≠P S
to
≠≠T V
)
≠≠V W
{
ÆÆ 	
if
ØØ 
(
ØØ 
to
ØØ 
-
ØØ 
from
ØØ 
<
ØØ 
$num
ØØ 
)
ØØ 
{
∞∞ 

InsertSort
±± 
(
±± 
list
±± 
,
±±  
comparer
±±! )
,
±±) *
from
±±+ /
,
±±/ 0
to
±±1 3
)
±±3 4
;
±±4 5
return
≤≤ 
;
≤≤ 
}
≥≥ 
int
µµ 
middle
µµ 
=
µµ 
(
µµ 
from
µµ 
+
µµ  
to
µµ! #
)
µµ# $
/
µµ% &
$num
µµ' (
;
µµ( )
Sort
∂∂ 
(
∂∂ 
list
∂∂ 
,
∂∂ 
comparer
∂∂ 
,
∂∂  
from
∂∂! %
,
∂∂% &
middle
∂∂' -
)
∂∂- .
;
∂∂. /
Sort
∑∑ 
(
∑∑ 
list
∑∑ 
,
∑∑ 
comparer
∑∑ 
,
∑∑  
middle
∑∑! '
,
∑∑' (
to
∑∑) +
)
∑∑+ ,
;
∑∑, -
Merge
∏∏ 
(
∏∏ 
list
∏∏ 
,
∏∏ 
comparer
∏∏  
,
∏∏  !
from
∏∏" &
,
∏∏& '
middle
∏∏( .
,
∏∏. /
to
∏∏0 2
,
∏∏2 3
middle
∏∏4 :
-
∏∏; <
from
∏∏= A
,
∏∏A B
to
∏∏C E
-
∏∏F G
middle
∏∏H N
)
∏∏N O
;
∏∏O P
}
ππ 	
public
ªª 
static
ªª 
void
ªª 
Sort
ªª 
(
ªª  
List
ªª  $
<
ªª$ %
T
ªª% &
>
ªª& '
list
ªª( ,
,
ªª, -

Comparison
ªª. 8
<
ªª8 9
T
ªª9 :
>
ªª: ;
comparer
ªª< D
)
ªªD E
{
ºº 	
Sort
ΩΩ 
(
ΩΩ 
list
ΩΩ 
,
ΩΩ 
comparer
ΩΩ 
,
ΩΩ  
$num
ΩΩ! "
,
ΩΩ" #
list
ΩΩ$ (
.
ΩΩ( )
Count
ΩΩ) .
)
ΩΩ. /
;
ΩΩ/ 0
}
ææ 	
}
øø 
;
øø 
}¿¿ ô

xC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\MemoryPoolMonitor\Editor\MpmSettingsInstaller.cs
	namespace 	
Zenject
 
. 
MemoryPoolMonitor #
{ 
[ 
CreateAssetMenu 
( 
fileName 
= 
$str  6
,6 7
menuName8 @
=A B
$strC d
)d e
]e f
public 

class  
MpmSettingsInstaller %
:& '%
ScriptableObjectInstaller( A
<A B 
MpmSettingsInstallerB V
>V W
{		 
public

 
MpmView

 
.

 
Settings

 
MpmView

  '
;

' (
public 
MpmView 
. 
Settings 
MpmViewDark  +
;+ ,
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	
	Container 
. 
BindInstance "
(" #
EditorGUIUtility# 3
.3 4
	isProSkin4 =
?> ?
MpmViewDark@ K
:L M
MpmViewN U
)U V
;V W
} 	
} 
} …
yC:\Users\–ö–ª–∏–º–Ω—é–∫\tring\App\Assets\Plugins\Zenject\OptionalExtras\MemoryPoolMonitor\Editor\DebugWindow\MpmWindow.cs
	namespace 	
Zenject
 
. 
MemoryPoolMonitor #
{ 
public		 

class		 
	MpmWindow		 
:		 
ZenjectEditorWindow		 0
{

 
[ 	
MenuItem	 
( 
$str /
)/ 0
]0 1
public 
static 
	MpmWindow 
GetOrCreateWindow  1
(1 2
)2 3
{ 	
var 
window 
= 
EditorWindow %
.% &
	GetWindow& /
</ 0
	MpmWindow0 9
>9 :
(: ;
); <
;< =
window 
. 
titleContent 
=  !
new" %

GUIContent& 0
(0 1
$str1 ?
)? @
;@ A
return 
window 
; 
} 	
public 
override 
void 
InstallBindings ,
(, -
)- .
{ 	 
MpmSettingsInstaller  
.  !
InstallFromResource! 4
(4 5
	Container5 >
)> ?
;? @
	Container 
. 
BindInstance "
(" #
this# '
)' (
;( )
	Container 
. 
BindInterfacesTo &
<& '
MpmView' .
>. /
(/ 0
)0 1
.1 2
AsSingle2 :
(: ;
); <
;< =
} 	
} 
} 